
DisplaySTM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d704  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000052c8  0800d898  0800d898  0001d898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b60  08012b60  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08012b60  08012b60  00022b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b68  08012b68  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b68  08012b68  00022b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b6c  08012b6c  00022b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08012b70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000977c  2000007c  08012bec  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200097f8  08012bec  000397f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000b2c0f  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b7c  00000000  00000000  000e2cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003440  00000000  00000000  000e9838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003100  00000000  00000000  000ecc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000287ff  00000000  00000000  000efd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000253ed  00000000  00000000  00118577  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec1d6  00000000  00000000  0013d964  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00229b3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e35c  00000000  00000000  00229bb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d87c 	.word	0x0800d87c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800d87c 	.word	0x0800d87c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_uldivmod>:
 8000af8:	b953      	cbnz	r3, 8000b10 <__aeabi_uldivmod+0x18>
 8000afa:	b94a      	cbnz	r2, 8000b10 <__aeabi_uldivmod+0x18>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bf08      	it	eq
 8000b00:	2800      	cmpeq	r0, #0
 8000b02:	bf1c      	itt	ne
 8000b04:	f04f 31ff 	movne.w	r1, #4294967295
 8000b08:	f04f 30ff 	movne.w	r0, #4294967295
 8000b0c:	f000 b972 	b.w	8000df4 <__aeabi_idiv0>
 8000b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b18:	f000 f806 	bl	8000b28 <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4770      	bx	lr

08000b28 <__udivmoddi4>:
 8000b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b2c:	9e08      	ldr	r6, [sp, #32]
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4688      	mov	r8, r1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d14b      	bne.n	8000bce <__udivmoddi4+0xa6>
 8000b36:	428a      	cmp	r2, r1
 8000b38:	4615      	mov	r5, r2
 8000b3a:	d967      	bls.n	8000c0c <__udivmoddi4+0xe4>
 8000b3c:	fab2 f282 	clz	r2, r2
 8000b40:	b14a      	cbz	r2, 8000b56 <__udivmoddi4+0x2e>
 8000b42:	f1c2 0720 	rsb	r7, r2, #32
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b4e:	4095      	lsls	r5, r2
 8000b50:	ea47 0803 	orr.w	r8, r7, r3
 8000b54:	4094      	lsls	r4, r2
 8000b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5a:	0c23      	lsrs	r3, r4, #16
 8000b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b60:	fa1f fc85 	uxth.w	ip, r5
 8000b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b70:	4299      	cmp	r1, r3
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x60>
 8000b74:	18eb      	adds	r3, r5, r3
 8000b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7a:	f080 811b 	bcs.w	8000db4 <__udivmoddi4+0x28c>
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	f240 8118 	bls.w	8000db4 <__udivmoddi4+0x28c>
 8000b84:	3f02      	subs	r7, #2
 8000b86:	442b      	add	r3, r5
 8000b88:	1a5b      	subs	r3, r3, r1
 8000b8a:	b2a4      	uxth	r4, r4
 8000b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b9c:	45a4      	cmp	ip, r4
 8000b9e:	d909      	bls.n	8000bb4 <__udivmoddi4+0x8c>
 8000ba0:	192c      	adds	r4, r5, r4
 8000ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba6:	f080 8107 	bcs.w	8000db8 <__udivmoddi4+0x290>
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	f240 8104 	bls.w	8000db8 <__udivmoddi4+0x290>
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	442c      	add	r4, r5
 8000bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bb8:	eba4 040c 	sub.w	r4, r4, ip
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	b11e      	cbz	r6, 8000bc8 <__udivmoddi4+0xa0>
 8000bc0:	40d4      	lsrs	r4, r2
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc8:	4639      	mov	r1, r7
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d909      	bls.n	8000be6 <__udivmoddi4+0xbe>
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	f000 80eb 	beq.w	8000dae <__udivmoddi4+0x286>
 8000bd8:	2700      	movs	r7, #0
 8000bda:	e9c6 0100 	strd	r0, r1, [r6]
 8000bde:	4638      	mov	r0, r7
 8000be0:	4639      	mov	r1, r7
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	fab3 f783 	clz	r7, r3
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d147      	bne.n	8000c7e <__udivmoddi4+0x156>
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xd0>
 8000bf2:	4282      	cmp	r2, r0
 8000bf4:	f200 80fa 	bhi.w	8000dec <__udivmoddi4+0x2c4>
 8000bf8:	1a84      	subs	r4, r0, r2
 8000bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	4698      	mov	r8, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d0e0      	beq.n	8000bc8 <__udivmoddi4+0xa0>
 8000c06:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0a:	e7dd      	b.n	8000bc8 <__udivmoddi4+0xa0>
 8000c0c:	b902      	cbnz	r2, 8000c10 <__udivmoddi4+0xe8>
 8000c0e:	deff      	udf	#255	; 0xff
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	f040 808f 	bne.w	8000d38 <__udivmoddi4+0x210>
 8000c1a:	1b49      	subs	r1, r1, r5
 8000c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c20:	fa1f f885 	uxth.w	r8, r5
 8000c24:	2701      	movs	r7, #1
 8000c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c34:	fb08 f10c 	mul.w	r1, r8, ip
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d907      	bls.n	8000c4c <__udivmoddi4+0x124>
 8000c3c:	18eb      	adds	r3, r5, r3
 8000c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x122>
 8000c44:	4299      	cmp	r1, r3
 8000c46:	f200 80cd 	bhi.w	8000de4 <__udivmoddi4+0x2bc>
 8000c4a:	4684      	mov	ip, r0
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	b2a3      	uxth	r3, r4
 8000c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c5c:	fb08 f800 	mul.w	r8, r8, r0
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	d907      	bls.n	8000c74 <__udivmoddi4+0x14c>
 8000c64:	192c      	adds	r4, r5, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x14a>
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	f200 80b6 	bhi.w	8000dde <__udivmoddi4+0x2b6>
 8000c72:	4618      	mov	r0, r3
 8000c74:	eba4 0408 	sub.w	r4, r4, r8
 8000c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c7c:	e79f      	b.n	8000bbe <__udivmoddi4+0x96>
 8000c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000c82:	40bb      	lsls	r3, r7
 8000c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c9c:	4325      	orrs	r5, r4
 8000c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca2:	0c2c      	lsrs	r4, r5, #16
 8000ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ca8:	fa1f fa8e 	uxth.w	sl, lr
 8000cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8000cba:	fa00 f107 	lsl.w	r1, r0, r7
 8000cbe:	d90b      	bls.n	8000cd8 <__udivmoddi4+0x1b0>
 8000cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc8:	f080 8087 	bcs.w	8000dda <__udivmoddi4+0x2b2>
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	f240 8084 	bls.w	8000dda <__udivmoddi4+0x2b2>
 8000cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd6:	4473      	add	r3, lr
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	b2ad      	uxth	r5, r5
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cec:	45a2      	cmp	sl, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x1da>
 8000cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf8:	d26b      	bcs.n	8000dd2 <__udivmoddi4+0x2aa>
 8000cfa:	45a2      	cmp	sl, r4
 8000cfc:	d969      	bls.n	8000dd2 <__udivmoddi4+0x2aa>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4474      	add	r4, lr
 8000d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d06:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0a:	eba4 040a 	sub.w	r4, r4, sl
 8000d0e:	454c      	cmp	r4, r9
 8000d10:	46c2      	mov	sl, r8
 8000d12:	464b      	mov	r3, r9
 8000d14:	d354      	bcc.n	8000dc0 <__udivmoddi4+0x298>
 8000d16:	d051      	beq.n	8000dbc <__udivmoddi4+0x294>
 8000d18:	2e00      	cmp	r6, #0
 8000d1a:	d069      	beq.n	8000df0 <__udivmoddi4+0x2c8>
 8000d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d20:	eb64 0403 	sbc.w	r4, r4, r3
 8000d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d28:	40fd      	lsrs	r5, r7
 8000d2a:	40fc      	lsrs	r4, r7
 8000d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d30:	e9c6 5400 	strd	r5, r4, [r6]
 8000d34:	2700      	movs	r7, #0
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0xa0>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d40:	4095      	lsls	r5, r2
 8000d42:	fa01 f002 	lsl.w	r0, r1, r2
 8000d46:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d4e:	4338      	orrs	r0, r7
 8000d50:	0c01      	lsrs	r1, r0, #16
 8000d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d56:	fa1f f885 	uxth.w	r8, r5
 8000d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d62:	fb07 f308 	mul.w	r3, r7, r8
 8000d66:	428b      	cmp	r3, r1
 8000d68:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x256>
 8000d6e:	1869      	adds	r1, r5, r1
 8000d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d74:	d22f      	bcs.n	8000dd6 <__udivmoddi4+0x2ae>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d92d      	bls.n	8000dd6 <__udivmoddi4+0x2ae>
 8000d7a:	3f02      	subs	r7, #2
 8000d7c:	4429      	add	r1, r5
 8000d7e:	1acb      	subs	r3, r1, r3
 8000d80:	b281      	uxth	r1, r0
 8000d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8e:	fb00 f308 	mul.w	r3, r0, r8
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x27e>
 8000d96:	1869      	adds	r1, r5, r1
 8000d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d9c:	d217      	bcs.n	8000dce <__udivmoddi4+0x2a6>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d915      	bls.n	8000dce <__udivmoddi4+0x2a6>
 8000da2:	3802      	subs	r0, #2
 8000da4:	4429      	add	r1, r5
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dac:	e73b      	b.n	8000c26 <__udivmoddi4+0xfe>
 8000dae:	4637      	mov	r7, r6
 8000db0:	4630      	mov	r0, r6
 8000db2:	e709      	b.n	8000bc8 <__udivmoddi4+0xa0>
 8000db4:	4607      	mov	r7, r0
 8000db6:	e6e7      	b.n	8000b88 <__udivmoddi4+0x60>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6fb      	b.n	8000bb4 <__udivmoddi4+0x8c>
 8000dbc:	4541      	cmp	r1, r8
 8000dbe:	d2ab      	bcs.n	8000d18 <__udivmoddi4+0x1f0>
 8000dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8000dc8:	3801      	subs	r0, #1
 8000dca:	4613      	mov	r3, r2
 8000dcc:	e7a4      	b.n	8000d18 <__udivmoddi4+0x1f0>
 8000dce:	4660      	mov	r0, ip
 8000dd0:	e7e9      	b.n	8000da6 <__udivmoddi4+0x27e>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	e795      	b.n	8000d02 <__udivmoddi4+0x1da>
 8000dd6:	4667      	mov	r7, ip
 8000dd8:	e7d1      	b.n	8000d7e <__udivmoddi4+0x256>
 8000dda:	4681      	mov	r9, r0
 8000ddc:	e77c      	b.n	8000cd8 <__udivmoddi4+0x1b0>
 8000dde:	3802      	subs	r0, #2
 8000de0:	442c      	add	r4, r5
 8000de2:	e747      	b.n	8000c74 <__udivmoddi4+0x14c>
 8000de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de8:	442b      	add	r3, r5
 8000dea:	e72f      	b.n	8000c4c <__udivmoddi4+0x124>
 8000dec:	4638      	mov	r0, r7
 8000dee:	e708      	b.n	8000c02 <__udivmoddi4+0xda>
 8000df0:	4637      	mov	r7, r6
 8000df2:	e6e9      	b.n	8000bc8 <__udivmoddi4+0xa0>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <Crc32>:
// A function that calculates the CRC-32 based on the table above is
// given below for documentation purposes. An equivalent implementation
// of this function that's actually used in the kernel can be found
//in sys/libkern.h, where it can be inlined.
uint_least32_t Crc32(const unsigned char *buf, size_t len)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
    uint_least32_t crc = 0xFFFFFFFF;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	60fb      	str	r3, [r7, #12]
    while (len--)
 8000e08:	e00e      	b.n	8000e28 <Crc32+0x30>
        crc = (crc >> 8) ^ Crc32Table[(crc ^ *buf++) & 0xFF];
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	0a1a      	lsrs	r2, r3, #8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	1c59      	adds	r1, r3, #1
 8000e12:	6079      	str	r1, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	4619      	mov	r1, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	404b      	eors	r3, r1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4909      	ldr	r1, [pc, #36]	; (8000e44 <Crc32+0x4c>)
 8000e20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e24:	4053      	eors	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
    while (len--)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	1e5a      	subs	r2, r3, #1
 8000e2c:	603a      	str	r2, [r7, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1eb      	bne.n	8000e0a <Crc32+0x12>
    return crc ^ 0xFFFFFFFF;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43db      	mvns	r3, r3
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	0800da54 	.word	0x0800da54

08000e48 <CRC32_Put>:

/*
 * Функция, кладет байт в буфер CRC
 */
void CRC32_Put(buffer_t *crc_buf, uint8_t byte)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
	if(crc_buf->tail < 1200)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f8b3 3870 	ldrh.w	r3, [r3, #2160]	; 0x870
 8000e5a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000e5e:	d20b      	bcs.n	8000e78 <CRC32_Put+0x30>
		crc_buf->buf[crc_buf->tail++] = byte;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f8b3 3870 	ldrh.w	r3, [r3, #2160]	; 0x870
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	b291      	uxth	r1, r2
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	f8a2 1870 	strh.w	r1, [r2, #2160]	; 0x870
 8000e70:	4619      	mov	r1, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	78fa      	ldrb	r2, [r7, #3]
 8000e76:	545a      	strb	r2, [r3, r1]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000e96:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000e98:	4a3f      	ldr	r2, [pc, #252]	; (8000f98 <MX_ADC1_Init+0x114>)
 8000e9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e9c:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000e9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ea2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea4:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb0:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec4:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <MX_ADC1_Init+0x118>)
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000ed0:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000ed2:	2205      	movs	r2, #5
 8000ed4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee4:	482b      	ldr	r0, [pc, #172]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000ee6:	f003 fcb9 	bl	800485c <HAL_ADC_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ef0:	f003 f860 	bl	8003fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000efc:	2306      	movs	r3, #6
 8000efe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	4823      	ldr	r0, [pc, #140]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000f06:	f003 ff3d 	bl	8004d84 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f10:	f003 f850 	bl	8003fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481c      	ldr	r0, [pc, #112]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000f22:	f003 ff2f 	bl	8004d84 <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f2c:	f003 f842 	bl	8003fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f34:	2303      	movs	r3, #3
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4814      	ldr	r0, [pc, #80]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000f42:	f003 ff1f 	bl	8004d84 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000f4c:	f003 f832 	bl	8003fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f54:	2304      	movs	r3, #4
 8000f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000f58:	2306      	movs	r3, #6
 8000f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000f62:	f003 ff0f 	bl	8004d84 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000f6c:	f003 f822 	bl	8003fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f70:	2303      	movs	r3, #3
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f74:	2305      	movs	r3, #5
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_ADC1_Init+0x110>)
 8000f7e:	f003 ff01 	bl	8004d84 <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000f88:	f003 f814 	bl	8003fb4 <Error_Handler>
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20006a78 	.word	0x20006a78
 8000f98:	40012000 	.word	0x40012000
 8000f9c:	0f000001 	.word	0x0f000001

08000fa0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a33      	ldr	r2, [pc, #204]	; (800108c <HAL_ADC_MspInit+0xec>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d15f      	bne.n	8001082 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b32      	ldr	r3, [pc, #200]	; (8001090 <HAL_ADC_MspInit+0xf0>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a31      	ldr	r2, [pc, #196]	; (8001090 <HAL_ADC_MspInit+0xf0>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <HAL_ADC_MspInit+0xf0>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <HAL_ADC_MspInit+0xf0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a2a      	ldr	r2, [pc, #168]	; (8001090 <HAL_ADC_MspInit+0xf0>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <HAL_ADC_MspInit+0xf0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = STM32_ADC_NTC_1_Pin|STM32_ADC_5V_Pin|STM32_ADC_3_3V_Pin|STM32_ADC_12V_Pin;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffe:	2303      	movs	r3, #3
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4821      	ldr	r0, [pc, #132]	; (8001094 <HAL_ADC_MspInit+0xf4>)
 800100e:	f004 fe45 	bl	8005c9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <HAL_ADC_MspInit+0xfc>)
 8001016:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 800102c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001030:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 8001034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001038:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 800103c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001040:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 8001044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001048:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 8001058:	f004 fa20 	bl	800549c <HAL_DMA_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001062:	f002 ffa7 	bl	8003fb4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 800106a:	639a      	str	r2, [r3, #56]	; 0x38
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_ADC_MspInit+0xf8>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2105      	movs	r1, #5
 8001076:	2012      	movs	r0, #18
 8001078:	f004 f9e6 	bl	8005448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800107c:	2012      	movs	r0, #18
 800107e:	f004 f9ff 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40012000 	.word	0x40012000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	20006a18 	.word	0x20006a18
 800109c:	40026410 	.word	0x40026410

080010a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_DMA_Init+0x68>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <MX_DMA_Init+0x68>)
 80010b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_DMA_Init+0x68>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_DMA_Init+0x68>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <MX_DMA_Init+0x68>)
 80010cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <MX_DMA_Init+0x68>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2105      	movs	r1, #5
 80010e2:	200c      	movs	r0, #12
 80010e4:	f004 f9b0 	bl	8005448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010e8:	200c      	movs	r0, #12
 80010ea:	f004 f9c9 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2105      	movs	r1, #5
 80010f2:	2038      	movs	r0, #56	; 0x38
 80010f4:	f004 f9a8 	bl	8005448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010f8:	2038      	movs	r0, #56	; 0x38
 80010fa:	f004 f9c1 	bl	8005480 <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4a07      	ldr	r2, [pc, #28]	; (8001138 <vApplicationGetIdleTaskMemory+0x2c>)
 800111c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <vApplicationGetIdleTaskMemory+0x30>)
 8001122:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2240      	movs	r2, #64	; 0x40
 8001128:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200010a8 	.word	0x200010a8
 800113c:	200010fc 	.word	0x200010fc

08001140 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b0b0      	sub	sp, #192	; 0xc0
 8001144:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myCursorQueue */
  osMessageQDef(myCursorQueue, 5, uint8_t);
 8001146:	4b47      	ldr	r3, [pc, #284]	; (8001264 <MX_FREERTOS_Init+0x124>)
 8001148:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800114c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myCursorQueueHandle = osMessageCreate(osMessageQ(myCursorQueue), NULL);
 8001152:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f009 fa81 	bl	800a660 <osMessageCreate>
 800115e:	4602      	mov	r2, r0
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <MX_FREERTOS_Init+0x128>)
 8001162:	601a      	str	r2, [r3, #0]

  /* definition and creation of myDispStatQueue */
  osMessageQDef(myDispStatQueue, 4, uint8_t);
 8001164:	4b41      	ldr	r3, [pc, #260]	; (800126c <MX_FREERTOS_Init+0x12c>)
 8001166:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800116a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myDispStatQueueHandle = osMessageCreate(osMessageQ(myDispStatQueue), NULL);
 8001170:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f009 fa72 	bl	800a660 <osMessageCreate>
 800117c:	4602      	mov	r2, r0
 800117e:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <MX_FREERTOS_Init+0x130>)
 8001180:	601a      	str	r2, [r3, #0]

  /* definition and creation of myDisplayStat */
  osMessageQStaticDef(myDisplayStat, 4, uint8_t, myDisplayStatBuffer, &myDisplayStatControlBlock);
 8001182:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <MX_FREERTOS_Init+0x134>)
 8001184:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myDisplayStatHandle = osMessageCreate(osMessageQ(myDisplayStat), NULL);
 800118e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f009 fa63 	bl	800a660 <osMessageCreate>
 800119a:	4602      	mov	r2, r0
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <MX_FREERTOS_Init+0x138>)
 800119e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <MX_FREERTOS_Init+0x13c>)
 80011a2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80011a6:	461d      	mov	r5, r3
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f009 f9f0 	bl	800a5a0 <osThreadCreate>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <MX_FREERTOS_Init+0x140>)
 80011c4:	601a      	str	r2, [r3, #0]

  /* definition and creation of myDisplayTask */
  osThreadDef(myDisplayTask, StartDisplayTask, osPriorityNormal, 0, 2800);
 80011c6:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <MX_FREERTOS_Init+0x144>)
 80011c8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80011cc:	461d      	mov	r5, r3
 80011ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myDisplayTaskHandle = osThreadCreate(osThread(myDisplayTask), NULL);
 80011da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f009 f9dd 	bl	800a5a0 <osThreadCreate>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <MX_FREERTOS_Init+0x148>)
 80011ea:	601a      	str	r2, [r3, #0]

  /* definition and creation of myDataTask */
  osThreadDef(myDataTask, StartDataTask, osPriorityNormal, 0, 800);
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <MX_FREERTOS_Init+0x14c>)
 80011ee:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80011f2:	461d      	mov	r5, r3
 80011f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myDataTaskHandle = osThreadCreate(osThread(myDataTask), NULL);
 8001200:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f009 f9ca 	bl	800a5a0 <osThreadCreate>
 800120c:	4602      	mov	r2, r0
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_FREERTOS_Init+0x150>)
 8001210:	601a      	str	r2, [r3, #0]

  /* definition and creation of myControlTask */
  osThreadDef(myControlTask, StartControlTask, osPriorityNormal, 0, 400);
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_FREERTOS_Init+0x154>)
 8001214:	f107 0420 	add.w	r4, r7, #32
 8001218:	461d      	mov	r5, r3
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001222:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myControlTaskHandle = osThreadCreate(osThread(myControlTask), NULL);
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f009 f9b7 	bl	800a5a0 <osThreadCreate>
 8001232:	4602      	mov	r2, r0
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_FREERTOS_Init+0x158>)
 8001236:	601a      	str	r2, [r3, #0]

  /* definition and creation of myLEDsTask */
  osThreadDef(myLEDsTask, StartLEDsTask, osPriorityIdle, 0, 128);
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_FREERTOS_Init+0x15c>)
 800123a:	1d3c      	adds	r4, r7, #4
 800123c:	461d      	mov	r5, r3
 800123e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001242:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLEDsTaskHandle = osThreadCreate(osThread(myLEDsTask), NULL);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f009 f9a6 	bl	800a5a0 <osThreadCreate>
 8001254:	4602      	mov	r2, r0
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_FREERTOS_Init+0x160>)
 8001258:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800125a:	bf00      	nop
 800125c:	37c0      	adds	r7, #192	; 0xc0
 800125e:	46bd      	mov	sp, r7
 8001260:	bdb0      	pop	{r4, r5, r7, pc}
 8001262:	bf00      	nop
 8001264:	0800d898 	.word	0x0800d898
 8001268:	20006b34 	.word	0x20006b34
 800126c:	0800d8a8 	.word	0x0800d8a8
 8001270:	20006ac0 	.word	0x20006ac0
 8001274:	0800d8b8 	.word	0x0800d8b8
 8001278:	20009540 	.word	0x20009540
 800127c:	0800d8d4 	.word	0x0800d8d4
 8001280:	20006b30 	.word	0x20006b30
 8001284:	0800d900 	.word	0x0800d900
 8001288:	20006b20 	.word	0x20006b20
 800128c:	0800d928 	.word	0x0800d928
 8001290:	20006acc 	.word	0x20006acc
 8001294:	0800d954 	.word	0x0800d954
 8001298:	20006b18 	.word	0x20006b18
 800129c:	0800d97c 	.word	0x0800d97c
 80012a0:	20006b1c 	.word	0x20006b1c

080012a4 <StartDefaultTask>:
 *				   ЗАПУСКАЕТ ПЕРЕФЕР�?Ю						*
 *				   											*
 ************************************************************/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

/*------------------------- ЗАПУСКАЕМ ПЕРЕФЕР�?Ю ---------------------------*/
	HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart_buf, UartBufSize);	// ЗАПУСК UART В РЕЖ�?МЕ DMA
 80012ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b0:	490e      	ldr	r1, [pc, #56]	; (80012ec <StartDefaultTask+0x48>)
 80012b2:	480f      	ldr	r0, [pc, #60]	; (80012f0 <StartDefaultTask+0x4c>)
 80012b4:	f006 faae 	bl	8007814 <HAL_UART_Receive_DMA>
	HAL_IWDG_Init(&hiwdg);											// ЗАПУСК WATHDOG
 80012b8:	480e      	ldr	r0, [pc, #56]	; (80012f4 <StartDefaultTask+0x50>)
 80012ba:	f004 fff3 	bl	80062a4 <HAL_IWDG_Init>
	HAL_TIM_Base_Start_IT(&htim7);									// ЗАПУСК ТАЙМЕРА UP_TIME
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <StartDefaultTask+0x54>)
 80012c0:	f005 ff3d 	bl	800713e <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_val, 5);				// ЗАПУСК АЦП В РЕЖ�?МЕ DMA
 80012c4:	2205      	movs	r2, #5
 80012c6:	490d      	ldr	r1, [pc, #52]	; (80012fc <StartDefaultTask+0x58>)
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <StartDefaultTask+0x5c>)
 80012ca:	f003 fc4b 	bl	8004b64 <HAL_ADC_Start_DMA>

	if(!HSE_status){
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <StartDefaultTask+0x60>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <StartDefaultTask+0x3e>
		HAL_GPIO_WritePin(SYM_LED_B_GPIO_Port, SYM_LED_B_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <StartDefaultTask+0x64>)
 80012de:	f004 fe8f 	bl	8006000 <HAL_GPIO_WritePin>
	}
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f009 f9a8 	bl	800a638 <osDelay>
 80012e8:	e7fb      	b.n	80012e2 <StartDefaultTask+0x3e>
 80012ea:	bf00      	nop
 80012ec:	20000098 	.word	0x20000098
 80012f0:	200097b4 	.word	0x200097b4
 80012f4:	20009598 	.word	0x20009598
 80012f8:	200096d4 	.word	0x200096d4
 80012fc:	20006b24 	.word	0x20006b24
 8001300:	20006a78 	.word	0x20006a78
 8001304:	20000001 	.word	0x20000001
 8001308:	40020400 	.word	0x40020400

0800130c <StartDisplayTask>:
 *				   	ВЫВОД�?Т СТРОК�? НА Д�?СПЛЕЙ				*
 *				   											*
 ************************************************************/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 8001312:	af02      	add	r7, sp, #8
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	6018      	str	r0, [r3, #0]

/************************** ПЕРЕМЕННЫЕ ЗАДАЧ�? ****************************/

/*-----------------------  ОСНОВНЫЕ ПЕРЕМЕННЫЕ ------------------------- */
	static u8g2_t u8g2;											// TypeDef_библиотеки_u8g2_для_рисования_на_дисплей
	uint16_t cursor = 0;										// Положение_окошка_дисплея
 8001318:	2300      	movs	r3, #0
 800131a:	f8a7 329a 	strh.w	r3, [r7, #666]	; 0x29a
	string_t *rdy[string_amount];								// Массив_указателей_на_готовые_к_выводу_строки
//	uint8_t disp_stat = 1;										// Статус_дисплея. Определяется_приянтым_от_компа_значением
	uint8_t show_pointer = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7

/*----------------------------- СЧЕТЧ�?К�? ------------------------------- */
	uint8_t rdy_count = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
	uint8_t show_count = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
	uint32_t displayOFF_del = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

/*----------------------- ФУНКЦ�?�? �?Н�?ЦАЛ�?ЗАЦ�?�? --------------------------*/
	DisplayInit(&u8g2);											// �?Н�?Ц�?АЛ�?ЗАЦ�?Я Д�?СПЛЕЯ
 8001336:	48bc      	ldr	r0, [pc, #752]	; (8001628 <StartDisplayTask+0x31c>)
 8001338:	f002 fa20 	bl	800377c <DisplayInit>
	PowerON(&u8g2);
 800133c:	48ba      	ldr	r0, [pc, #744]	; (8001628 <StartDisplayTask+0x31c>)
 800133e:	f001 fa6d 	bl	800281c <PowerON>
	for(;;){

		// УСЛОВ�?Е ОПРЕДЕЛЯЮЩЕЕ, ГОТОВЫ Л�? ДАННЫЕ ДЛЯ ВЫВОДА
		// ЕСЛ�? НЕ ГОТОВЫ, ВЫВОД�?Т ОКНО ЗАГРУЗК�?,
		// �?НАЧЕ ВЫПОЛНЯЕТ ВЫВОД ДАННЫХ НА Д�?СПЛЕЙ
		if(!(data_ready_flag && uart_hlf_flag) && display_stat){
 8001342:	4bba      	ldr	r3, [pc, #744]	; (800162c <StartDisplayTask+0x320>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <StartDisplayTask+0x46>
 800134a:	4bb9      	ldr	r3, [pc, #740]	; (8001630 <StartDisplayTask+0x324>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d107      	bne.n	8001362 <StartDisplayTask+0x56>
 8001352:	4bb8      	ldr	r3, [pc, #736]	; (8001634 <StartDisplayTask+0x328>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <StartDisplayTask+0x56>
			display_stat = 3;
 800135a:	4bb6      	ldr	r3, [pc, #728]	; (8001634 <StartDisplayTask+0x328>)
 800135c:	2203      	movs	r2, #3
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	e103      	b.n	800156a <StartDisplayTask+0x25e>
		}
		else if (display_stat){
 8001362:	4bb4      	ldr	r3, [pc, #720]	; (8001634 <StartDisplayTask+0x328>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80ff 	beq.w	800156a <StartDisplayTask+0x25e>

			display_stat = (display_stat == 0) ? 0 : 1;
 800136c:	4bb1      	ldr	r3, [pc, #708]	; (8001634 <StartDisplayTask+0x328>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf14      	ite	ne
 8001374:	2301      	movne	r3, #1
 8001376:	2300      	moveq	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	4bad      	ldr	r3, [pc, #692]	; (8001634 <StartDisplayTask+0x328>)
 800137e:	701a      	strb	r2, [r3, #0]

/*----------------------- ОТБ�?РАЕМ НУЖНЫЕ СТРОК�? -------------------------*/

			// ПРОСМАТР�?ЕВАЕМ ВЕСЬ МАСС�?В СТРОК В ПО�?СКАХ ГОТОВЫХ СТРОК
			// ЕСЛ�? СТРОКА ГОТОВА, В МАСС�?В УКАЗАТЕЛЕЙ ЗАП�?СЫВАЕМ АДРЕСС ГОТОВОЙ СТРОК�?
			rdy_count = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
			for(uint8_t i = 1; i < start_ctrl_string; i++){
 8001386:	2301      	movs	r3, #1
 8001388:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
 800138c:	e023      	b.n	80013d6 <StartDisplayTask+0xca>
				if(datastring[i].status){
 800138e:	f897 22a4 	ldrb.w	r2, [r7, #676]	; 0x2a4
 8001392:	49a9      	ldr	r1, [pc, #676]	; (8001638 <StartDisplayTask+0x32c>)
 8001394:	4613      	mov	r3, r2
 8001396:	015b      	lsls	r3, r3, #5
 8001398:	4413      	add	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	440b      	add	r3, r1
 800139e:	333d      	adds	r3, #61	; 0x3d
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <StartDisplayTask+0xc0>
					rdy[rdy_count] = &datastring[i];
 80013a6:	f897 22a4 	ldrb.w	r2, [r7, #676]	; 0x2a4
 80013aa:	f897 12a6 	ldrb.w	r1, [r7, #678]	; 0x2a6
 80013ae:	4613      	mov	r3, r2
 80013b0:	015b      	lsls	r3, r3, #5
 80013b2:	4413      	add	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4aa0      	ldr	r2, [pc, #640]	; (8001638 <StartDisplayTask+0x32c>)
 80013b8:	441a      	add	r2, r3
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					rdy_count++;
 80013c2:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 80013c6:	3301      	adds	r3, #1
 80013c8:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
			for(uint8_t i = 1; i < start_ctrl_string; i++){
 80013cc:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 80013d0:	3301      	adds	r3, #1
 80013d2:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
 80013d6:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 80013da:	2b94      	cmp	r3, #148	; 0x94
 80013dc:	d9d7      	bls.n	800138e <StartDisplayTask+0x82>
			}

/*-------------------ОПРЕДЕЛЯЕМ ПОЛОЖЕН�?Е ОКНА(КУРСОРА) ------------------*/

			// ПР�?Н�?МАЕМ ЗНАЧЕН�?Е КУРСОРА �?З ЗАДАЧ�? StartControlTask
			xQueueReceive(myCursorQueueHandle, &cursor, 10);
 80013de:	4b97      	ldr	r3, [pc, #604]	; (800163c <StartDisplayTask+0x330>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f207 219a 	addw	r1, r7, #666	; 0x29a
 80013e6:	220a      	movs	r2, #10
 80013e8:	4618      	mov	r0, r3
 80013ea:	f009 fc47 	bl	800ac7c <xQueueReceive>

			// ПРОВЕРЯЕМ, ЧТО ОКНО НЕ ВЫХОД�?Т ЗА КОНЕЦ ВЫВОД�?МЫХ СТРОК(т.к_количество_строк_может_меняться)
			// ЕСЛ�? ВЫХОД�?Т, ТО ПР�?Н�?МАЕМ МАКС�?МАЛЬНОЕ �? ОТПРАВЛЯЕМ ЗНАЧЕН�?Е ЗАДАЧЕ StartControlTask
			if(cursor > rdy_count - 1 && cursor < 160){
 80013ee:	f8b7 329a 	ldrh.w	r3, [r7, #666]	; 0x29a
 80013f2:	461a      	mov	r2, r3
 80013f4:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 80013f8:	3b01      	subs	r3, #1
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dd10      	ble.n	8001420 <StartDisplayTask+0x114>
 80013fe:	f8b7 329a 	ldrh.w	r3, [r7, #666]	; 0x29a
 8001402:	2b9f      	cmp	r3, #159	; 0x9f
 8001404:	d80c      	bhi.n	8001420 <StartDisplayTask+0x114>
				cursor = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	f8a7 329a 	strh.w	r3, [r7, #666]	; 0x29a
				xQueueSendToBack(myCursorQueueHandle, &cursor, portMAX_DELAY);
 800140c:	4b8b      	ldr	r3, [pc, #556]	; (800163c <StartDisplayTask+0x330>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	f207 219a 	addw	r1, r7, #666	; 0x29a
 8001414:	2300      	movs	r3, #0
 8001416:	f04f 32ff 	mov.w	r2, #4294967295
 800141a:	f009 fb35 	bl	800aa88 <xQueueGenericSend>
 800141e:	e013      	b.n	8001448 <StartDisplayTask+0x13c>
			}
			else if(cursor > 160) {
 8001420:	f8b7 329a 	ldrh.w	r3, [r7, #666]	; 0x29a
 8001424:	2ba0      	cmp	r3, #160	; 0xa0
 8001426:	d90f      	bls.n	8001448 <StartDisplayTask+0x13c>
				cursor = rdy_count-1;
 8001428:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 800142c:	b29b      	uxth	r3, r3
 800142e:	3b01      	subs	r3, #1
 8001430:	b29b      	uxth	r3, r3
 8001432:	f8a7 329a 	strh.w	r3, [r7, #666]	; 0x29a
				xQueueSendToBack(myCursorQueueHandle, &cursor, portMAX_DELAY);
 8001436:	4b81      	ldr	r3, [pc, #516]	; (800163c <StartDisplayTask+0x330>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	f207 219a 	addw	r1, r7, #666	; 0x29a
 800143e:	2300      	movs	r3, #0
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	f009 fb20 	bl	800aa88 <xQueueGenericSend>
			// ПР�?Н�?МАЕМ СТАТУС Д�?СПЛЕЯ �?З ЗАДАЧ�? StartControlTask
//			taskENTER_CRITICAL();
//			xQueueReceive(myDispStatQueueHandle, &display_stat, 100);
//			taskEXIT_CRITICAL();

			u8g2_ClearBuffer(&u8g2);										// ОЧ�?ЩАЕМ БУФЕР Д�?СПЛЕЯ
 8001448:	4877      	ldr	r0, [pc, #476]	; (8001628 <StartDisplayTask+0x31c>)
 800144a:	f007 fa4f 	bl	80088ec <u8g2_ClearBuffer>

			u8g2_SetFont(&u8g2, u8g2_font_unifont_t_cyrillic);				// УСТАНАВЛ�?ВАЕМ К�?Р�?Л�?ЧЕСК�?Й ШР�?ФТ
 800144e:	497c      	ldr	r1, [pc, #496]	; (8001640 <StartDisplayTask+0x334>)
 8001450:	4875      	ldr	r0, [pc, #468]	; (8001628 <StartDisplayTask+0x31c>)
 8001452:	f008 f8eb 	bl	800962c <u8g2_SetFont>

			u8g2_SetDrawColor(&u8g2, 2);
 8001456:	2102      	movs	r1, #2
 8001458:	4873      	ldr	r0, [pc, #460]	; (8001628 <StartDisplayTask+0x31c>)
 800145a:	f008 f9f3 	bl	8009844 <u8g2_SetDrawColor>
//					if(rdy[i]->degreeSym[j] != '\0')
//					DrawSym(&u8g2, rdy[i]->degreeSym[j] * 7 + 7, 15 + 15 * (i - cursor), 176);
//				}
//			}

			show_count = 4;
 800145e:	2304      	movs	r3, #4
 8001460:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
			show_pointer = cursor;
 8001464:	f8b7 329a 	ldrh.w	r3, [r7, #666]	; 0x29a
 8001468:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7

			while(show_count){
 800146c:	e05f      	b.n	800152e <StartDisplayTask+0x222>

				u8g2_DrawUTF8(&u8g2, 0, 15+ 15 * (4 - show_count),(char *) rdy[show_pointer]->buf);
 800146e:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 8001472:	f1c3 0305 	rsb	r3, r3, #5
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b2d9      	uxtb	r1, r3
 8001480:	f897 22a7 	ldrb.w	r2, [r7, #679]	; 0x2a7
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148c:	460a      	mov	r2, r1
 800148e:	2100      	movs	r1, #0
 8001490:	4865      	ldr	r0, [pc, #404]	; (8001628 <StartDisplayTask+0x31c>)
 8001492:	f008 f829 	bl	80094e8 <u8g2_DrawUTF8>

				// ВВОД�?М В БУФЕР Д�?СПЛЕЯ ЗНАК�? С�?МВОЛОВ ГРАДУСА СТРОК�? В МЕСТА, НА КОТОРЫХ ОН�? РАСПОЛОЖЕНЫ
				for(uint8_t j = 0; j < degree_sym_amount; j++){
 8001496:	2300      	movs	r3, #0
 8001498:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
 800149c:	e02f      	b.n	80014fe <StartDisplayTask+0x1f2>
					if(rdy[show_pointer]->degreeSym[j] != '\0')
 800149e:	f897 22a7 	ldrb.w	r2, [r7, #679]	; 0x2a7
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014aa:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 80014ae:	4413      	add	r3, r2
 80014b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d01d      	beq.n	80014f4 <StartDisplayTask+0x1e8>
					DrawSym(&u8g2, rdy[show_pointer]->degreeSym[j] * 7 + 7, 15 + 15 * (4 - show_count), 176);
 80014b8:	f897 22a7 	ldrb.w	r2, [r7, #679]	; 0x2a7
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014c4:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 80014c8:	4413      	add	r3, r2
 80014ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014ce:	3301      	adds	r3, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	00d2      	lsls	r2, r2, #3
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	b2d9      	uxtb	r1, r3
 80014da:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 80014de:	f1c3 0305 	rsb	r3, r3, #5
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	23b0      	movs	r3, #176	; 0xb0
 80014ee:	484e      	ldr	r0, [pc, #312]	; (8001628 <StartDisplayTask+0x31c>)
 80014f0:	f002 fc5e 	bl	8003db0 <DrawSym>
				for(uint8_t j = 0; j < degree_sym_amount; j++){
 80014f4:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 80014f8:	3301      	adds	r3, #1
 80014fa:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
 80014fe:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 8001502:	2b03      	cmp	r3, #3
 8001504:	d9cb      	bls.n	800149e <StartDisplayTask+0x192>
				}

				show_pointer = (show_pointer <= rdy_count - 2) ? show_pointer + 1 : 0;
 8001506:	f897 22a7 	ldrb.w	r2, [r7, #679]	; 0x2a7
 800150a:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 800150e:	3b02      	subs	r3, #2
 8001510:	429a      	cmp	r2, r3
 8001512:	dc04      	bgt.n	800151e <StartDisplayTask+0x212>
 8001514:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8001518:	3301      	adds	r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	e000      	b.n	8001520 <StartDisplayTask+0x214>
 800151e:	2300      	movs	r3, #0
 8001520:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
				show_count--;
 8001524:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 8001528:	3b01      	subs	r3, #1
 800152a:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
			while(show_count){
 800152e:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 8001532:	2b00      	cmp	r3, #0
 8001534:	d19b      	bne.n	800146e <StartDisplayTask+0x162>
			}

			if(UTC_show_flag){
 8001536:	4b43      	ldr	r3, [pc, #268]	; (8001644 <StartDisplayTask+0x338>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d015      	beq.n	800156a <StartDisplayTask+0x25e>
				u8g2_SetFontMode(&u8g2, 1);
 800153e:	2101      	movs	r1, #1
 8001540:	4839      	ldr	r0, [pc, #228]	; (8001628 <StartDisplayTask+0x31c>)
 8001542:	f007 ff13 	bl	800936c <u8g2_SetFontMode>
				u8g2_DrawBox(&u8g2, 0, 0, 254, 15);
 8001546:	230f      	movs	r3, #15
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	23fe      	movs	r3, #254	; 0xfe
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	4835      	ldr	r0, [pc, #212]	; (8001628 <StartDisplayTask+0x31c>)
 8001552:	f007 f994 	bl	800887e <u8g2_DrawBox>
				u8g2_SetDrawColor(&u8g2, 2);
 8001556:	2102      	movs	r1, #2
 8001558:	4833      	ldr	r0, [pc, #204]	; (8001628 <StartDisplayTask+0x31c>)
 800155a:	f008 f973 	bl	8009844 <u8g2_SetDrawColor>
				u8g2_DrawUTF8(&u8g2, 0, 15,(char *) &UTC);
 800155e:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <StartDisplayTask+0x33c>)
 8001560:	220f      	movs	r2, #15
 8001562:	2100      	movs	r1, #0
 8001564:	4830      	ldr	r0, [pc, #192]	; (8001628 <StartDisplayTask+0x31c>)
 8001566:	f007 ffbf 	bl	80094e8 <u8g2_DrawUTF8>
//			 ВЫБ�?РАЕМ, ЧТО ДЕЛАТЬ С ВВЕДЕННЫМ�? ДАННЫМ�?, ОСНОВЫВАЯСЬ НА СТАТУСЕ Д�?СПЛЕЯ
//			 0 - НА Д�?СПЛЕЙ Н�?ЧЕГО НЕ ВЫВОД�?ТСЯ
//			 1 - Д�?СПЛЕЙ РАБОТАЕТ В НОРМАЛЬНОМ РЕЖ�?МЕ, �? ЗАСЫПАЕТ ПОСЛЕ UP_TIME(РЕДКО)
//			 2 - Д�?СПЛЕЙ РАБОТАЕТ В РЕЖ�?МЕ СНА �? ЗАСЫПАЕТ ПОСЛЕ UP_TIME_small(ЧАСТО)

		switch (display_stat){
 800156a:	4b32      	ldr	r3, [pc, #200]	; (8001634 <StartDisplayTask+0x328>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d856      	bhi.n	8001620 <StartDisplayTask+0x314>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <StartDisplayTask+0x26c>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	080015c3 	.word	0x080015c3
 8001580:	080015e3 	.word	0x080015e3
 8001584:	08001601 	.word	0x08001601
		case 0:
			displayOFF_del = HAL_GetTick();
 8001588:	f003 f93a 	bl	8004800 <HAL_GetTick>
 800158c:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c

			while(HAL_GetTick() - displayOFF_del < PowerOFF_delay - 10){
 8001590:	e005      	b.n	800159e <StartDisplayTask+0x292>
				u8g2_ClearDisplay(&u8g2);
 8001592:	4825      	ldr	r0, [pc, #148]	; (8001628 <StartDisplayTask+0x31c>)
 8001594:	f007 fa85 	bl	8008aa2 <u8g2_ClearDisplay>
				OFF_Window(&u8g2);
 8001598:	4823      	ldr	r0, [pc, #140]	; (8001628 <StartDisplayTask+0x31c>)
 800159a:	f002 fbd1 	bl	8003d40 <OFF_Window>
			while(HAL_GetTick() - displayOFF_del < PowerOFF_delay - 10){
 800159e:	f003 f92f 	bl	8004800 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	4a28      	ldr	r2, [pc, #160]	; (800164c <StartDisplayTask+0x340>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d9f0      	bls.n	8001592 <StartDisplayTask+0x286>
			}
			u8g2_ClearDisplay(&u8g2);
 80015b0:	481d      	ldr	r0, [pc, #116]	; (8001628 <StartDisplayTask+0x31c>)
 80015b2:	f007 fa76 	bl	8008aa2 <u8g2_ClearDisplay>
			vTaskDelete(myDisplayTaskHandle);
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <StartDisplayTask+0x344>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f009 fed0 	bl	800b360 <vTaskDelete>
			break;
 80015c0:	e02e      	b.n	8001620 <StartDisplayTask+0x314>
		case 1:
			if(uptime_tick - uptime < UP_TIME){
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <StartDisplayTask+0x348>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <StartDisplayTask+0x34c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	4a23      	ldr	r2, [pc, #140]	; (800165c <StartDisplayTask+0x350>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d803      	bhi.n	80015da <StartDisplayTask+0x2ce>
				u8g2_SendBuffer(&u8g2);
 80015d2:	4815      	ldr	r0, [pc, #84]	; (8001628 <StartDisplayTask+0x31c>)
 80015d4:	f007 f9fd 	bl	80089d2 <u8g2_SendBuffer>
			}
			else{
				u8g2_ClearDisplay(&u8g2);
			}
			break;
 80015d8:	e022      	b.n	8001620 <StartDisplayTask+0x314>
				u8g2_ClearDisplay(&u8g2);
 80015da:	4813      	ldr	r0, [pc, #76]	; (8001628 <StartDisplayTask+0x31c>)
 80015dc:	f007 fa61 	bl	8008aa2 <u8g2_ClearDisplay>
			break;
 80015e0:	e01e      	b.n	8001620 <StartDisplayTask+0x314>
		case 2:
			if(uptime_tick - uptime < UP_TIME_small){
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <StartDisplayTask+0x348>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <StartDisplayTask+0x34c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2bef      	cmp	r3, #239	; 0xef
 80015ee:	d803      	bhi.n	80015f8 <StartDisplayTask+0x2ec>
				u8g2_SendBuffer(&u8g2);
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <StartDisplayTask+0x31c>)
 80015f2:	f007 f9ee 	bl	80089d2 <u8g2_SendBuffer>
			}
			else{
				u8g2_ClearDisplay(&u8g2);
			}
			break;
 80015f6:	e013      	b.n	8001620 <StartDisplayTask+0x314>
				u8g2_ClearDisplay(&u8g2);
 80015f8:	480b      	ldr	r0, [pc, #44]	; (8001628 <StartDisplayTask+0x31c>)
 80015fa:	f007 fa52 	bl	8008aa2 <u8g2_ClearDisplay>
			break;
 80015fe:	e00f      	b.n	8001620 <StartDisplayTask+0x314>
		case 3:
			u8g2_ClearBuffer(&u8g2);
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <StartDisplayTask+0x31c>)
 8001602:	f007 f973 	bl	80088ec <u8g2_ClearBuffer>
			LoadWindow(&u8g2, logo_width, logo_height,(uint8_t *) &logo_bits);
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <StartDisplayTask+0x354>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b299      	uxth	r1, r3
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <StartDisplayTask+0x358>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <StartDisplayTask+0x35c>)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <StartDisplayTask+0x31c>)
 8001616:	f002 fb41 	bl	8003c9c <LoadWindow>
			u8g2_SendBuffer(&u8g2);
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <StartDisplayTask+0x31c>)
 800161c:	f007 f9d9 	bl	80089d2 <u8g2_SendBuffer>
		}

		// ПЕРЕВОД�?М ЗАДАЧУ В РЕЖ�?М ОЖ�?ДАН�?Я (мс)
		osDelay(10);
 8001620:	200a      	movs	r0, #10
 8001622:	f009 f809 	bl	800a638 <osDelay>
		if(!(data_ready_flag && uart_hlf_flag) && display_stat){
 8001626:	e68c      	b.n	8001342 <StartDisplayTask+0x36>
 8001628:	200011fc 	.word	0x200011fc
 800162c:	20001099 	.word	0x20001099
 8001630:	20001098 	.word	0x20001098
 8001634:	20000000 	.word	0x20000000
 8001638:	20006b38 	.word	0x20006b38
 800163c:	20006b34 	.word	0x20006b34
 8001640:	08010140 	.word	0x08010140
 8001644:	200010a4 	.word	0x200010a4
 8001648:	2000109c 	.word	0x2000109c
 800164c:	000927b5 	.word	0x000927b5
 8001650:	20006b20 	.word	0x20006b20
 8001654:	20001284 	.word	0x20001284
 8001658:	20001288 	.word	0x20001288
 800165c:	0001517f 	.word	0x0001517f
 8001660:	0800de54 	.word	0x0800de54
 8001664:	0800de55 	.word	0x0800de55
 8001668:	0800de58 	.word	0x0800de58

0800166c <StartDataTask>:
 *				ПРОВЕРЯЕТ ПАКЕТ НА ЦЕЛОСТНОСТЬ				*
 *															*
*************************************************************/
/* USER CODE END Header_StartDataTask */
void StartDataTask(void const * argument)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	f6ad 0d9c 	subw	sp, sp, #2204	; 0x89c
 8001672:	af02      	add	r7, sp, #8
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDataTask */

/************************** ПЕРЕМЕННЫЕ ЗАДАЧ�? ****************************/

		/*- - - - - - - -  ОСНОВНЫЕ ПЕРЕМЕННЫЕ - - - - - - - - - */
	uint16_t stringnum = 0;										// ХРАН�?Т НОМЕР ТЕКУЩЕЙ СТРОК�?
 8001678:	2300      	movs	r3, #0
 800167a:	f8a7 3884 	strh.w	r3, [r7, #2180]	; 0x884
	buffer_t crc32_buf;											// БУФЕР, В КОТОРЫЙ ЗАП�?СЫВАЮТСЯ ДАННЫЕ ДЛЯ РАСЧЕТА СRC32
	char strnumhex[2];											// С�?МВОЛЬНЫЙ БУФЕР, ХРАНЯЩ�?Й НОМЕР СТРОК�? в hex

		/*- - - - - - - - - - - СЧЕТЧ�?К�?  - - - - - - - - - - - -*/
	uint16_t counter = 0;										// СЧЕТЧ�?К Ц�?КЛ�?ЧЕСКОГО БУФЕРА (АТАВ�?ЗМ)
 800167e:	2300      	movs	r3, #0
 8001680:	f8a7 388e 	strh.w	r3, [r7, #2190]	; 0x88e
	uint16_t pointer = 0;										// УКАЗАТЕЛЬ НА С�?МВОЛ БУФЕРА uart_buf
 8001684:	f107 030a 	add.w	r3, r7, #10
 8001688:	2200      	movs	r2, #0
 800168a:	801a      	strh	r2, [r3, #0]
	uint8_t celsium_count = 0;									// СЧЕТЧ�?К ДЛЯ ЗАПОЛНЕН�?Я ЗНАКОВ ГРАДУСА ЦЕЛЬС�?Я
 800168c:	2300      	movs	r3, #0
 800168e:	f887 388d 	strb.w	r3, [r7, #2189]	; 0x88d
	uint8_t string_count = 0;									// СЧЕТЧ�?К ДЛЯ ЗАПОЛНЕН�?Я СТРОК
 8001692:	2300      	movs	r3, #0
 8001694:	f887 388c 	strb.w	r3, [r7, #2188]	; 0x88c
	uint32_t restart_val = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3888 	str.w	r3, [r7, #2184]	; 0x888
	uint8_t UTC_count = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3887 	strb.w	r3, [r7, #2183]	; 0x887
	uint16_t UTC_pointer = 0;
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	2200      	movs	r2, #0
 80016aa:	801a      	strh	r2, [r3, #0]

	osDelay(500);
 80016ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b0:	f008 ffc2 	bl	800a638 <osDelay>
	for(;;){

		// ЕСЛ�? RX НЕ В ПРОСТОЕ, ТО ЖДЕМ ОПРЕДЕЛЕННОЕ ВРЕМЯ
		// �? НАЧ�?НАЕМ ПО�?СК СТАРТОВОЙ КОМБ�?НАЦ�?�?
		// УСЛОВ�?Е ПОМАГАЕТ ПАРС�?ТЬ НОВЫЙ ПАКЕТ ОД�?Н РАЗ
		if(!(USART3->SR & USART_SR_IDLE)){
 80016b4:	4bc7      	ldr	r3, [pc, #796]	; (80019d4 <StartDataTask+0x368>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 81a8 	bne.w	8001a12 <StartDataTask+0x3a6>
			restart_val = HAL_GetTick();
 80016c2:	f003 f89d 	bl	8004800 <HAL_GetTick>
 80016c6:	f8c7 0888 	str.w	r0, [r7, #2184]	; 0x888

			HAL_GPIO_WritePin(STM32_BUTTON_LED_POWER_GPIO_Port, STM32_BUTTON_LED_POWER_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d0:	48c1      	ldr	r0, [pc, #772]	; (80019d8 <StartDataTask+0x36c>)
 80016d2:	f004 fc95 	bl	8006000 <HAL_GPIO_WritePin>

			osDelay(pack_DELAY);
 80016d6:	2096      	movs	r0, #150	; 0x96
 80016d8:	f008 ffae 	bl	800a638 <osDelay>

			counter = UartBufSize;
 80016dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e0:	f8a7 388e 	strh.w	r3, [r7, #2190]	; 0x88e

			// ТЕЛО ПАРСЕРА:
			// ПРОБЕГАЕТ ВЕСЬ БУФЕР В ПО�?СКАХ СТАРТОВОЙ КОМБ�?НАЦ�?�?
			// ПОСЛЕ ТОГО, КАК НАЙДЕТ, ОБРАБАТЫВАЕТ ПАКЕТ �? ВЫХОД�?Т �?З ТЕЛА Ц�?КЛА
			while(counter){
 80016e4:	e16f      	b.n	80019c6 <StartDataTask+0x35a>

				// ЕСЛ�? НАЙДЕНА СТАРТОВАЯ КОМБ�?НАЦ�?Я, ТО НАЧ�?НАЕМ ПАРС�?ТЬ
				if(FindString((uint8_t *)&uart_buf, UartBufSize, &pointer,"PDS", 3)){
 80016e6:	f107 020a 	add.w	r2, r7, #10
 80016ea:	2303      	movs	r3, #3
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	4bbb      	ldr	r3, [pc, #748]	; (80019dc <StartDataTask+0x370>)
 80016f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f4:	48ba      	ldr	r0, [pc, #744]	; (80019e0 <StartDataTask+0x374>)
 80016f6:	f001 fba1 	bl	8002e3c <FindString>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8155 	beq.w	80019ac <StartDataTask+0x340>


					// ПРОПУСКАЕМ С�?МВОЛ ';'
					PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 1);
 8001702:	f107 020a 	add.w	r2, r7, #10
 8001706:	2301      	movs	r3, #1
 8001708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170c:	48b4      	ldr	r0, [pc, #720]	; (80019e0 <StartDataTask+0x374>)
 800170e:	f001 fc1f 	bl	8002f50 <PassSym>

					// РАСЧ�?ТЫВАЕМ CRC32, ЕСЛ�? CRC СОШЕЛСЯ, ПРОДОЛЖАЕМ ПАРС�?ТЬ
					// �?НАЧЕ ОСТАНАВЛ�?ВАЕМ ПАРС�?НГ: ФУНКЦ�?Я ЗАП�?СЫВАЕТ �? ОШ�?БК�? CRC
					if(CRC32_Status((uint8_t *)&uart_buf, UartBufSize, pointer, &crc32_buf)){}
 8001712:	f107 030a 	add.w	r3, r7, #10
 8001716:	881a      	ldrh	r2, [r3, #0]
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001720:	48af      	ldr	r0, [pc, #700]	; (80019e0 <StartDataTask+0x374>)
 8001722:	f001 fac5 	bl	8002cb0 <CRC32_Status>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8169 	beq.w	8001a00 <StartDataTask+0x394>
					else break;

					// Ц�?КЛ ПАРС�?Т string_pack_amount СТРОК ПО ОТДЕЛЬНОСТ�?
					for(uint8_t i = 0; i < string_pack_amount; i++){
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3886 	strb.w	r3, [r7, #2182]	; 0x886
 8001734:	e12f      	b.n	8001996 <StartDataTask+0x32a>

						// ЕСЛ�? ВМЕСТО НОМЕРА СТРОК�? НАЙДЕНА КОМ�?НАЦ�?Я CRC - ПАКЕТ ОКОНЧЕН, ВЫХОД�?М �?З ПАРС�?НГА
						if(FindString((uint8_t *)&uart_buf, UartBufSize, &pointer, "CRC", 3)){
 8001736:	f107 020a 	add.w	r2, r7, #10
 800173a:	2303      	movs	r3, #3
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4ba9      	ldr	r3, [pc, #676]	; (80019e4 <StartDataTask+0x378>)
 8001740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001744:	48a6      	ldr	r0, [pc, #664]	; (80019e0 <StartDataTask+0x374>)
 8001746:	f001 fb79 	bl	8002e3c <FindString>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	f040 8128 	bne.w	80019a2 <StartDataTask+0x336>
							break;
						}

						string_count = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	f887 388c 	strb.w	r3, [r7, #2188]	; 0x88c
						celsium_count = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 388d 	strb.w	r3, [r7, #2189]	; 0x88d

						// НОМЕР СТРОК�? ВСЕГДА СОСТО�?Т �?З ДВУХ С�?МВОЛОВ
						// ПАРС�?М ПЕРВЫЙ С�?МВОЛ �? ПЕРЕХОД�?М К СЛЕДУЮЩЕМУ
						strnumhex[0] = uart_buf[pointer];
 800175e:	f107 030a 	add.w	r3, r7, #10
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b9e      	ldr	r3, [pc, #632]	; (80019e0 <StartDataTask+0x374>)
 8001768:	5c9a      	ldrb	r2, [r3, r2]
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	701a      	strb	r2, [r3, #0]
						PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 1);
 8001770:	f107 020a 	add.w	r2, r7, #10
 8001774:	2301      	movs	r3, #1
 8001776:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800177a:	4899      	ldr	r0, [pc, #612]	; (80019e0 <StartDataTask+0x374>)
 800177c:	f001 fbe8 	bl	8002f50 <PassSym>

						// ПАРС�?М ВТОРОЙ С�?МВОЛ �? ПРОПУСКАЕМ 2 С�?МВОЛА: ЭТОТ �? ';'
						strnumhex[1] = uart_buf[pointer];
 8001780:	f107 030a 	add.w	r3, r7, #10
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4b95      	ldr	r3, [pc, #596]	; (80019e0 <StartDataTask+0x374>)
 800178a:	5c9a      	ldrb	r2, [r3, r2]
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	705a      	strb	r2, [r3, #1]
						PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 2);
 8001792:	f107 020a 	add.w	r2, r7, #10
 8001796:	2302      	movs	r3, #2
 8001798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800179c:	4890      	ldr	r0, [pc, #576]	; (80019e0 <StartDataTask+0x374>)
 800179e:	f001 fbd7 	bl	8002f50 <PassSym>

						// ПЕРЕВОД�?М СТРОКУ НОМЕРА: (char, hex) -> (int, dec)
						stringnum = HexToDec((char *) &strnumhex,2);
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2102      	movs	r1, #2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 fc25 	bl	8002ff8 <HexToDec>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f8a7 3884 	strh.w	r3, [r7, #2180]	; 0x884
						datastring[stringnum].number = stringnum;
 80017b4:	f8b7 2884 	ldrh.w	r2, [r7, #2180]	; 0x884
 80017b8:	f8b7 3884 	ldrh.w	r3, [r7, #2180]	; 0x884
 80017bc:	b2d8      	uxtb	r0, r3
 80017be:	498a      	ldr	r1, [pc, #552]	; (80019e8 <StartDataTask+0x37c>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	015b      	lsls	r3, r3, #5
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	440b      	add	r3, r1
 80017ca:	333c      	adds	r3, #60	; 0x3c
 80017cc:	4602      	mov	r2, r0
 80017ce:	701a      	strb	r2, [r3, #0]

						// ПАРС�?М СОДЕРЖ�?МОЕ СТРОК�?:
						// ПОКА НЕ НАЙДЕМ ЗНАК ';' �?Л�? СТРОКА НЕ ЗАКОНЧ�?ТСЯ
						// КЛАДЕМ КАЖДЫЙ С�?МВОЛ СОДЕРЖ�?МОГО БУФЕРА НАЧ�?НАЯ С pointer
						// В БУФЕР СТРОК�? НАЧ�?НАЯ С string_count (0)
						while((uart_buf[pointer] != (uint8_t)';') && (string_count < string_size)){
 80017d0:	e0b0      	b.n	8001934 <StartDataTask+0x2c8>

							// ЕСЛ�? НАЙДЕНА КОМБ�?НАЦ�?Я DEL, ЗНАЧ�?Т СТРОКУ НУЖНО УДАЛ�?ТЬ (СТАТУС СТРОК�? = 0)
							// �? ПАРС�?НГ СОДЕРЖ�?МОГО СТРОК�? ПРЕКРАЩАЕТСЯ
							// �?НАЧЕ СТАТУС СТРОК�? = 1
							if(FindString((uint8_t *)&uart_buf, UartBufSize, &pointer, "DEL", 3) && !string_count){
 80017d2:	f107 020a 	add.w	r2, r7, #10
 80017d6:	2303      	movs	r3, #3
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	4b84      	ldr	r3, [pc, #528]	; (80019ec <StartDataTask+0x380>)
 80017dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e0:	487f      	ldr	r0, [pc, #508]	; (80019e0 <StartDataTask+0x374>)
 80017e2:	f001 fb2b 	bl	8002e3c <FindString>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00f      	beq.n	800180c <StartDataTask+0x1a0>
 80017ec:	f897 388c 	ldrb.w	r3, [r7, #2188]	; 0x88c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10b      	bne.n	800180c <StartDataTask+0x1a0>
								datastring[stringnum].status = 0;
 80017f4:	f8b7 2884 	ldrh.w	r2, [r7, #2180]	; 0x884
 80017f8:	497b      	ldr	r1, [pc, #492]	; (80019e8 <StartDataTask+0x37c>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	015b      	lsls	r3, r3, #5
 80017fe:	4413      	add	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	440b      	add	r3, r1
 8001804:	333d      	adds	r3, #61	; 0x3d
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
								break;
 800180a:	e0a0      	b.n	800194e <StartDataTask+0x2e2>
							}
							else if(!string_count) datastring[stringnum].status = 1;
 800180c:	f897 388c 	ldrb.w	r3, [r7, #2188]	; 0x88c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10a      	bne.n	800182a <StartDataTask+0x1be>
 8001814:	f8b7 2884 	ldrh.w	r2, [r7, #2180]	; 0x884
 8001818:	4973      	ldr	r1, [pc, #460]	; (80019e8 <StartDataTask+0x37c>)
 800181a:	4613      	mov	r3, r2
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	4413      	add	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	440b      	add	r3, r1
 8001824:	333d      	adds	r3, #61	; 0x3d
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]

							UTC_pointer = pointer;
 800182a:	f107 030a 	add.w	r3, r7, #10
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	801a      	strh	r2, [r3, #0]

							if(FindString((uint8_t *)&uart_buf, UartBufSize, &UTC_pointer, "UTC", 3)){
 8001836:	f107 0208 	add.w	r2, r7, #8
 800183a:	2303      	movs	r3, #3
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	4b6c      	ldr	r3, [pc, #432]	; (80019f0 <StartDataTask+0x384>)
 8001840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001844:	4866      	ldr	r0, [pc, #408]	; (80019e0 <StartDataTask+0x374>)
 8001846:	f001 faf9 	bl	8002e3c <FindString>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01e      	beq.n	800188e <StartDataTask+0x222>

								UTC_count = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3887 	strb.w	r3, [r7, #2183]	; 0x887

								while(UTC_count < 8){
 8001856:	e016      	b.n	8001886 <StartDataTask+0x21a>
									UTC[UTC_count] = uart_buf[UTC_pointer];
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	f897 3887 	ldrb.w	r3, [r7, #2183]	; 0x887
 8001864:	4a5e      	ldr	r2, [pc, #376]	; (80019e0 <StartDataTask+0x374>)
 8001866:	5c51      	ldrb	r1, [r2, r1]
 8001868:	4a62      	ldr	r2, [pc, #392]	; (80019f4 <StartDataTask+0x388>)
 800186a:	54d1      	strb	r1, [r2, r3]
									UTC_pointer++;
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	801a      	strh	r2, [r3, #0]
									UTC_count++;
 800187c:	f897 3887 	ldrb.w	r3, [r7, #2183]	; 0x887
 8001880:	3301      	adds	r3, #1
 8001882:	f887 3887 	strb.w	r3, [r7, #2183]	; 0x887
								while(UTC_count < 8){
 8001886:	f897 3887 	ldrb.w	r3, [r7, #2183]	; 0x887
 800188a:	2b07      	cmp	r3, #7
 800188c:	d9e4      	bls.n	8001858 <StartDataTask+0x1ec>
								}
							}

							// ЕСЛ�? НАЙДЕНА КОМБ�?НАЦ�?Я "*C" ВМЕСТО НЕЕ КЛАДЕМ В СТРОКУ ' '
							// �? ЗАП�?СЫВАЕМ ПОЛОЖЕН�?Е ЗНАКА ГРАДУСА (string_count)
							if(FindString((uint8_t *)&uart_buf,UartBufSize,&pointer,"*C",2)){
 800188e:	f107 020a 	add.w	r2, r7, #10
 8001892:	2302      	movs	r3, #2
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <StartDataTask+0x38c>)
 8001898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189c:	4850      	ldr	r0, [pc, #320]	; (80019e0 <StartDataTask+0x374>)
 800189e:	f001 facd 	bl	8002e3c <FindString>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d025      	beq.n	80018f4 <StartDataTask+0x288>
								datastring[stringnum].buf[string_count] = (uint8_t)' ';
 80018a8:	f8b7 2884 	ldrh.w	r2, [r7, #2180]	; 0x884
 80018ac:	f897 188c 	ldrb.w	r1, [r7, #2188]	; 0x88c
 80018b0:	484d      	ldr	r0, [pc, #308]	; (80019e8 <StartDataTask+0x37c>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	015b      	lsls	r3, r3, #5
 80018b6:	4413      	add	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4403      	add	r3, r0
 80018bc:	440b      	add	r3, r1
 80018be:	2220      	movs	r2, #32
 80018c0:	701a      	strb	r2, [r3, #0]
								datastring[stringnum].degreeSym[celsium_count] = string_count;
 80018c2:	f8b7 2884 	ldrh.w	r2, [r7, #2180]	; 0x884
 80018c6:	f897 188d 	ldrb.w	r1, [r7, #2189]	; 0x88d
 80018ca:	4847      	ldr	r0, [pc, #284]	; (80019e8 <StartDataTask+0x37c>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	015b      	lsls	r3, r3, #5
 80018d0:	4413      	add	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4403      	add	r3, r0
 80018d6:	440b      	add	r3, r1
 80018d8:	333e      	adds	r3, #62	; 0x3e
 80018da:	f897 288c 	ldrb.w	r2, [r7, #2188]	; 0x88c
 80018de:	701a      	strb	r2, [r3, #0]
								string_count++;
 80018e0:	f897 388c 	ldrb.w	r3, [r7, #2188]	; 0x88c
 80018e4:	3301      	adds	r3, #1
 80018e6:	f887 388c 	strb.w	r3, [r7, #2188]	; 0x88c
								celsium_count++;
 80018ea:	f897 388d 	ldrb.w	r3, [r7, #2189]	; 0x88d
 80018ee:	3301      	adds	r3, #1
 80018f0:	f887 388d 	strb.w	r3, [r7, #2189]	; 0x88d
							}

							// ЕСЛ�? Н�? ОДНА �?З КОМБ�?НАЦ�?Й НЕ БЫЛА НАЙДЕНА
							// ПРОСТО КЛАДЕМ С�?МВОЛ БУФЕРА В СТРОКУ
							datastring[stringnum].buf[string_count] = uart_buf[pointer];
 80018f4:	f107 030a 	add.w	r3, r7, #10
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f8b7 2884 	ldrh.w	r2, [r7, #2180]	; 0x884
 8001900:	f897 188c 	ldrb.w	r1, [r7, #2188]	; 0x88c
 8001904:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <StartDataTask+0x374>)
 8001906:	5c1c      	ldrb	r4, [r3, r0]
 8001908:	4837      	ldr	r0, [pc, #220]	; (80019e8 <StartDataTask+0x37c>)
 800190a:	4613      	mov	r3, r2
 800190c:	015b      	lsls	r3, r3, #5
 800190e:	4413      	add	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4403      	add	r3, r0
 8001914:	440b      	add	r3, r1
 8001916:	4622      	mov	r2, r4
 8001918:	701a      	strb	r2, [r3, #0]
							PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 1);
 800191a:	f107 020a 	add.w	r2, r7, #10
 800191e:	2301      	movs	r3, #1
 8001920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001924:	482e      	ldr	r0, [pc, #184]	; (80019e0 <StartDataTask+0x374>)
 8001926:	f001 fb13 	bl	8002f50 <PassSym>
							string_count++;
 800192a:	f897 388c 	ldrb.w	r3, [r7, #2188]	; 0x88c
 800192e:	3301      	adds	r3, #1
 8001930:	f887 388c 	strb.w	r3, [r7, #2188]	; 0x88c
						while((uart_buf[pointer] != (uint8_t)';') && (string_count < string_size)){
 8001934:	f107 030a 	add.w	r3, r7, #10
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <StartDataTask+0x374>)
 800193e:	5c9b      	ldrb	r3, [r3, r2]
 8001940:	2b3b      	cmp	r3, #59	; 0x3b
 8001942:	d017      	beq.n	8001974 <StartDataTask+0x308>
 8001944:	f897 388c 	ldrb.w	r3, [r7, #2188]	; 0x88c
 8001948:	2b3b      	cmp	r3, #59	; 0x3b
 800194a:	f67f af42 	bls.w	80017d2 <StartDataTask+0x166>
						}

						// КОГДА СТРОКА УЖЕ ЗАПОЛНЕНА ДАННЫМ�?,
						// ОЧ�?ЩАЕМ ОСТАВШ�?ЕСЯ ЭЛЕМЕНТЫ В БУФЕРЕ СТРОК�?
						while(string_count < string_size){
 800194e:	e011      	b.n	8001974 <StartDataTask+0x308>
							datastring[stringnum].buf[string_count] = '\0';
 8001950:	f8b7 2884 	ldrh.w	r2, [r7, #2180]	; 0x884
 8001954:	f897 188c 	ldrb.w	r1, [r7, #2188]	; 0x88c
 8001958:	4823      	ldr	r0, [pc, #140]	; (80019e8 <StartDataTask+0x37c>)
 800195a:	4613      	mov	r3, r2
 800195c:	015b      	lsls	r3, r3, #5
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4403      	add	r3, r0
 8001964:	440b      	add	r3, r1
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
							string_count++;
 800196a:	f897 388c 	ldrb.w	r3, [r7, #2188]	; 0x88c
 800196e:	3301      	adds	r3, #1
 8001970:	f887 388c 	strb.w	r3, [r7, #2188]	; 0x88c
						while(string_count < string_size){
 8001974:	f897 388c 	ldrb.w	r3, [r7, #2188]	; 0x88c
 8001978:	2b3b      	cmp	r3, #59	; 0x3b
 800197a:	d9e9      	bls.n	8001950 <StartDataTask+0x2e4>
						}
						// ПРОПУСКАЕМ ';'
						PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 1);
 800197c:	f107 020a 	add.w	r2, r7, #10
 8001980:	2301      	movs	r3, #1
 8001982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001986:	4816      	ldr	r0, [pc, #88]	; (80019e0 <StartDataTask+0x374>)
 8001988:	f001 fae2 	bl	8002f50 <PassSym>
					for(uint8_t i = 0; i < string_pack_amount; i++){
 800198c:	f897 3886 	ldrb.w	r3, [r7, #2182]	; 0x886
 8001990:	3301      	adds	r3, #1
 8001992:	f887 3886 	strb.w	r3, [r7, #2182]	; 0x886
 8001996:	f897 3886 	ldrb.w	r3, [r7, #2182]	; 0x886
 800199a:	2b23      	cmp	r3, #35	; 0x23
 800199c:	f67f aecb 	bls.w	8001736 <StartDataTask+0xca>
 80019a0:	e000      	b.n	80019a4 <StartDataTask+0x338>
							break;
 80019a2:	bf00      	nop
					}

					// СТАВ�?М ФЛАГ ГОТОВНОСТ�? ДАННЫХ, ДЛЯ ВЫХОДА �?З ЗАГРУЗОЧНОГО ОКНА
					// �? ВЫХОД�?М �?З ПАРСЕРА ПАКЕТА
					data_ready_flag = 1;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <StartDataTask+0x390>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
					break;
 80019aa:	e02a      	b.n	8001a02 <StartDataTask+0x396>
				}

				// ЕСЛ�? PSD НЕ НАЙДЕН, ПРОПУСКАЕМ С�?МВОЛ ЗА С�?МВОЛОМ ПОКА БУФЕР НЕ КОНЧ�?ТСЯ
				PassSym((uint8_t *)&uart_buf,UartBufSize,&pointer,1);
 80019ac:	f107 020a 	add.w	r2, r7, #10
 80019b0:	2301      	movs	r3, #1
 80019b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b6:	480a      	ldr	r0, [pc, #40]	; (80019e0 <StartDataTask+0x374>)
 80019b8:	f001 faca 	bl	8002f50 <PassSym>
				counter--;
 80019bc:	f8b7 388e 	ldrh.w	r3, [r7, #2190]	; 0x88e
 80019c0:	3b01      	subs	r3, #1
 80019c2:	f8a7 388e 	strh.w	r3, [r7, #2190]	; 0x88e
			while(counter){
 80019c6:	f8b7 388e 	ldrh.w	r3, [r7, #2190]	; 0x88e
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f47f ae8b 	bne.w	80016e6 <StartDataTask+0x7a>
 80019d0:	e017      	b.n	8001a02 <StartDataTask+0x396>
 80019d2:	bf00      	nop
 80019d4:	40004800 	.word	0x40004800
 80019d8:	40020c00 	.word	0x40020c00
 80019dc:	0800d998 	.word	0x0800d998
 80019e0:	20000098 	.word	0x20000098
 80019e4:	0800d99c 	.word	0x0800d99c
 80019e8:	20006b38 	.word	0x20006b38
 80019ec:	0800d9a0 	.word	0x0800d9a0
 80019f0:	0800d9a4 	.word	0x0800d9a4
 80019f4:	2000109c 	.word	0x2000109c
 80019f8:	0800d9a8 	.word	0x0800d9a8
 80019fc:	20001099 	.word	0x20001099
					else break;
 8001a00:	bf00      	nop
			}
			if(!counter){
 8001a02:	f8b7 388e 	ldrh.w	r3, [r7, #2190]	; 0x88e
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d103      	bne.n	8001a12 <StartDataTask+0x3a6>
				// ВЫВОД�?М ОШ�?БКУ, ЧТО СТАРТОВАЯ КОМБ�?НАЦ�?Я НЕ БЫЛА НАЙДЕНА
				PutERROR((string_t *)&datastring,"PACK_NOT_FOUND");
 8001a0a:	491e      	ldr	r1, [pc, #120]	; (8001a84 <StartDataTask+0x418>)
 8001a0c:	481e      	ldr	r0, [pc, #120]	; (8001a88 <StartDataTask+0x41c>)
 8001a0e:	f000 ffe5 	bl	80029dc <PutERROR>
			}
		}

		// ЕСЛ�? ДАННЫЕ НЕ ОБНОВЛЯЮТСЯ КАКОЕ ТО ВРЕМЯ,
		// ПЕРЕЗАПУСКАЕМ UART, ДЛЯ �?ЗБЕЖАН�?Я ВОЗМОЖНЫХ ОШ�?БОК
		if(HAL_GetTick() - restart_val > restart_time){
 8001a12:	f002 fef5 	bl	8004800 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	f8d7 3888 	ldr.w	r3, [r7, #2184]	; 0x888
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f240 2226 	movw	r2, #550	; 0x226
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d908      	bls.n	8001a38 <StartDataTask+0x3cc>
			HAL_UART_DMAStop(&huart3);
 8001a26:	4819      	ldr	r0, [pc, #100]	; (8001a8c <StartDataTask+0x420>)
 8001a28:	f005 ff74 	bl	8007914 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart_buf, UartBufSize);
 8001a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a30:	4917      	ldr	r1, [pc, #92]	; (8001a90 <StartDataTask+0x424>)
 8001a32:	4816      	ldr	r0, [pc, #88]	; (8001a8c <StartDataTask+0x420>)
 8001a34:	f005 feee 	bl	8007814 <HAL_UART_Receive_DMA>
		}

		if(HAL_GetTick() - restart_val > mother_wdgtime){
 8001a38:	f002 fee2 	bl	8004800 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f8d7 3888 	ldr.w	r3, [r7, #2184]	; 0x888
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <StartDataTask+0x428>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d90f      	bls.n	8001a6a <StartDataTask+0x3fe>
			HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <StartDataTask+0x42c>)
 8001a52:	f004 fad5 	bl	8006000 <HAL_GPIO_WritePin>
			osDelay(1000);
 8001a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5a:	f008 fded 	bl	800a638 <osDelay>
			HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <StartDataTask+0x42c>)
 8001a66:	f004 facb 	bl	8006000 <HAL_GPIO_WritePin>
		}

		// ОБНАВЛЯЕМ WATHDOG
		HAL_IWDG_Refresh(&hiwdg);
 8001a6a:	480c      	ldr	r0, [pc, #48]	; (8001a9c <StartDataTask+0x430>)
 8001a6c:	f004 fc53 	bl	8006316 <HAL_IWDG_Refresh>

//		if(!HAL_GPIO_ReadPin(STM32_BUTTON_POWER_GPIO_Port, STM32_BUTTON_POWER_Pin)){
			HAL_GPIO_WritePin(STM32_BUTTON_LED_POWER_GPIO_Port, STM32_BUTTON_LED_POWER_Pin, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a76:	4808      	ldr	r0, [pc, #32]	; (8001a98 <StartDataTask+0x42c>)
 8001a78:	f004 fac2 	bl	8006000 <HAL_GPIO_WritePin>
//		}
		// ПЕРЕВОД�?М ЗАДАЧУ В РЕЖ�?М ОЖ�?ДАН�?Я. ВРЕМЯ МАЛО, ЧТОБ НЕ ПРОПУСТЬ ПАКЕТ
		osDelay(10);
 8001a7c:	200a      	movs	r0, #10
 8001a7e:	f008 fddb 	bl	800a638 <osDelay>
		if(!(USART3->SR & USART_SR_IDLE)){
 8001a82:	e617      	b.n	80016b4 <StartDataTask+0x48>
 8001a84:	0800d9ac 	.word	0x0800d9ac
 8001a88:	20006b38 	.word	0x20006b38
 8001a8c:	200097b4 	.word	0x200097b4
 8001a90:	20000098 	.word	0x20000098
 8001a94:	000927c0 	.word	0x000927c0
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	20009598 	.word	0x20009598

08001aa0 <StartControlTask>:
 *				  �? СОСТАВЛЕН�?Я СТРОК НА ОТПРАВКУ		   *
 *														   *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void const * argument)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartControlTask */

/************************** ПЕРЕМЕННЫЕ ЗАДАЧ�? ****************************/

/*-------------------- ШАБЛОНЫ ДЛЯ ЗАПОЛНЕН�?Я СТРОК ---------------------*/
	const uint8_t ctrl_template[] = "R?R?R?R?DC?";				// ШАБЛОН ДЛЯ СТРОК�? С ДАННЫМ�? O РЕЛЕ �? DC
 8001aac:	4aa3      	ldr	r2, [pc, #652]	; (8001d3c <StartControlTask+0x29c>)
 8001aae:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ab2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const uint8_t but_template[] = 	"B?B?B?PB?";				// ШАБЛОН ДЛЯ СТРОК�? С ДАННЫМ�? СОСТОЯН�? КНОПОК
 8001ab8:	4aa1      	ldr	r2, [pc, #644]	; (8001d40 <StartControlTask+0x2a0>)
 8001aba:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ac0:	c303      	stmia	r3!, {r0, r1}
 8001ac2:	801a      	strh	r2, [r3, #0]

/*-------------------------- ПЕРЕМЕННЫЕ CRC32 ---------------------------*/
	uint16_t crc_count = 0;										// СЧЕТЧ�?К ДЛЯ ОПРЕДЕЛЕН�?Я РАЗМЕРА CRC32
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
	uint8_t crc_hex_buf[10];									// С�?МВОЛЬНЫЙ БУФЕР, ХРАНЯЩ�?Й ЗАП�?СЬ CRC32 В hex
	int32_t crc32;												// ХРАН�?Т РАСЧ�?ТАНОЕ ЗНАЯЕН�?Е CRC32

/*------------------------- ПЕРЕМЕННЫЕ RELE/DC --------------------------*/
	ctrl_status active;											// ПЕРЕМЕННАЯ СТРУКТУРЫ СТРОК РЕЛЕ/DC
	uint16_t RELE_PINS[] = {STM32_OUT_REL_1_Pin, 				// МАСС�?В, ХРАНЯЩ�?Й НОМЕРА П�?НОВ РЕЛЕ
 8001aca:	4a9e      	ldr	r2, [pc, #632]	; (8001d44 <StartControlTask+0x2a4>)
 8001acc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001ad0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad4:	e883 0003 	stmia.w	r3, {r0, r1}
							STM32_OUT_REL_2_Pin, 					//
							STM32_OUT_REL_3_Pin, 					//
							STM32_OUT_REL_4_Pin};					//
	GPIO_TypeDef *RELE_PORTS[] = {STM32_OUT_REL_1_GPIO_Port, 	// МАСС�?В, ХРАНЯЩ�?Й НОМЕРА ПОРТОВ РЕЛЕ
 8001ad8:	4b9b      	ldr	r3, [pc, #620]	; (8001d48 <StartControlTask+0x2a8>)
 8001ada:	f507 74d0 	add.w	r4, r7, #416	; 0x1a0
 8001ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								STM32_OUT_REL_2_GPIO_Port, 			//
								STM32_OUT_REL_3_GPIO_Port, 			//
								STM32_OUT_REL_4_GPIO_Port};			//
	uint8_t RB_count = 0;										// РЕЛЕ/DC СЧЕТЧ�?К
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205

/*--------------------------- ФЛАГ�? СОСТОЯН�?Я ---------------------------*/
	uint8_t switch_off = 0;										// ФЛАГ ВЫКЛЮЧЕН�?Я П�?ТАН�?Я
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	uint8_t flash_on = 0;										// ФЛАГ ЗАП�?С�? В ФЛЭШ
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204

/*--------------------------- ВСЕ ДЛЯ КНОПОК ----------------------------*/
	uint8_t but_buf[4];											// БУФЕР ХРАН�?Т СОСТОЯН�?Е 4-Ч КНОПОК
																	// (0, 1 - ПРОКРУТКА; 2 - ФЛЭШ; 3 - ВЫКЛЮЧЕН�?Е)
	uint8_t cursor = 0;											// ПОЛОЖЕН�?Е КУРСОРА
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	uint8_t butmem = 0;											// ПЕРЕМЕННАЯ ЗАПОМ�?НАЕТ СОСТОЯН�?Е КНОПОК
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
	uint8_t power_butmem = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
	uint32_t butthold = 0;										// ПЕРЕМЕННАЯ ДЛЯ ОТСЧЕТА ВРЕМЕН�? НАЖАТ�?Я КНОПК�?
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	uint32_t power_butthold = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

/*----------------------- БУФЕР НА ОТПРАВКУ UART ------------------------*/
	uint8_t sendBuf[ctrl_string_amnt*string_size] = {'\0'};		// ОТПРАВЛЯЕМЫЙ ПО UART БУФЕР
 8001b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2100      	movs	r1, #0
 8001b22:	f00a fe0c 	bl	800c73e <memset>
	uint16_t sB_pointer = 0;									// УКАЗАТЕЛЬ БУФЕРА
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
	uint8_t sB_counter = 0;										// СЧЕТЧ�?К БУФЕРА
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
	uint32_t transmit_timer = 0;								// СОХРАНЯЕТ ВРЕМЯ ПОСЛЕДНЕЙ ОТПРАВК�?
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

/*--------------------------- ПЕРЕМЕННЫЕ АЦП ---------------------------*/
	uint8_t ADC_char[4];										// БУФЕР ДЛЯ ПЕРЕВОДА ЗНАЧЕН�?Я АЦП В СТРОКУ
	char up_time_char[10];
	uint8_t adc_count = 0;			 							// СЧЕТЧ�?К АЦП
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
	uint8_t adc_str_count = 0;									// СЧЕТЧ�?К СТРОК АЦП
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa
	uint8_t opt_buf[6] = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	809a      	strh	r2, [r3, #4]

	uint32_t service_hold = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	uint8_t service_mem = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
	uint8_t service_mem2 = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea

	uint8_t con_mem = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 31e9 	strb.w	r3, [r7, #489]	; 0x1e9
/*-------------------------- ФУНКЦ�?�? ЗАПУСКА ----------------------------*/
//	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_val,5);			// ЗАПУСК АЦП В РЕЖ�?МЕ DMA



	osDelay(500);
 8001b66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b6a:	f008 fd65 	bl	800a638 <osDelay>
	for(;;){

/*--------------------- ОБРАБАТЫВАЕМ НАЖАТ�?Я КНОПОК ---------------------*/

		// ПР�?Н�?МАЕМ ЗНАЧЕН�?Е КУРСОР �?З ЗАДАЧ�? StartDisplayTask
		xQueueReceive(myCursorQueueHandle,&cursor, 10);
 8001b6e:	4b77      	ldr	r3, [pc, #476]	; (8001d4c <StartControlTask+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f207 1197 	addw	r1, r7, #407	; 0x197
 8001b76:	220a      	movs	r2, #10
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f009 f87f 	bl	800ac7c <xQueueReceive>

		// ОБРАБАТЫВАЕМ КНОПК�? ПРОКРУТК�? Д�?СПЛЕЯ
		ScrollingButtonHandler(&cursor, &butthold, &butmem);
 8001b7e:	f507 72cb 	add.w	r2, r7, #406	; 0x196
 8001b82:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8001b86:	f207 1397 	addw	r3, r7, #407	; 0x197
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 ff9e 	bl	8002acc <ScrollingButtonHandler>

		// ОТПРАВЛЯЕМ ОБНОВЛЕННОЕ ЗНАЧЕН�?Е КУРСОРА ОБРАТНО В ЗАДАЧУ StartDisplayTask
		xQueueSendToBack(myCursorQueueHandle, &cursor, 10);
 8001b90:	4b6e      	ldr	r3, [pc, #440]	; (8001d4c <StartControlTask+0x2ac>)
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f207 1197 	addw	r1, r7, #407	; 0x197
 8001b98:	2300      	movs	r3, #0
 8001b9a:	220a      	movs	r2, #10
 8001b9c:	f008 ff74 	bl	800aa88 <xQueueGenericSend>

		// ОБРАБАТЫВАЕМ КНОПКУ ОТКЛЮЧЕН�?Я П�?ТАН�?Я
		PowerButtonHandler(&power_butthold, &power_butmem, &switch_off, OFF_delay - 1000);
 8001ba0:	f207 129f 	addw	r2, r7, #415	; 0x19f
 8001ba4:	f207 1195 	addw	r1, r7, #405	; 0x195
 8001ba8:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 8001bac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bb0:	f000 ff44 	bl	8002a3c <PowerButtonHandler>
//		ServiceModeButtonHandler(&service_mem, &service_mem2, &service_hold, service_but_delay);

//		ConnHandler(&con_mem);

/*----------- ЗАП�?СЫВАЕМ СОСТОЯН�?Е КНОПОК В МАСС�?В СОСТОЯН�?Я -----------*/
		if(butmem & STM32_BUTTON_2_Pin){
 8001bb4:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <StartControlTask+0x12e>
			flash_on = 1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
			UTC_show_flag = 1;
 8001bc6:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <StartControlTask+0x2b0>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e002      	b.n	8001bd4 <StartControlTask+0x134>
		}
		else UTC_show_flag = 0;
 8001bce:	4b60      	ldr	r3, [pc, #384]	; (8001d50 <StartControlTask+0x2b0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]

		but_buf[0] = butmem & STM32_BUTTON_1_Pin;						// КНОПКА ПРОКУРТК�? ВН�?З
 8001bd4:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
		but_buf[1] = butmem & STM32_BUTTON_2_Pin;						// КНОПКА ПРОКРУТК�? ВВЕРХ
 8001be2:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
		but_buf[2] = flash_on;											// КНОПКА ЗАП�?С�? ВО ФЛЭШ
 8001bf0:	f897 3204 	ldrb.w	r3, [r7, #516]	; 0x204
 8001bf4:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
		but_buf[3] = switch_off;										// КНОПКА ВЫКЛЮЧЕН�?Я
 8001bf8:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001bfc:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b

		opt_buf[0] = HAL_GPIO_ReadPin(STM32_R_24_NO_GPIO_Port,STM32_R_24_NO_Pin);
 8001c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c04:	4853      	ldr	r0, [pc, #332]	; (8001d54 <StartControlTask+0x2b4>)
 8001c06:	f004 f9e3 	bl	8005fd0 <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	701a      	strb	r2, [r3, #0]
		opt_buf[1] = HAL_GPIO_ReadPin(STM32_R_24_NC_GPIO_Port,STM32_R_24_NC_Pin);
 8001c14:	2140      	movs	r1, #64	; 0x40
 8001c16:	4850      	ldr	r0, [pc, #320]	; (8001d58 <StartControlTask+0x2b8>)
 8001c18:	f004 f9da 	bl	8005fd0 <HAL_GPIO_ReadPin>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	705a      	strb	r2, [r3, #1]
		opt_buf[2] = HAL_GPIO_ReadPin(INPUT_OUTSIDE_1_GPIO_Port,INPUT_OUTSIDE_1_Pin);
 8001c26:	2102      	movs	r1, #2
 8001c28:	484c      	ldr	r0, [pc, #304]	; (8001d5c <StartControlTask+0x2bc>)
 8001c2a:	f004 f9d1 	bl	8005fd0 <HAL_GPIO_ReadPin>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	709a      	strb	r2, [r3, #2]
		opt_buf[3] = HAL_GPIO_ReadPin(INPUT_OUTSIDE_2_GPIO_Port,INPUT_OUTSIDE_2_Pin);
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4848      	ldr	r0, [pc, #288]	; (8001d5c <StartControlTask+0x2bc>)
 8001c3c:	f004 f9c8 	bl	8005fd0 <HAL_GPIO_ReadPin>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	70da      	strb	r2, [r3, #3]
		opt_buf[4] = HAL_GPIO_ReadPin(STM32_Conn_1_GPIO_Port,STM32_Conn_1_Pin);
 8001c4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c4e:	4843      	ldr	r0, [pc, #268]	; (8001d5c <StartControlTask+0x2bc>)
 8001c50:	f004 f9be 	bl	8005fd0 <HAL_GPIO_ReadPin>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	711a      	strb	r2, [r3, #4]
		opt_buf[5] = HAL_GPIO_ReadPin(STM32_Conn_2_GPIO_Port,STM32_Conn_2_Pin);
 8001c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c62:	483e      	ldr	r0, [pc, #248]	; (8001d5c <StartControlTask+0x2bc>)
 8001c64:	f004 f9b4 	bl	8005fd0 <HAL_GPIO_ReadPin>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	715a      	strb	r2, [r3, #5]

/*--------------- ОБРАБОТАВАЕМ и ВЫВОД�?М С�?ГНАЛЫ НА П�?НЫ ---------------*/

		// ПАРС�?М СЛУЖЕБНЫЕ СТРОК�?
		ServiceStringPars((string_t *) &datastring, &active);
 8001c72:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001c76:	4619      	mov	r1, r3
 8001c78:	4839      	ldr	r0, [pc, #228]	; (8001d60 <StartControlTask+0x2c0>)
 8001c7a:	f001 fd1d 	bl	80036b8 <ServiceStringPars>

		// МАСС�?В ЗАДАЕТ СОСТОЯН�?Е РЕЛЕ, ВЗА�?В�?СОСТ�? ОТ ПОЛУЧЕННЫХ ДАННЫХ
		for(uint8_t i = 0; i < 4; i++){
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
 8001c84:	e036      	b.n	8001cf4 <StartControlTask+0x254>
			if(active.RELE[i])
 8001c86:	f897 31f9 	ldrb.w	r3, [r7, #505]	; 0x1f9
 8001c8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c8e:	4413      	add	r3, r2
 8001c90:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d014      	beq.n	8001cc2 <StartControlTask+0x222>
				HAL_GPIO_WritePin(RELE_PORTS[i], RELE_PINS[i], GPIO_PIN_SET);
 8001c98:	f897 31f9 	ldrb.w	r3, [r7, #505]	; 0x1f9
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f853 0c68 	ldr.w	r0, [r3, #-104]
 8001ca8:	f897 31f9 	ldrb.w	r3, [r7, #505]	; 0x1f9
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f004 f9a0 	bl	8006000 <HAL_GPIO_WritePin>
 8001cc0:	e013      	b.n	8001cea <StartControlTask+0x24a>
			else
				HAL_GPIO_WritePin(RELE_PORTS[i], RELE_PINS[i], GPIO_PIN_RESET);
 8001cc2:	f897 31f9 	ldrb.w	r3, [r7, #505]	; 0x1f9
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ccc:	4413      	add	r3, r2
 8001cce:	f853 0c68 	ldr.w	r0, [r3, #-104]
 8001cd2:	f897 31f9 	ldrb.w	r3, [r7, #505]	; 0x1f9
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cdc:	4413      	add	r3, r2
 8001cde:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f004 f98b 	bl	8006000 <HAL_GPIO_WritePin>
		for(uint8_t i = 0; i < 4; i++){
 8001cea:	f897 31f9 	ldrb.w	r3, [r7, #505]	; 0x1f9
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
 8001cf4:	f897 31f9 	ldrb.w	r3, [r7, #505]	; 0x1f9
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d9c4      	bls.n	8001c86 <StartControlTask+0x1e6>
//		xQueueSendToBack(myDispStatQueueHandle, &active.DISP, portMAX_DELAY);

/*------------------------- СОСТАВЛЯЕМ СТРОК�? --------------------------*/

		// ПРОБЕГАЕМ ВСЕ СТРОК�? КНОТРОЛЯ (Ц�?КЛ ТУТ Л�?ШН�?Й, НО ПУСТЬ ПОКА БУДЕТ)
		for(uint8_t i = start_ctrl_string; i < start_serv_string; i++){
 8001cfc:	2395      	movs	r3, #149	; 0x95
 8001cfe:	f887 31f8 	strb.w	r3, [r7, #504]	; 0x1f8
 8001d02:	e28f      	b.n	8002224 <StartControlTask+0x784>
			switch (i){
 8001d04:	f897 31f8 	ldrb.w	r3, [r7, #504]	; 0x1f8
 8001d08:	3b96      	subs	r3, #150	; 0x96
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	f200 8285 	bhi.w	800221a <StartControlTask+0x77a>
 8001d10:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <StartControlTask+0x278>)
 8001d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d16:	bf00      	nop
 8001d18:	08001d2d 	.word	0x08001d2d
 8001d1c:	08001e97 	.word	0x08001e97
 8001d20:	08001fd7 	.word	0x08001fd7
 8001d24:	080020c3 	.word	0x080020c3
 8001d28:	08002143 	.word	0x08002143

		/*- - - - - - - -  Строка_№2_(РЕЛЕ/DC) - - - - - - - -*/
			case ctrl_string_2:

				RB_count = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205

				// ЗАПОЛНЯЕМ СТРОКУ, �?СПОЛЬЗУЯ ШАБЛОН
				for(uint8_t j = 0; j < strlen((const char *)&ctrl_template);j++){
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001d38:	e0a1      	b.n	8001e7e <StartControlTask+0x3de>
 8001d3a:	bf00      	nop
 8001d3c:	0800d9bc 	.word	0x0800d9bc
 8001d40:	0800d9c8 	.word	0x0800d9c8
 8001d44:	0800d9d4 	.word	0x0800d9d4
 8001d48:	0800d9dc 	.word	0x0800d9dc
 8001d4c:	20006b34 	.word	0x20006b34
 8001d50:	200010a4 	.word	0x200010a4
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	20006b38 	.word	0x20006b38

					// ЕСЛ�? С�?МВОЛ ШАБЛОНА 'R', ЗАП�?СЫВАЕМ СОСТОЯН�?Е РЕЛЕ(RB_COUNT ПО СЧЕТУ)
					if(ctrl_template[j] == (uint8_t)'R'){
 8001d64:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001d68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001d72:	2b52      	cmp	r3, #82	; 0x52
 8001d74:	d12f      	bne.n	8001dd6 <StartControlTask+0x336>
						datastring[i].buf[j] = ctrl_template[j];
 8001d76:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001d7a:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001d7e:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
 8001d82:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8001d86:	4403      	add	r3, r0
 8001d88:	f813 4c30 	ldrb.w	r4, [r3, #-48]
 8001d8c:	48d0      	ldr	r0, [pc, #832]	; (80020d0 <StartControlTask+0x630>)
 8001d8e:	4613      	mov	r3, r2
 8001d90:	015b      	lsls	r3, r3, #5
 8001d92:	4413      	add	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4403      	add	r3, r0
 8001d98:	440b      	add	r3, r1
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	701a      	strb	r2, [r3, #0]
						datastring[i].buf[j+1] = active.RELE[RB_count] + 48; 	// + 48 - ПЕРЕВОД�?Т С�?МВОЛ �?З INT В CHAR
 8001d9e:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8001da2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001da6:	4413      	add	r3, r2
 8001da8:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8001dac:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001db0:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
 8001db4:	3101      	adds	r1, #1
 8001db6:	3330      	adds	r3, #48	; 0x30
 8001db8:	b2dc      	uxtb	r4, r3
 8001dba:	48c5      	ldr	r0, [pc, #788]	; (80020d0 <StartControlTask+0x630>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	4413      	add	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4403      	add	r3, r0
 8001dc6:	440b      	add	r3, r1
 8001dc8:	4622      	mov	r2, r4
 8001dca:	701a      	strb	r2, [r3, #0]
						RB_count++;
 8001dcc:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
					}

					// ЕСЛ�? НАХОД�?М КОМБ�?НАЦ�?Ю "DC", ЗАП�?СЫВАЕМ СОСТОЯН�?Е DC
					if(ctrl_template[j] == (uint8_t)'D' && ctrl_template[j+1] == (uint8_t)'C'){
 8001dd6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001dda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dde:	4413      	add	r3, r2
 8001de0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001de4:	2b44      	cmp	r3, #68	; 0x44
 8001de6:	d145      	bne.n	8001e74 <StartControlTask+0x3d4>
 8001de8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001dec:	3301      	adds	r3, #1
 8001dee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001df2:	4413      	add	r3, r2
 8001df4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001df8:	2b43      	cmp	r3, #67	; 0x43
 8001dfa:	d13b      	bne.n	8001e74 <StartControlTask+0x3d4>
						datastring[i].buf[j] = ctrl_template[j];
 8001dfc:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001e00:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001e04:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
 8001e08:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8001e0c:	4403      	add	r3, r0
 8001e0e:	f813 4c30 	ldrb.w	r4, [r3, #-48]
 8001e12:	48af      	ldr	r0, [pc, #700]	; (80020d0 <StartControlTask+0x630>)
 8001e14:	4613      	mov	r3, r2
 8001e16:	015b      	lsls	r3, r3, #5
 8001e18:	4413      	add	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4403      	add	r3, r0
 8001e1e:	440b      	add	r3, r1
 8001e20:	4622      	mov	r2, r4
 8001e22:	701a      	strb	r2, [r3, #0]
						datastring[i].buf[j+1] = ctrl_template[j+1];
 8001e24:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001e2e:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
 8001e32:	3101      	adds	r1, #1
 8001e34:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8001e38:	4403      	add	r3, r0
 8001e3a:	f813 4c30 	ldrb.w	r4, [r3, #-48]
 8001e3e:	48a4      	ldr	r0, [pc, #656]	; (80020d0 <StartControlTask+0x630>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	015b      	lsls	r3, r3, #5
 8001e44:	4413      	add	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4403      	add	r3, r0
 8001e4a:	440b      	add	r3, r1
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	701a      	strb	r2, [r3, #0]
						datastring[i].buf[j+2] = active.DC + 48;				// + 48 - ПЕРЕВОД�?Т С�?МВОЛ �?З INT В CHAR
 8001e50:	f897 31bc 	ldrb.w	r3, [r7, #444]	; 0x1bc
 8001e54:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001e58:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
 8001e5c:	3102      	adds	r1, #2
 8001e5e:	3330      	adds	r3, #48	; 0x30
 8001e60:	b2dc      	uxtb	r4, r3
 8001e62:	489b      	ldr	r0, [pc, #620]	; (80020d0 <StartControlTask+0x630>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	015b      	lsls	r3, r3, #5
 8001e68:	4413      	add	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4403      	add	r3, r0
 8001e6e:	440b      	add	r3, r1
 8001e70:	4622      	mov	r2, r4
 8001e72:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < strlen((const char *)&ctrl_template);j++){
 8001e74:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001e7e:	f897 41f7 	ldrb.w	r4, [r7, #503]	; 0x1f7
 8001e82:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe f9a2 	bl	80001d0 <strlen>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	429c      	cmp	r4, r3
 8001e90:	f4ff af68 	bcc.w	8001d64 <StartControlTask+0x2c4>
					}
				}
				break;
 8001e94:	e1c1      	b.n	800221a <StartControlTask+0x77a>

		/*- - - - - - - - -  Строка_№3_(КНОПК�?) - - - - - - - -*/
			case ctrl_string_3:

				RB_count = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205

				// ЗАПОЛНЯЕМ СТРОКУ, �?СПОЛЬЗУЯ ШАБЛОН
				for(uint8_t j = 0; j < strlen((const char *)&but_template);j++){
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
 8001ea2:	e08c      	b.n	8001fbe <StartControlTask+0x51e>

					// ЕСЛ�? С�?МВОЛ ШАБЛОНА 'B', ЗАП�?СЫВАЕМ СОСТОЯН�?Е КНОПКО ПРОКУРУТК�? �? ФЛЭШ
					if(but_template[j] == (uint8_t)'B'){
 8001ea4:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eac:	4413      	add	r3, r2
 8001eae:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001eb2:	2b42      	cmp	r3, #66	; 0x42
 8001eb4:	d12f      	bne.n	8001f16 <StartControlTask+0x476>
						datastring[i].buf[j] = but_template[j];
 8001eb6:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001eba:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001ebe:	f897 11f6 	ldrb.w	r1, [r7, #502]	; 0x1f6
 8001ec2:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8001ec6:	4403      	add	r3, r0
 8001ec8:	f813 4c3c 	ldrb.w	r4, [r3, #-60]
 8001ecc:	4880      	ldr	r0, [pc, #512]	; (80020d0 <StartControlTask+0x630>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	015b      	lsls	r3, r3, #5
 8001ed2:	4413      	add	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4403      	add	r3, r0
 8001ed8:	440b      	add	r3, r1
 8001eda:	4622      	mov	r2, r4
 8001edc:	701a      	strb	r2, [r3, #0]
						datastring[i].buf[j+1] = but_buf[RB_count] + 48;		// + 48 - ПЕРЕВОД�?Т С�?МВОЛ �?З INT В CHAR
 8001ede:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8001ee2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8001eec:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001ef0:	f897 11f6 	ldrb.w	r1, [r7, #502]	; 0x1f6
 8001ef4:	3101      	adds	r1, #1
 8001ef6:	3330      	adds	r3, #48	; 0x30
 8001ef8:	b2dc      	uxtb	r4, r3
 8001efa:	4875      	ldr	r0, [pc, #468]	; (80020d0 <StartControlTask+0x630>)
 8001efc:	4613      	mov	r3, r2
 8001efe:	015b      	lsls	r3, r3, #5
 8001f00:	4413      	add	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4403      	add	r3, r0
 8001f06:	440b      	add	r3, r1
 8001f08:	4622      	mov	r2, r4
 8001f0a:	701a      	strb	r2, [r3, #0]
						RB_count++;
 8001f0c:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8001f10:	3301      	adds	r3, #1
 8001f12:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
					}
					// ЕСЛ�? НАХОД�?М КОМБ�?НАЦ�?Ю "PB", ЗАП�?СЫВАЕМ СОСТОЯН�?Е КНОПК�? ВЫКЛЮЧЕН�?Я
					if(but_template[j] == (uint8_t)'P' && but_template[j+1] == (uint8_t)'B'){
 8001f16:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001f1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f1e:	4413      	add	r3, r2
 8001f20:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001f24:	2b50      	cmp	r3, #80	; 0x50
 8001f26:	d145      	bne.n	8001fb4 <StartControlTask+0x514>
 8001f28:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f32:	4413      	add	r3, r2
 8001f34:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001f38:	2b42      	cmp	r3, #66	; 0x42
 8001f3a:	d13b      	bne.n	8001fb4 <StartControlTask+0x514>
						datastring[i].buf[j] = but_template[j];
 8001f3c:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001f40:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001f44:	f897 11f6 	ldrb.w	r1, [r7, #502]	; 0x1f6
 8001f48:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8001f4c:	4403      	add	r3, r0
 8001f4e:	f813 4c3c 	ldrb.w	r4, [r3, #-60]
 8001f52:	485f      	ldr	r0, [pc, #380]	; (80020d0 <StartControlTask+0x630>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	015b      	lsls	r3, r3, #5
 8001f58:	4413      	add	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4403      	add	r3, r0
 8001f5e:	440b      	add	r3, r1
 8001f60:	4622      	mov	r2, r4
 8001f62:	701a      	strb	r2, [r3, #0]
						datastring[i].buf[j+1] = but_template[j+1];
 8001f64:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001f6e:	f897 11f6 	ldrb.w	r1, [r7, #502]	; 0x1f6
 8001f72:	3101      	adds	r1, #1
 8001f74:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8001f78:	4403      	add	r3, r0
 8001f7a:	f813 4c3c 	ldrb.w	r4, [r3, #-60]
 8001f7e:	4854      	ldr	r0, [pc, #336]	; (80020d0 <StartControlTask+0x630>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	015b      	lsls	r3, r3, #5
 8001f84:	4413      	add	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4403      	add	r3, r0
 8001f8a:	440b      	add	r3, r1
 8001f8c:	4622      	mov	r2, r4
 8001f8e:	701a      	strb	r2, [r3, #0]
						datastring[i].buf[j+2] = but_buf[3] + 48;		// + 48 - ПЕРЕВОД�?Т С�?МВОЛ �?З INT В CHAR
 8001f90:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8001f94:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001f98:	f897 11f6 	ldrb.w	r1, [r7, #502]	; 0x1f6
 8001f9c:	3102      	adds	r1, #2
 8001f9e:	3330      	adds	r3, #48	; 0x30
 8001fa0:	b2dc      	uxtb	r4, r3
 8001fa2:	484b      	ldr	r0, [pc, #300]	; (80020d0 <StartControlTask+0x630>)
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	015b      	lsls	r3, r3, #5
 8001fa8:	4413      	add	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4403      	add	r3, r0
 8001fae:	440b      	add	r3, r1
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < strlen((const char *)&but_template);j++){
 8001fb4:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
 8001fbe:	f897 41f6 	ldrb.w	r4, [r7, #502]	; 0x1f6
 8001fc2:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe f902 	bl	80001d0 <strlen>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	429c      	cmp	r4, r3
 8001fd0:	f4ff af68 	bcc.w	8001ea4 <StartControlTask+0x404>
//						RB_count++;
					}
				}
				break;
 8001fd4:	e121      	b.n	800221a <StartControlTask+0x77a>

		/*- - - - - - - - Строка_№4_(ТЕМПЕРАТУРА) - - - - - - -*/
			case ctrl_string_4:

				// СТАТУС СТРОК�? = 1 - (ТОЛЬКО ДЛЯ ОТЛАДК�?)
				datastring[i].status = 1;
 8001fd6:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001fda:	493d      	ldr	r1, [pc, #244]	; (80020d0 <StartControlTask+0x630>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	015b      	lsls	r3, r3, #5
 8001fe0:	4413      	add	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	440b      	add	r3, r1
 8001fe6:	333d      	adds	r3, #61	; 0x3d
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
				adc_count = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
				adc_str_count = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa

				// СЧ�?ТЫВАЕМ ПОКА ЧТО ДВА КАНАЛА АЦП
				while(adc_count < 5){
 8001ff8:	e05e      	b.n	80020b8 <StartControlTask+0x618>

					// ЗАП�?СЫВАЕМ ЗНАК ТЕМПЕРАТУРЫ
					datastring[i].buf[adc_str_count] = (uint8_t)'T';
 8001ffa:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8001ffe:	f897 11fa 	ldrb.w	r1, [r7, #506]	; 0x1fa
 8002002:	4833      	ldr	r0, [pc, #204]	; (80020d0 <StartControlTask+0x630>)
 8002004:	4613      	mov	r3, r2
 8002006:	015b      	lsls	r3, r3, #5
 8002008:	4413      	add	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4403      	add	r3, r0
 800200e:	440b      	add	r3, r1
 8002010:	2254      	movs	r2, #84	; 0x54
 8002012:	701a      	strb	r2, [r3, #0]

					adc_str_count++;
 8002014:	f897 31fa 	ldrb.w	r3, [r7, #506]	; 0x1fa
 8002018:	3301      	adds	r3, #1
 800201a:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa

					// ЕСЛ�? ОПРАШ�?ВАЕМ ДАТЧ�?К ТЕМПЕРАТУРЫ STM, СЧ�?ТАЕМ ЕГО ПО СПЕЦ�?АЛЬНОЙ
					// �? ПЕРЕВОД�?М В СТРОКУ
					// �?НАЧЕ ПРОСТО ВЫВОД�?М ЗНАЧЕН�?Е ТЕМПЕРАТУРЫ
					if(!adc_count){
 800201e:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10d      	bne.n	8002042 <StartControlTask+0x5a2>
						itoa(TemperatureGetData(ADC_val[0]),(char *)&ADC_char,10);
 8002026:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <StartControlTask+0x634>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fca2 	bl	8002974 <TemperatureGetData>
 8002030:	4603      	mov	r3, r0
 8002032:	4618      	mov	r0, r3
 8002034:	f107 0320 	add.w	r3, r7, #32
 8002038:	220a      	movs	r2, #10
 800203a:	4619      	mov	r1, r3
 800203c:	f00a fb72 	bl	800c724 <itoa>
 8002040:	e00b      	b.n	800205a <StartControlTask+0x5ba>
					}
					else itoa(ADC_val[adc_count],(char *)&ADC_char,10);
 8002042:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 8002046:	4a23      	ldr	r2, [pc, #140]	; (80020d4 <StartControlTask+0x634>)
 8002048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800204c:	4618      	mov	r0, r3
 800204e:	f107 0320 	add.w	r3, r7, #32
 8002052:	220a      	movs	r2, #10
 8002054:	4619      	mov	r1, r3
 8002056:	f00a fb65 	bl	800c724 <itoa>

					// ЗАП�?СЫВАЕМ СТРОКУ ЗНАЧЕН�?Я АЦП/ТЕМПЕРАТУРЫ В СТРОКУ
					for(uint8_t j = 0; j < strlen((const char*)&ADC_char); j++){
 800205a:	2300      	movs	r3, #0
 800205c:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
 8002060:	e01b      	b.n	800209a <StartControlTask+0x5fa>
						datastring[i].buf[adc_str_count] = ADC_char[j];
 8002062:	f897 31f5 	ldrb.w	r3, [r7, #501]	; 0x1f5
 8002066:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 800206a:	f897 11fa 	ldrb.w	r1, [r7, #506]	; 0x1fa
 800206e:	f107 0020 	add.w	r0, r7, #32
 8002072:	5cc4      	ldrb	r4, [r0, r3]
 8002074:	4816      	ldr	r0, [pc, #88]	; (80020d0 <StartControlTask+0x630>)
 8002076:	4613      	mov	r3, r2
 8002078:	015b      	lsls	r3, r3, #5
 800207a:	4413      	add	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4403      	add	r3, r0
 8002080:	440b      	add	r3, r1
 8002082:	4622      	mov	r2, r4
 8002084:	701a      	strb	r2, [r3, #0]
						adc_str_count++;
 8002086:	f897 31fa 	ldrb.w	r3, [r7, #506]	; 0x1fa
 800208a:	3301      	adds	r3, #1
 800208c:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa
					for(uint8_t j = 0; j < strlen((const char*)&ADC_char); j++){
 8002090:	f897 31f5 	ldrb.w	r3, [r7, #501]	; 0x1f5
 8002094:	3301      	adds	r3, #1
 8002096:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
 800209a:	f897 41f5 	ldrb.w	r4, [r7, #501]	; 0x1f5
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe f894 	bl	80001d0 <strlen>
 80020a8:	4603      	mov	r3, r0
 80020aa:	429c      	cmp	r4, r3
 80020ac:	d3d9      	bcc.n	8002062 <StartControlTask+0x5c2>
					}
					adc_count++;
 80020ae:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 80020b2:	3301      	adds	r3, #1
 80020b4:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
				while(adc_count < 5){
 80020b8:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d99c      	bls.n	8001ffa <StartControlTask+0x55a>
				}
				break;
 80020c0:	e0ab      	b.n	800221a <StartControlTask+0x77a>

			/*- - - - - - - - - Строка_№5_(ОПТОПАРЫ) - - - - - - - -*/
				case ctrl_string_5:

					adc_count = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
					adc_str_count = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa

					while(adc_str_count < 6){
 80020ce:	e033      	b.n	8002138 <StartControlTask+0x698>
 80020d0:	20006b38 	.word	0x20006b38
 80020d4:	20006b24 	.word	0x20006b24
						datastring[i].buf[adc_count] = (uint8_t)'O';
 80020d8:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 80020dc:	f897 11fb 	ldrb.w	r1, [r7, #507]	; 0x1fb
 80020e0:	48cf      	ldr	r0, [pc, #828]	; (8002420 <StartControlTask+0x980>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	015b      	lsls	r3, r3, #5
 80020e6:	4413      	add	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4403      	add	r3, r0
 80020ec:	440b      	add	r3, r1
 80020ee:	224f      	movs	r2, #79	; 0x4f
 80020f0:	701a      	strb	r2, [r3, #0]
						adc_count++;
 80020f2:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 80020f6:	3301      	adds	r3, #1
 80020f8:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
						datastring[i].buf[adc_count] = opt_buf[adc_str_count] + 48;
 80020fc:	f897 31fa 	ldrb.w	r3, [r7, #506]	; 0x1fa
 8002100:	f107 020c 	add.w	r2, r7, #12
 8002104:	5cd3      	ldrb	r3, [r2, r3]
 8002106:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 800210a:	f897 11fb 	ldrb.w	r1, [r7, #507]	; 0x1fb
 800210e:	3330      	adds	r3, #48	; 0x30
 8002110:	b2dc      	uxtb	r4, r3
 8002112:	48c3      	ldr	r0, [pc, #780]	; (8002420 <StartControlTask+0x980>)
 8002114:	4613      	mov	r3, r2
 8002116:	015b      	lsls	r3, r3, #5
 8002118:	4413      	add	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4403      	add	r3, r0
 800211e:	440b      	add	r3, r1
 8002120:	4622      	mov	r2, r4
 8002122:	701a      	strb	r2, [r3, #0]
						adc_count++;
 8002124:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 8002128:	3301      	adds	r3, #1
 800212a:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
						adc_str_count++;
 800212e:	f897 31fa 	ldrb.w	r3, [r7, #506]	; 0x1fa
 8002132:	3301      	adds	r3, #1
 8002134:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa
					while(adc_str_count < 6){
 8002138:	f897 31fa 	ldrb.w	r3, [r7, #506]	; 0x1fa
 800213c:	2b05      	cmp	r3, #5
 800213e:	d9cb      	bls.n	80020d8 <StartControlTask+0x638>
					}
					break;
 8002140:	e06b      	b.n	800221a <StartControlTask+0x77a>
			/*- - - - - - - - - Строка_№6_(UP_time) - - - - - - - -*/
				case ctrl_string_6:
					adc_count = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
					datastring[i].buf[adc_count] = (uint8_t)'U';
 8002148:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 800214c:	f897 11fb 	ldrb.w	r1, [r7, #507]	; 0x1fb
 8002150:	48b3      	ldr	r0, [pc, #716]	; (8002420 <StartControlTask+0x980>)
 8002152:	4613      	mov	r3, r2
 8002154:	015b      	lsls	r3, r3, #5
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4403      	add	r3, r0
 800215c:	440b      	add	r3, r1
 800215e:	2255      	movs	r2, #85	; 0x55
 8002160:	701a      	strb	r2, [r3, #0]
					adc_count++;
 8002162:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 8002166:	3301      	adds	r3, #1
 8002168:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
					datastring[i].buf[adc_count] = (uint8_t)'P';
 800216c:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8002170:	f897 11fb 	ldrb.w	r1, [r7, #507]	; 0x1fb
 8002174:	48aa      	ldr	r0, [pc, #680]	; (8002420 <StartControlTask+0x980>)
 8002176:	4613      	mov	r3, r2
 8002178:	015b      	lsls	r3, r3, #5
 800217a:	4413      	add	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4403      	add	r3, r0
 8002180:	440b      	add	r3, r1
 8002182:	2250      	movs	r2, #80	; 0x50
 8002184:	701a      	strb	r2, [r3, #0]
					adc_count++;
 8002186:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 800218a:	3301      	adds	r3, #1
 800218c:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
					datastring[i].buf[adc_count] = (uint8_t)'T';
 8002190:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 8002194:	f897 11fb 	ldrb.w	r1, [r7, #507]	; 0x1fb
 8002198:	48a1      	ldr	r0, [pc, #644]	; (8002420 <StartControlTask+0x980>)
 800219a:	4613      	mov	r3, r2
 800219c:	015b      	lsls	r3, r3, #5
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4403      	add	r3, r0
 80021a4:	440b      	add	r3, r1
 80021a6:	2254      	movs	r2, #84	; 0x54
 80021a8:	701a      	strb	r2, [r3, #0]
					adc_count++;
 80021aa:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 80021ae:	3301      	adds	r3, #1
 80021b0:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb

					itoa(uptime_tick,up_time_char,10);
 80021b4:	4b9b      	ldr	r3, [pc, #620]	; (8002424 <StartControlTask+0x984>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	220a      	movs	r2, #10
 80021c0:	4619      	mov	r1, r3
 80021c2:	f00a faaf 	bl	800c724 <itoa>

					for(uint8_t j = 0; j < strlen(up_time_char); j++){
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
 80021cc:	e01b      	b.n	8002206 <StartControlTask+0x766>
						datastring[i].buf[adc_count] = up_time_char[j];
 80021ce:	f897 31f4 	ldrb.w	r3, [r7, #500]	; 0x1f4
 80021d2:	f897 21f8 	ldrb.w	r2, [r7, #504]	; 0x1f8
 80021d6:	f897 11fb 	ldrb.w	r1, [r7, #507]	; 0x1fb
 80021da:	f107 0014 	add.w	r0, r7, #20
 80021de:	5cc4      	ldrb	r4, [r0, r3]
 80021e0:	488f      	ldr	r0, [pc, #572]	; (8002420 <StartControlTask+0x980>)
 80021e2:	4613      	mov	r3, r2
 80021e4:	015b      	lsls	r3, r3, #5
 80021e6:	4413      	add	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4403      	add	r3, r0
 80021ec:	440b      	add	r3, r1
 80021ee:	4622      	mov	r2, r4
 80021f0:	701a      	strb	r2, [r3, #0]
						adc_count++;
 80021f2:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 80021f6:	3301      	adds	r3, #1
 80021f8:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
					for(uint8_t j = 0; j < strlen(up_time_char); j++){
 80021fc:	f897 31f4 	ldrb.w	r3, [r7, #500]	; 0x1f4
 8002200:	3301      	adds	r3, #1
 8002202:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
 8002206:	f897 41f4 	ldrb.w	r4, [r7, #500]	; 0x1f4
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4618      	mov	r0, r3
 8002210:	f7fd ffde 	bl	80001d0 <strlen>
 8002214:	4603      	mov	r3, r0
 8002216:	429c      	cmp	r4, r3
 8002218:	d3d9      	bcc.n	80021ce <StartControlTask+0x72e>
		for(uint8_t i = start_ctrl_string; i < start_serv_string; i++){
 800221a:	f897 31f8 	ldrb.w	r3, [r7, #504]	; 0x1f8
 800221e:	3301      	adds	r3, #1
 8002220:	f887 31f8 	strb.w	r3, [r7, #504]	; 0x1f8
 8002224:	f897 31f8 	ldrb.w	r3, [r7, #504]	; 0x1f8
 8002228:	2b9a      	cmp	r3, #154	; 0x9a
 800222a:	f67f ad6b 	bls.w	8001d04 <StartControlTask+0x264>
					}
			}
		}

/*-------------------- СОБ�?РАЕМ МАСС�?В ДЛЯ ОТПРАВК�? ----------------------*/
		sB_pointer = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202

		// ВНАЧАЛЕ БЛОК КОДА ПЕРЕД Ц�?КЛОМ ЗАП�?СЫВАЕТ СТАРОТОВУЮ КОМБ�?НАЦ�?Ю В ОТПРАВЛЯЕМЫЙ БУФЕР
		sendBuf[sB_pointer] = 'P';
 8002234:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 8002238:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800223c:	2150      	movs	r1, #80	; 0x50
 800223e:	54d1      	strb	r1, [r2, r3]
		sB_pointer++;
 8002240:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 8002244:	3301      	adds	r3, #1
 8002246:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
		sendBuf[sB_pointer] = 'S';
 800224a:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800224e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002252:	2153      	movs	r1, #83	; 0x53
 8002254:	54d1      	strb	r1, [r2, r3]
		sB_pointer++;
 8002256:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800225a:	3301      	adds	r3, #1
 800225c:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
		sendBuf[sB_pointer] = 'D';
 8002260:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 8002264:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002268:	2144      	movs	r1, #68	; 0x44
 800226a:	54d1      	strb	r1, [r2, r3]
		sB_pointer++;
 800226c:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 8002270:	3301      	adds	r3, #1
 8002272:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
		sendBuf[sB_pointer] = ';';
 8002276:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800227a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800227e:	213b      	movs	r1, #59	; 0x3b
 8002280:	54d1      	strb	r1, [r2, r3]
		sB_pointer++;
 8002282:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 8002286:	3301      	adds	r3, #1
 8002288:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202

		crc_count = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206

		// Ц�?КЛЫ ЗАП�?СЫВАЕТ КАЖДУЮ СТРОКУ КОНТРОЛЯ В МАСС�?В �? ПР�?СВАЕВАЕТ СТРОКЕ НОВЫЙ НОМЕР
		for(uint8_t i = start_ctrl_string; i < start_serv_string; i++){
 8002292:	2395      	movs	r3, #149	; 0x95
 8002294:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3
 8002298:	e079      	b.n	800238e <StartControlTask+0x8ee>
			sB_counter = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201

			// ЗАП�?СЫВАЕМ НОМЕР, Т.К СОСТО�?Т �?З 2-Х Ц�?ФР, А В МОЕМ СЛУЧАЕ
			// �?СПОЛЬЗУЮТСЯ ОДНОЗНАЧНЫЕ Ч�?СЛА, ЗАП�?СЫВАЕМ ПЕРВЫМ 0
			sendBuf[sB_pointer] = '0';
 80022a0:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80022a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022a8:	2130      	movs	r1, #48	; 0x30
 80022aa:	54d1      	strb	r1, [r2, r3]

			// ЭТОТ СЧЕТЧ�?К ОТСЧ�?ТЫВАЕТ КОЛ�?ЧЕСТВО С�?МВОЛОВ ДЛЯ РАСЧЕТА CRC
			crc_count++;
 80022ac:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80022b0:	3301      	adds	r3, #1
 80022b2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206


			sB_pointer++;
 80022b6:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80022ba:	3301      	adds	r3, #1
 80022bc:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202

			// ЗАП�?СЫВАЕМ НОМЕР СТРОК�?, НАЧ�?НАЕТСЯ С 1 �? ДО 4
			sendBuf[sB_pointer] = (i - start_ctrl_string + 1) + 48; 		// + 48 - ПЕРЕВОД�?Т �?З INT В CHAR
 80022c0:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80022c4:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 80022c8:	3a64      	subs	r2, #100	; 0x64
 80022ca:	b2d1      	uxtb	r1, r2
 80022cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022d0:	54d1      	strb	r1, [r2, r3]
			crc_count++;
 80022d2:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80022d6:	3301      	adds	r3, #1
 80022d8:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
			sB_pointer++;
 80022dc:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80022e0:	3301      	adds	r3, #1
 80022e2:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202

			// ПОСЛЕ НОМЕРА СТРОК�? ЗАП�?ШЕМ ';'
			sendBuf[sB_pointer] = ';';
 80022e6:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80022ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022ee:	213b      	movs	r1, #59	; 0x3b
 80022f0:	54d1      	strb	r1, [r2, r3]
			crc_count++;
 80022f2:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80022f6:	3301      	adds	r3, #1
 80022f8:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
			sB_pointer++;
 80022fc:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 8002300:	3301      	adds	r3, #1
 8002302:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202

			// В ДАННОМ Ц�?КЛЕ ЗАП�?СЫВАЕТСЯ СОДЕРЖ�?МОЕ СТРОК�?, ПОКА СТРОКА НЕ ЗАКОНЧ�?ТСЯ
			while(datastring[i].buf[sB_counter] != '\0'){
 8002306:	e01f      	b.n	8002348 <StartControlTask+0x8a8>
				sendBuf[sB_pointer] = datastring[i].buf[sB_counter];
 8002308:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 800230c:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 8002310:	f8b7 1202 	ldrh.w	r1, [r7, #514]	; 0x202
 8002314:	4c42      	ldr	r4, [pc, #264]	; (8002420 <StartControlTask+0x980>)
 8002316:	4613      	mov	r3, r2
 8002318:	015b      	lsls	r3, r3, #5
 800231a:	4413      	add	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4423      	add	r3, r4
 8002320:	4403      	add	r3, r0
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	545a      	strb	r2, [r3, r1]
				crc_count++;
 800232a:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800232e:	3301      	adds	r3, #1
 8002330:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
				sB_counter++;
 8002334:	f897 3201 	ldrb.w	r3, [r7, #513]	; 0x201
 8002338:	3301      	adds	r3, #1
 800233a:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
				sB_pointer++;
 800233e:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 8002342:	3301      	adds	r3, #1
 8002344:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
			while(datastring[i].buf[sB_counter] != '\0'){
 8002348:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 800234c:	f897 1201 	ldrb.w	r1, [r7, #513]	; 0x201
 8002350:	4833      	ldr	r0, [pc, #204]	; (8002420 <StartControlTask+0x980>)
 8002352:	4613      	mov	r3, r2
 8002354:	015b      	lsls	r3, r3, #5
 8002356:	4413      	add	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4403      	add	r3, r0
 800235c:	440b      	add	r3, r1
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1d1      	bne.n	8002308 <StartControlTask+0x868>
			}

			// ОТДЕЛЯЕМ СТРКОУ ЗНАКОМ ';'
			sendBuf[sB_pointer] = ';';
 8002364:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 8002368:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800236c:	213b      	movs	r1, #59	; 0x3b
 800236e:	54d1      	strb	r1, [r2, r3]
			crc_count++;
 8002370:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8002374:	3301      	adds	r3, #1
 8002376:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
			sB_pointer++;
 800237a:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800237e:	3301      	adds	r3, #1
 8002380:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
		for(uint8_t i = start_ctrl_string; i < start_serv_string; i++){
 8002384:	f897 31f3 	ldrb.w	r3, [r7, #499]	; 0x1f3
 8002388:	3301      	adds	r3, #1
 800238a:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3
 800238e:	f897 31f3 	ldrb.w	r3, [r7, #499]	; 0x1f3
 8002392:	2b9a      	cmp	r3, #154	; 0x9a
 8002394:	d981      	bls.n	800229a <StartControlTask+0x7fa>
		}

		// КОГДА ВСЕ СТРОК�? ПЕРЕП�?САНЫ, ПОСЛЕ Н�?Х ЗАП�?СЫВАЕМ СТРОКУ "CRC"
		sendBuf[sB_pointer] = 'C';
 8002396:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800239a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800239e:	2143      	movs	r1, #67	; 0x43
 80023a0:	54d1      	strb	r1, [r2, r3]
		sB_pointer++;
 80023a2:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80023a6:	3301      	adds	r3, #1
 80023a8:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
		sendBuf[sB_pointer] = 'R';
 80023ac:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80023b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80023b4:	2152      	movs	r1, #82	; 0x52
 80023b6:	54d1      	strb	r1, [r2, r3]
		sB_pointer++;
 80023b8:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80023bc:	3301      	adds	r3, #1
 80023be:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
		sendBuf[sB_pointer] = 'C';
 80023c2:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80023c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80023ca:	2143      	movs	r1, #67	; 0x43
 80023cc:	54d1      	strb	r1, [r2, r3]
		sB_pointer++;
 80023ce:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80023d2:	3301      	adds	r3, #1
 80023d4:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
		sendBuf[sB_pointer] = ';';
 80023d8:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80023dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80023e0:	213b      	movs	r1, #59	; 0x3b
 80023e2:	54d1      	strb	r1, [r2, r3]
		sB_pointer++;
 80023e4:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80023e8:	3301      	adds	r3, #1
 80023ea:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202

		// РАСЧ�?ТЫВАЕМ CRC32
		// *примечание_ДЛЯ РАСЧЕТА CRC32 В ДАННОМ СЛУЧАЕ НЕ �?СПОЛЬЗУЕТСЯ ОТДЕЛЬНЫЙ БУФЕР
		// 	ДАННЫЕ БЕРУТСЯ �?З ОТПРАВЛЯЕМОГО БУФЕРА, НО НЕ СНАЧАЛА, А ПРОПУСКАЯ 4 С�?МВОЛА "PSD;"
		//	�? ЗАКАНЧ�?ВАЯ ДО "СRC", Т.К �?СПОЛЬЗУЕТСЯ СЧЕТЧ�?К С�?МВОЛОВ crc_count
		crc32 = Crc32((const unsigned char *) &sendBuf + 4, crc_count);
 80023ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f2:	3304      	adds	r3, #4
 80023f4:	f8b7 2206 	ldrh.w	r2, [r7, #518]	; 0x206
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fcfc 	bl	8000df8 <Crc32>
 8002400:	4603      	mov	r3, r0
 8002402:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4

		// ПЕРЕВОД�?М ЗНАЧЕН�?Е СRC32 В СТРОКУ (В HEX)
		itoa(crc32, (char *) &crc_hex_buf, 16);
 8002406:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800240a:	2210      	movs	r2, #16
 800240c:	4619      	mov	r1, r3
 800240e:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 8002412:	f00a f987 	bl	800c724 <itoa>

		// ЗАП�?СЫВАЕМ ПОС�?МВОЛЬНО СТРОКОВОЕ ЗНАЧЕН�?Е CRC32
		for(uint8_t i = 0; i < strlen((const char *) &crc_hex_buf); i++){
 8002416:	2300      	movs	r3, #0
 8002418:	f887 31f2 	strb.w	r3, [r7, #498]	; 0x1f2
 800241c:	e01f      	b.n	800245e <StartControlTask+0x9be>
 800241e:	bf00      	nop
 8002420:	20006b38 	.word	0x20006b38
 8002424:	20001284 	.word	0x20001284

			// Т.К itoa ПЕРЕВОД�?Т В HEX �?СПОЛЬЗУЯ МАЛЕНЬК�?Е БУКВЫ, МЕНЯЕМ �?Х НА БОЛЬШ�?Е. см_ФУНКУЮ BigLatter()
			sendBuf[sB_pointer] = BigLatter(crc_hex_buf[i]);
 8002428:	f897 31f2 	ldrb.w	r3, [r7, #498]	; 0x1f2
 800242c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002430:	4413      	add	r3, r2
 8002432:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002436:	f8b7 4202 	ldrh.w	r4, [r7, #514]	; 0x202
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fa6e 	bl	800291c <BigLatter>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002448:	551a      	strb	r2, [r3, r4]
			sB_pointer++;
 800244a:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800244e:	3301      	adds	r3, #1
 8002450:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
		for(uint8_t i = 0; i < strlen((const char *) &crc_hex_buf); i++){
 8002454:	f897 31f2 	ldrb.w	r3, [r7, #498]	; 0x1f2
 8002458:	3301      	adds	r3, #1
 800245a:	f887 31f2 	strb.w	r3, [r7, #498]	; 0x1f2
 800245e:	f897 41f2 	ldrb.w	r4, [r7, #498]	; 0x1f2
 8002462:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002466:	4618      	mov	r0, r3
 8002468:	f7fd feb2 	bl	80001d0 <strlen>
 800246c:	4603      	mov	r3, r0
 800246e:	429c      	cmp	r4, r3
 8002470:	d3da      	bcc.n	8002428 <StartControlTask+0x988>
		}

		// ЗАВЕРШАЕМ ПАКЕТ ';'
		sendBuf[sB_pointer] = ';';
 8002472:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 8002476:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800247a:	213b      	movs	r1, #59	; 0x3b
 800247c:	54d1      	strb	r1, [r2, r3]
		sB_pointer++;
 800247e:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 8002482:	3301      	adds	r3, #1
 8002484:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202

		// ОТПРАВЛЯЕМ ПАКЕТ
		if(HAL_GetTick() - transmit_timer > transmit_time){
 8002488:	f002 f9ba 	bl	8004800 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002498:	d90c      	bls.n	80024b4 <StartControlTask+0xa14>
			transmit_timer = HAL_GetTick();
 800249a:	f002 f9b1 	bl	8004800 <HAL_GetTick>
 800249e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
			HAL_UART_Transmit(&huart3,(uint8_t *) &sendBuf, sB_pointer, 0xFFFF); // ОТПРАВЛЯЕМ МАСС�?В
 80024a2:	f8b7 2202 	ldrh.w	r2, [r7, #514]	; 0x202
 80024a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80024aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ae:	480d      	ldr	r0, [pc, #52]	; (80024e4 <StartControlTask+0xa44>)
 80024b0:	f005 f917 	bl	80076e2 <HAL_UART_Transmit>
		}

		if(HAL_GetTick() - transmit_timer > transmit_time * 3){
 80024b4:	f002 f9a4 	bl	8004800 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d902      	bls.n	80024ce <StartControlTask+0xa2e>
			flash_on = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
/*------------ ОБРАБАТЫВАЕМ КНОПК�? ВЫКЛЮЧЕН�?Я �? ЗАП�?С�? FLASH --------------*/
//		if(but_buf[3] && (HAL_GetTick() - power_butthold > OFF_delay)){
//			PowerOFF(&active.DISP);												// КНОПКА ВЫКЛЮЧЕН�?Я
//		}

		if(but_buf[2]) FlashWriteStart();										// КНОПКА ФЛЭШ (ПОКА НЕ ГОТОВ)
 80024ce:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <StartControlTask+0xa3a>
 80024d6:	f000 fa19 	bl	800290c <FlashWriteStart>

		osDelay(50);
 80024da:	2032      	movs	r0, #50	; 0x32
 80024dc:	f008 f8ac 	bl	800a638 <osDelay>
		xQueueReceive(myCursorQueueHandle,&cursor, 10);
 80024e0:	f7ff bb45 	b.w	8001b6e <StartControlTask+0xce>
 80024e4:	200097b4 	.word	0x200097b4

080024e8 <StartLEDsTask>:
 *				 	  ЗАДАЧА СВЕТОД�?ОДОВ		  		   *
 *														   *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* USER CODE END Header_StartLEDsTask */
void StartLEDsTask(void const * argument)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b0a8      	sub	sp, #160	; 0xa0
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDsTask */
	RGB_status RGB[3];											// RGB НА Л�?ЦЕВОЙ ПАНЕЛ�?

	// УСТАНАВЛ�?ВАЕМ П�?НЫ �? ПОРТЫ СВЕТОД�?ОДОВ
	//    *�?СПОЛЬЗУЕТСЯ НЕ const, ЧТО НЕ ЕСТЬ ХОРОШО, НО ПРОБЛЕМ БЫТЬ НЕ ДОЛЖНО
	RGB[0].RED.LED_port = RED_232_GPIO_Port;
 80024f0:	4b5f      	ldr	r3, [pc, #380]	; (8002670 <StartLEDsTask+0x188>)
 80024f2:	60fb      	str	r3, [r7, #12]
	RGB[0].RED.LED_pin = RED_232_Pin;
 80024f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f8:	823b      	strh	r3, [r7, #16]
	RGB[0].GREEN.LED_port = GREEN_232_GPIO_Port;
 80024fa:	4b5d      	ldr	r3, [pc, #372]	; (8002670 <StartLEDsTask+0x188>)
 80024fc:	61fb      	str	r3, [r7, #28]
	RGB[0].GREEN.LED_pin = GREEN_232_Pin;
 80024fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002502:	843b      	strh	r3, [r7, #32]
	RGB[0].BLUE.LED_port = BLUE_232_GPIO_Port;
 8002504:	4b5a      	ldr	r3, [pc, #360]	; (8002670 <StartLEDsTask+0x188>)
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
	RGB[0].BLUE.LED_pin = BLUE_232_Pin;
 8002508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800250c:	863b      	strh	r3, [r7, #48]	; 0x30

	RGB[1].RED.LED_port = RED_422_GPIO_Port;
 800250e:	4b59      	ldr	r3, [pc, #356]	; (8002674 <StartLEDsTask+0x18c>)
 8002510:	63fb      	str	r3, [r7, #60]	; 0x3c
	RGB[1].RED.LED_pin = RED_422_Pin;
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	RGB[1].GREEN.LED_port = GREEN_422_GPIO_Port;
 8002518:	4b56      	ldr	r3, [pc, #344]	; (8002674 <StartLEDsTask+0x18c>)
 800251a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RGB[1].GREEN.LED_pin = GREEN_422_Pin;
 800251c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002520:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	RGB[1].BLUE.LED_port = BLUE_422_GPIO_Port;
 8002524:	4b54      	ldr	r3, [pc, #336]	; (8002678 <StartLEDsTask+0x190>)
 8002526:	65fb      	str	r3, [r7, #92]	; 0x5c
	RGB[1].BLUE.LED_pin = BLUE_422_Pin;
 8002528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

	RGB[2].RED.LED_port = RED_485_GPIO_Port;
 8002530:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <StartLEDsTask+0x188>)
 8002532:	66fb      	str	r3, [r7, #108]	; 0x6c
	RGB[2].RED.LED_pin = RED_485_Pin;
 8002534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002538:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	RGB[2].GREEN.LED_port = GREEN_485_GPIO_Port;
 800253c:	4b4f      	ldr	r3, [pc, #316]	; (800267c <StartLEDsTask+0x194>)
 800253e:	67fb      	str	r3, [r7, #124]	; 0x7c
	RGB[2].GREEN.LED_pin = GREEN_485_Pin;
 8002540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002544:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	RGB[2].BLUE.LED_port = BLUE_485_GPIO_Port;
 8002548:	4b4c      	ldr	r3, [pc, #304]	; (800267c <StartLEDsTask+0x194>)
 800254a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RGB[2].BLUE.LED_pin = BLUE_485_Pin;
 800254e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002552:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

	// УКАЗАТЕЛЬ НА ОТДЕЛЬНЫЙ СВЕТОД�?ОД С ЕГО ДАННЫМ�? (РЕЖ�?МОМ М�?ГАН�?Я, П�?НОМ)
	led_status *oneLED;

	// ЗАДЕРЖКА ПР�? ВКЛЮЧЕН�?�? ПОКА �?Н�?Ц�?АЛ�?З�?РУЕТСЯ Д�?СПЛЕЙ
	osDelay(500);
 8002556:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800255a:	f008 f86d 	bl	800a638 <osDelay>

	for(;;)
	{
		// ПАРС�?М СТРОКУ СВЕТОД�?ОДОВ
		LEDStringPars((string_t *)&datastring,(RGB_status *) &RGB);
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	4619      	mov	r1, r3
 8002564:	4846      	ldr	r0, [pc, #280]	; (8002680 <StartLEDsTask+0x198>)
 8002566:	f001 f849 	bl	80035fc <LEDStringPars>



		// ОБРАБАТЫВАЕМ КАЖДЫЙ RGB (3)
		for(uint8_t i = 0; i < 3; i++){
 800256a:	2300      	movs	r3, #0
 800256c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8002570:	e076      	b.n	8002660 <StartLEDsTask+0x178>

			// ОБРАБАТЫВАЕМ КАЖДЫЙ СВЕТОД�?ОД В RGB
			for(uint8_t j = 0; j < 3; j++){
 8002572:	2300      	movs	r3, #0
 8002574:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8002578:	e069      	b.n	800264e <StartLEDsTask+0x166>

				// ВЫБ�?РАЕМ СВЕТОД�?ОД УКАЗЫВАЯ НА НУЖНЫЙ
				switch (j){
 800257a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800257e:	2b01      	cmp	r3, #1
 8002580:	d00f      	beq.n	80025a2 <StartLEDsTask+0xba>
 8002582:	2b02      	cmp	r3, #2
 8002584:	d01a      	beq.n	80025bc <StartLEDsTask+0xd4>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d125      	bne.n	80025d6 <StartLEDsTask+0xee>
				case 0: oneLED = &RGB[i].RED;   break;
 800258a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 800258e:	f107 0108 	add.w	r1, r7, #8
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	440b      	add	r3, r1
 800259c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025a0:	e019      	b.n	80025d6 <StartLEDsTask+0xee>
				case 1: oneLED = &RGB[i].BLUE;  break;
 80025a2:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80025a6:	f107 0108 	add.w	r1, r7, #8
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	3320      	adds	r3, #32
 80025b4:	440b      	add	r3, r1
 80025b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025ba:	e00c      	b.n	80025d6 <StartLEDsTask+0xee>
				case 2: oneLED = &RGB[i].GREEN; break;
 80025bc:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80025c0:	f107 0108 	add.w	r1, r7, #8
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	3310      	adds	r3, #16
 80025ce:	440b      	add	r3, r1
 80025d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025d4:	bf00      	nop
				}

				// УСТАНАВЛ�?ВАЕМ РЕЖ�?М М�?ГАН�?Я СВЕТОД�?ОДОМ
				//    *�?СПОЛЬЗУЕТ uint32_t ДЛЯ ХРАНЕН�?Я ПЕРЕМЕННОЙ ВРЕМЕН�? ДЛЯ КАЖДОГО СВЕТОД�?ОДА
				//     МОЖЕТ БЫТЬ ОПТ�?М�?З�?РОВАНО ПО ПАМЯТ�? ДЛЯ КАЖДОГО РЕЖ�?МА, ЧТО С�?ЛЬНО УМЕНЬШ�?Т ПАМЯТЬ
				switch (oneLED->LED_status)
 80025d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	3b30      	subs	r3, #48	; 0x30
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d830      	bhi.n	8002644 <StartLEDsTask+0x15c>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <StartLEDsTask+0x100>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	080025fd 	.word	0x080025fd
 80025ec:	0800260b 	.word	0x0800260b
 80025f0:	08002619 	.word	0x08002619
 80025f4:	08002627 	.word	0x08002627
 80025f8:	08002635 	.word	0x08002635
				{
				case (uint8_t)'0': LED_control(oneLED,0,1); 	break;
 80025fc:	2201      	movs	r2, #1
 80025fe:	2100      	movs	r1, #0
 8002600:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002604:	f000 fc50 	bl	8002ea8 <LED_control>
 8002608:	e01c      	b.n	8002644 <StartLEDsTask+0x15c>
				case (uint8_t)'1': LED_control(oneLED,1,0); 	break;
 800260a:	2200      	movs	r2, #0
 800260c:	2101      	movs	r1, #1
 800260e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002612:	f000 fc49 	bl	8002ea8 <LED_control>
 8002616:	e015      	b.n	8002644 <StartLEDsTask+0x15c>
				case (uint8_t)'2': LED_control(oneLED,50,100);  break;
 8002618:	2264      	movs	r2, #100	; 0x64
 800261a:	2132      	movs	r1, #50	; 0x32
 800261c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002620:	f000 fc42 	bl	8002ea8 <LED_control>
 8002624:	e00e      	b.n	8002644 <StartLEDsTask+0x15c>
				case (uint8_t)'3': LED_control(oneLED,200,200); break;
 8002626:	22c8      	movs	r2, #200	; 0xc8
 8002628:	21c8      	movs	r1, #200	; 0xc8
 800262a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800262e:	f000 fc3b 	bl	8002ea8 <LED_control>
 8002632:	e007      	b.n	8002644 <StartLEDsTask+0x15c>
				case (uint8_t)'4': LED_control(oneLED,50,500);  break;
 8002634:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002638:	2132      	movs	r1, #50	; 0x32
 800263a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800263e:	f000 fc33 	bl	8002ea8 <LED_control>
 8002642:	bf00      	nop
			for(uint8_t j = 0; j < 3; j++){
 8002644:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8002648:	3301      	adds	r3, #1
 800264a:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 800264e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8002652:	2b02      	cmp	r3, #2
 8002654:	d991      	bls.n	800257a <StartLEDsTask+0x92>
		for(uint8_t i = 0; i < 3; i++){
 8002656:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800265a:	3301      	adds	r3, #1
 800265c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8002660:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002664:	2b02      	cmp	r3, #2
 8002666:	d984      	bls.n	8002572 <StartLEDsTask+0x8a>
				}
			}
		}

		osDelay(10);
 8002668:	200a      	movs	r0, #10
 800266a:	f007 ffe5 	bl	800a638 <osDelay>
		LEDStringPars((string_t *)&datastring,(RGB_status *) &RGB);
 800266e:	e776      	b.n	800255e <StartLEDsTask+0x76>
 8002670:	40020c00 	.word	0x40020c00
 8002674:	40020800 	.word	0x40020800
 8002678:	40020000 	.word	0x40020000
 800267c:	40020400 	.word	0x40020400
 8002680:	20006b38 	.word	0x20006b38

08002684 <UPTIME_IRQHandler>:
/* USER CODE BEGIN Application */

/*
 * ОБРАБОТЧ�?К ПРЕРЫВАН�?Й ТАЙМЕРА UPTIME
 */
void UPTIME_IRQHandler(){
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
	uptime_tick++;
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <UPTIME_IRQHandler+0x18>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	4a03      	ldr	r2, [pc, #12]	; (800269c <UPTIME_IRQHandler+0x18>)
 8002690:	6013      	str	r3, [r2, #0]
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	20001284 	.word	0x20001284

080026a0 <ADC_Read12vHandler>:

void ADC_Read12vHandler(){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026a6:	f3ef 8211 	mrs	r2, BASEPRI
 80026aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	60ba      	str	r2, [r7, #8]
 80026bc:	607b      	str	r3, [r7, #4]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026be:	68bb      	ldr	r3, [r7, #8]

	// ПРОВЕРЯЕМ УСЛОВ�?Е, ЧТО П�?ТАН�?Е 12 В
	// ЕСЛ�? ДА, ТО ПРОДОЛЖАЕМ
	// ЕСЛ�? НЕТ, ТО ВКЛЮЧАЕМ ЗУМЕРЫ В Ц�?КЛЕ

	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR ();
 80026c0:	60fb      	str	r3, [r7, #12]

	if(ADC_val[4] < Low12vThreshold || ADC_val[4] > High12vThreshold){
 80026c2:	4b2a      	ldr	r3, [pc, #168]	; (800276c <ADC_Read12vHandler+0xcc>)
 80026c4:	891b      	ldrh	r3, [r3, #8]
 80026c6:	f240 525b 	movw	r2, #1371	; 0x55b
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d904      	bls.n	80026d8 <ADC_Read12vHandler+0x38>
 80026ce:	4b27      	ldr	r3, [pc, #156]	; (800276c <ADC_Read12vHandler+0xcc>)
 80026d0:	891b      	ldrh	r3, [r3, #8]
 80026d2:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80026d6:	d305      	bcc.n	80026e4 <ADC_Read12vHandler+0x44>
		ADC_reset_count++;
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <ADC_Read12vHandler+0xd0>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <ADC_Read12vHandler+0xd0>)
 80026e2:	701a      	strb	r2, [r3, #0]
	}

	if(ADC_reset_count > ADC_12v_reset_val){
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <ADC_Read12vHandler+0xd0>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d92f      	bls.n	800274c <ADC_Read12vHandler+0xac>

		HAL_GPIO_WritePin(STM32_Relay_mmn_GPIO_Port, STM32_Relay_mmn_Pin, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026f2:	4820      	ldr	r0, [pc, #128]	; (8002774 <ADC_Read12vHandler+0xd4>)
 80026f4:	f003 fc84 	bl	8006000 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_RESET);
 80026f8:	2200      	movs	r2, #0
 80026fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026fe:	481d      	ldr	r0, [pc, #116]	; (8002774 <ADC_Read12vHandler+0xd4>)
 8002700:	f003 fc7e 	bl	8006000 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STM32_RS_DC_DC_GPIO_Port, STM32_RS_DC_DC_Pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	2102      	movs	r1, #2
 8002708:	481b      	ldr	r0, [pc, #108]	; (8002778 <ADC_Read12vHandler+0xd8>)
 800270a:	f003 fc79 	bl	8006000 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 800270e:	2201      	movs	r2, #1
 8002710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002714:	4817      	ldr	r0, [pc, #92]	; (8002774 <ADC_Read12vHandler+0xd4>)
 8002716:	f003 fc73 	bl	8006000 <HAL_GPIO_WritePin>

		ADC_reset_count = 0;
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <ADC_Read12vHandler+0xd0>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]

		while(ADC_reset_count < ADC_12v_reset_val){
 8002720:	e010      	b.n	8002744 <ADC_Read12vHandler+0xa4>
			if(ADC_val[4] < Low12vThreshold || ADC_val[4] > High12vThreshold){
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <ADC_Read12vHandler+0xcc>)
 8002724:	891b      	ldrh	r3, [r3, #8]
 8002726:	f240 525b 	movw	r2, #1371	; 0x55b
 800272a:	4293      	cmp	r3, r2
 800272c:	d904      	bls.n	8002738 <ADC_Read12vHandler+0x98>
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <ADC_Read12vHandler+0xcc>)
 8002730:	891b      	ldrh	r3, [r3, #8]
 8002732:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8002736:	d305      	bcc.n	8002744 <ADC_Read12vHandler+0xa4>
				ADC_reset_count++;
 8002738:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <ADC_Read12vHandler+0xd0>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <ADC_Read12vHandler+0xd0>)
 8002742:	701a      	strb	r2, [r3, #0]
		while(ADC_reset_count < ADC_12v_reset_val){
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <ADC_Read12vHandler+0xd0>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d9ea      	bls.n	8002722 <ADC_Read12vHandler+0x82>
			}
		}
	}

	HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002752:	4808      	ldr	r0, [pc, #32]	; (8002774 <ADC_Read12vHandler+0xd4>)
 8002754:	f003 fc54 	bl	8006000 <HAL_GPIO_WritePin>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f383 8811 	msr	BASEPRI, r3
	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20006b24 	.word	0x20006b24
 8002770:	2000109a 	.word	0x2000109a
 8002774:	40020c00 	.word	0x40020c00
 8002778:	40020800 	.word	0x40020800

0800277c <HAL_ADC_LevelOutOfWindowCallback>:
/*
 * ОБРАБОТЧ�?К ПРЕРЫВАН�?Й ANALOG WATHDOG
 * ПР�? ОТЛАДКЕ ПЛАТЫ БУДЕТ ПЕРЕП�?САНО, Т.К
 * В ДАННОМ ВАР�?АНТЕ ЗАТРУДНЕНО ОТКЛЮЧЕН�?Е Д�?СПЛЕЯ
 */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	__asm volatile
 8002784:	f3ef 8211 	mrs	r2, BASEPRI
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	613a      	str	r2, [r7, #16]
 800279a:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800279c:	693b      	ldr	r3, [r7, #16]
	// ЕСЛ�? НЕТ, ТО ВКЛЮЧАЕМ ЗУМЕРЫ В Ц�?КЛЕ
	// П�?ТАН�?Е РАСЧ�?ТАНО �?З СХЕМЫ : 				12V/(5.1К + 5.1К + 1К)*1К = 0,29464V
	// ПЕРЕВОД�?М В ЗНАЧЕН�?Е 12 РАЗРЯДНОГО АЦП		0,29464*4095/3.3 = 1329,545
	// БЕРЕМ +-90 (+-0,8V НА ВХОД)
	// Ц�?КЛ ЗАЩ�?ЩЕН ФУНКЦ�?ЯМ�? FREERTOS
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR ();
 800279e:	617b      	str	r3, [r7, #20]

	while(ADC_val[4] < Low12vThreshold || ADC_val[4] > High12vThreshold){
 80027a0:	e019      	b.n	80027d6 <HAL_ADC_LevelOutOfWindowCallback+0x5a>
		HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 80027a2:	2201      	movs	r2, #1
 80027a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027a8:	4818      	ldr	r0, [pc, #96]	; (800280c <HAL_ADC_LevelOutOfWindowCallback+0x90>)
 80027aa:	f003 fc29 	bl	8006000 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(STM32_Relay_mmn_GPIO_Port, STM32_Relay_mmn_Pin, GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027b4:	4815      	ldr	r0, [pc, #84]	; (800280c <HAL_ADC_LevelOutOfWindowCallback+0x90>)
 80027b6:	f003 fc23 	bl	8006000 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_RESET);
 80027ba:	2200      	movs	r2, #0
 80027bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027c0:	4812      	ldr	r0, [pc, #72]	; (800280c <HAL_ADC_LevelOutOfWindowCallback+0x90>)
 80027c2:	f003 fc1d 	bl	8006000 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STM32_RS_DC_DC_GPIO_Port, STM32_RS_DC_DC_Pin, GPIO_PIN_RESET);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2102      	movs	r1, #2
 80027ca:	4811      	ldr	r0, [pc, #68]	; (8002810 <HAL_ADC_LevelOutOfWindowCallback+0x94>)
 80027cc:	f003 fc18 	bl	8006000 <HAL_GPIO_WritePin>

		// ОБНОВЛЯЕМ WATHDOG
		HAL_IWDG_Refresh(&hiwdg);
 80027d0:	4810      	ldr	r0, [pc, #64]	; (8002814 <HAL_ADC_LevelOutOfWindowCallback+0x98>)
 80027d2:	f003 fda0 	bl	8006316 <HAL_IWDG_Refresh>
	while(ADC_val[4] < Low12vThreshold || ADC_val[4] > High12vThreshold){
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_ADC_LevelOutOfWindowCallback+0x9c>)
 80027d8:	891b      	ldrh	r3, [r3, #8]
 80027da:	f240 525b 	movw	r2, #1371	; 0x55b
 80027de:	4293      	cmp	r3, r2
 80027e0:	d9df      	bls.n	80027a2 <HAL_ADC_LevelOutOfWindowCallback+0x26>
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_ADC_LevelOutOfWindowCallback+0x9c>)
 80027e4:	891b      	ldrh	r3, [r3, #8]
 80027e6:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80027ea:	d2da      	bcs.n	80027a2 <HAL_ADC_LevelOutOfWindowCallback+0x26>
	}
	HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027f2:	4806      	ldr	r0, [pc, #24]	; (800280c <HAL_ADC_LevelOutOfWindowCallback+0x90>)
 80027f4:	f003 fc04 	bl	8006000 <HAL_GPIO_WritePin>
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f383 8811 	msr	BASEPRI, r3
	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40020800 	.word	0x40020800
 8002814:	20009598 	.word	0x20009598
 8002818:	20006b24 	.word	0x20006b24

0800281c <PowerON>:

void PowerON(u8g2_t* u8g2){
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]

//	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);


	// ЗАЖ�?ГАЕМ С�?Н�?Й ЦВЕТ RGB ПР�? СТАРТЕ
	HAL_GPIO_WritePin(BLUE_232_GPIO_Port, BLUE_232_Pin, GPIO_PIN_SET);
 8002824:	2201      	movs	r2, #1
 8002826:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800282a:	4834      	ldr	r0, [pc, #208]	; (80028fc <PowerON+0xe0>)
 800282c:	f003 fbe8 	bl	8006000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_422_GPIO_Port, BLUE_422_Pin, GPIO_PIN_SET);
 8002830:	2201      	movs	r2, #1
 8002832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002836:	4832      	ldr	r0, [pc, #200]	; (8002900 <PowerON+0xe4>)
 8002838:	f003 fbe2 	bl	8006000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_485_GPIO_Port, BLUE_485_Pin, GPIO_PIN_SET);
 800283c:	2201      	movs	r2, #1
 800283e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002842:	4830      	ldr	r0, [pc, #192]	; (8002904 <PowerON+0xe8>)
 8002844:	f003 fbdc 	bl	8006000 <HAL_GPIO_WritePin>

	// ВКЛЮЧАЕМ РЕЛЕ
	HAL_GPIO_WritePin(STM32_Relay_mmn_GPIO_Port, STM32_Relay_mmn_Pin, GPIO_PIN_SET);
 8002848:	2201      	movs	r2, #1
 800284a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800284e:	482b      	ldr	r0, [pc, #172]	; (80028fc <PowerON+0xe0>)
 8002850:	f003 fbd6 	bl	8006000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_SET);
 8002854:	2201      	movs	r2, #1
 8002856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800285a:	4828      	ldr	r0, [pc, #160]	; (80028fc <PowerON+0xe0>)
 800285c:	f003 fbd0 	bl	8006000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STM32_RS_DC_DC_GPIO_Port, STM32_RS_DC_DC_Pin, GPIO_PIN_SET);
 8002860:	2201      	movs	r2, #1
 8002862:	2102      	movs	r1, #2
 8002864:	4828      	ldr	r0, [pc, #160]	; (8002908 <PowerON+0xec>)
 8002866:	f003 fbcb 	bl	8006000 <HAL_GPIO_WritePin>

	// ВКЛЮЧАЕМ ЗУМЕРЫ
	for(uint8_t i = 0; i < 4; i++){
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e014      	b.n	800289a <PowerON+0x7e>
		HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8002870:	2201      	movs	r2, #1
 8002872:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002876:	4821      	ldr	r0, [pc, #132]	; (80028fc <PowerON+0xe0>)
 8002878:	f003 fbc2 	bl	8006000 <HAL_GPIO_WritePin>
		osDelay(30);
 800287c:	201e      	movs	r0, #30
 800287e:	f007 fedb 	bl	800a638 <osDelay>
		HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8002882:	2200      	movs	r2, #0
 8002884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002888:	481c      	ldr	r0, [pc, #112]	; (80028fc <PowerON+0xe0>)
 800288a:	f003 fbb9 	bl	8006000 <HAL_GPIO_WritePin>
		osDelay(30);
 800288e:	201e      	movs	r0, #30
 8002890:	f007 fed2 	bl	800a638 <osDelay>
	for(uint8_t i = 0; i < 4; i++){
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	3301      	adds	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d9e7      	bls.n	8002870 <PowerON+0x54>
	}

	// ЗАЖ�?ГАЕМ Д�?СПЛЕЙ
	u8g2_DrawBox(u8g2,0,0,254,64);
 80028a0:	2340      	movs	r3, #64	; 0x40
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	23fe      	movs	r3, #254	; 0xfe
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f005 ffe7 	bl	800887e <u8g2_DrawBox>
	u8g2_SendBuffer(u8g2);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f006 f88e 	bl	80089d2 <u8g2_SendBuffer>

	// ЖДЕМ
	HAL_Delay(start_pause);
 80028b6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80028ba:	f001 ffad 	bl	8004818 <HAL_Delay>

	// ТУШ�?М Д�?СПЛЕЙ
	u8g2_ClearDisplay(u8g2);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f006 f8ef 	bl	8008aa2 <u8g2_ClearDisplay>

	// ТУШ�?М СВЕТОД�?ОДЫ
	HAL_GPIO_WritePin(BLUE_232_GPIO_Port, BLUE_232_Pin, GPIO_PIN_RESET);
 80028c4:	2200      	movs	r2, #0
 80028c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ca:	480c      	ldr	r0, [pc, #48]	; (80028fc <PowerON+0xe0>)
 80028cc:	f003 fb98 	bl	8006000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_422_GPIO_Port, BLUE_422_Pin, GPIO_PIN_RESET);
 80028d0:	2200      	movs	r2, #0
 80028d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028d6:	480a      	ldr	r0, [pc, #40]	; (8002900 <PowerON+0xe4>)
 80028d8:	f003 fb92 	bl	8006000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_485_GPIO_Port, BLUE_485_Pin, GPIO_PIN_RESET);
 80028dc:	2200      	movs	r2, #0
 80028de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028e2:	4808      	ldr	r0, [pc, #32]	; (8002904 <PowerON+0xe8>)
 80028e4:	f003 fb8c 	bl	8006000 <HAL_GPIO_WritePin>

	// ВЫКЛЮЧАЕМ ЗУМЕРЫ
	HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 80028e8:	2200      	movs	r2, #0
 80028ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028ee:	4803      	ldr	r0, [pc, #12]	; (80028fc <PowerON+0xe0>)
 80028f0:	f003 fb86 	bl	8006000 <HAL_GPIO_WritePin>
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	40020800 	.word	0x40020800

0800290c <FlashWriteStart>:

		}
	}
}

void FlashWriteStart(){
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <BigLatter>:
/*
 * ФУНКЦ�?Я ПЕРЕВОД�?Т МАЛЕНЬК�?Е БУКВЫ ШЕСТНАДЦАТ�?Р�?ЧНОГО НАБОРА
 * В БОЛЬШ�?Е. ЕСЛ�? НА ВХОД ПР�?ШЛА Ц�?ФРА, ТО ВОЗВРАЩАЕТСЯ С�?МВОЛ Ц�?ФРЫ
 */
char BigLatter(char smalllatter){
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
	switch(smalllatter){
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	3b61      	subs	r3, #97	; 0x61
 800292a:	2b05      	cmp	r3, #5
 800292c:	d81a      	bhi.n	8002964 <BigLatter+0x48>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <BigLatter+0x18>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	0800294d 	.word	0x0800294d
 8002938:	08002951 	.word	0x08002951
 800293c:	08002955 	.word	0x08002955
 8002940:	08002959 	.word	0x08002959
 8002944:	0800295d 	.word	0x0800295d
 8002948:	08002961 	.word	0x08002961
	case 'a': return 'A';
 800294c:	2341      	movs	r3, #65	; 0x41
 800294e:	e00a      	b.n	8002966 <BigLatter+0x4a>
	case 'b': return 'B';
 8002950:	2342      	movs	r3, #66	; 0x42
 8002952:	e008      	b.n	8002966 <BigLatter+0x4a>
	case 'c': return 'C';
 8002954:	2343      	movs	r3, #67	; 0x43
 8002956:	e006      	b.n	8002966 <BigLatter+0x4a>
	case 'd': return 'D';
 8002958:	2344      	movs	r3, #68	; 0x44
 800295a:	e004      	b.n	8002966 <BigLatter+0x4a>
	case 'e': return 'E';
 800295c:	2345      	movs	r3, #69	; 0x45
 800295e:	e002      	b.n	8002966 <BigLatter+0x4a>
	case 'f': return 'F';
 8002960:	2346      	movs	r3, #70	; 0x46
 8002962:	e000      	b.n	8002966 <BigLatter+0x4a>
	default: return smalllatter;
 8002964:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop

08002974 <TemperatureGetData>:
/*
 * ФУНКЦ�?Я РАСЧЕТА ТЕМПЕРАТУРЫ ВСТРОЕНОГО ДАТЧ�?КА STM.
 * ПР�?Н�?МАЕТ ДАННЫЕ АЦП С ТЕМПЕРЕАТУРНОГО КАНАЛА
 * ВОЗВРАЩАЕТ ТЕМПЕРАТУРУ В ГРАДУСАХ ЦЕЛЬС�?Я
 */
uint8_t TemperatureGetData(uint16_t ADCResult){
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	80fb      	strh	r3, [r7, #6]
	int32_t temperature; /* will contain the temperature in degrees Celsius */

	temperature = (((int32_t) ADCResult * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR );
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <TemperatureGetData+0x5c>)
 800298a:	fb82 1203 	smull	r1, r2, r2, r3
 800298e:	11d2      	asrs	r2, r2, #7
 8002990:	17db      	asrs	r3, r3, #31
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <TemperatureGetData+0x60>)
 8002996:	8812      	ldrh	r2, [r2, #0]
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
	temperature = temperature * (int32_t)(110 - 30);
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	60fb      	str	r3, [r7, #12]
	temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <TemperatureGetData+0x64>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <TemperatureGetData+0x60>)
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80029ba:	60fb      	str	r3, [r7, #12]

    return (uint8_t) temperature + 25;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3319      	adds	r3, #25
 80029c2:	b2db      	uxtb	r3, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	634c0635 	.word	0x634c0635
 80029d4:	1fff7a2c 	.word	0x1fff7a2c
 80029d8:	1fff7a2e 	.word	0x1fff7a2e

080029dc <PutERROR>:

/*
 * КЛАДЕТ ТЕКСТ ОШ�?БК�? В 1-Ю СТРОКУ КОНТРОЛЬНЫХ СТРОК
 */
void PutERROR(string_t *error_string, const char *error_tekst){
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]

	// Ч�?СТ�?М СТРОКУ
	for(uint8_t i = 0; i < string_size; i++){
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e009      	b.n	8002a00 <PutERROR+0x24>
		error_string[start_ctrl_string].buf[i] = '\0';
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 80029f2:	332a      	adds	r3, #42	; 0x2a
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < string_size; i++){
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	3301      	adds	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b3b      	cmp	r3, #59	; 0x3b
 8002a04:	d9f2      	bls.n	80029ec <PutERROR+0x10>
	}

	// ЗАПОЛНЯЕМ СТРОКУ
	for(uint8_t i = 0; i < strlen(error_tekst); i++){
 8002a06:	2300      	movs	r3, #0
 8002a08:	73bb      	strb	r3, [r7, #14]
 8002a0a:	e00c      	b.n	8002a26 <PutERROR+0x4a>
		error_string[start_ctrl_string].buf[i] = error_tekst[i];
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	18d1      	adds	r1, r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 8002a18:	332a      	adds	r3, #42	; 0x2a
 8002a1a:	7bba      	ldrb	r2, [r7, #14]
 8002a1c:	7809      	ldrb	r1, [r1, #0]
 8002a1e:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < strlen(error_tekst); i++){
 8002a20:	7bbb      	ldrb	r3, [r7, #14]
 8002a22:	3301      	adds	r3, #1
 8002a24:	73bb      	strb	r3, [r7, #14]
 8002a26:	7bbc      	ldrb	r4, [r7, #14]
 8002a28:	6838      	ldr	r0, [r7, #0]
 8002a2a:	f7fd fbd1 	bl	80001d0 <strlen>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	429c      	cmp	r4, r3
 8002a32:	d3eb      	bcc.n	8002a0c <PutERROR+0x30>
	}
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd90      	pop	{r4, r7, pc}

08002a3c <PowerButtonHandler>:

void PowerButtonHandler(uint32_t *butthold,uint8_t *butmem, uint8_t *switch_off, uint16_t off_delay){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	807b      	strh	r3, [r7, #2]

	// ЕСЛ�? КНОПКА НАЖАТА
	if(HAL_GPIO_ReadPin(STM32_BUTTON_POWER_GPIO_Port, STM32_BUTTON_POWER_Pin)){
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	481d      	ldr	r0, [pc, #116]	; (8002ac4 <PowerButtonHandler+0x88>)
 8002a4e:	f003 fabf 	bl	8005fd0 <HAL_GPIO_ReadPin>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d02b      	beq.n	8002ab0 <PowerButtonHandler+0x74>

		HAL_GPIO_WritePin(STM32_BUTTON_LED_POWER_GPIO_Port, STM32_BUTTON_LED_POWER_Pin, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a5e:	481a      	ldr	r0, [pc, #104]	; (8002ac8 <PowerButtonHandler+0x8c>)
 8002a60:	f003 face 	bl	8006000 <HAL_GPIO_WritePin>

		// ЕСЛ�? КНОПКА ДО ЭТОГО НЕ БЫЛА НАЖАТА
		if(!(*butmem &  STM32_BUTTON_POWER_Pin)){
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d113      	bne.n	8002a98 <PowerButtonHandler+0x5c>

			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8002a70:	2201      	movs	r2, #1
 8002a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a76:	4814      	ldr	r0, [pc, #80]	; (8002ac8 <PowerButtonHandler+0x8c>)
 8002a78:	f003 fac2 	bl	8006000 <HAL_GPIO_WritePin>
			osDelay(Button_Zummer);
 8002a7c:	200a      	movs	r0, #10
 8002a7e:	f007 fddb 	bl	800a638 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a88:	480f      	ldr	r0, [pc, #60]	; (8002ac8 <PowerButtonHandler+0x8c>)
 8002a8a:	f003 fab9 	bl	8006000 <HAL_GPIO_WritePin>

			// НАЧ�?НАЕТ ОТСЧЕТ ВРЕМЕН�?
			*butthold = HAL_GetTick();
 8002a8e:	f001 feb7 	bl	8004800 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]
		}
		// ЕСЛ�? ПРОШЛО ОПРЕДЕЛЕННОЕ ВРЕМЯ �? КНОПКА ВСЕ ЕЩЕ НАЖАТА, ТО ПОДН�?МАЕМ ФЛАГ
		if((HAL_GetTick() - *butthold) > off_delay){
 8002a98:	f001 feb2 	bl	8004800 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1ad2      	subs	r2, r2, r3
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d902      	bls.n	8002ab0 <PowerButtonHandler+0x74>

			*switch_off = 1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]

		}
	}

	*butmem = STM32_BUTTON_POWER_GPIO_Port->IDR;		// ПАМЯТЬ КНОПК�?
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <PowerButtonHandler+0x88>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	701a      	strb	r2, [r3, #0]
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020c00 	.word	0x40020c00

08002acc <ScrollingButtonHandler>:


/*
 * ФУНКЦ�?Я ОБРАБОТК�? КНОПОК
 */
void ScrollingButtonHandler(uint8_t *cursor, uint32_t *butthold,uint8_t *butmem){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]

	// ЕСЛ�? КНОПКА НАЖАТА �? (НЕ БЫЛА ЕЩЕ НАЖАТА, �?Л�? ПРОШЛО МНОГО ВРЕМЕН�?)
	// УСЛОВ�?Е РАБОТАЕТ НА ОД�?НОЧНЫЕ НАЖАТ�?Я, НО ЕСЛ�? ПРОШЛО ОПРЕДЕЛЕННОЕ ВРЕМЯ,
	// ПАМЯТЬ НАЖАТ�?Я КНОПК�? НЕ УЧ�?ТЫВАЕТСЯ
	if(HAL_GPIO_ReadPin(STM32_BUTTON_1_GPIO_Port, STM32_BUTTON_1_Pin)){
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4872      	ldr	r0, [pc, #456]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002adc:	f003 fa78 	bl	8005fd0 <HAL_GPIO_ReadPin>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d042      	beq.n	8002b6c <ScrollingButtonHandler+0xa0>

		HAL_GPIO_WritePin(STM32_BUTTON_LED_1_GPIO_Port, STM32_BUTTON_LED_1_Pin, GPIO_PIN_RESET);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2110      	movs	r1, #16
 8002aea:	486e      	ldr	r0, [pc, #440]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002aec:	f003 fa88 	bl	8006000 <HAL_GPIO_WritePin>

		if(!(*butmem & STM32_BUTTON_1_Pin) || (HAL_GetTick() - *butthold > scroll_delay)){
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <ScrollingButtonHandler+0x42>
 8002afc:	f001 fe80 	bl	8004800 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002b0c:	d933      	bls.n	8002b76 <ScrollingButtonHandler+0xaa>

			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b14:	4863      	ldr	r0, [pc, #396]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002b16:	f003 fa73 	bl	8006000 <HAL_GPIO_WritePin>
			osDelay(Button_Zummer);
 8002b1a:	200a      	movs	r0, #10
 8002b1c:	f007 fd8c 	bl	800a638 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8002b20:	2200      	movs	r2, #0
 8002b22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b26:	485f      	ldr	r0, [pc, #380]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002b28:	f003 fa6a 	bl	8006000 <HAL_GPIO_WritePin>

			*cursor = (*cursor < (160 - 4)) ? *cursor + 1 : *cursor;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b9b      	cmp	r3, #155	; 0x9b
 8002b32:	d804      	bhi.n	8002b3e <ScrollingButtonHandler+0x72>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	e001      	b.n	8002b42 <ScrollingButtonHandler+0x76>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	7013      	strb	r3, [r2, #0]
			osDelay(1000/scroll_speed);
 8002b46:	2042      	movs	r0, #66	; 0x42
 8002b48:	f007 fd76 	bl	800a638 <osDelay>
			uptime = uptime_tick;
 8002b4c:	4b56      	ldr	r3, [pc, #344]	; (8002ca8 <ScrollingButtonHandler+0x1dc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a56      	ldr	r2, [pc, #344]	; (8002cac <ScrollingButtonHandler+0x1e0>)
 8002b52:	6013      	str	r3, [r2, #0]
			if(!(*butmem & STM32_BUTTON_1_Pin))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10a      	bne.n	8002b76 <ScrollingButtonHandler+0xaa>
				*butthold = HAL_GetTick();
 8002b60:	f001 fe4e 	bl	8004800 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e004      	b.n	8002b76 <ScrollingButtonHandler+0xaa>
		}
	}
	else {
		HAL_GPIO_WritePin(STM32_BUTTON_LED_1_GPIO_Port, STM32_BUTTON_LED_1_Pin, GPIO_PIN_SET);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2110      	movs	r1, #16
 8002b70:	484c      	ldr	r0, [pc, #304]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002b72:	f003 fa45 	bl	8006000 <HAL_GPIO_WritePin>
	}

	// 2 АНАЛОГ�?ЧНО
	if(HAL_GPIO_ReadPin(STM32_BUTTON_2_GPIO_Port, STM32_BUTTON_2_Pin)){
 8002b76:	2102      	movs	r1, #2
 8002b78:	484a      	ldr	r0, [pc, #296]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002b7a:	f003 fa29 	bl	8005fd0 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d041      	beq.n	8002c08 <ScrollingButtonHandler+0x13c>

		HAL_GPIO_WritePin(STM32_BUTTON_LED_2_GPIO_Port, STM32_BUTTON_LED_2_Pin, GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2120      	movs	r1, #32
 8002b88:	4846      	ldr	r0, [pc, #280]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002b8a:	f003 fa39 	bl	8006000 <HAL_GPIO_WritePin>

		if(!(*butmem & STM32_BUTTON_2_Pin) || ((HAL_GetTick() - *butthold) > scroll_delay)){
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <ScrollingButtonHandler+0xe0>
 8002b9a:	f001 fe31 	bl	8004800 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002baa:	d932      	bls.n	8002c12 <ScrollingButtonHandler+0x146>

			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bb2:	483c      	ldr	r0, [pc, #240]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002bb4:	f003 fa24 	bl	8006000 <HAL_GPIO_WritePin>
			osDelay(Button_Zummer);
 8002bb8:	200a      	movs	r0, #10
 8002bba:	f007 fd3d 	bl	800a638 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bc4:	4837      	ldr	r0, [pc, #220]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002bc6:	f003 fa1b 	bl	8006000 <HAL_GPIO_WritePin>

			*cursor = (*cursor > 0) ? *cursor - 1 : 170;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <ScrollingButtonHandler+0x110>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	e000      	b.n	8002bde <ScrollingButtonHandler+0x112>
 8002bdc:	22aa      	movs	r2, #170	; 0xaa
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	701a      	strb	r2, [r3, #0]
			osDelay(1000/scroll_speed);
 8002be2:	2042      	movs	r0, #66	; 0x42
 8002be4:	f007 fd28 	bl	800a638 <osDelay>
			uptime = uptime_tick;
 8002be8:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <ScrollingButtonHandler+0x1dc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a2f      	ldr	r2, [pc, #188]	; (8002cac <ScrollingButtonHandler+0x1e0>)
 8002bee:	6013      	str	r3, [r2, #0]

			if(!(*butmem & STM32_BUTTON_2_Pin))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <ScrollingButtonHandler+0x146>
				*butthold = HAL_GetTick();
 8002bfc:	f001 fe00 	bl	8004800 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	e004      	b.n	8002c12 <ScrollingButtonHandler+0x146>
			}

	}
	else HAL_GPIO_WritePin(STM32_BUTTON_LED_2_GPIO_Port, STM32_BUTTON_LED_2_Pin, GPIO_PIN_SET);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	2120      	movs	r1, #32
 8002c0c:	4825      	ldr	r0, [pc, #148]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002c0e:	f003 f9f7 	bl	8006000 <HAL_GPIO_WritePin>

	//3
	if(HAL_GPIO_ReadPin(STM32_BUTTON_3_GPIO_Port, STM32_BUTTON_3_Pin)){
 8002c12:	2104      	movs	r1, #4
 8002c14:	4823      	ldr	r0, [pc, #140]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002c16:	f003 f9db 	bl	8005fd0 <HAL_GPIO_ReadPin>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d032      	beq.n	8002c86 <ScrollingButtonHandler+0x1ba>

			HAL_GPIO_WritePin(STM32_BUTTON_LED_3_GPIO_Port, STM32_BUTTON_LED_3_Pin, GPIO_PIN_RESET);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2140      	movs	r1, #64	; 0x40
 8002c24:	481f      	ldr	r0, [pc, #124]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002c26:	f003 f9eb 	bl	8006000 <HAL_GPIO_WritePin>

			if(!(*butmem & STM32_BUTTON_3_Pin) || ((HAL_GetTick() - *butthold) > scroll_delay)){
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <ScrollingButtonHandler+0x17c>
 8002c36:	f001 fde3 	bl	8004800 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002c46:	d923      	bls.n	8002c90 <ScrollingButtonHandler+0x1c4>

				HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c4e:	4815      	ldr	r0, [pc, #84]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002c50:	f003 f9d6 	bl	8006000 <HAL_GPIO_WritePin>
				osDelay(Button_Zummer);
 8002c54:	200a      	movs	r0, #10
 8002c56:	f007 fcef 	bl	800a638 <osDelay>
				HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c60:	4810      	ldr	r0, [pc, #64]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002c62:	f003 f9cd 	bl	8006000 <HAL_GPIO_WritePin>

				uptime = uptime_tick;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <ScrollingButtonHandler+0x1dc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a10      	ldr	r2, [pc, #64]	; (8002cac <ScrollingButtonHandler+0x1e0>)
 8002c6c:	6013      	str	r3, [r2, #0]
				if(!(*butmem & STM32_BUTTON_3_Pin))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10a      	bne.n	8002c90 <ScrollingButtonHandler+0x1c4>
					*butthold = HAL_GetTick();
 8002c7a:	f001 fdc1 	bl	8004800 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	e004      	b.n	8002c90 <ScrollingButtonHandler+0x1c4>
				}

		}
		else HAL_GPIO_WritePin(STM32_BUTTON_LED_3_GPIO_Port, STM32_BUTTON_LED_3_Pin, GPIO_PIN_SET);
 8002c86:	2201      	movs	r2, #1
 8002c88:	2140      	movs	r1, #64	; 0x40
 8002c8a:	4806      	ldr	r0, [pc, #24]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002c8c:	f003 f9b8 	bl	8006000 <HAL_GPIO_WritePin>


	*butmem = STM32_BUTTON_LED_1_GPIO_Port->IDR;						 // т.к_порт_кнопок_один
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <ScrollingButtonHandler+0x1d8>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	701a      	strb	r2, [r3, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40020c00 	.word	0x40020c00
 8002ca8:	20001284 	.word	0x20001284
 8002cac:	20001288 	.word	0x20001288

08002cb0 <CRC32_Status>:
 * ФУНКЦ�?Я РАСЧЕТ CRC32. КЛАДЕТ ВСЕ С�?МВОЛЫ ПОСЛЕ "PSD;"
 * �? ДО "CRC" В МАСС�?В crc32_buf, ПОСЛЕ ЧЕГО СЧ�?ТАЕТ КОНТРОЛЬНУЮ СУММУ.
 * ВОЗВРАЩАЕТ 1 ЕСЛ�? КОНТРОЛЬНЫЕ СУММЫ СОШЛ�?СЬ
 * ВОЗВРАЩАЕТ 0 ЕСЛ�? СУММА НЕ СОШЛАСЬ �?Л�? ПАКЕТ ПОВРЕЖДЕН
 */
uint8_t CRC32_Status(uint8_t *buf, size_t buf_size, uint16_t pointer, buffer_t *crc32_buf){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08e      	sub	sp, #56	; 0x38
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	80fb      	strh	r3, [r7, #6]

	uint8_t crc_in_buf[8];												// С�?МВОЛЬНЫЙ БУФЕР ВХОДНОГО ЗНАЧЕН�?Я CRC32
	uint8_t crc_string_count = 0;										// СЧЕТЧ�?К
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t crc_in = 0;												// ВХОДНОЕ ЗНАЧЕН�?Е CRC32
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t crc_out = 0;												// РАСЧ�?ТАНОЕ ЗНАЧЕН�?Е СRC32
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
	uint16_t crc_pointer = pointer;										// УКАЗАТЕЛЬ ДЛЯ НАБОРА МАСС�?ВА CRC32
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	82fb      	strh	r3, [r7, #22]

	uint16_t crc_count = string_pack_amount * string_size;				// МАКС�?МАЛЬНОЕ КОЛ�?ЧЕСТВО С�?МВОЛОВ В ПАКЕТЕ
 8002cd2:	f44f 6307 	mov.w	r3, #2160	; 0x870
 8002cd6:	84fb      	strh	r3, [r7, #38]	; 0x26

	// ОБНУЛЯЕМ ХВОСТ БУФЕРА
	crc32_buf->tail = 0;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8a3 2870 	strh.w	r2, [r3, #2160]	; 0x870

	// ПОКА БУФЕР НЕ ЗАКОНЧ�?ТСЯ
	while(crc_count){
 8002ce0:	e08a      	b.n	8002df8 <CRC32_Status+0x148>

		// ЕСЛ�? НАЙДЕНА СТАРТОВАЯ КОМБ�?НАЦ�?Я, ЗНАЧ�?Т ЧТО-ТО НЕ ТАК
		if(FindString((uint8_t *)buf, buf_size, &crc_pointer, "PDS", 3)){
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f107 0216 	add.w	r2, r7, #22
 8002ce8:	2303      	movs	r3, #3
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <CRC32_Status+0x16c>)
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	f000 f8a4 	bl	8002e3c <FindString>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <CRC32_Status+0x4e>
			//место_для_вашей_ошибки
			return 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e08a      	b.n	8002e14 <CRC32_Status+0x164>
		}

		// ЕСЛ�? НАЙДЕН "CRC", ЗНАЧ�?Т МАСС�?В НАБРАН. ПР�?СТУПАЕМ К РАСЧЕТУ
		if(FindString((uint8_t *)buf, buf_size, &crc_pointer, "CRC", 3)){
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f107 0216 	add.w	r2, r7, #22
 8002d04:	2303      	movs	r3, #3
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4b45      	ldr	r3, [pc, #276]	; (8002e20 <CRC32_Status+0x170>)
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	f000 f896 	bl	8002e3c <FindString>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d064      	beq.n	8002de0 <CRC32_Status+0x130>

			// ПРОПУСКАЕМ ';'
			PassSym((uint8_t *)&buf, buf_size, &crc_pointer, 1);
 8002d16:	f107 0216 	add.w	r2, r7, #22
 8002d1a:	f107 000c 	add.w	r0, r7, #12
 8002d1e:	2301      	movs	r3, #1
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	f000 f915 	bl	8002f50 <PassSym>

			// РАСЧ�?ТЫВАЕМ CRC32 �?З МАСС�?ВА
			crc_out = Crc32((const unsigned char*)crc32_buf, crc32_buf->tail);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f8b3 3870 	ldrh.w	r3, [r3, #2160]	; 0x870
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	6838      	ldr	r0, [r7, #0]
 8002d30:	f7fe f862 	bl	8000df8 <Crc32>
 8002d34:	6238      	str	r0, [r7, #32]
			crc_in = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28

			if(FindString(buf, buf_size, &crc_pointer, "NAN", 3)){
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f107 0216 	add.w	r2, r7, #22
 8002d40:	2303      	movs	r3, #3
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <CRC32_Status+0x174>)
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	f000 f878 	bl	8002e3c <FindString>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02c      	beq.n	8002dac <CRC32_Status+0xfc>
				PutERROR((string_t *)&datastring,"CRC_NAN");
 8002d52:	4935      	ldr	r1, [pc, #212]	; (8002e28 <CRC32_Status+0x178>)
 8002d54:	4835      	ldr	r0, [pc, #212]	; (8002e2c <CRC32_Status+0x17c>)
 8002d56:	f7ff fe41 	bl	80029dc <PutERROR>
				return 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e05a      	b.n	8002e14 <CRC32_Status+0x164>
			}

			// ПАРС�?М ЗНАЧЕН�?Е CRC32 �?З ПАКЕТА
			while(buf[crc_pointer] != (uint8_t)';' && (crc_string_count < 8)){
				crc_in_buf[crc_string_count] = buf[crc_pointer];
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8afa      	ldrh	r2, [r7, #22]
 8002d62:	441a      	add	r2, r3
 8002d64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d68:	7812      	ldrb	r2, [r2, #0]
 8002d6a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002d6e:	440b      	add	r3, r1
 8002d70:	f803 2c18 	strb.w	r2, [r3, #-24]

				// ПЕРЕВОД�?М ПОЛУЧЕНУЮ СТРОКУ В DEC
				crc_in = HexToDec((char *)&crc_in_buf,8);
 8002d74:	f107 0318 	add.w	r3, r7, #24
 8002d78:	2108      	movs	r1, #8
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f93c 	bl	8002ff8 <HexToDec>
 8002d80:	62b8      	str	r0, [r7, #40]	; 0x28

				// ВЫВОЖУ СRC В 0-Ю СТРКОУ ДЛЯ ОТЛАДК�?
				datastring[0].buf[crc_string_count] = buf[crc_pointer];
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8afa      	ldrh	r2, [r7, #22]
 8002d86:	441a      	add	r2, r3
 8002d88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d8c:	7811      	ldrb	r1, [r2, #0]
 8002d8e:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <CRC32_Status+0x17c>)
 8002d90:	54d1      	strb	r1, [r2, r3]

				PassSym((uint8_t *)&buf, buf_size, &crc_pointer, 1);
 8002d92:	f107 0216 	add.w	r2, r7, #22
 8002d96:	f107 000c 	add.w	r0, r7, #12
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	f000 f8d7 	bl	8002f50 <PassSym>
				crc_string_count++;
 8002da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002da6:	3301      	adds	r3, #1
 8002da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while(buf[crc_pointer] != (uint8_t)';' && (crc_string_count < 8)){
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8afa      	ldrh	r2, [r7, #22]
 8002db0:	4413      	add	r3, r2
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b3b      	cmp	r3, #59	; 0x3b
 8002db6:	d003      	beq.n	8002dc0 <CRC32_Status+0x110>
 8002db8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dbc:	2b07      	cmp	r3, #7
 8002dbe:	d9ce      	bls.n	8002d5e <CRC32_Status+0xae>
			}

			// СРАВН�?ВАЕМ ЗНАЧЕН�?Я, ВЫВОД�?М СООТВЕТСТВУЮЩЕЕ СОСТОЯН�?Е CRC
			if(crc_in == crc_out){
 8002dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d105      	bne.n	8002dd4 <CRC32_Status+0x124>
				PutERROR((string_t *)&datastring,"CRC_OK");
 8002dc8:	4919      	ldr	r1, [pc, #100]	; (8002e30 <CRC32_Status+0x180>)
 8002dca:	4818      	ldr	r0, [pc, #96]	; (8002e2c <CRC32_Status+0x17c>)
 8002dcc:	f7ff fe06 	bl	80029dc <PutERROR>

				return 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e01f      	b.n	8002e14 <CRC32_Status+0x164>
			}
			else{
				PutERROR((string_t *)&datastring,"CRC_ERROR");
 8002dd4:	4917      	ldr	r1, [pc, #92]	; (8002e34 <CRC32_Status+0x184>)
 8002dd6:	4815      	ldr	r0, [pc, #84]	; (8002e2c <CRC32_Status+0x17c>)
 8002dd8:	f7ff fe00 	bl	80029dc <PutERROR>
				return 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e019      	b.n	8002e14 <CRC32_Status+0x164>
			}
			break;
		}
		PassSymCRC((uint8_t *)buf, buf_size, &crc_pointer, 1, crc32_buf);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f107 0216 	add.w	r2, r7, #22
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2301      	movs	r3, #1
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	f000 f8d5 	bl	8002f9c <PassSymCRC>
		crc_count--;
 8002df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002df4:	3b01      	subs	r3, #1
 8002df6:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(crc_count){
 8002df8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f47f af71 	bne.w	8002ce2 <CRC32_Status+0x32>
	}

	// ЕСЛ�? БУФЕР ЗАКНОЧ�?ЛСЯ �? CRC НЕ БЫЛ НАЙДЕН
	if(!crc_count){
 8002e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <CRC32_Status+0x162>
		PutERROR((string_t *)&datastring,"CRC NOT FOUND");
 8002e06:	490c      	ldr	r1, [pc, #48]	; (8002e38 <CRC32_Status+0x188>)
 8002e08:	4808      	ldr	r0, [pc, #32]	; (8002e2c <CRC32_Status+0x17c>)
 8002e0a:	f7ff fde7 	bl	80029dc <PutERROR>
		return 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <CRC32_Status+0x164>
	}
	return 0;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3730      	adds	r7, #48	; 0x30
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	0800d998 	.word	0x0800d998
 8002e20:	0800d99c 	.word	0x0800d99c
 8002e24:	0800d9ec 	.word	0x0800d9ec
 8002e28:	0800d9f0 	.word	0x0800d9f0
 8002e2c:	20006b38 	.word	0x20006b38
 8002e30:	0800d9f8 	.word	0x0800d9f8
 8002e34:	0800da00 	.word	0x0800da00
 8002e38:	0800da0c 	.word	0x0800da0c

08002e3c <FindString>:
/* ФУНКЦ�?Я ПО�?СКА ПОДСТРОК�?(ПОСЛЕДОВАТЛЬНОСТ�? С�?МВОЛОВ) В �?СХОДНОМ МАСС�?ВЕ
 * ЕСЛ�? ПОСЛЕДОВАТЕЛЬНОСТЬ ОБНАРУЖЕНА ВОЗВРАЩАЕТ 1 �? ЗНАЧЕН�?Е �?НДЕКС pointer НА СЛЕДУЮЩ�?Й
 * С�?МВОЛ ПОСЛЕ �?СКОМОЙ СТРОК�?.
 * ЕСЛ�? ПОСЛЕДОВАТЕЛЬНОСТЬ НЕ ОБНАРУЖЕНА, ТО ВОЗРАЩАЕТ 0 �? НЕ МЕНЯЕТ pointer
 */
uint8_t FindString(uint8_t *buf,size_t buf_size,uint16_t *pointer,const char *str,size_t str_size){
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
	uint8_t count = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]
	uint16_t p = *pointer;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	82bb      	strh	r3, [r7, #20]
	while(count < str_size){
 8002e54:	e01a      	b.n	8002e8c <FindString+0x50>
		if(buf[p] == (uint8_t)str[count]){
 8002e56:	8abb      	ldrh	r3, [r7, #20]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	6839      	ldr	r1, [r7, #0]
 8002e62:	440b      	add	r3, r1
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d10e      	bne.n	8002e88 <FindString+0x4c>
			p = (p < buf_size - 1) ? p + 1 : 0;
 8002e6a:	8aba      	ldrh	r2, [r7, #20]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d203      	bcs.n	8002e7c <FindString+0x40>
 8002e74:	8abb      	ldrh	r3, [r7, #20]
 8002e76:	3301      	adds	r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	e000      	b.n	8002e7e <FindString+0x42>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	82bb      	strh	r3, [r7, #20]
			count++;
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	3301      	adds	r3, #1
 8002e84:	75fb      	strb	r3, [r7, #23]
 8002e86:	e001      	b.n	8002e8c <FindString+0x50>
		}
		else return 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e007      	b.n	8002e9c <FindString+0x60>
	while(count < str_size){
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d8e0      	bhi.n	8002e56 <FindString+0x1a>
	}

	*pointer = p;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8aba      	ldrh	r2, [r7, #20]
 8002e98:	801a      	strh	r2, [r3, #0]
	return 1;
 8002e9a:	2301      	movs	r3, #1
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LED_control>:
/*
 *  ФУНКЦ�?Я М�?ГАЕТ СВЕТОД�?ОДАМ ОП�?САНЫМ СТРУКТУРОЙ led_status
 *  ON_time ЗАДАЕТ ВРЕМЯ, КОТОРОЕ СВЕТОД�?ОД ВКЛЮЧЕН
 *  OFF_time ЗАДАЕТ ВРЕМЯ, КОТОРОЕ СВЕТОД�?Д ВЫКЛЮЧЕН
 */
void LED_control(led_status *oneLED, uint16_t ON_time, uint16_t OFF_time){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	803b      	strh	r3, [r7, #0]

	if(OFF_time == 0 && ON_time != 0){
 8002eb8:	883b      	ldrh	r3, [r7, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <LED_control+0x2e>
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <LED_control+0x2e>
		HAL_GPIO_WritePin(oneLED->LED_port, oneLED->LED_pin, GPIO_PIN_SET);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6858      	ldr	r0, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	891b      	ldrh	r3, [r3, #8]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f003 f896 	bl	8006000 <HAL_GPIO_WritePin>
		return;
 8002ed4:	e039      	b.n	8002f4a <LED_control+0xa2>
	}

	if(ON_time == 0 && OFF_time != 0){
 8002ed6:	887b      	ldrh	r3, [r7, #2]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <LED_control+0x4c>
 8002edc:	883b      	ldrh	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <LED_control+0x4c>
		HAL_GPIO_WritePin(oneLED->LED_port, oneLED->LED_pin, GPIO_PIN_RESET);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6858      	ldr	r0, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	891b      	ldrh	r3, [r3, #8]
 8002eea:	2200      	movs	r2, #0
 8002eec:	4619      	mov	r1, r3
 8002eee:	f003 f887 	bl	8006000 <HAL_GPIO_WritePin>
		return;
 8002ef2:	e02a      	b.n	8002f4a <LED_control+0xa2>
	}


	if(HAL_GetTick() - oneLED->timer < ON_time){
 8002ef4:	f001 fc84 	bl	8004800 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d208      	bcs.n	8002f18 <LED_control+0x70>
		HAL_GPIO_WritePin(oneLED->LED_port, oneLED->LED_pin, GPIO_PIN_SET);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6858      	ldr	r0, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	891b      	ldrh	r3, [r3, #8]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4619      	mov	r1, r3
 8002f12:	f003 f875 	bl	8006000 <HAL_GPIO_WritePin>
 8002f16:	e018      	b.n	8002f4a <LED_control+0xa2>
	}
	else if(HAL_GetTick() - oneLED->timer < ON_time + OFF_time){
 8002f18:	f001 fc72 	bl	8004800 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	8879      	ldrh	r1, [r7, #2]
 8002f26:	883a      	ldrh	r2, [r7, #0]
 8002f28:	440a      	add	r2, r1
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d208      	bcs.n	8002f40 <LED_control+0x98>

		HAL_GPIO_WritePin(oneLED->LED_port, oneLED->LED_pin, GPIO_PIN_RESET);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6858      	ldr	r0, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	891b      	ldrh	r3, [r3, #8]
 8002f36:	2200      	movs	r2, #0
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f003 f861 	bl	8006000 <HAL_GPIO_WritePin>
 8002f3e:	e004      	b.n	8002f4a <LED_control+0xa2>
	}
	else oneLED->timer = HAL_GetTick();
 8002f40:	f001 fc5e 	bl	8004800 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	60da      	str	r2, [r3, #12]
}
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <PassSym>:
 * ФУНКЦ�?Я ПРОПУСКАЕТ УКАЗАНОЕ КОЛ�?ЧЕСТВО С�?МВОЛОВ sym_amount
 * C УЧЕТОМ Ц�?КЛ�?ЧНОСТ�? БУФЕРА. ПРОПУЩЕНЫЕ С�?МВОЛЫ НЕ УЧ�?ТЫВАЮТСЯ ПР�? РАСЧЕТЕ CRC32
 * pointer_ - УКАЗАТЕЛЬ НА ТЕКУЩ�?Й ЭЛЕМЕНТ
 * sym_amount - КОЛ�?ЧЕСТВО ПРОПУСКАЕМЫХ С�?МВОЛОВ
 */
void PassSym(uint8_t *buf, size_t buf_size, uint16_t *pointer, uint8_t sym_amount){
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < sym_amount; i++){
 8002f5e:	2300      	movs	r3, #0
 8002f60:	75fb      	strb	r3, [r7, #23]
 8002f62:	e011      	b.n	8002f88 <PassSym+0x38>
		*pointer = (*pointer < buf_size-1) ? *pointer + 1 : 0;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d204      	bcs.n	8002f7c <PassSym+0x2c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	e000      	b.n	8002f7e <PassSym+0x2e>
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sym_amount; i++){
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	3301      	adds	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
 8002f88:	7dfa      	ldrb	r2, [r7, #23]
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d3e9      	bcc.n	8002f64 <PassSym+0x14>
	}
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <PassSymCRC>:

/* ФУНКЦ�?Я ПРОПУСКАЕТ УКАЗАНОЕ КОЛ�?ЧЕСТВО С�?МВОЛОВ sym_amount
 * C УЧЕТОМ Ц�?КЛ�?ЧНОСТ�? БУФЕРА. ПРОПУЩЕНЫЕ С�?МВОЛЫ УЧ�?ТЫВАЮТСЯ ПР�? РАСЧЕТЕ CRC32*/
void PassSymCRC(uint8_t *buf,size_t buf_size,uint16_t *pointer, uint8_t sym_amount,buffer_t *crc_buf){
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < sym_amount; i++){
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
 8002fae:	e01b      	b.n	8002fe8 <PassSymCRC+0x4c>
		CRC32_Put(crc_buf,buf[*pointer]);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6a38      	ldr	r0, [r7, #32]
 8002fc0:	f7fd ff42 	bl	8000e48 <CRC32_Put>
		*pointer = (*pointer < buf_size-1) ? *pointer + 1 : 0;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d204      	bcs.n	8002fdc <PassSymCRC+0x40>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	e000      	b.n	8002fde <PassSymCRC+0x42>
 8002fdc:	2200      	movs	r2, #0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sym_amount; i++){
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
 8002fe8:	7dfa      	ldrb	r2, [r7, #23]
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d3df      	bcc.n	8002fb0 <PassSymCRC+0x14>
	}
}
 8002ff0:	bf00      	nop
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HexToDec>:

/*
 * ФУНКЦ�?Я ПЕРЕВОД�?Т 16-РАЗРЯДНОЕ Ч�?СЛО, ЗАП�?САННОЕ В МАСС�?ВЕ С�?МВОЛОВ
 * В 10-РАЗРЯДНОЕ �?НТОВОЕ ЗНАЧЕН�?Е.
 */
uint32_t HexToDec(char *hex,uint8_t size){
 8002ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
	uint32_t dec = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < size;i++){
 8003008:	2300      	movs	r3, #0
 800300a:	72fb      	strb	r3, [r7, #11]
 800300c:	e2db      	b.n	80035c6 <HexToDec+0x5ce>
		switch (hex[i]){
 800300e:	7afb      	ldrb	r3, [r7, #11]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	3b30      	subs	r3, #48	; 0x30
 8003018:	2b16      	cmp	r3, #22
 800301a:	f200 82d1 	bhi.w	80035c0 <HexToDec+0x5c8>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HexToDec+0x2c>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	080035c1 	.word	0x080035c1
 8003028:	08003291 	.word	0x08003291
 800302c:	080032db 	.word	0x080032db
 8003030:	08003331 	.word	0x08003331
 8003034:	08003389 	.word	0x08003389
 8003038:	08003409 	.word	0x08003409
 800303c:	08003461 	.word	0x08003461
 8003040:	080034b9 	.word	0x080034b9
 8003044:	08003511 	.word	0x08003511
 8003048:	08003569 	.word	0x08003569
 800304c:	080035c1 	.word	0x080035c1
 8003050:	080035c1 	.word	0x080035c1
 8003054:	080035c1 	.word	0x080035c1
 8003058:	080035c1 	.word	0x080035c1
 800305c:	080035c1 	.word	0x080035c1
 8003060:	080035c1 	.word	0x080035c1
 8003064:	080035c1 	.word	0x080035c1
 8003068:	08003081 	.word	0x08003081
 800306c:	080030d9 	.word	0x080030d9
 8003070:	08003131 	.word	0x08003131
 8003074:	08003189 	.word	0x08003189
 8003078:	080031e1 	.word	0x080031e1
 800307c:	08003239 	.word	0x08003239
		case 'A': dec += 10 * pow(16,size-1 - i); break;
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	1e5a      	subs	r2, r3, #1
 8003084:	7afb      	ldrb	r3, [r7, #11]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd f9fb 	bl	8000484 <__aeabi_i2d>
 800308e:	4603      	mov	r3, r0
 8003090:	460c      	mov	r4, r1
 8003092:	ec44 3b11 	vmov	d1, r3, r4
 8003096:	ed9f 0bd2 	vldr	d0, [pc, #840]	; 80033e0 <HexToDec+0x3e8>
 800309a:	f009 fb97 	bl	800c7cc <pow>
 800309e:	ec51 0b10 	vmov	r0, r1, d0
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	4bd0      	ldr	r3, [pc, #832]	; (80033e8 <HexToDec+0x3f0>)
 80030a8:	f7fd fa56 	bl	8000558 <__aeabi_dmul>
 80030ac:	4603      	mov	r3, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	4625      	mov	r5, r4
 80030b2:	461c      	mov	r4, r3
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7fd f9d5 	bl	8000464 <__aeabi_ui2d>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4620      	mov	r0, r4
 80030c0:	4629      	mov	r1, r5
 80030c2:	f7fd f893 	bl	80001ec <__adddf3>
 80030c6:	4603      	mov	r3, r0
 80030c8:	460c      	mov	r4, r1
 80030ca:	4618      	mov	r0, r3
 80030cc:	4621      	mov	r1, r4
 80030ce:	f7fd fcf3 	bl	8000ab8 <__aeabi_d2uiz>
 80030d2:	4603      	mov	r3, r0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	e273      	b.n	80035c0 <HexToDec+0x5c8>
		case 'B': dec += 11 * pow(16,size-1 - i); break;
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	1e5a      	subs	r2, r3, #1
 80030dc:	7afb      	ldrb	r3, [r7, #11]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd f9cf 	bl	8000484 <__aeabi_i2d>
 80030e6:	4603      	mov	r3, r0
 80030e8:	460c      	mov	r4, r1
 80030ea:	ec44 3b11 	vmov	d1, r3, r4
 80030ee:	ed9f 0bbc 	vldr	d0, [pc, #752]	; 80033e0 <HexToDec+0x3e8>
 80030f2:	f009 fb6b 	bl	800c7cc <pow>
 80030f6:	ec51 0b10 	vmov	r0, r1, d0
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	4bbb      	ldr	r3, [pc, #748]	; (80033ec <HexToDec+0x3f4>)
 8003100:	f7fd fa2a 	bl	8000558 <__aeabi_dmul>
 8003104:	4603      	mov	r3, r0
 8003106:	460c      	mov	r4, r1
 8003108:	4625      	mov	r5, r4
 800310a:	461c      	mov	r4, r3
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7fd f9a9 	bl	8000464 <__aeabi_ui2d>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4620      	mov	r0, r4
 8003118:	4629      	mov	r1, r5
 800311a:	f7fd f867 	bl	80001ec <__adddf3>
 800311e:	4603      	mov	r3, r0
 8003120:	460c      	mov	r4, r1
 8003122:	4618      	mov	r0, r3
 8003124:	4621      	mov	r1, r4
 8003126:	f7fd fcc7 	bl	8000ab8 <__aeabi_d2uiz>
 800312a:	4603      	mov	r3, r0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e247      	b.n	80035c0 <HexToDec+0x5c8>
		case 'C': dec += 12 * pow(16,size-1 - i); break;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	1e5a      	subs	r2, r3, #1
 8003134:	7afb      	ldrb	r3, [r7, #11]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd f9a3 	bl	8000484 <__aeabi_i2d>
 800313e:	4603      	mov	r3, r0
 8003140:	460c      	mov	r4, r1
 8003142:	ec44 3b11 	vmov	d1, r3, r4
 8003146:	ed9f 0ba6 	vldr	d0, [pc, #664]	; 80033e0 <HexToDec+0x3e8>
 800314a:	f009 fb3f 	bl	800c7cc <pow>
 800314e:	ec51 0b10 	vmov	r0, r1, d0
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	4ba6      	ldr	r3, [pc, #664]	; (80033f0 <HexToDec+0x3f8>)
 8003158:	f7fd f9fe 	bl	8000558 <__aeabi_dmul>
 800315c:	4603      	mov	r3, r0
 800315e:	460c      	mov	r4, r1
 8003160:	4625      	mov	r5, r4
 8003162:	461c      	mov	r4, r3
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f7fd f97d 	bl	8000464 <__aeabi_ui2d>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4620      	mov	r0, r4
 8003170:	4629      	mov	r1, r5
 8003172:	f7fd f83b 	bl	80001ec <__adddf3>
 8003176:	4603      	mov	r3, r0
 8003178:	460c      	mov	r4, r1
 800317a:	4618      	mov	r0, r3
 800317c:	4621      	mov	r1, r4
 800317e:	f7fd fc9b 	bl	8000ab8 <__aeabi_d2uiz>
 8003182:	4603      	mov	r3, r0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	e21b      	b.n	80035c0 <HexToDec+0x5c8>
		case 'D': dec += 13 * pow(16,size-1 - i); break;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	1e5a      	subs	r2, r3, #1
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f977 	bl	8000484 <__aeabi_i2d>
 8003196:	4603      	mov	r3, r0
 8003198:	460c      	mov	r4, r1
 800319a:	ec44 3b11 	vmov	d1, r3, r4
 800319e:	ed9f 0b90 	vldr	d0, [pc, #576]	; 80033e0 <HexToDec+0x3e8>
 80031a2:	f009 fb13 	bl	800c7cc <pow>
 80031a6:	ec51 0b10 	vmov	r0, r1, d0
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	4b91      	ldr	r3, [pc, #580]	; (80033f4 <HexToDec+0x3fc>)
 80031b0:	f7fd f9d2 	bl	8000558 <__aeabi_dmul>
 80031b4:	4603      	mov	r3, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	4625      	mov	r5, r4
 80031ba:	461c      	mov	r4, r3
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7fd f951 	bl	8000464 <__aeabi_ui2d>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4620      	mov	r0, r4
 80031c8:	4629      	mov	r1, r5
 80031ca:	f7fd f80f 	bl	80001ec <__adddf3>
 80031ce:	4603      	mov	r3, r0
 80031d0:	460c      	mov	r4, r1
 80031d2:	4618      	mov	r0, r3
 80031d4:	4621      	mov	r1, r4
 80031d6:	f7fd fc6f 	bl	8000ab8 <__aeabi_d2uiz>
 80031da:	4603      	mov	r3, r0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e1ef      	b.n	80035c0 <HexToDec+0x5c8>
		case 'E': dec += 14 * pow(16,size-1 - i); break;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	1e5a      	subs	r2, r3, #1
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd f94b 	bl	8000484 <__aeabi_i2d>
 80031ee:	4603      	mov	r3, r0
 80031f0:	460c      	mov	r4, r1
 80031f2:	ec44 3b11 	vmov	d1, r3, r4
 80031f6:	ed9f 0b7a 	vldr	d0, [pc, #488]	; 80033e0 <HexToDec+0x3e8>
 80031fa:	f009 fae7 	bl	800c7cc <pow>
 80031fe:	ec51 0b10 	vmov	r0, r1, d0
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	4b7c      	ldr	r3, [pc, #496]	; (80033f8 <HexToDec+0x400>)
 8003208:	f7fd f9a6 	bl	8000558 <__aeabi_dmul>
 800320c:	4603      	mov	r3, r0
 800320e:	460c      	mov	r4, r1
 8003210:	4625      	mov	r5, r4
 8003212:	461c      	mov	r4, r3
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7fd f925 	bl	8000464 <__aeabi_ui2d>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4620      	mov	r0, r4
 8003220:	4629      	mov	r1, r5
 8003222:	f7fc ffe3 	bl	80001ec <__adddf3>
 8003226:	4603      	mov	r3, r0
 8003228:	460c      	mov	r4, r1
 800322a:	4618      	mov	r0, r3
 800322c:	4621      	mov	r1, r4
 800322e:	f7fd fc43 	bl	8000ab8 <__aeabi_d2uiz>
 8003232:	4603      	mov	r3, r0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e1c3      	b.n	80035c0 <HexToDec+0x5c8>
		case 'F': dec += 15 * pow(16,size-1 - i); break;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	1e5a      	subs	r2, r3, #1
 800323c:	7afb      	ldrb	r3, [r7, #11]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd f91f 	bl	8000484 <__aeabi_i2d>
 8003246:	4603      	mov	r3, r0
 8003248:	460c      	mov	r4, r1
 800324a:	ec44 3b11 	vmov	d1, r3, r4
 800324e:	ed9f 0b64 	vldr	d0, [pc, #400]	; 80033e0 <HexToDec+0x3e8>
 8003252:	f009 fabb 	bl	800c7cc <pow>
 8003256:	ec51 0b10 	vmov	r0, r1, d0
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HexToDec+0x404>)
 8003260:	f7fd f97a 	bl	8000558 <__aeabi_dmul>
 8003264:	4603      	mov	r3, r0
 8003266:	460c      	mov	r4, r1
 8003268:	4625      	mov	r5, r4
 800326a:	461c      	mov	r4, r3
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7fd f8f9 	bl	8000464 <__aeabi_ui2d>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4620      	mov	r0, r4
 8003278:	4629      	mov	r1, r5
 800327a:	f7fc ffb7 	bl	80001ec <__adddf3>
 800327e:	4603      	mov	r3, r0
 8003280:	460c      	mov	r4, r1
 8003282:	4618      	mov	r0, r3
 8003284:	4621      	mov	r1, r4
 8003286:	f7fd fc17 	bl	8000ab8 <__aeabi_d2uiz>
 800328a:	4603      	mov	r3, r0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e197      	b.n	80035c0 <HexToDec+0x5c8>

		case '1': dec += 1 * pow(16,size-1 - i); break;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	1e5a      	subs	r2, r3, #1
 8003294:	7afb      	ldrb	r3, [r7, #11]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f8f3 	bl	8000484 <__aeabi_i2d>
 800329e:	4603      	mov	r3, r0
 80032a0:	460c      	mov	r4, r1
 80032a2:	ec44 3b11 	vmov	d1, r3, r4
 80032a6:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 80033e0 <HexToDec+0x3e8>
 80032aa:	f009 fa8f 	bl	800c7cc <pow>
 80032ae:	ec56 5b10 	vmov	r5, r6, d0
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7fd f8d6 	bl	8000464 <__aeabi_ui2d>
 80032b8:	4603      	mov	r3, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	461a      	mov	r2, r3
 80032be:	4623      	mov	r3, r4
 80032c0:	4628      	mov	r0, r5
 80032c2:	4631      	mov	r1, r6
 80032c4:	f7fc ff92 	bl	80001ec <__adddf3>
 80032c8:	4603      	mov	r3, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	4618      	mov	r0, r3
 80032ce:	4621      	mov	r1, r4
 80032d0:	f7fd fbf2 	bl	8000ab8 <__aeabi_d2uiz>
 80032d4:	4603      	mov	r3, r0
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e172      	b.n	80035c0 <HexToDec+0x5c8>
		case '2': dec += 2 * pow(16,size-1 - i); break;
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	1e5a      	subs	r2, r3, #1
 80032de:	7afb      	ldrb	r3, [r7, #11]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f8ce 	bl	8000484 <__aeabi_i2d>
 80032e8:	4603      	mov	r3, r0
 80032ea:	460c      	mov	r4, r1
 80032ec:	ec44 3b11 	vmov	d1, r3, r4
 80032f0:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 80033e0 <HexToDec+0x3e8>
 80032f4:	f009 fa6a 	bl	800c7cc <pow>
 80032f8:	ec51 0b10 	vmov	r0, r1, d0
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	f7fc ff74 	bl	80001ec <__adddf3>
 8003304:	4603      	mov	r3, r0
 8003306:	460c      	mov	r4, r1
 8003308:	4625      	mov	r5, r4
 800330a:	461c      	mov	r4, r3
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7fd f8a9 	bl	8000464 <__aeabi_ui2d>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4620      	mov	r0, r4
 8003318:	4629      	mov	r1, r5
 800331a:	f7fc ff67 	bl	80001ec <__adddf3>
 800331e:	4603      	mov	r3, r0
 8003320:	460c      	mov	r4, r1
 8003322:	4618      	mov	r0, r3
 8003324:	4621      	mov	r1, r4
 8003326:	f7fd fbc7 	bl	8000ab8 <__aeabi_d2uiz>
 800332a:	4603      	mov	r3, r0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	e147      	b.n	80035c0 <HexToDec+0x5c8>
		case '3': dec += 3 * pow(16,size-1 - i); break;
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	1e5a      	subs	r2, r3, #1
 8003334:	7afb      	ldrb	r3, [r7, #11]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f8a3 	bl	8000484 <__aeabi_i2d>
 800333e:	4603      	mov	r3, r0
 8003340:	460c      	mov	r4, r1
 8003342:	ec44 3b11 	vmov	d1, r3, r4
 8003346:	ed9f 0b26 	vldr	d0, [pc, #152]	; 80033e0 <HexToDec+0x3e8>
 800334a:	f009 fa3f 	bl	800c7cc <pow>
 800334e:	ec51 0b10 	vmov	r0, r1, d0
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <HexToDec+0x408>)
 8003358:	f7fd f8fe 	bl	8000558 <__aeabi_dmul>
 800335c:	4603      	mov	r3, r0
 800335e:	460c      	mov	r4, r1
 8003360:	4625      	mov	r5, r4
 8003362:	461c      	mov	r4, r3
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7fd f87d 	bl	8000464 <__aeabi_ui2d>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4620      	mov	r0, r4
 8003370:	4629      	mov	r1, r5
 8003372:	f7fc ff3b 	bl	80001ec <__adddf3>
 8003376:	4603      	mov	r3, r0
 8003378:	460c      	mov	r4, r1
 800337a:	4618      	mov	r0, r3
 800337c:	4621      	mov	r1, r4
 800337e:	f7fd fb9b 	bl	8000ab8 <__aeabi_d2uiz>
 8003382:	4603      	mov	r3, r0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e11b      	b.n	80035c0 <HexToDec+0x5c8>
		case '4': dec += 4 * pow(16,size-1 - i); break;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	1e5a      	subs	r2, r3, #1
 800338c:	7afb      	ldrb	r3, [r7, #11]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd f877 	bl	8000484 <__aeabi_i2d>
 8003396:	4603      	mov	r3, r0
 8003398:	460c      	mov	r4, r1
 800339a:	ec44 3b11 	vmov	d1, r3, r4
 800339e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80033e0 <HexToDec+0x3e8>
 80033a2:	f009 fa13 	bl	800c7cc <pow>
 80033a6:	ec51 0b10 	vmov	r0, r1, d0
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HexToDec+0x40c>)
 80033b0:	f7fd f8d2 	bl	8000558 <__aeabi_dmul>
 80033b4:	4603      	mov	r3, r0
 80033b6:	460c      	mov	r4, r1
 80033b8:	4625      	mov	r5, r4
 80033ba:	461c      	mov	r4, r3
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7fd f851 	bl	8000464 <__aeabi_ui2d>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4620      	mov	r0, r4
 80033c8:	4629      	mov	r1, r5
 80033ca:	f7fc ff0f 	bl	80001ec <__adddf3>
 80033ce:	4603      	mov	r3, r0
 80033d0:	460c      	mov	r4, r1
 80033d2:	4618      	mov	r0, r3
 80033d4:	4621      	mov	r1, r4
 80033d6:	f7fd fb6f 	bl	8000ab8 <__aeabi_d2uiz>
 80033da:	4603      	mov	r3, r0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e0ef      	b.n	80035c0 <HexToDec+0x5c8>
 80033e0:	00000000 	.word	0x00000000
 80033e4:	40300000 	.word	0x40300000
 80033e8:	40240000 	.word	0x40240000
 80033ec:	40260000 	.word	0x40260000
 80033f0:	40280000 	.word	0x40280000
 80033f4:	402a0000 	.word	0x402a0000
 80033f8:	402c0000 	.word	0x402c0000
 80033fc:	402e0000 	.word	0x402e0000
 8003400:	40080000 	.word	0x40080000
 8003404:	40100000 	.word	0x40100000
		case '5': dec += 5 * pow(16,size-1 - i); break;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	1e5a      	subs	r2, r3, #1
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f837 	bl	8000484 <__aeabi_i2d>
 8003416:	4603      	mov	r3, r0
 8003418:	460c      	mov	r4, r1
 800341a:	ec44 3b11 	vmov	d1, r3, r4
 800341e:	ed9f 0b70 	vldr	d0, [pc, #448]	; 80035e0 <HexToDec+0x5e8>
 8003422:	f009 f9d3 	bl	800c7cc <pow>
 8003426:	ec51 0b10 	vmov	r0, r1, d0
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	4b6e      	ldr	r3, [pc, #440]	; (80035e8 <HexToDec+0x5f0>)
 8003430:	f7fd f892 	bl	8000558 <__aeabi_dmul>
 8003434:	4603      	mov	r3, r0
 8003436:	460c      	mov	r4, r1
 8003438:	4625      	mov	r5, r4
 800343a:	461c      	mov	r4, r3
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7fd f811 	bl	8000464 <__aeabi_ui2d>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4620      	mov	r0, r4
 8003448:	4629      	mov	r1, r5
 800344a:	f7fc fecf 	bl	80001ec <__adddf3>
 800344e:	4603      	mov	r3, r0
 8003450:	460c      	mov	r4, r1
 8003452:	4618      	mov	r0, r3
 8003454:	4621      	mov	r1, r4
 8003456:	f7fd fb2f 	bl	8000ab8 <__aeabi_d2uiz>
 800345a:	4603      	mov	r3, r0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e0af      	b.n	80035c0 <HexToDec+0x5c8>
		case '6': dec += 6 * pow(16,size-1 - i); break;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	1e5a      	subs	r2, r3, #1
 8003464:	7afb      	ldrb	r3, [r7, #11]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f80b 	bl	8000484 <__aeabi_i2d>
 800346e:	4603      	mov	r3, r0
 8003470:	460c      	mov	r4, r1
 8003472:	ec44 3b11 	vmov	d1, r3, r4
 8003476:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 80035e0 <HexToDec+0x5e8>
 800347a:	f009 f9a7 	bl	800c7cc <pow>
 800347e:	ec51 0b10 	vmov	r0, r1, d0
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HexToDec+0x5f4>)
 8003488:	f7fd f866 	bl	8000558 <__aeabi_dmul>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	4625      	mov	r5, r4
 8003492:	461c      	mov	r4, r3
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7fc ffe5 	bl	8000464 <__aeabi_ui2d>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7fc fea3 	bl	80001ec <__adddf3>
 80034a6:	4603      	mov	r3, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	4618      	mov	r0, r3
 80034ac:	4621      	mov	r1, r4
 80034ae:	f7fd fb03 	bl	8000ab8 <__aeabi_d2uiz>
 80034b2:	4603      	mov	r3, r0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e083      	b.n	80035c0 <HexToDec+0x5c8>
		case '7': dec += 7 * pow(16,size-1 - i); break;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	1e5a      	subs	r2, r3, #1
 80034bc:	7afb      	ldrb	r3, [r7, #11]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fc ffdf 	bl	8000484 <__aeabi_i2d>
 80034c6:	4603      	mov	r3, r0
 80034c8:	460c      	mov	r4, r1
 80034ca:	ec44 3b11 	vmov	d1, r3, r4
 80034ce:	ed9f 0b44 	vldr	d0, [pc, #272]	; 80035e0 <HexToDec+0x5e8>
 80034d2:	f009 f97b 	bl	800c7cc <pow>
 80034d6:	ec51 0b10 	vmov	r0, r1, d0
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	4b44      	ldr	r3, [pc, #272]	; (80035f0 <HexToDec+0x5f8>)
 80034e0:	f7fd f83a 	bl	8000558 <__aeabi_dmul>
 80034e4:	4603      	mov	r3, r0
 80034e6:	460c      	mov	r4, r1
 80034e8:	4625      	mov	r5, r4
 80034ea:	461c      	mov	r4, r3
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7fc ffb9 	bl	8000464 <__aeabi_ui2d>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4620      	mov	r0, r4
 80034f8:	4629      	mov	r1, r5
 80034fa:	f7fc fe77 	bl	80001ec <__adddf3>
 80034fe:	4603      	mov	r3, r0
 8003500:	460c      	mov	r4, r1
 8003502:	4618      	mov	r0, r3
 8003504:	4621      	mov	r1, r4
 8003506:	f7fd fad7 	bl	8000ab8 <__aeabi_d2uiz>
 800350a:	4603      	mov	r3, r0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e057      	b.n	80035c0 <HexToDec+0x5c8>
		case '8': dec += 8 * pow(16,size-1 - i); break;
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	7afb      	ldrb	r3, [r7, #11]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	4618      	mov	r0, r3
 800351a:	f7fc ffb3 	bl	8000484 <__aeabi_i2d>
 800351e:	4603      	mov	r3, r0
 8003520:	460c      	mov	r4, r1
 8003522:	ec44 3b11 	vmov	d1, r3, r4
 8003526:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80035e0 <HexToDec+0x5e8>
 800352a:	f009 f94f 	bl	800c7cc <pow>
 800352e:	ec51 0b10 	vmov	r0, r1, d0
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HexToDec+0x5fc>)
 8003538:	f7fd f80e 	bl	8000558 <__aeabi_dmul>
 800353c:	4603      	mov	r3, r0
 800353e:	460c      	mov	r4, r1
 8003540:	4625      	mov	r5, r4
 8003542:	461c      	mov	r4, r3
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7fc ff8d 	bl	8000464 <__aeabi_ui2d>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4620      	mov	r0, r4
 8003550:	4629      	mov	r1, r5
 8003552:	f7fc fe4b 	bl	80001ec <__adddf3>
 8003556:	4603      	mov	r3, r0
 8003558:	460c      	mov	r4, r1
 800355a:	4618      	mov	r0, r3
 800355c:	4621      	mov	r1, r4
 800355e:	f7fd faab 	bl	8000ab8 <__aeabi_d2uiz>
 8003562:	4603      	mov	r3, r0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e02b      	b.n	80035c0 <HexToDec+0x5c8>
		case '9': dec += 9 * pow(16,size-1 - i); break;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	1e5a      	subs	r2, r3, #1
 800356c:	7afb      	ldrb	r3, [r7, #11]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	4618      	mov	r0, r3
 8003572:	f7fc ff87 	bl	8000484 <__aeabi_i2d>
 8003576:	4603      	mov	r3, r0
 8003578:	460c      	mov	r4, r1
 800357a:	ec44 3b11 	vmov	d1, r3, r4
 800357e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80035e0 <HexToDec+0x5e8>
 8003582:	f009 f923 	bl	800c7cc <pow>
 8003586:	ec51 0b10 	vmov	r0, r1, d0
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <HexToDec+0x600>)
 8003590:	f7fc ffe2 	bl	8000558 <__aeabi_dmul>
 8003594:	4603      	mov	r3, r0
 8003596:	460c      	mov	r4, r1
 8003598:	4625      	mov	r5, r4
 800359a:	461c      	mov	r4, r3
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f7fc ff61 	bl	8000464 <__aeabi_ui2d>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4620      	mov	r0, r4
 80035a8:	4629      	mov	r1, r5
 80035aa:	f7fc fe1f 	bl	80001ec <__adddf3>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	4618      	mov	r0, r3
 80035b4:	4621      	mov	r1, r4
 80035b6:	f7fd fa7f 	bl	8000ab8 <__aeabi_d2uiz>
 80035ba:	4603      	mov	r3, r0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	bf00      	nop
	for(uint8_t i = 0; i < size;i++){
 80035c0:	7afb      	ldrb	r3, [r7, #11]
 80035c2:	3301      	adds	r3, #1
 80035c4:	72fb      	strb	r3, [r7, #11]
 80035c6:	7afa      	ldrb	r2, [r7, #11]
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	f4ff ad1f 	bcc.w	800300e <HexToDec+0x16>
		case '0': dec += 0; break;
		}
	}
	return dec;
 80035d0:	68fb      	ldr	r3, [r7, #12]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035da:	bf00      	nop
 80035dc:	f3af 8000 	nop.w
 80035e0:	00000000 	.word	0x00000000
 80035e4:	40300000 	.word	0x40300000
 80035e8:	40140000 	.word	0x40140000
 80035ec:	40180000 	.word	0x40180000
 80035f0:	401c0000 	.word	0x401c0000
 80035f4:	40200000 	.word	0x40200000
 80035f8:	40220000 	.word	0x40220000

080035fc <LEDStringPars>:

/*
 * ФУНКЦ�?Я ПАРС�?НГА СТРОК СВЕТОД�?ОДОВ
 *
 */
void LEDStringPars(string_t *datastring, RGB_status *leds){
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]

	// Т.К. 3 RGB
	for(uint8_t i = 0; i < 3; i++){
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	e04c      	b.n	80036a6 <LEDStringPars+0xaa>
		uint8_t pointer = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	73bb      	strb	r3, [r7, #14]
		while(pointer < 6){
 8003610:	e043      	b.n	800369a <LEDStringPars+0x9e>
			switch(datastring[serv_string_1].buf[pointer]){
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 8003618:	3336      	adds	r3, #54	; 0x36
 800361a:	7bba      	ldrb	r2, [r7, #14]
 800361c:	5c9b      	ldrb	r3, [r3, r2]
 800361e:	2b47      	cmp	r3, #71	; 0x47
 8003620:	d015      	beq.n	800364e <LEDStringPars+0x52>
 8003622:	2b52      	cmp	r3, #82	; 0x52
 8003624:	d002      	beq.n	800362c <LEDStringPars+0x30>
 8003626:	2b42      	cmp	r3, #66	; 0x42
 8003628:	d022      	beq.n	8003670 <LEDStringPars+0x74>
 800362a:	e033      	b.n	8003694 <LEDStringPars+0x98>
			case (uint8_t)'R': leds[i].RED.LED_status = datastring[serv_string_1].buf[pointer+1]; break;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 521f 	add.w	r2, r3, #10176	; 0x27c0
 8003632:	3236      	adds	r2, #54	; 0x36
 8003634:	7bbb      	ldrb	r3, [r7, #14]
 8003636:	1c58      	adds	r0, r3, #1
 8003638:	7bf9      	ldrb	r1, [r7, #15]
 800363a:	460b      	mov	r3, r1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	440b      	add	r3, r1
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	4619      	mov	r1, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	440b      	add	r3, r1
 8003648:	5c12      	ldrb	r2, [r2, r0]
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e022      	b.n	8003694 <LEDStringPars+0x98>
			case (uint8_t)'G': leds[i].GREEN.LED_status = datastring[serv_string_1].buf[pointer+1]; break;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 521f 	add.w	r2, r3, #10176	; 0x27c0
 8003654:	3236      	adds	r2, #54	; 0x36
 8003656:	7bbb      	ldrb	r3, [r7, #14]
 8003658:	1c58      	adds	r0, r3, #1
 800365a:	7bf9      	ldrb	r1, [r7, #15]
 800365c:	460b      	mov	r3, r1
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	440b      	add	r3, r1
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	440b      	add	r3, r1
 800366a:	5c12      	ldrb	r2, [r2, r0]
 800366c:	741a      	strb	r2, [r3, #16]
 800366e:	e011      	b.n	8003694 <LEDStringPars+0x98>
			case (uint8_t)'B': leds[i].BLUE.LED_status = datastring[serv_string_1].buf[pointer+1]; break;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f503 521f 	add.w	r2, r3, #10176	; 0x27c0
 8003676:	3236      	adds	r2, #54	; 0x36
 8003678:	7bbb      	ldrb	r3, [r7, #14]
 800367a:	1c58      	adds	r0, r3, #1
 800367c:	7bf9      	ldrb	r1, [r7, #15]
 800367e:	460b      	mov	r3, r1
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	440b      	add	r3, r1
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	4619      	mov	r1, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	440b      	add	r3, r1
 800368c:	5c12      	ldrb	r2, [r2, r0]
 800368e:	f883 2020 	strb.w	r2, [r3, #32]
 8003692:	bf00      	nop
			}
			pointer++;
 8003694:	7bbb      	ldrb	r3, [r7, #14]
 8003696:	3301      	adds	r3, #1
 8003698:	73bb      	strb	r3, [r7, #14]
		while(pointer < 6){
 800369a:	7bbb      	ldrb	r3, [r7, #14]
 800369c:	2b05      	cmp	r3, #5
 800369e:	d9b8      	bls.n	8003612 <LEDStringPars+0x16>
	for(uint8_t i = 0; i < 3; i++){
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	3301      	adds	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d9af      	bls.n	800360c <LEDStringPars+0x10>
		}
	}
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <ServiceStringPars>:

/*
 * ФУНКЦ�?Я СТРОК�?, УПРАВЛЯЮЩ�?Е РЕЛЕ, DC �? ДС�?ПЛЕЕМ
 */
void ServiceStringPars(string_t *datastring, ctrl_status *active){
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
	active->RELE[0] = (datastring[serv_string_2].buf[1] == '1') ? 1 : 0;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80036c8:	3338      	adds	r3, #56	; 0x38
 80036ca:	785b      	ldrb	r3, [r3, #1]
 80036cc:	2b31      	cmp	r3, #49	; 0x31
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	701a      	strb	r2, [r3, #0]
	active->RELE[1] = (datastring[serv_string_2].buf[3] == '1') ? 1 : 0;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80036e2:	3338      	adds	r3, #56	; 0x38
 80036e4:	78db      	ldrb	r3, [r3, #3]
 80036e6:	2b31      	cmp	r3, #49	; 0x31
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	705a      	strb	r2, [r3, #1]
	active->RELE[2] = (datastring[serv_string_2].buf[5] == '1') ? 1 : 0;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80036fc:	3338      	adds	r3, #56	; 0x38
 80036fe:	795b      	ldrb	r3, [r3, #5]
 8003700:	2b31      	cmp	r3, #49	; 0x31
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	709a      	strb	r2, [r3, #2]
	active->RELE[3] = (datastring[serv_string_2].buf[7] == '1') ? 1 : 0;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003716:	3338      	adds	r3, #56	; 0x38
 8003718:	79db      	ldrb	r3, [r3, #7]
 800371a:	2b31      	cmp	r3, #49	; 0x31
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	70da      	strb	r2, [r3, #3]
	active->DC = datastring[serv_string_2].buf[10] - 48;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003730:	3338      	adds	r3, #56	; 0x38
 8003732:	7a9b      	ldrb	r3, [r3, #10]
 8003734:	3b30      	subs	r3, #48	; 0x30
 8003736:	b2da      	uxtb	r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	711a      	strb	r2, [r3, #4]
	active->DISP = datastring[serv_string_2].buf[15] - 48;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003742:	3338      	adds	r3, #56	; 0x38
 8003744:	7bdb      	ldrb	r3, [r3, #15]
 8003746:	3b30      	subs	r3, #48	; 0x30
 8003748:	b2da      	uxtb	r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	715a      	strb	r2, [r3, #5]
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <HAL_UART_RxHalfCpltCallback>:

/*
 * ОБРАБОТЧ�?К ПРЕРЫВАН�?Й ПОЛОВ�?НЫ ПЕРЕПОЛНЕН�?Я БУФЕРА uatrt_buf
 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	uart_hlf_flag = 1;
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20001098 	.word	0x20001098

0800377c <DisplayInit>:

/*
 * фУНКЦ�?Я �?Н�?Ц�?АЛ�?ЗАЦ�?�? Д�?СПЛЕЯ
 */
void DisplayInit(u8g2_t* u8g2){
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	u8g2_Setup_ssd1322_nhd_256x64_f(u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <DisplayInit+0x30>)
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <DisplayInit+0x34>)
 8003788:	490a      	ldr	r1, [pc, #40]	; (80037b4 <DisplayInit+0x38>)
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f005 f9ae 	bl	8008aec <u8g2_Setup_ssd1322_nhd_256x64_f>
	u8g2_InitDisplay(u8g2);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f006 fe47 	bl	800a424 <u8x8_InitDisplay>
	u8g2_ClearDisplay(u8g2);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f005 f983 	bl	8008aa2 <u8g2_ClearDisplay>
	u8g2_SetPowerSave(u8g2, 0);
 800379c:	2100      	movs	r1, #0
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f006 fe4f 	bl	800a442 <u8x8_SetPowerSave>
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	08003df9 	.word	0x08003df9
 80037b0:	08003ee5 	.word	0x08003ee5
 80037b4:	080129f8 	.word	0x080129f8

080037b8 <MX_GPIO_Init>:
     PA2   ------> SharedAnalog_PA2
     PA3   ------> SharedAnalog_PA3
     PB5   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	; 0x30
 80037bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037be:	f107 031c 	add.w	r3, r7, #28
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]
 80037cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	4b9d      	ldr	r3, [pc, #628]	; (8003a48 <MX_GPIO_Init+0x290>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a9c      	ldr	r2, [pc, #624]	; (8003a48 <MX_GPIO_Init+0x290>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4b9a      	ldr	r3, [pc, #616]	; (8003a48 <MX_GPIO_Init+0x290>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	4b96      	ldr	r3, [pc, #600]	; (8003a48 <MX_GPIO_Init+0x290>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a95      	ldr	r2, [pc, #596]	; (8003a48 <MX_GPIO_Init+0x290>)
 80037f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f8:	6313      	str	r3, [r2, #48]	; 0x30
 80037fa:	4b93      	ldr	r3, [pc, #588]	; (8003a48 <MX_GPIO_Init+0x290>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	4b8f      	ldr	r3, [pc, #572]	; (8003a48 <MX_GPIO_Init+0x290>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a8e      	ldr	r2, [pc, #568]	; (8003a48 <MX_GPIO_Init+0x290>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b8c      	ldr	r3, [pc, #560]	; (8003a48 <MX_GPIO_Init+0x290>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	4b88      	ldr	r3, [pc, #544]	; (8003a48 <MX_GPIO_Init+0x290>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a87      	ldr	r2, [pc, #540]	; (8003a48 <MX_GPIO_Init+0x290>)
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b85      	ldr	r3, [pc, #532]	; (8003a48 <MX_GPIO_Init+0x290>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	4b81      	ldr	r3, [pc, #516]	; (8003a48 <MX_GPIO_Init+0x290>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4a80      	ldr	r2, [pc, #512]	; (8003a48 <MX_GPIO_Init+0x290>)
 8003848:	f043 0310 	orr.w	r3, r3, #16
 800384c:	6313      	str	r3, [r2, #48]	; 0x30
 800384e:	4b7e      	ldr	r3, [pc, #504]	; (8003a48 <MX_GPIO_Init+0x290>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	4b7a      	ldr	r3, [pc, #488]	; (8003a48 <MX_GPIO_Init+0x290>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a79      	ldr	r2, [pc, #484]	; (8003a48 <MX_GPIO_Init+0x290>)
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b77      	ldr	r3, [pc, #476]	; (8003a48 <MX_GPIO_Init+0x290>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STM32_OUT_DOG_Pin|STM32_RS_DC_DC_Pin|STM32_relay_swith_pin_Pin|STM32_relay_outside_Pin 
 8003876:	2200      	movs	r2, #0
 8003878:	f242 319e 	movw	r1, #9118	; 0x239e
 800387c:	4873      	ldr	r0, [pc, #460]	; (8003a4c <MX_GPIO_Init+0x294>)
 800387e:	f002 fbbf 	bl	8006000 <HAL_GPIO_WritePin>
                          |OLED_CS_Pin|RED_422_Pin|SYM_LED_R_Pin|GREEN_422_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RES_Pin|OLED_D_C_Pin|BLUE_422_Pin, GPIO_PIN_RESET);
 8003882:	2200      	movs	r2, #0
 8003884:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003888:	4871      	ldr	r0, [pc, #452]	; (8003a50 <MX_GPIO_Init+0x298>)
 800388a:	f002 fbb9 	bl	8006000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SYM_LED_G_Pin|BLUE_485_Pin|SYM_LED_B_Pin|GREEN_485_Pin 
 800388e:	2200      	movs	r2, #0
 8003890:	f24f 3110 	movw	r1, #62224	; 0xf310
 8003894:	486f      	ldr	r0, [pc, #444]	; (8003a54 <MX_GPIO_Init+0x29c>)
 8003896:	f002 fbb3 	bl	8006000 <HAL_GPIO_WritePin>
                          |STM32_OUT_REL_3_Pin|STM32_OUT_REL_2_Pin|STM32_OUT_REL_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STM32_BUTTON_LED_POWER_Pin|RED_485_Pin|STM32_ZUMMER_Pin|BLUE_232_Pin 
 800389a:	2200      	movs	r2, #0
 800389c:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80038a0:	486d      	ldr	r0, [pc, #436]	; (8003a58 <MX_GPIO_Init+0x2a0>)
 80038a2:	f002 fbad 	bl	8006000 <HAL_GPIO_WritePin>
                          |STM32_Relay_mmn_Pin|GREEN_232_Pin|STM32_Relay_mother_Pin|RED_232_Pin 
                          |STM32_BUTTON_LED_1_Pin|STM32_BUTTON_LED_2_Pin|STM32_BUTTON_LED_3_Pin|STM32_OUT_REL_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STM32_OUT_DOG_Pin|STM32_RS_DC_DC_Pin|STM32_relay_swith_pin_Pin|STM32_relay_outside_Pin;
 80038a6:	f242 030e 	movw	r3, #8206	; 0x200e
 80038aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ac:	2301      	movs	r3, #1
 80038ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b4:	2300      	movs	r3, #0
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b8:	f107 031c 	add.w	r3, r7, #28
 80038bc:	4619      	mov	r1, r3
 80038be:	4863      	ldr	r0, [pc, #396]	; (8003a4c <MX_GPIO_Init+0x294>)
 80038c0:	f002 f9ec 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM32_BUTTON_POWER_Pin;
 80038c4:	2301      	movs	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c8:	2300      	movs	r3, #0
 80038ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038cc:	2301      	movs	r3, #1
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(STM32_BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 80038d0:	f107 031c 	add.w	r3, r7, #28
 80038d4:	4619      	mov	r1, r3
 80038d6:	485d      	ldr	r0, [pc, #372]	; (8003a4c <MX_GPIO_Init+0x294>)
 80038d8:	f002 f9e0 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STM32_ADC_NTC_1_Pin|STM32_ADC_5V_Pin|STM32_ADC_3_3V_Pin|STM32_ADC_12V_Pin;
 80038dc:	230f      	movs	r3, #15
 80038de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038e0:	2303      	movs	r3, #3
 80038e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e8:	f107 031c 	add.w	r3, r7, #28
 80038ec:	4619      	mov	r1, r3
 80038ee:	4858      	ldr	r0, [pc, #352]	; (8003a50 <MX_GPIO_Init+0x298>)
 80038f0:	f002 f9d4 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_D_C_Pin|BLUE_422_Pin;
 80038f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80038f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038fa:	2301      	movs	r3, #1
 80038fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038fe:	2302      	movs	r3, #2
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003902:	2300      	movs	r3, #0
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003906:	f107 031c 	add.w	r3, r7, #28
 800390a:	4619      	mov	r1, r3
 800390c:	4850      	ldr	r0, [pc, #320]	; (8003a50 <MX_GPIO_Init+0x298>)
 800390e:	f002 f9c5 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|RED_422_Pin|SYM_LED_R_Pin|GREEN_422_Pin;
 8003912:	f44f 7364 	mov.w	r3, #912	; 0x390
 8003916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003918:	2301      	movs	r3, #1
 800391a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800391c:	2302      	movs	r3, #2
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003920:	2300      	movs	r3, #0
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003924:	f107 031c 	add.w	r3, r7, #28
 8003928:	4619      	mov	r1, r3
 800392a:	4848      	ldr	r0, [pc, #288]	; (8003a4c <MX_GPIO_Init+0x294>)
 800392c:	f002 f9b6 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003930:	2304      	movs	r3, #4
 8003932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003934:	2300      	movs	r3, #0
 8003936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800393c:	f107 031c 	add.w	r3, r7, #28
 8003940:	4619      	mov	r1, r3
 8003942:	4844      	ldr	r0, [pc, #272]	; (8003a54 <MX_GPIO_Init+0x29c>)
 8003944:	f002 f9aa 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = STM32_Conn_1_Pin|STM32_Conn_2_Pin;
 8003948:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800394c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003952:	2301      	movs	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003956:	f107 031c 	add.w	r3, r7, #28
 800395a:	4619      	mov	r1, r3
 800395c:	483f      	ldr	r0, [pc, #252]	; (8003a5c <MX_GPIO_Init+0x2a4>)
 800395e:	f002 f99d 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SYM_LED_G_Pin|BLUE_485_Pin|SYM_LED_B_Pin|GREEN_485_Pin;
 8003962:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003968:	2301      	movs	r3, #1
 800396a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800396c:	2302      	movs	r3, #2
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	2300      	movs	r3, #0
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003974:	f107 031c 	add.w	r3, r7, #28
 8003978:	4619      	mov	r1, r3
 800397a:	4836      	ldr	r0, [pc, #216]	; (8003a54 <MX_GPIO_Init+0x29c>)
 800397c:	f002 f98e 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STM32_BUTTON_LED_POWER_Pin|RED_485_Pin|STM32_ZUMMER_Pin|BLUE_232_Pin 
 8003980:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003984:	61fb      	str	r3, [r7, #28]
                          |STM32_Relay_mmn_Pin|GREEN_232_Pin|STM32_Relay_mother_Pin|RED_232_Pin 
                          |STM32_BUTTON_LED_1_Pin|STM32_BUTTON_LED_2_Pin|STM32_BUTTON_LED_3_Pin|STM32_OUT_REL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003986:	2301      	movs	r3, #1
 8003988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800398a:	2302      	movs	r3, #2
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398e:	2300      	movs	r3, #0
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003992:	f107 031c 	add.w	r3, r7, #28
 8003996:	4619      	mov	r1, r3
 8003998:	482f      	ldr	r0, [pc, #188]	; (8003a58 <MX_GPIO_Init+0x2a0>)
 800399a:	f002 f97f 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM32_R_24_NC_Pin;
 800399e:	2340      	movs	r3, #64	; 0x40
 80039a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039a2:	2300      	movs	r3, #0
 80039a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039a6:	2302      	movs	r3, #2
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(STM32_R_24_NC_GPIO_Port, &GPIO_InitStruct);
 80039aa:	f107 031c 	add.w	r3, r7, #28
 80039ae:	4619      	mov	r1, r3
 80039b0:	4826      	ldr	r0, [pc, #152]	; (8003a4c <MX_GPIO_Init+0x294>)
 80039b2:	f002 f973 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM32_R_24_NO_Pin;
 80039b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039c0:	2302      	movs	r3, #2
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(STM32_R_24_NO_GPIO_Port, &GPIO_InitStruct);
 80039c4:	f107 031c 	add.w	r3, r7, #28
 80039c8:	4619      	mov	r1, r3
 80039ca:	4821      	ldr	r0, [pc, #132]	; (8003a50 <MX_GPIO_Init+0x298>)
 80039cc:	f002 f966 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STM32_BUTTON_1_Pin|STM32_BUTTON_2_Pin|STM32_BUTTON_3_Pin;
 80039d0:	2307      	movs	r3, #7
 80039d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039d4:	2300      	movs	r3, #0
 80039d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039d8:	2301      	movs	r3, #1
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039dc:	f107 031c 	add.w	r3, r7, #28
 80039e0:	4619      	mov	r1, r3
 80039e2:	481d      	ldr	r0, [pc, #116]	; (8003a58 <MX_GPIO_Init+0x2a0>)
 80039e4:	f002 f95a 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = STM32_OUT_REL_3_Pin|STM32_OUT_REL_2_Pin|STM32_OUT_REL_1_Pin;
 80039e8:	f44f 7344 	mov.w	r3, #784	; 0x310
 80039ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ee:	2301      	movs	r3, #1
 80039f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f6:	2300      	movs	r3, #0
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fa:	f107 031c 	add.w	r3, r7, #28
 80039fe:	4619      	mov	r1, r3
 8003a00:	4814      	ldr	r0, [pc, #80]	; (8003a54 <MX_GPIO_Init+0x29c>)
 8003a02:	f002 f94b 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM32_I2C_WP_Pin;
 8003a06:	2320      	movs	r3, #32
 8003a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a16:	2306      	movs	r3, #6
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STM32_I2C_WP_GPIO_Port, &GPIO_InitStruct);
 8003a1a:	f107 031c 	add.w	r3, r7, #28
 8003a1e:	4619      	mov	r1, r3
 8003a20:	480c      	ldr	r0, [pc, #48]	; (8003a54 <MX_GPIO_Init+0x29c>)
 8003a22:	f002 f93b 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INPUT_OUTSIDE_2_Pin|INPUT_OUTSIDE_1_Pin;
 8003a26:	2303      	movs	r3, #3
 8003a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a32:	f107 031c 	add.w	r3, r7, #28
 8003a36:	4619      	mov	r1, r3
 8003a38:	4808      	ldr	r0, [pc, #32]	; (8003a5c <MX_GPIO_Init+0x2a4>)
 8003a3a:	f002 f92f 	bl	8005c9c <HAL_GPIO_Init>

}
 8003a3e:	bf00      	nop
 8003a40:	3730      	adds	r7, #48	; 0x30
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40020000 	.word	0x40020000
 8003a54:	40020400 	.word	0x40020400
 8003a58:	40020c00 	.word	0x40020c00
 8003a5c:	40021000 	.word	0x40021000

08003a60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003a64:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <MX_I2C1_Init+0x50>)
 8003a66:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <MX_I2C1_Init+0x54>)
 8003a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <MX_I2C1_Init+0x50>)
 8003a6c:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <MX_I2C1_Init+0x58>)
 8003a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <MX_I2C1_Init+0x50>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <MX_I2C1_Init+0x50>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <MX_I2C1_Init+0x50>)
 8003a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <MX_I2C1_Init+0x50>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <MX_I2C1_Init+0x50>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <MX_I2C1_Init+0x50>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <MX_I2C1_Init+0x50>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a9c:	4804      	ldr	r0, [pc, #16]	; (8003ab0 <MX_I2C1_Init+0x50>)
 8003a9e:	f002 fac9 	bl	8006034 <HAL_I2C_Init>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003aa8:	f000 fa84 	bl	8003fb4 <Error_Handler>
  }

}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20009544 	.word	0x20009544
 8003ab4:	40005400 	.word	0x40005400
 8003ab8:	000186a0 	.word	0x000186a0

08003abc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <HAL_I2C_MspInit+0x84>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d12b      	bne.n	8003b36 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003afa:	23c0      	movs	r3, #192	; 0xc0
 8003afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003afe:	2312      	movs	r3, #18
 8003b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b06:	2303      	movs	r3, #3
 8003b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0e:	f107 0314 	add.w	r3, r7, #20
 8003b12:	4619      	mov	r1, r3
 8003b14:	480c      	ldr	r0, [pc, #48]	; (8003b48 <HAL_I2C_MspInit+0x8c>)
 8003b16:	f002 f8c1 	bl	8005c9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b28:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b36:	bf00      	nop
 8003b38:	3728      	adds	r7, #40	; 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40005400 	.word	0x40005400
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40020400 	.word	0x40020400

08003b4c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <MX_IWDG_Init+0x2c>)
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <MX_IWDG_Init+0x30>)
 8003b54:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <MX_IWDG_Init+0x2c>)
 8003b58:	2202      	movs	r2, #2
 8003b5a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <MX_IWDG_Init+0x2c>)
 8003b5e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003b62:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003b64:	4804      	ldr	r0, [pc, #16]	; (8003b78 <MX_IWDG_Init+0x2c>)
 8003b66:	f002 fb9d 	bl	80062a4 <HAL_IWDG_Init>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003b70:	f000 fa20 	bl	8003fb4 <Error_Handler>
  }

}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20009598 	.word	0x20009598
 8003b7c:	40003000 	.word	0x40003000

08003b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b84:	f000 fe06 	bl	8004794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b88:	f000 f81c 	bl	8003bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b8c:	f7ff fe14 	bl	80037b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b90:	f7fd fa86 	bl	80010a0 <MX_DMA_Init>
  MX_SPI1_Init();
 8003b94:	f000 fa1a 	bl	8003fcc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8003b98:	f000 fcee 	bl	8004578 <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8003b9c:	f7ff ffd6 	bl	8003b4c <MX_IWDG_Init>
  MX_ADC1_Init();
 8003ba0:	f7fd f970 	bl	8000e84 <MX_ADC1_Init>
  MX_TIM7_Init();
 8003ba4:	f000 fc1e 	bl	80043e4 <MX_TIM7_Init>
  MX_SPI3_Init();
 8003ba8:	f000 fa48 	bl	800403c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8003bac:	f000 fcba 	bl	8004524 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003bb0:	f7ff ff56 	bl	8003a60 <MX_I2C1_Init>
  MX_TIM10_Init();
 8003bb4:	f000 fc4c 	bl	8004450 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8003bb8:	f7fd fac2 	bl	8001140 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003bbc:	f006 fce9 	bl	800a592 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003bc0:	e7fe      	b.n	8003bc0 <main+0x40>
	...

08003bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b094      	sub	sp, #80	; 0x50
 8003bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bca:	f107 0320 	add.w	r3, r7, #32
 8003bce:	2230      	movs	r2, #48	; 0x30
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f008 fdb3 	bl	800c73e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <SystemClock_Config+0xd0>)
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	4a28      	ldr	r2, [pc, #160]	; (8003c94 <SystemClock_Config+0xd0>)
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf8:	4b26      	ldr	r3, [pc, #152]	; (8003c94 <SystemClock_Config+0xd0>)
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c04:	2300      	movs	r3, #0
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <SystemClock_Config+0xd4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a22      	ldr	r2, [pc, #136]	; (8003c98 <SystemClock_Config+0xd4>)
 8003c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <SystemClock_Config+0xd4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003c20:	2309      	movs	r3, #9
 8003c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003c38:	2304      	movs	r3, #4
 8003c3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003c3c:	23a8      	movs	r3, #168	; 0xa8
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c40:	2302      	movs	r3, #2
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c44:	2307      	movs	r3, #7
 8003c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c48:	f107 0320 	add.w	r3, r7, #32
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f002 fb73 	bl	8006338 <HAL_RCC_OscConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003c58:	f000 f9ac 	bl	8003fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c5c:	230f      	movs	r3, #15
 8003c5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c60:	2302      	movs	r3, #2
 8003c62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	2105      	movs	r1, #5
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f002 fdcc 	bl	8006818 <HAL_RCC_ClockConfig>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003c86:	f000 f995 	bl	8003fb4 <Error_Handler>
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3750      	adds	r7, #80	; 0x50
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000

08003c9c <LoadWindow>:

/* USER CODE BEGIN 4 */
uint8_t LoadWindow(u8g2_t *u8g2, uint16_t logo_width, uint16_t logo_height, uint8_t *logo_bits){
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	4613      	mov	r3, r2
 8003cac:	813b      	strh	r3, [r7, #8]

	u8g2_DrawXBMP(u8g2, 8, 0, logo_width, logo_height, logo_bits);
 8003cae:	897b      	ldrh	r3, [r7, #10]
 8003cb0:	b2d9      	uxtb	r1, r3
 8003cb2:	893b      	ldrh	r3, [r7, #8]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	9201      	str	r2, [sp, #4]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2108      	movs	r1, #8
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f004 fd98 	bl	80087f8 <u8g2_DrawXBMP>
	u8g2_SetFont(u8g2, u8g2_font_cu12_t_cyrillic);
 8003cc8:	4919      	ldr	r1, [pc, #100]	; (8003d30 <LoadWindow+0x94>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f005 fcae 	bl	800962c <u8g2_SetFont>
	u8g2_DrawUTF8(u8g2, 3, 62, "Загрузка");
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <LoadWindow+0x98>)
 8003cd2:	223e      	movs	r2, #62	; 0x3e
 8003cd4:	2103      	movs	r1, #3
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f005 fc06 	bl	80094e8 <u8g2_DrawUTF8>
	u8g2_SendBuffer(u8g2);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f004 fe78 	bl	80089d2 <u8g2_SendBuffer>

	for(uint8_t i = 0; i < 19; i++){
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
 8003ce6:	e01b      	b.n	8003d20 <LoadWindow+0x84>
		osDelay(100);
 8003ce8:	2064      	movs	r0, #100	; 0x64
 8003cea:	f006 fca5 	bl	800a638 <osDelay>
		u8g2_DrawUTF8(u8g2, 64 + i*10, 62, ".");
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	3340      	adds	r3, #64	; 0x40
 8003cfc:	b2d9      	uxtb	r1, r3
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <LoadWindow+0x9c>)
 8003d00:	223e      	movs	r2, #62	; 0x3e
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f005 fbf0 	bl	80094e8 <u8g2_DrawUTF8>
		u8g2_SendBuffer(u8g2);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f004 fe62 	bl	80089d2 <u8g2_SendBuffer>
		if(!display_stat){
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <LoadWindow+0xa0>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <LoadWindow+0x7e>
			i = 19;
 8003d16:	2313      	movs	r3, #19
 8003d18:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < 19; i++){
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	75fb      	strb	r3, [r7, #23]
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b12      	cmp	r3, #18
 8003d24:	d9e0      	bls.n	8003ce8 <LoadWindow+0x4c>
		}
	}

	return 0;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	0800e448 	.word	0x0800e448
 8003d34:	0800da1c 	.word	0x0800da1c
 8003d38:	0800da30 	.word	0x0800da30
 8003d3c:	20000000 	.word	0x20000000

08003d40 <OFF_Window>:

void OFF_Window(u8g2_t *u8g2){
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	u8g2_SetFont(u8g2, u8g2_font_cu12_t_cyrillic);
 8003d48:	4916      	ldr	r1, [pc, #88]	; (8003da4 <OFF_Window+0x64>)
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f005 fc6e 	bl	800962c <u8g2_SetFont>
	u8g2_DrawUTF8(u8g2, 3, 62, "Выключение");
 8003d50:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <OFF_Window+0x68>)
 8003d52:	223e      	movs	r2, #62	; 0x3e
 8003d54:	2103      	movs	r1, #3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f005 fbc6 	bl	80094e8 <u8g2_DrawUTF8>
	u8g2_SendBuffer(u8g2);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f004 fe38 	bl	80089d2 <u8g2_SendBuffer>

	for(uint8_t i = 0; i < 3; i++){
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	e016      	b.n	8003d96 <OFF_Window+0x56>
		osDelay(700);
 8003d68:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003d6c:	f006 fc64 	bl	800a638 <osDelay>
		u8g2_DrawUTF8(u8g2, 90 + i*10, 62, ".");
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	461a      	mov	r2, r3
 8003d74:	0092      	lsls	r2, r2, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	335a      	adds	r3, #90	; 0x5a
 8003d7e:	b2d9      	uxtb	r1, r3
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <OFF_Window+0x6c>)
 8003d82:	223e      	movs	r2, #62	; 0x3e
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f005 fbaf 	bl	80094e8 <u8g2_DrawUTF8>
		u8g2_SendBuffer(u8g2);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f004 fe21 	bl	80089d2 <u8g2_SendBuffer>
	for(uint8_t i = 0; i < 3; i++){
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	3301      	adds	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d9e5      	bls.n	8003d68 <OFF_Window+0x28>
	}
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	0800e448 	.word	0x0800e448
 8003da8:	0800da34 	.word	0x0800da34
 8003dac:	0800da30 	.word	0x0800da30

08003db0 <DrawSym>:

void DrawSym(u8g2_t *u8g2, uint8_t x, uint8_t y, uint8_t symcode){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	70fb      	strb	r3, [r7, #3]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	70bb      	strb	r3, [r7, #2]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	707b      	strb	r3, [r7, #1]
	u8g2_SetFont(u8g2,u8g2_font_ncenR12_tf);
 8003dca:	4909      	ldr	r1, [pc, #36]	; (8003df0 <DrawSym+0x40>)
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f005 fc2d 	bl	800962c <u8g2_SetFont>
	u8g2_DrawGlyph(u8g2,x,y,symcode);
 8003dd2:	787b      	ldrb	r3, [r7, #1]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	78ba      	ldrb	r2, [r7, #2]
 8003dd8:	78f9      	ldrb	r1, [r7, #3]
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f005 fad6 	bl	800938c <u8g2_DrawGlyph>
	u8g2_SetFont(u8g2, u8g2_font_unifont_t_cyrillic);
 8003de0:	4904      	ldr	r1, [pc, #16]	; (8003df4 <DrawSym+0x44>)
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f005 fc22 	bl	800962c <u8g2_SetFont>
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	08011b4c 	.word	0x08011b4c
 8003df4:	08010140 	.word	0x08010140

08003df8 <u8x8_stm32_gpio_and_delay>:


uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
    U8X8_UNUSED void *arg_ptr)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	72fb      	strb	r3, [r7, #11]
 8003e06:	4613      	mov	r3, r2
 8003e08:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
 8003e0c:	3b28      	subs	r3, #40	; 0x28
 8003e0e:	2b23      	cmp	r3, #35	; 0x23
 8003e10:	d861      	bhi.n	8003ed6 <u8x8_stm32_gpio_and_delay+0xde>
 8003e12:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <u8x8_stm32_gpio_and_delay+0x20>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003ea9 	.word	0x08003ea9
 8003e1c:	08003eb1 	.word	0x08003eb1
 8003e20:	08003ed7 	.word	0x08003ed7
 8003e24:	08003ed7 	.word	0x08003ed7
 8003e28:	08003ed7 	.word	0x08003ed7
 8003e2c:	08003ed7 	.word	0x08003ed7
 8003e30:	08003ed7 	.word	0x08003ed7
 8003e34:	08003ed7 	.word	0x08003ed7
 8003e38:	08003ed7 	.word	0x08003ed7
 8003e3c:	08003ed7 	.word	0x08003ed7
 8003e40:	08003ed7 	.word	0x08003ed7
 8003e44:	08003ed7 	.word	0x08003ed7
 8003e48:	08003ed7 	.word	0x08003ed7
 8003e4c:	08003ed7 	.word	0x08003ed7
 8003e50:	08003ed7 	.word	0x08003ed7
 8003e54:	08003ed7 	.word	0x08003ed7
 8003e58:	08003ed7 	.word	0x08003ed7
 8003e5c:	08003ed7 	.word	0x08003ed7
 8003e60:	08003ed7 	.word	0x08003ed7
 8003e64:	08003ed7 	.word	0x08003ed7
 8003e68:	08003ed7 	.word	0x08003ed7
 8003e6c:	08003ed7 	.word	0x08003ed7
 8003e70:	08003ed7 	.word	0x08003ed7
 8003e74:	08003ed7 	.word	0x08003ed7
 8003e78:	08003ed7 	.word	0x08003ed7
 8003e7c:	08003ed7 	.word	0x08003ed7
 8003e80:	08003ed7 	.word	0x08003ed7
 8003e84:	08003ed7 	.word	0x08003ed7
 8003e88:	08003ed7 	.word	0x08003ed7
 8003e8c:	08003ed7 	.word	0x08003ed7
 8003e90:	08003ed7 	.word	0x08003ed7
 8003e94:	08003ed7 	.word	0x08003ed7
 8003e98:	08003ed7 	.word	0x08003ed7
 8003e9c:	08003ed7 	.word	0x08003ed7
 8003ea0:	08003ebb 	.word	0x08003ebb
 8003ea4:	08003ec9 	.word	0x08003ec9
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    HAL_Delay(1);
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	f000 fcb5 	bl	8004818 <HAL_Delay>
    break;
 8003eae:	e012      	b.n	8003ed6 <u8x8_stm32_gpio_and_delay+0xde>
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 8003eb0:	7abb      	ldrb	r3, [r7, #10]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fcb0 	bl	8004818 <HAL_Delay>
    break;
 8003eb8:	e00d      	b.n	8003ed6 <u8x8_stm32_gpio_and_delay+0xde>
  case U8X8_MSG_GPIO_DC:
    HAL_GPIO_WritePin(OLED_D_C_GPIO_Port, OLED_D_C_Pin, arg_int);
 8003eba:	7abb      	ldrb	r3, [r7, #10]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2140      	movs	r1, #64	; 0x40
 8003ec0:	4807      	ldr	r0, [pc, #28]	; (8003ee0 <u8x8_stm32_gpio_and_delay+0xe8>)
 8003ec2:	f002 f89d 	bl	8006000 <HAL_GPIO_WritePin>
    break;
 8003ec6:	e006      	b.n	8003ed6 <u8x8_stm32_gpio_and_delay+0xde>
  case U8X8_MSG_GPIO_RESET:
    HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
 8003ec8:	7abb      	ldrb	r3, [r7, #10]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2110      	movs	r1, #16
 8003ece:	4804      	ldr	r0, [pc, #16]	; (8003ee0 <u8x8_stm32_gpio_and_delay+0xe8>)
 8003ed0:	f002 f896 	bl	8006000 <HAL_GPIO_WritePin>
    break;
 8003ed4:	bf00      	nop
  }
  return 1;
 8003ed6:	2301      	movs	r3, #1
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40020000 	.word	0x40020000

08003ee4 <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
    void *arg_ptr)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	72fb      	strb	r3, [r7, #11]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 8003ef6:	7afb      	ldrb	r3, [r7, #11]
 8003ef8:	3b14      	subs	r3, #20
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d83a      	bhi.n	8003f74 <u8x8_byte_4wire_hw_spi+0x90>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <u8x8_byte_4wire_hw_spi+0x20>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f79 	.word	0x08003f79
 8003f08:	08003f75 	.word	0x08003f75
 8003f0c:	08003f75 	.word	0x08003f75
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f59 	.word	0x08003f59
 8003f18:	08003f67 	.word	0x08003f67
 8003f1c:	08003f75 	.word	0x08003f75
 8003f20:	08003f75 	.word	0x08003f75
 8003f24:	08003f75 	.word	0x08003f75
 8003f28:	08003f75 	.word	0x08003f75
 8003f2c:	08003f75 	.word	0x08003f75
 8003f30:	08003f75 	.word	0x08003f75
 8003f34:	08003f4b 	.word	0x08003f4b
  {
  case U8X8_MSG_BYTE_SEND:
    HAL_SPI_Transmit(&hspi1, (uint8_t *) arg_ptr, arg_int,1000);
 8003f38:	7abb      	ldrb	r3, [r7, #10]
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4810      	ldr	r0, [pc, #64]	; (8003f84 <u8x8_byte_4wire_hw_spi+0xa0>)
 8003f44:	f002 fef0 	bl	8006d28 <HAL_SPI_Transmit>
    break;
 8003f48:	e017      	b.n	8003f7a <u8x8_byte_4wire_hw_spi+0x96>
  case U8X8_MSG_BYTE_INIT:
    break;
  case U8X8_MSG_BYTE_SET_DC:
    HAL_GPIO_WritePin(OLED_D_C_GPIO_Port, OLED_D_C_Pin, arg_int);
 8003f4a:	7abb      	ldrb	r3, [r7, #10]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2140      	movs	r1, #64	; 0x40
 8003f50:	480d      	ldr	r0, [pc, #52]	; (8003f88 <u8x8_byte_4wire_hw_spi+0xa4>)
 8003f52:	f002 f855 	bl	8006000 <HAL_GPIO_WritePin>
    break;
 8003f56:	e010      	b.n	8003f7a <u8x8_byte_4wire_hw_spi+0x96>
  case U8X8_MSG_BYTE_START_TRANSFER:
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2110      	movs	r1, #16
 8003f5c:	480b      	ldr	r0, [pc, #44]	; (8003f8c <u8x8_byte_4wire_hw_spi+0xa8>)
 8003f5e:	f002 f84f 	bl	8006000 <HAL_GPIO_WritePin>
	__NOP(); // 21 ns
 8003f62:	bf00      	nop
    break;
 8003f64:	e009      	b.n	8003f7a <u8x8_byte_4wire_hw_spi+0x96>
  case U8X8_MSG_BYTE_END_TRANSFER:
	__NOP(); // 21 ns
 8003f66:	bf00      	nop
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8003f68:	2201      	movs	r2, #1
 8003f6a:	2110      	movs	r1, #16
 8003f6c:	4807      	ldr	r0, [pc, #28]	; (8003f8c <u8x8_byte_4wire_hw_spi+0xa8>)
 8003f6e:	f002 f847 	bl	8006000 <HAL_GPIO_WritePin>
    break;
 8003f72:	e002      	b.n	8003f7a <u8x8_byte_4wire_hw_spi+0x96>
  default:
    return 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e001      	b.n	8003f7c <u8x8_byte_4wire_hw_spi+0x98>
    break;
 8003f78:	bf00      	nop
  }
  return 1;
 8003f7a:	2301      	movs	r3, #1
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	200095a4 	.word	0x200095a4
 8003f88:	40020000 	.word	0x40020000
 8003f8c:	40020800 	.word	0x40020800

08003f90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003fa2:	f000 fc19 	bl	80047d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40001000 	.word	0x40001000

08003fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	HSE_status = 0;
 8003fb8:	4b03      	ldr	r3, [pc, #12]	; (8003fc8 <Error_Handler+0x14>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
//		}
//	}
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003fbe:	bf00      	nop
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	20000001 	.word	0x20000001

08003fcc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003fd0:	4b18      	ldr	r3, [pc, #96]	; (8004034 <MX_SPI1_Init+0x68>)
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <MX_SPI1_Init+0x6c>)
 8003fd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <MX_SPI1_Init+0x68>)
 8003fd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <MX_SPI1_Init+0x68>)
 8003fe0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003fe4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <MX_SPI1_Init+0x68>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <MX_SPI1_Init+0x68>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <MX_SPI1_Init+0x68>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <MX_SPI1_Init+0x68>)
 8003ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <MX_SPI1_Init+0x68>)
 8004002:	2210      	movs	r2, #16
 8004004:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004006:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <MX_SPI1_Init+0x68>)
 8004008:	2200      	movs	r2, #0
 800400a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <MX_SPI1_Init+0x68>)
 800400e:	2200      	movs	r2, #0
 8004010:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004012:	4b08      	ldr	r3, [pc, #32]	; (8004034 <MX_SPI1_Init+0x68>)
 8004014:	2200      	movs	r2, #0
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <MX_SPI1_Init+0x68>)
 800401a:	220a      	movs	r2, #10
 800401c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800401e:	4805      	ldr	r0, [pc, #20]	; (8004034 <MX_SPI1_Init+0x68>)
 8004020:	f002 fe1e 	bl	8006c60 <HAL_SPI_Init>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800402a:	f7ff ffc3 	bl	8003fb4 <Error_Handler>
  }

}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	200095a4 	.word	0x200095a4
 8004038:	40013000 	.word	0x40013000

0800403c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8004040:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <MX_SPI3_Init+0x64>)
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <MX_SPI3_Init+0x68>)
 8004044:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004046:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <MX_SPI3_Init+0x64>)
 8004048:	f44f 7282 	mov.w	r2, #260	; 0x104
 800404c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800404e:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <MX_SPI3_Init+0x64>)
 8004050:	2200      	movs	r2, #0
 8004052:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004054:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <MX_SPI3_Init+0x64>)
 8004056:	2200      	movs	r2, #0
 8004058:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <MX_SPI3_Init+0x64>)
 800405c:	2200      	movs	r2, #0
 800405e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <MX_SPI3_Init+0x64>)
 8004062:	2200      	movs	r2, #0
 8004064:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004066:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <MX_SPI3_Init+0x64>)
 8004068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <MX_SPI3_Init+0x64>)
 8004070:	2220      	movs	r2, #32
 8004072:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <MX_SPI3_Init+0x64>)
 8004076:	2200      	movs	r2, #0
 8004078:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <MX_SPI3_Init+0x64>)
 800407c:	2200      	movs	r2, #0
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <MX_SPI3_Init+0x64>)
 8004082:	2200      	movs	r2, #0
 8004084:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <MX_SPI3_Init+0x64>)
 8004088:	220a      	movs	r2, #10
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800408c:	4804      	ldr	r0, [pc, #16]	; (80040a0 <MX_SPI3_Init+0x64>)
 800408e:	f002 fde7 	bl	8006c60 <HAL_SPI_Init>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004098:	f7ff ff8c 	bl	8003fb4 <Error_Handler>
  }

}
 800409c:	bf00      	nop
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	200095fc 	.word	0x200095fc
 80040a4:	40003c00 	.word	0x40003c00

080040a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08c      	sub	sp, #48	; 0x30
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b0:	f107 031c 	add.w	r3, r7, #28
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a42      	ldr	r2, [pc, #264]	; (80041d0 <HAL_SPI_MspInit+0x128>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d12c      	bne.n	8004124 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	4a40      	ldr	r2, [pc, #256]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 80040d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040d8:	6453      	str	r3, [r2, #68]	; 0x44
 80040da:	4b3e      	ldr	r3, [pc, #248]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	4b3a      	ldr	r3, [pc, #232]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	4a39      	ldr	r2, [pc, #228]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6313      	str	r3, [r2, #48]	; 0x30
 80040f6:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
 8004102:	23a0      	movs	r3, #160	; 0xa0
 8004104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004106:	2302      	movs	r3, #2
 8004108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800410a:	2302      	movs	r3, #2
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410e:	2303      	movs	r3, #3
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004112:	2305      	movs	r3, #5
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004116:	f107 031c 	add.w	r3, r7, #28
 800411a:	4619      	mov	r1, r3
 800411c:	482e      	ldr	r0, [pc, #184]	; (80041d8 <HAL_SPI_MspInit+0x130>)
 800411e:	f001 fdbd 	bl	8005c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004122:	e050      	b.n	80041c6 <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <HAL_SPI_MspInit+0x134>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d14b      	bne.n	80041c6 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	4a27      	ldr	r2, [pc, #156]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 8004138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800413c:	6413      	str	r3, [r2, #64]	; 0x40
 800413e:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6313      	str	r3, [r2, #48]	; 0x30
 800415a:	4b1e      	ldr	r3, [pc, #120]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 8004170:	f043 0304 	orr.w	r3, r3, #4
 8004174:	6313      	str	r3, [r2, #48]	; 0x30
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_SPI_MspInit+0x12c>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004188:	2302      	movs	r3, #2
 800418a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004190:	2303      	movs	r3, #3
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004194:	2306      	movs	r3, #6
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	4619      	mov	r1, r3
 800419e:	480e      	ldr	r0, [pc, #56]	; (80041d8 <HAL_SPI_MspInit+0x130>)
 80041a0:	f001 fd7c 	bl	8005c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80041a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80041a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b2:	2303      	movs	r3, #3
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80041b6:	2306      	movs	r3, #6
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ba:	f107 031c 	add.w	r3, r7, #28
 80041be:	4619      	mov	r1, r3
 80041c0:	4807      	ldr	r0, [pc, #28]	; (80041e0 <HAL_SPI_MspInit+0x138>)
 80041c2:	f001 fd6b 	bl	8005c9c <HAL_GPIO_Init>
}
 80041c6:	bf00      	nop
 80041c8:	3730      	adds	r7, #48	; 0x30
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40013000 	.word	0x40013000
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40020000 	.word	0x40020000
 80041dc:	40003c00 	.word	0x40003c00
 80041e0:	40020800 	.word	0x40020800

080041e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_MspInit+0x54>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	4a11      	ldr	r2, [pc, #68]	; (8004238 <HAL_MspInit+0x54>)
 80041f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041f8:	6453      	str	r3, [r2, #68]	; 0x44
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <HAL_MspInit+0x54>)
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_MspInit+0x54>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <HAL_MspInit+0x54>)
 8004210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004214:	6413      	str	r3, [r2, #64]	; 0x40
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_MspInit+0x54>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004222:	2200      	movs	r2, #0
 8004224:	210f      	movs	r1, #15
 8004226:	f06f 0001 	mvn.w	r0, #1
 800422a:	f001 f90d 	bl	8005448 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800

0800423c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800424c:	2200      	movs	r2, #0
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	2036      	movs	r0, #54	; 0x36
 8004252:	f001 f8f9 	bl	8005448 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8004256:	2036      	movs	r0, #54	; 0x36
 8004258:	f001 f912 	bl	8005480 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <HAL_InitTick+0xa4>)
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <HAL_InitTick+0xa4>)
 8004266:	f043 0310 	orr.w	r3, r3, #16
 800426a:	6413      	str	r3, [r2, #64]	; 0x40
 800426c:	4b1c      	ldr	r3, [pc, #112]	; (80042e0 <HAL_InitTick+0xa4>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004278:	f107 0210 	add.w	r2, r7, #16
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f002 fcba 	bl	8006bfc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004288:	f002 fc90 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 800428c:	4603      	mov	r3, r0
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <HAL_InitTick+0xa8>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0c9b      	lsrs	r3, r3, #18
 800429c:	3b01      	subs	r3, #1
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <HAL_InitTick+0xac>)
 80042a2:	4a12      	ldr	r2, [pc, #72]	; (80042ec <HAL_InitTick+0xb0>)
 80042a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_InitTick+0xac>)
 80042a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80042ae:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <HAL_InitTick+0xac>)
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <HAL_InitTick+0xac>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_InitTick+0xac>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80042c0:	4809      	ldr	r0, [pc, #36]	; (80042e8 <HAL_InitTick+0xac>)
 80042c2:	f002 ff11 	bl	80070e8 <HAL_TIM_Base_Init>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80042cc:	4806      	ldr	r0, [pc, #24]	; (80042e8 <HAL_InitTick+0xac>)
 80042ce:	f002 ff36 	bl	800713e <HAL_TIM_Base_Start_IT>
 80042d2:	4603      	mov	r3, r0
 80042d4:	e000      	b.n	80042d8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3730      	adds	r7, #48	; 0x30
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	431bde83 	.word	0x431bde83
 80042e8:	20009654 	.word	0x20009654
 80042ec:	40001000 	.word	0x40001000

080042f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004302:	e7fe      	b.n	8004302 <HardFault_Handler+0x4>

08004304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004308:	e7fe      	b.n	8004308 <MemManage_Handler+0x4>

0800430a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800430e:	e7fe      	b.n	800430e <BusFault_Handler+0x4>

08004310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004314:	e7fe      	b.n	8004314 <UsageFault_Handler+0x4>

08004316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004316:	b480      	push	{r7}
 8004318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800431a:	bf00      	nop
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004328:	4802      	ldr	r0, [pc, #8]	; (8004334 <DMA1_Stream1_IRQHandler+0x10>)
 800432a:	f001 fa4f 	bl	80057cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20009714 	.word	0x20009714

08004338 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800433c:	4802      	ldr	r0, [pc, #8]	; (8004348 <ADC_IRQHandler+0x10>)
 800433e:	f000 fad0 	bl	80048e2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20006a78 	.word	0x20006a78

0800434c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ADC_Read12vHandler();
 8004350:	f7fe f9a6 	bl	80026a0 <ADC_Read12vHandler>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004354:	4802      	ldr	r0, [pc, #8]	; (8004360 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004356:	f002 ff16 	bl	8007186 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20009694 	.word	0x20009694

08004364 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004368:	4802      	ldr	r0, [pc, #8]	; (8004374 <USART3_IRQHandler+0x10>)
 800436a:	f003 fb2f 	bl	80079cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800436e:	bf00      	nop
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	200097b4 	.word	0x200097b4

08004378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800437c:	4802      	ldr	r0, [pc, #8]	; (8004388 <TIM6_DAC_IRQHandler+0x10>)
 800437e:	f002 ff02 	bl	8007186 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20009654 	.word	0x20009654

0800438c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

	UPTIME_IRQHandler();
 8004390:	f7fe f978 	bl	8002684 <UPTIME_IRQHandler>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <TIM7_IRQHandler+0x14>)
 8004396:	f002 fef6 	bl	8007186 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	200096d4 	.word	0x200096d4

080043a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80043a8:	4802      	ldr	r0, [pc, #8]	; (80043b4 <DMA2_Stream0_IRQHandler+0x10>)
 80043aa:	f001 fa0f 	bl	80057cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20006a18 	.word	0x20006a18

080043b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043bc:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <SystemInit+0x28>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	4a07      	ldr	r2, [pc, #28]	; (80043e0 <SystemInit+0x28>)
 80043c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <SystemInit+0x28>)
 80043ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043d2:	609a      	str	r2, [r3, #8]
#endif
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ea:	463b      	mov	r3, r7
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80043f2:	4b15      	ldr	r3, [pc, #84]	; (8004448 <MX_TIM7_Init+0x64>)
 80043f4:	4a15      	ldr	r2, [pc, #84]	; (800444c <MX_TIM7_Init+0x68>)
 80043f6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 80043f8:	4b13      	ldr	r3, [pc, #76]	; (8004448 <MX_TIM7_Init+0x64>)
 80043fa:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80043fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004400:	4b11      	ldr	r3, [pc, #68]	; (8004448 <MX_TIM7_Init+0x64>)
 8004402:	2200      	movs	r2, #0
 8004404:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <MX_TIM7_Init+0x64>)
 8004408:	f241 3287 	movw	r2, #4999	; 0x1387
 800440c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440e:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <MX_TIM7_Init+0x64>)
 8004410:	2200      	movs	r2, #0
 8004412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004414:	480c      	ldr	r0, [pc, #48]	; (8004448 <MX_TIM7_Init+0x64>)
 8004416:	f002 fe67 	bl	80070e8 <HAL_TIM_Base_Init>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004420:	f7ff fdc8 	bl	8003fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004424:	2300      	movs	r3, #0
 8004426:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004428:	2300      	movs	r3, #0
 800442a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800442c:	463b      	mov	r3, r7
 800442e:	4619      	mov	r1, r3
 8004430:	4805      	ldr	r0, [pc, #20]	; (8004448 <MX_TIM7_Init+0x64>)
 8004432:	f003 f879 	bl	8007528 <HAL_TIMEx_MasterConfigSynchronization>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800443c:	f7ff fdba 	bl	8003fb4 <Error_Handler>
  }

}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	200096d4 	.word	0x200096d4
 800444c:	40001400 	.word	0x40001400

08004450 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8004454:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <MX_TIM10_Init+0x40>)
 8004456:	4a0f      	ldr	r2, [pc, #60]	; (8004494 <MX_TIM10_Init+0x44>)
 8004458:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680;
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <MX_TIM10_Init+0x40>)
 800445c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8004460:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <MX_TIM10_Init+0x40>)
 8004464:	2200      	movs	r2, #0
 8004466:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000;
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <MX_TIM10_Init+0x40>)
 800446a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800446e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <MX_TIM10_Init+0x40>)
 8004472:	2200      	movs	r2, #0
 8004474:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <MX_TIM10_Init+0x40>)
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800447c:	4804      	ldr	r0, [pc, #16]	; (8004490 <MX_TIM10_Init+0x40>)
 800447e:	f002 fe33 	bl	80070e8 <HAL_TIM_Base_Init>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004488:	f7ff fd94 	bl	8003fb4 <Error_Handler>
  }

}
 800448c:	bf00      	nop
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20009694 	.word	0x20009694
 8004494:	40014400 	.word	0x40014400

08004498 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <HAL_TIM_Base_MspInit+0x80>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d116      	bne.n	80044d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_TIM_Base_MspInit+0x84>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	4a1a      	ldr	r2, [pc, #104]	; (800451c <HAL_TIM_Base_MspInit+0x84>)
 80044b4:	f043 0320 	orr.w	r3, r3, #32
 80044b8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ba:	4b18      	ldr	r3, [pc, #96]	; (800451c <HAL_TIM_Base_MspInit+0x84>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80044c6:	2200      	movs	r2, #0
 80044c8:	2105      	movs	r1, #5
 80044ca:	2037      	movs	r0, #55	; 0x37
 80044cc:	f000 ffbc 	bl	8005448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80044d0:	2037      	movs	r0, #55	; 0x37
 80044d2:	f000 ffd5 	bl	8005480 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80044d6:	e01a      	b.n	800450e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a10      	ldr	r2, [pc, #64]	; (8004520 <HAL_TIM_Base_MspInit+0x88>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d115      	bne.n	800450e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	4b0d      	ldr	r3, [pc, #52]	; (800451c <HAL_TIM_Base_MspInit+0x84>)
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	4a0c      	ldr	r2, [pc, #48]	; (800451c <HAL_TIM_Base_MspInit+0x84>)
 80044ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f0:	6453      	str	r3, [r2, #68]	; 0x44
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_TIM_Base_MspInit+0x84>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80044fe:	2200      	movs	r2, #0
 8004500:	2105      	movs	r1, #5
 8004502:	2019      	movs	r0, #25
 8004504:	f000 ffa0 	bl	8005448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004508:	2019      	movs	r0, #25
 800450a:	f000 ffb9 	bl	8005480 <HAL_NVIC_EnableIRQ>
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40001400 	.word	0x40001400
 800451c:	40023800 	.word	0x40023800
 8004520:	40014400 	.word	0x40014400

08004524 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 800452a:	4a12      	ldr	r2, [pc, #72]	; (8004574 <MX_USART1_UART_Init+0x50>)
 800452c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 8004530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 8004538:	2200      	movs	r2, #0
 800453a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 800453e:	2200      	movs	r2, #0
 8004540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 8004544:	2200      	movs	r2, #0
 8004546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 800454a:	220c      	movs	r2, #12
 800454c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 8004550:	2200      	movs	r2, #0
 8004552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 8004556:	2200      	movs	r2, #0
 8004558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800455a:	4805      	ldr	r0, [pc, #20]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 800455c:	f003 f874 	bl	8007648 <HAL_UART_Init>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004566:	f7ff fd25 	bl	8003fb4 <Error_Handler>
  }

}
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20009774 	.word	0x20009774
 8004574:	40011000 	.word	0x40011000

08004578 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800457c:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <MX_USART3_UART_Init+0x4c>)
 800457e:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <MX_USART3_UART_Init+0x50>)
 8004580:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <MX_USART3_UART_Init+0x4c>)
 8004584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004588:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <MX_USART3_UART_Init+0x4c>)
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <MX_USART3_UART_Init+0x4c>)
 8004592:	2200      	movs	r2, #0
 8004594:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <MX_USART3_UART_Init+0x4c>)
 8004598:	2200      	movs	r2, #0
 800459a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <MX_USART3_UART_Init+0x4c>)
 800459e:	220c      	movs	r2, #12
 80045a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <MX_USART3_UART_Init+0x4c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <MX_USART3_UART_Init+0x4c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80045ae:	4805      	ldr	r0, [pc, #20]	; (80045c4 <MX_USART3_UART_Init+0x4c>)
 80045b0:	f003 f84a 	bl	8007648 <HAL_UART_Init>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80045ba:	f7ff fcfb 	bl	8003fb4 <Error_Handler>
  }

}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200097b4 	.word	0x200097b4
 80045c8:	40004800 	.word	0x40004800

080045cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08c      	sub	sp, #48	; 0x30
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d4:	f107 031c 	add.w	r3, r7, #28
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a4e      	ldr	r2, [pc, #312]	; (8004724 <HAL_UART_MspInit+0x158>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d12d      	bne.n	800464a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	4b4d      	ldr	r3, [pc, #308]	; (8004728 <HAL_UART_MspInit+0x15c>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	4a4c      	ldr	r2, [pc, #304]	; (8004728 <HAL_UART_MspInit+0x15c>)
 80045f8:	f043 0310 	orr.w	r3, r3, #16
 80045fc:	6453      	str	r3, [r2, #68]	; 0x44
 80045fe:	4b4a      	ldr	r3, [pc, #296]	; (8004728 <HAL_UART_MspInit+0x15c>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	4b46      	ldr	r3, [pc, #280]	; (8004728 <HAL_UART_MspInit+0x15c>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	4a45      	ldr	r2, [pc, #276]	; (8004728 <HAL_UART_MspInit+0x15c>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	6313      	str	r3, [r2, #48]	; 0x30
 800461a:	4b43      	ldr	r3, [pc, #268]	; (8004728 <HAL_UART_MspInit+0x15c>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004626:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800462a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462c:	2302      	movs	r3, #2
 800462e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	2300      	movs	r3, #0
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004634:	2303      	movs	r3, #3
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004638:	2307      	movs	r3, #7
 800463a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800463c:	f107 031c 	add.w	r3, r7, #28
 8004640:	4619      	mov	r1, r3
 8004642:	483a      	ldr	r0, [pc, #232]	; (800472c <HAL_UART_MspInit+0x160>)
 8004644:	f001 fb2a 	bl	8005c9c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004648:	e068      	b.n	800471c <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART3)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a38      	ldr	r2, [pc, #224]	; (8004730 <HAL_UART_MspInit+0x164>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d163      	bne.n	800471c <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	4b33      	ldr	r3, [pc, #204]	; (8004728 <HAL_UART_MspInit+0x15c>)
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	4a32      	ldr	r2, [pc, #200]	; (8004728 <HAL_UART_MspInit+0x15c>)
 800465e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004662:	6413      	str	r3, [r2, #64]	; 0x40
 8004664:	4b30      	ldr	r3, [pc, #192]	; (8004728 <HAL_UART_MspInit+0x15c>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <HAL_UART_MspInit+0x15c>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	4a2b      	ldr	r2, [pc, #172]	; (8004728 <HAL_UART_MspInit+0x15c>)
 800467a:	f043 0302 	orr.w	r3, r3, #2
 800467e:	6313      	str	r3, [r2, #48]	; 0x30
 8004680:	4b29      	ldr	r3, [pc, #164]	; (8004728 <HAL_UART_MspInit+0x15c>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800468c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004692:	2302      	movs	r3, #2
 8004694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004696:	2300      	movs	r3, #0
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469a:	2303      	movs	r3, #3
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800469e:	2307      	movs	r3, #7
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a2:	f107 031c 	add.w	r3, r7, #28
 80046a6:	4619      	mov	r1, r3
 80046a8:	4822      	ldr	r0, [pc, #136]	; (8004734 <HAL_UART_MspInit+0x168>)
 80046aa:	f001 faf7 	bl	8005c9c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80046ae:	4b22      	ldr	r3, [pc, #136]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046b0:	4a22      	ldr	r2, [pc, #136]	; (800473c <HAL_UART_MspInit+0x170>)
 80046b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80046b4:	4b20      	ldr	r3, [pc, #128]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046bc:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046d6:	4b18      	ldr	r3, [pc, #96]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046d8:	2200      	movs	r2, #0
 80046da:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80046dc:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046e4:	4b14      	ldr	r3, [pc, #80]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046ea:	4b13      	ldr	r3, [pc, #76]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80046f0:	4811      	ldr	r0, [pc, #68]	; (8004738 <HAL_UART_MspInit+0x16c>)
 80046f2:	f000 fed3 	bl	800549c <HAL_DMA_Init>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80046fc:	f7ff fc5a 	bl	8003fb4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a0d      	ldr	r2, [pc, #52]	; (8004738 <HAL_UART_MspInit+0x16c>)
 8004704:	635a      	str	r2, [r3, #52]	; 0x34
 8004706:	4a0c      	ldr	r2, [pc, #48]	; (8004738 <HAL_UART_MspInit+0x16c>)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800470c:	2200      	movs	r2, #0
 800470e:	2105      	movs	r1, #5
 8004710:	2027      	movs	r0, #39	; 0x27
 8004712:	f000 fe99 	bl	8005448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004716:	2027      	movs	r0, #39	; 0x27
 8004718:	f000 feb2 	bl	8005480 <HAL_NVIC_EnableIRQ>
}
 800471c:	bf00      	nop
 800471e:	3730      	adds	r7, #48	; 0x30
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40011000 	.word	0x40011000
 8004728:	40023800 	.word	0x40023800
 800472c:	40020000 	.word	0x40020000
 8004730:	40004800 	.word	0x40004800
 8004734:	40020400 	.word	0x40020400
 8004738:	20009714 	.word	0x20009714
 800473c:	40026028 	.word	0x40026028

08004740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004778 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004744:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004746:	e003      	b.n	8004750 <LoopCopyDataInit>

08004748 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800474a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800474c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800474e:	3104      	adds	r1, #4

08004750 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004750:	480b      	ldr	r0, [pc, #44]	; (8004780 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004752:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004754:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004756:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004758:	d3f6      	bcc.n	8004748 <CopyDataInit>
  ldr  r2, =_sbss
 800475a:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800475c:	e002      	b.n	8004764 <LoopFillZerobss>

0800475e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800475e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004760:	f842 3b04 	str.w	r3, [r2], #4

08004764 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004766:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004768:	d3f9      	bcc.n	800475e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800476a:	f7ff fe25 	bl	80043b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800476e:	f007 ff9d 	bl	800c6ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004772:	f7ff fa05 	bl	8003b80 <main>
  bx  lr    
 8004776:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004778:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800477c:	08012b70 	.word	0x08012b70
  ldr  r0, =_sdata
 8004780:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004784:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8004788:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800478c:	200097f8 	.word	0x200097f8

08004790 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004790:	e7fe      	b.n	8004790 <CAN1_RX0_IRQHandler>
	...

08004794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004798:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <HAL_Init+0x40>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <HAL_Init+0x40>)
 800479e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_Init+0x40>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <HAL_Init+0x40>)
 80047aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047b0:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <HAL_Init+0x40>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <HAL_Init+0x40>)
 80047b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047bc:	2003      	movs	r0, #3
 80047be:	f000 fe38 	bl	8005432 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047c2:	2000      	movs	r0, #0
 80047c4:	f7ff fd3a 	bl	800423c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047c8:	f7ff fd0c 	bl	80041e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40023c00 	.word	0x40023c00

080047d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_IncTick+0x20>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_IncTick+0x24>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4413      	add	r3, r2
 80047e8:	4a04      	ldr	r2, [pc, #16]	; (80047fc <HAL_IncTick+0x24>)
 80047ea:	6013      	str	r3, [r2, #0]
}
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	2000000c 	.word	0x2000000c
 80047fc:	200097f4 	.word	0x200097f4

08004800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return uwTick;
 8004804:	4b03      	ldr	r3, [pc, #12]	; (8004814 <HAL_GetTick+0x14>)
 8004806:	681b      	ldr	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	200097f4 	.word	0x200097f4

08004818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004820:	f7ff ffee 	bl	8004800 <HAL_GetTick>
 8004824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d005      	beq.n	800483e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_Delay+0x40>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800483e:	bf00      	nop
 8004840:	f7ff ffde 	bl	8004800 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	429a      	cmp	r2, r3
 800484e:	d8f7      	bhi.n	8004840 <HAL_Delay+0x28>
  {
  }
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	2000000c 	.word	0x2000000c

0800485c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e033      	b.n	80048da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fc fb90 	bl	8000fa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	d118      	bne.n	80048cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048a2:	f023 0302 	bic.w	r3, r3, #2
 80048a6:	f043 0202 	orr.w	r2, r3, #2
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb8a 	bl	8004fc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
 80048ca:	e001      	b.n	80048d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b20      	cmp	r3, #32
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d049      	beq.n	80049b8 <HAL_ADC_IRQHandler+0xd6>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d046      	beq.n	80049b8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d12b      	bne.n	80049a8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004954:	2b00      	cmp	r3, #0
 8004956:	d127      	bne.n	80049a8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004970:	2b00      	cmp	r3, #0
 8004972:	d119      	bne.n	80049a8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0220 	bic.w	r2, r2, #32
 8004982:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d105      	bne.n	80049a8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	f043 0201 	orr.w	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f9cd 	bl	8004d48 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f06f 0212 	mvn.w	r2, #18
 80049b6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d8:	2b80      	cmp	r3, #128	; 0x80
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d057      	beq.n	8004a9a <HAL_ADC_IRQHandler+0x1b8>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d054      	beq.n	8004a9a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d139      	bne.n	8004a8a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d006      	beq.n	8004a32 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d12b      	bne.n	8004a8a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d124      	bne.n	8004a8a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11d      	bne.n	8004a8a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d119      	bne.n	8004a8a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a64:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d105      	bne.n	8004a8a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f043 0201 	orr.w	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fc1a 	bl	80052c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 020c 	mvn.w	r2, #12
 8004a98:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d017      	beq.n	8004afc <HAL_ADC_IRQHandler+0x21a>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d014      	beq.n	8004afc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10d      	bne.n	8004afc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7fd fe45 	bl	800277c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f06f 0201 	mvn.w	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	bf0c      	ite	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	2300      	movne	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b20:	bf0c      	ite	eq
 8004b22:	2301      	moveq	r3, #1
 8004b24:	2300      	movne	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <HAL_ADC_IRQHandler+0x27a>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d012      	beq.n	8004b5c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	f043 0202 	orr.w	r2, r3, #2
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0220 	mvn.w	r2, #32
 8004b4a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f90f 	bl	8004d70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f06f 0220 	mvn.w	r2, #32
 8004b5a:	601a      	str	r2, [r3, #0]
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_ADC_Start_DMA+0x1e>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e0cc      	b.n	8004d1c <HAL_ADC_Start_DMA+0x1b8>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d018      	beq.n	8004bca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ba8:	4b5e      	ldr	r3, [pc, #376]	; (8004d24 <HAL_ADC_Start_DMA+0x1c0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a5e      	ldr	r2, [pc, #376]	; (8004d28 <HAL_ADC_Start_DMA+0x1c4>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	0c9a      	lsrs	r2, r3, #18
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004bbc:	e002      	b.n	8004bc4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f9      	bne.n	8004bbe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f040 80a0 	bne.w	8004d1a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d106      	bne.n	8004c28 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	f023 0206 	bic.w	r2, r3, #6
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	645a      	str	r2, [r3, #68]	; 0x44
 8004c26:	e002      	b.n	8004c2e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c36:	4b3d      	ldr	r3, [pc, #244]	; (8004d2c <HAL_ADC_Start_DMA+0x1c8>)
 8004c38:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	4a3c      	ldr	r2, [pc, #240]	; (8004d30 <HAL_ADC_Start_DMA+0x1cc>)
 8004c40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	4a3b      	ldr	r2, [pc, #236]	; (8004d34 <HAL_ADC_Start_DMA+0x1d0>)
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	4a3a      	ldr	r2, [pc, #232]	; (8004d38 <HAL_ADC_Start_DMA+0x1d4>)
 8004c50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004c6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	334c      	adds	r3, #76	; 0x4c
 8004c86:	4619      	mov	r1, r3
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f000 fcb4 	bl	80055f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d12a      	bne.n	8004cf2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <HAL_ADC_Start_DMA+0x1d8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d015      	beq.n	8004cd2 <HAL_ADC_Start_DMA+0x16e>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a25      	ldr	r2, [pc, #148]	; (8004d40 <HAL_ADC_Start_DMA+0x1dc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d105      	bne.n	8004cbc <HAL_ADC_Start_DMA+0x158>
 8004cb0:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_ADC_Start_DMA+0x1c8>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 031f 	and.w	r3, r3, #31
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a20      	ldr	r2, [pc, #128]	; (8004d44 <HAL_ADC_Start_DMA+0x1e0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d129      	bne.n	8004d1a <HAL_ADC_Start_DMA+0x1b6>
 8004cc6:	4b19      	ldr	r3, [pc, #100]	; (8004d2c <HAL_ADC_Start_DMA+0x1c8>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	d823      	bhi.n	8004d1a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d11c      	bne.n	8004d1a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004cee:	609a      	str	r2, [r3, #8]
 8004cf0:	e013      	b.n	8004d1a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a11      	ldr	r2, [pc, #68]	; (8004d3c <HAL_ADC_Start_DMA+0x1d8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10e      	bne.n	8004d1a <HAL_ADC_Start_DMA+0x1b6>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d107      	bne.n	8004d1a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d18:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000004 	.word	0x20000004
 8004d28:	431bde83 	.word	0x431bde83
 8004d2c:	40012300 	.word	0x40012300
 8004d30:	080051c1 	.word	0x080051c1
 8004d34:	0800527b 	.word	0x0800527b
 8004d38:	08005297 	.word	0x08005297
 8004d3c:	40012000 	.word	0x40012000
 8004d40:	40012100 	.word	0x40012100
 8004d44:	40012200 	.word	0x40012200

08004d48 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x1c>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e105      	b.n	8004fac <HAL_ADC_ConfigChannel+0x228>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b09      	cmp	r3, #9
 8004dae:	d925      	bls.n	8004dfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68d9      	ldr	r1, [r3, #12]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3b1e      	subs	r3, #30
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43da      	mvns	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	400a      	ands	r2, r1
 8004dd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68d9      	ldr	r1, [r3, #12]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	4618      	mov	r0, r3
 8004de8:	4603      	mov	r3, r0
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4403      	add	r3, r0
 8004dee:	3b1e      	subs	r3, #30
 8004df0:	409a      	lsls	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	e022      	b.n	8004e42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6919      	ldr	r1, [r3, #16]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	2207      	movs	r2, #7
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6919      	ldr	r1, [r3, #16]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4618      	mov	r0, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	4403      	add	r3, r0
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b06      	cmp	r3, #6
 8004e48:	d824      	bhi.n	8004e94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	3b05      	subs	r3, #5
 8004e5c:	221f      	movs	r2, #31
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43da      	mvns	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	400a      	ands	r2, r1
 8004e6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	4618      	mov	r0, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	3b05      	subs	r3, #5
 8004e86:	fa00 f203 	lsl.w	r2, r0, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	635a      	str	r2, [r3, #52]	; 0x34
 8004e92:	e04c      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	d824      	bhi.n	8004ee6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	3b23      	subs	r3, #35	; 0x23
 8004eae:	221f      	movs	r2, #31
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43da      	mvns	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	400a      	ands	r2, r1
 8004ebc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4618      	mov	r0, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3b23      	subs	r3, #35	; 0x23
 8004ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ee4:	e023      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3b41      	subs	r3, #65	; 0x41
 8004ef8:	221f      	movs	r2, #31
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43da      	mvns	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	400a      	ands	r2, r1
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	4618      	mov	r0, r3
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	3b41      	subs	r3, #65	; 0x41
 8004f22:	fa00 f203 	lsl.w	r2, r0, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f2e:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <HAL_ADC_ConfigChannel+0x234>)
 8004f30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <HAL_ADC_ConfigChannel+0x238>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d109      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x1cc>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b12      	cmp	r3, #18
 8004f42:	d105      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <HAL_ADC_ConfigChannel+0x238>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d123      	bne.n	8004fa2 <HAL_ADC_ConfigChannel+0x21e>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d003      	beq.n	8004f6a <HAL_ADC_ConfigChannel+0x1e6>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b11      	cmp	r3, #17
 8004f68:	d11b      	bne.n	8004fa2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d111      	bne.n	8004fa2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <HAL_ADC_ConfigChannel+0x23c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a10      	ldr	r2, [pc, #64]	; (8004fc4 <HAL_ADC_ConfigChannel+0x240>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	0c9a      	lsrs	r2, r3, #18
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f94:	e002      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f9      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40012300 	.word	0x40012300
 8004fbc:	40012000 	.word	0x40012000
 8004fc0:	20000004 	.word	0x20000004
 8004fc4:	431bde83 	.word	0x431bde83

08004fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fd0:	4b79      	ldr	r3, [pc, #484]	; (80051b8 <ADC_Init+0x1f0>)
 8004fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	021a      	lsls	r2, r3, #8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6899      	ldr	r1, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	4a58      	ldr	r2, [pc, #352]	; (80051bc <ADC_Init+0x1f4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d022      	beq.n	80050a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800506e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6899      	ldr	r1, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6899      	ldr	r1, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]
 80050a4:	e00f      	b.n	80050c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0202 	bic.w	r2, r2, #2
 80050d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6899      	ldr	r1, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	7e1b      	ldrb	r3, [r3, #24]
 80050e0:	005a      	lsls	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005102:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	3b01      	subs	r3, #1
 8005120:	035a      	lsls	r2, r3, #13
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
 800512a:	e007      	b.n	800513c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800513a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800514a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	3b01      	subs	r3, #1
 8005158:	051a      	lsls	r2, r3, #20
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6899      	ldr	r1, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800517e:	025a      	lsls	r2, r3, #9
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	029a      	lsls	r2, r3, #10
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]
}
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	40012300 	.word	0x40012300
 80051bc:	0f000001 	.word	0x0f000001

080051c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d13c      	bne.n	8005254 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d12b      	bne.n	800524c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d127      	bne.n	800524c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005214:	2b00      	cmp	r3, #0
 8005216:	d119      	bne.n	800524c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0220 	bic.w	r2, r2, #32
 8005226:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	f043 0201 	orr.w	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f7ff fd7b 	bl	8004d48 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005252:	e00e      	b.n	8005272 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7ff fd85 	bl	8004d70 <HAL_ADC_ErrorCallback>
}
 8005266:	e004      	b.n	8005272 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	4798      	blx	r3
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff fd67 	bl	8004d5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800528e:	bf00      	nop
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2240      	movs	r2, #64	; 0x40
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	f043 0204 	orr.w	r2, r3, #4
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7ff fd5a 	bl	8004d70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <__NVIC_SetPriorityGrouping+0x44>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052f4:	4013      	ands	r3, r2
 80052f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800530a:	4a04      	ldr	r2, [pc, #16]	; (800531c <__NVIC_SetPriorityGrouping+0x44>)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	60d3      	str	r3, [r2, #12]
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	e000ed00 	.word	0xe000ed00

08005320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <__NVIC_GetPriorityGrouping+0x18>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	f003 0307 	and.w	r3, r3, #7
}
 800532e:	4618      	mov	r0, r3
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e000ed00 	.word	0xe000ed00

0800533c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534a:	2b00      	cmp	r3, #0
 800534c:	db0b      	blt.n	8005366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	f003 021f 	and.w	r2, r3, #31
 8005354:	4907      	ldr	r1, [pc, #28]	; (8005374 <__NVIC_EnableIRQ+0x38>)
 8005356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	2001      	movs	r0, #1
 800535e:	fa00 f202 	lsl.w	r2, r0, r2
 8005362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	e000e100 	.word	0xe000e100

08005378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	6039      	str	r1, [r7, #0]
 8005382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005388:	2b00      	cmp	r3, #0
 800538a:	db0a      	blt.n	80053a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	490c      	ldr	r1, [pc, #48]	; (80053c4 <__NVIC_SetPriority+0x4c>)
 8005392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005396:	0112      	lsls	r2, r2, #4
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	440b      	add	r3, r1
 800539c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053a0:	e00a      	b.n	80053b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	4908      	ldr	r1, [pc, #32]	; (80053c8 <__NVIC_SetPriority+0x50>)
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	3b04      	subs	r3, #4
 80053b0:	0112      	lsls	r2, r2, #4
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	440b      	add	r3, r1
 80053b6:	761a      	strb	r2, [r3, #24]
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	e000e100 	.word	0xe000e100
 80053c8:	e000ed00 	.word	0xe000ed00

080053cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b089      	sub	sp, #36	; 0x24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f1c3 0307 	rsb	r3, r3, #7
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	bf28      	it	cs
 80053ea:	2304      	movcs	r3, #4
 80053ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	3304      	adds	r3, #4
 80053f2:	2b06      	cmp	r3, #6
 80053f4:	d902      	bls.n	80053fc <NVIC_EncodePriority+0x30>
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	3b03      	subs	r3, #3
 80053fa:	e000      	b.n	80053fe <NVIC_EncodePriority+0x32>
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005400:	f04f 32ff 	mov.w	r2, #4294967295
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	43da      	mvns	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	401a      	ands	r2, r3
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005414:	f04f 31ff 	mov.w	r1, #4294967295
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	43d9      	mvns	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005424:	4313      	orrs	r3, r2
         );
}
 8005426:	4618      	mov	r0, r3
 8005428:	3724      	adds	r7, #36	; 0x24
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff ff4c 	bl	80052d8 <__NVIC_SetPriorityGrouping>
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800545a:	f7ff ff61 	bl	8005320 <__NVIC_GetPriorityGrouping>
 800545e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	6978      	ldr	r0, [r7, #20]
 8005466:	f7ff ffb1 	bl	80053cc <NVIC_EncodePriority>
 800546a:	4602      	mov	r2, r0
 800546c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff ff80 	bl	8005378 <__NVIC_SetPriority>
}
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800548a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff54 	bl	800533c <__NVIC_EnableIRQ>
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054a8:	f7ff f9aa 	bl	8004800 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e099      	b.n	80055ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054d8:	e00f      	b.n	80054fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054da:	f7ff f991 	bl	8004800 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b05      	cmp	r3, #5
 80054e6:	d908      	bls.n	80054fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2203      	movs	r2, #3
 80054f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e078      	b.n	80055ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e8      	bne.n	80054da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4b38      	ldr	r3, [pc, #224]	; (80055f4 <HAL_DMA_Init+0x158>)
 8005514:	4013      	ands	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800553e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	2b04      	cmp	r3, #4
 8005552:	d107      	bne.n	8005564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	4313      	orrs	r3, r2
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f023 0307 	bic.w	r3, r3, #7
 800557a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	2b04      	cmp	r3, #4
 800558c:	d117      	bne.n	80055be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00e      	beq.n	80055be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fb01 	bl	8005ba8 <DMA_CheckFifoParam>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2240      	movs	r2, #64	; 0x40
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055ba:	2301      	movs	r3, #1
 80055bc:	e016      	b.n	80055ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fab8 	bl	8005b3c <DMA_CalcBaseAndBitshift>
 80055cc:	4603      	mov	r3, r0
 80055ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d4:	223f      	movs	r2, #63	; 0x3f
 80055d6:	409a      	lsls	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	f010803f 	.word	0xf010803f

080055f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_DMA_Start_IT+0x26>
 800561a:	2302      	movs	r3, #2
 800561c:	e040      	b.n	80056a0 <HAL_DMA_Start_IT+0xa8>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b01      	cmp	r3, #1
 8005630:	d12f      	bne.n	8005692 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fa4a 	bl	8005ae0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005650:	223f      	movs	r2, #63	; 0x3f
 8005652:	409a      	lsls	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0216 	orr.w	r2, r2, #22
 8005666:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0208 	orr.w	r2, r2, #8
 800567e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e005      	b.n	800569e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800569a:	2302      	movs	r3, #2
 800569c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800569e:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056b6:	f7ff f8a3 	bl	8004800 <HAL_GetTick>
 80056ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d008      	beq.n	80056da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2280      	movs	r2, #128	; 0x80
 80056cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e052      	b.n	8005780 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0216 	bic.w	r2, r2, #22
 80056e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <HAL_DMA_Abort+0x62>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0208 	bic.w	r2, r2, #8
 8005718:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800572a:	e013      	b.n	8005754 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800572c:	f7ff f868 	bl	8004800 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b05      	cmp	r3, #5
 8005738:	d90c      	bls.n	8005754 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2203      	movs	r2, #3
 800574c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e015      	b.n	8005780 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e4      	bne.n	800572c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005766:	223f      	movs	r2, #63	; 0x3f
 8005768:	409a      	lsls	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d004      	beq.n	80057a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2280      	movs	r2, #128	; 0x80
 80057a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e00c      	b.n	80057c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2205      	movs	r2, #5
 80057aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057d8:	4b92      	ldr	r3, [pc, #584]	; (8005a24 <HAL_DMA_IRQHandler+0x258>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a92      	ldr	r2, [pc, #584]	; (8005a28 <HAL_DMA_IRQHandler+0x25c>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	0a9b      	lsrs	r3, r3, #10
 80057e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	2208      	movs	r2, #8
 80057f8:	409a      	lsls	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01a      	beq.n	8005838 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d013      	beq.n	8005838 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0204 	bic.w	r2, r2, #4
 800581e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005824:	2208      	movs	r2, #8
 8005826:	409a      	lsls	r2, r3
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	f043 0201 	orr.w	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	2201      	movs	r2, #1
 800583e:	409a      	lsls	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4013      	ands	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d012      	beq.n	800586e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585a:	2201      	movs	r2, #1
 800585c:	409a      	lsls	r2, r3
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005866:	f043 0202 	orr.w	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005872:	2204      	movs	r2, #4
 8005874:	409a      	lsls	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005890:	2204      	movs	r2, #4
 8005892:	409a      	lsls	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f043 0204 	orr.w	r2, r3, #4
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	2210      	movs	r2, #16
 80058aa:	409a      	lsls	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d043      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d03c      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	2210      	movs	r2, #16
 80058c8:	409a      	lsls	r2, r3
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d018      	beq.n	800590e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d108      	bne.n	80058fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d024      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
 80058fa:	e01f      	b.n	800593c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01b      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4798      	blx	r3
 800590c:	e016      	b.n	800593c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0208 	bic.w	r2, r2, #8
 800592a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	2220      	movs	r2, #32
 8005942:	409a      	lsls	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 808e 	beq.w	8005a6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8086 	beq.w	8005a6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	2220      	movs	r2, #32
 8005964:	409a      	lsls	r2, r3
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b05      	cmp	r3, #5
 8005974:	d136      	bne.n	80059e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0216 	bic.w	r2, r2, #22
 8005984:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005994:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <HAL_DMA_IRQHandler+0x1da>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0208 	bic.w	r2, r2, #8
 80059b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ba:	223f      	movs	r2, #63	; 0x3f
 80059bc:	409a      	lsls	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d07d      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	4798      	blx	r3
        }
        return;
 80059e2:	e078      	b.n	8005ad6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01c      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d108      	bne.n	8005a12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d030      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
 8005a10:	e02b      	b.n	8005a6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d027      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
 8005a22:	e022      	b.n	8005a6a <HAL_DMA_IRQHandler+0x29e>
 8005a24:	20000004 	.word	0x20000004
 8005a28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10f      	bne.n	8005a5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0210 	bic.w	r2, r2, #16
 8005a48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d032      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d022      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2205      	movs	r2, #5
 8005a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60bb      	str	r3, [r7, #8]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d307      	bcc.n	8005ab2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f2      	bne.n	8005a96 <HAL_DMA_IRQHandler+0x2ca>
 8005ab0:	e000      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005ab2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	4798      	blx	r3
 8005ad4:	e000      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005ad6:	bf00      	nop
    }
  }
}
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop

08005ae0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005afc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d108      	bne.n	8005b20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b1e:	e007      	b.n	8005b30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	3b10      	subs	r3, #16
 8005b4c:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <DMA_CalcBaseAndBitshift+0x64>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	091b      	lsrs	r3, r3, #4
 8005b54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b56:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <DMA_CalcBaseAndBitshift+0x68>)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d909      	bls.n	8005b7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	659a      	str	r2, [r3, #88]	; 0x58
 8005b7c:	e007      	b.n	8005b8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	aaaaaaab 	.word	0xaaaaaaab
 8005ba4:	0800e440 	.word	0x0800e440

08005ba8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d11f      	bne.n	8005c02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d855      	bhi.n	8005c74 <DMA_CheckFifoParam+0xcc>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <DMA_CheckFifoParam+0x28>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005be1 	.word	0x08005be1
 8005bd4:	08005bf3 	.word	0x08005bf3
 8005bd8:	08005be1 	.word	0x08005be1
 8005bdc:	08005c75 	.word	0x08005c75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d045      	beq.n	8005c78 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf0:	e042      	b.n	8005c78 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bfa:	d13f      	bne.n	8005c7c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c00:	e03c      	b.n	8005c7c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0a:	d121      	bne.n	8005c50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d836      	bhi.n	8005c80 <DMA_CheckFifoParam+0xd8>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <DMA_CheckFifoParam+0x70>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c2f 	.word	0x08005c2f
 8005c20:	08005c29 	.word	0x08005c29
 8005c24:	08005c41 	.word	0x08005c41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2c:	e02f      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d024      	beq.n	8005c84 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c3e:	e021      	b.n	8005c84 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c48:	d11e      	bne.n	8005c88 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c4e:	e01b      	b.n	8005c88 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d902      	bls.n	8005c5c <DMA_CheckFifoParam+0xb4>
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d003      	beq.n	8005c62 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c5a:	e018      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c60:	e015      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00e      	beq.n	8005c8c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	73fb      	strb	r3, [r7, #15]
      break;
 8005c72:	e00b      	b.n	8005c8c <DMA_CheckFifoParam+0xe4>
      break;
 8005c74:	bf00      	nop
 8005c76:	e00a      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
      break;
 8005c78:	bf00      	nop
 8005c7a:	e008      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
      break;
 8005c7c:	bf00      	nop
 8005c7e:	e006      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
      break;
 8005c80:	bf00      	nop
 8005c82:	e004      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
      break;
 8005c84:	bf00      	nop
 8005c86:	e002      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
      break;   
 8005c88:	bf00      	nop
 8005c8a:	e000      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
      break;
 8005c8c:	bf00      	nop
    }
  } 
  
  return status; 
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b089      	sub	sp, #36	; 0x24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	e16b      	b.n	8005f90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cb8:	2201      	movs	r2, #1
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	f040 815a 	bne.w	8005f8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d00b      	beq.n	8005cf6 <HAL_GPIO_Init+0x5a>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d007      	beq.n	8005cf6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cea:	2b11      	cmp	r3, #17
 8005cec:	d003      	beq.n	8005cf6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b12      	cmp	r3, #18
 8005cf4:	d130      	bne.n	8005d58 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	2203      	movs	r2, #3
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	f003 0201 	and.w	r2, r3, #1
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	2203      	movs	r2, #3
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d003      	beq.n	8005d98 <HAL_GPIO_Init+0xfc>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b12      	cmp	r3, #18
 8005d96:	d123      	bne.n	8005de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	08da      	lsrs	r2, r3, #3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3208      	adds	r2, #8
 8005da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	220f      	movs	r2, #15
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	43db      	mvns	r3, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4013      	ands	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	08da      	lsrs	r2, r3, #3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3208      	adds	r2, #8
 8005dda:	69b9      	ldr	r1, [r7, #24]
 8005ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	2203      	movs	r2, #3
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	43db      	mvns	r3, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4013      	ands	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 0203 	and.w	r2, r3, #3
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80b4 	beq.w	8005f8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	4b5f      	ldr	r3, [pc, #380]	; (8005fa4 <HAL_GPIO_Init+0x308>)
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	4a5e      	ldr	r2, [pc, #376]	; (8005fa4 <HAL_GPIO_Init+0x308>)
 8005e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e30:	6453      	str	r3, [r2, #68]	; 0x44
 8005e32:	4b5c      	ldr	r3, [pc, #368]	; (8005fa4 <HAL_GPIO_Init+0x308>)
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e3e:	4a5a      	ldr	r2, [pc, #360]	; (8005fa8 <HAL_GPIO_Init+0x30c>)
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	3302      	adds	r3, #2
 8005e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	220f      	movs	r2, #15
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a51      	ldr	r2, [pc, #324]	; (8005fac <HAL_GPIO_Init+0x310>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d02b      	beq.n	8005ec2 <HAL_GPIO_Init+0x226>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a50      	ldr	r2, [pc, #320]	; (8005fb0 <HAL_GPIO_Init+0x314>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d025      	beq.n	8005ebe <HAL_GPIO_Init+0x222>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a4f      	ldr	r2, [pc, #316]	; (8005fb4 <HAL_GPIO_Init+0x318>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01f      	beq.n	8005eba <HAL_GPIO_Init+0x21e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a4e      	ldr	r2, [pc, #312]	; (8005fb8 <HAL_GPIO_Init+0x31c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d019      	beq.n	8005eb6 <HAL_GPIO_Init+0x21a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a4d      	ldr	r2, [pc, #308]	; (8005fbc <HAL_GPIO_Init+0x320>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <HAL_GPIO_Init+0x216>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a4c      	ldr	r2, [pc, #304]	; (8005fc0 <HAL_GPIO_Init+0x324>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00d      	beq.n	8005eae <HAL_GPIO_Init+0x212>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a4b      	ldr	r2, [pc, #300]	; (8005fc4 <HAL_GPIO_Init+0x328>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <HAL_GPIO_Init+0x20e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a4a      	ldr	r2, [pc, #296]	; (8005fc8 <HAL_GPIO_Init+0x32c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d101      	bne.n	8005ea6 <HAL_GPIO_Init+0x20a>
 8005ea2:	2307      	movs	r3, #7
 8005ea4:	e00e      	b.n	8005ec4 <HAL_GPIO_Init+0x228>
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	e00c      	b.n	8005ec4 <HAL_GPIO_Init+0x228>
 8005eaa:	2306      	movs	r3, #6
 8005eac:	e00a      	b.n	8005ec4 <HAL_GPIO_Init+0x228>
 8005eae:	2305      	movs	r3, #5
 8005eb0:	e008      	b.n	8005ec4 <HAL_GPIO_Init+0x228>
 8005eb2:	2304      	movs	r3, #4
 8005eb4:	e006      	b.n	8005ec4 <HAL_GPIO_Init+0x228>
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e004      	b.n	8005ec4 <HAL_GPIO_Init+0x228>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e002      	b.n	8005ec4 <HAL_GPIO_Init+0x228>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <HAL_GPIO_Init+0x228>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	f002 0203 	and.w	r2, r2, #3
 8005eca:	0092      	lsls	r2, r2, #2
 8005ecc:	4093      	lsls	r3, r2
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ed4:	4934      	ldr	r1, [pc, #208]	; (8005fa8 <HAL_GPIO_Init+0x30c>)
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	089b      	lsrs	r3, r3, #2
 8005eda:	3302      	adds	r3, #2
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ee2:	4b3a      	ldr	r3, [pc, #232]	; (8005fcc <HAL_GPIO_Init+0x330>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f06:	4a31      	ldr	r2, [pc, #196]	; (8005fcc <HAL_GPIO_Init+0x330>)
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f0c:	4b2f      	ldr	r3, [pc, #188]	; (8005fcc <HAL_GPIO_Init+0x330>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	43db      	mvns	r3, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f30:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <HAL_GPIO_Init+0x330>)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f36:	4b25      	ldr	r3, [pc, #148]	; (8005fcc <HAL_GPIO_Init+0x330>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4013      	ands	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f5a:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <HAL_GPIO_Init+0x330>)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f60:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <HAL_GPIO_Init+0x330>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f84:	4a11      	ldr	r2, [pc, #68]	; (8005fcc <HAL_GPIO_Init+0x330>)
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b0f      	cmp	r3, #15
 8005f94:	f67f ae90 	bls.w	8005cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f98:	bf00      	nop
 8005f9a:	3724      	adds	r7, #36	; 0x24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	40013800 	.word	0x40013800
 8005fac:	40020000 	.word	0x40020000
 8005fb0:	40020400 	.word	0x40020400
 8005fb4:	40020800 	.word	0x40020800
 8005fb8:	40020c00 	.word	0x40020c00
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	40021400 	.word	0x40021400
 8005fc4:	40021800 	.word	0x40021800
 8005fc8:	40021c00 	.word	0x40021c00
 8005fcc:	40013c00 	.word	0x40013c00

08005fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	887b      	ldrh	r3, [r7, #2]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
 8005fec:	e001      	b.n	8005ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	807b      	strh	r3, [r7, #2]
 800600c:	4613      	mov	r3, r2
 800600e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006010:	787b      	ldrb	r3, [r7, #1]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006016:	887a      	ldrh	r2, [r7, #2]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800601c:	e003      	b.n	8006026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800601e:	887b      	ldrh	r3, [r7, #2]
 8006020:	041a      	lsls	r2, r3, #16
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	619a      	str	r2, [r3, #24]
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
	...

08006034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e11f      	b.n	8006286 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fd fd2e 	bl	8003abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2224      	movs	r2, #36	; 0x24
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006098:	f000 fd88 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 800609c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	4a7b      	ldr	r2, [pc, #492]	; (8006290 <HAL_I2C_Init+0x25c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d807      	bhi.n	80060b8 <HAL_I2C_Init+0x84>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4a7a      	ldr	r2, [pc, #488]	; (8006294 <HAL_I2C_Init+0x260>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	bf94      	ite	ls
 80060b0:	2301      	movls	r3, #1
 80060b2:	2300      	movhi	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e006      	b.n	80060c6 <HAL_I2C_Init+0x92>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4a77      	ldr	r2, [pc, #476]	; (8006298 <HAL_I2C_Init+0x264>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	bf94      	ite	ls
 80060c0:	2301      	movls	r3, #1
 80060c2:	2300      	movhi	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e0db      	b.n	8006286 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a72      	ldr	r2, [pc, #456]	; (800629c <HAL_I2C_Init+0x268>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	0c9b      	lsrs	r3, r3, #18
 80060d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	4a64      	ldr	r2, [pc, #400]	; (8006290 <HAL_I2C_Init+0x25c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d802      	bhi.n	8006108 <HAL_I2C_Init+0xd4>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	3301      	adds	r3, #1
 8006106:	e009      	b.n	800611c <HAL_I2C_Init+0xe8>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	4a63      	ldr	r2, [pc, #396]	; (80062a0 <HAL_I2C_Init+0x26c>)
 8006114:	fba2 2303 	umull	r2, r3, r2, r3
 8006118:	099b      	lsrs	r3, r3, #6
 800611a:	3301      	adds	r3, #1
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	430b      	orrs	r3, r1
 8006122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800612e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	4956      	ldr	r1, [pc, #344]	; (8006290 <HAL_I2C_Init+0x25c>)
 8006138:	428b      	cmp	r3, r1
 800613a:	d80d      	bhi.n	8006158 <HAL_I2C_Init+0x124>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1e59      	subs	r1, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	fbb1 f3f3 	udiv	r3, r1, r3
 800614a:	3301      	adds	r3, #1
 800614c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006150:	2b04      	cmp	r3, #4
 8006152:	bf38      	it	cc
 8006154:	2304      	movcc	r3, #4
 8006156:	e04f      	b.n	80061f8 <HAL_I2C_Init+0x1c4>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d111      	bne.n	8006184 <HAL_I2C_Init+0x150>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	1e58      	subs	r0, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6859      	ldr	r1, [r3, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	440b      	add	r3, r1
 800616e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006172:	3301      	adds	r3, #1
 8006174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006178:	2b00      	cmp	r3, #0
 800617a:	bf0c      	ite	eq
 800617c:	2301      	moveq	r3, #1
 800617e:	2300      	movne	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	e012      	b.n	80061aa <HAL_I2C_Init+0x176>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	1e58      	subs	r0, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6859      	ldr	r1, [r3, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	0099      	lsls	r1, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	fbb0 f3f3 	udiv	r3, r0, r3
 800619a:	3301      	adds	r3, #1
 800619c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bf0c      	ite	eq
 80061a4:	2301      	moveq	r3, #1
 80061a6:	2300      	movne	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_I2C_Init+0x17e>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e022      	b.n	80061f8 <HAL_I2C_Init+0x1c4>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10e      	bne.n	80061d8 <HAL_I2C_Init+0x1a4>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1e58      	subs	r0, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6859      	ldr	r1, [r3, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	440b      	add	r3, r1
 80061c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80061cc:	3301      	adds	r3, #1
 80061ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d6:	e00f      	b.n	80061f8 <HAL_I2C_Init+0x1c4>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1e58      	subs	r0, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	0099      	lsls	r1, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ee:	3301      	adds	r3, #1
 80061f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	6809      	ldr	r1, [r1, #0]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69da      	ldr	r2, [r3, #28]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6911      	ldr	r1, [r2, #16]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	68d2      	ldr	r2, [r2, #12]
 8006232:	4311      	orrs	r1, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	430b      	orrs	r3, r1
 800623a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	000186a0 	.word	0x000186a0
 8006294:	001e847f 	.word	0x001e847f
 8006298:	003d08ff 	.word	0x003d08ff
 800629c:	431bde83 	.word	0x431bde83
 80062a0:	10624dd3 	.word	0x10624dd3

080062a4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e02b      	b.n	800630e <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80062be:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f245 5255 	movw	r2, #21845	; 0x5555
 80062c8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6852      	ldr	r2, [r2, #4]
 80062d2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6892      	ldr	r2, [r2, #8]
 80062dc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80062de:	f7fe fa8f 	bl	8004800 <HAL_GetTick>
 80062e2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80062e4:	e008      	b.n	80062f8 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80062e6:	f7fe fa8b 	bl	8004800 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b30      	cmp	r3, #48	; 0x30
 80062f2:	d901      	bls.n	80062f8 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e00a      	b.n	800630e <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f1      	bne.n	80062e6 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800630a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006326:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e25b      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d075      	beq.n	8006442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006356:	4ba3      	ldr	r3, [pc, #652]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 030c 	and.w	r3, r3, #12
 800635e:	2b04      	cmp	r3, #4
 8006360:	d00c      	beq.n	800637c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006362:	4ba0      	ldr	r3, [pc, #640]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800636a:	2b08      	cmp	r3, #8
 800636c:	d112      	bne.n	8006394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800636e:	4b9d      	ldr	r3, [pc, #628]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800637a:	d10b      	bne.n	8006394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800637c:	4b99      	ldr	r3, [pc, #612]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d05b      	beq.n	8006440 <HAL_RCC_OscConfig+0x108>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d157      	bne.n	8006440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e236      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639c:	d106      	bne.n	80063ac <HAL_RCC_OscConfig+0x74>
 800639e:	4b91      	ldr	r3, [pc, #580]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a90      	ldr	r2, [pc, #576]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80063a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	e01d      	b.n	80063e8 <HAL_RCC_OscConfig+0xb0>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063b4:	d10c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x98>
 80063b6:	4b8b      	ldr	r3, [pc, #556]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a8a      	ldr	r2, [pc, #552]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80063bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	4b88      	ldr	r3, [pc, #544]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a87      	ldr	r2, [pc, #540]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80063c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e00b      	b.n	80063e8 <HAL_RCC_OscConfig+0xb0>
 80063d0:	4b84      	ldr	r3, [pc, #528]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a83      	ldr	r2, [pc, #524]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80063d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	4b81      	ldr	r3, [pc, #516]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a80      	ldr	r2, [pc, #512]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80063e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d013      	beq.n	8006418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f7fe fa06 	bl	8004800 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063f8:	f7fe fa02 	bl	8004800 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b64      	cmp	r3, #100	; 0x64
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e1fb      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800640a:	4b76      	ldr	r3, [pc, #472]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0f0      	beq.n	80063f8 <HAL_RCC_OscConfig+0xc0>
 8006416:	e014      	b.n	8006442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006418:	f7fe f9f2 	bl	8004800 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006420:	f7fe f9ee 	bl	8004800 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b64      	cmp	r3, #100	; 0x64
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e1e7      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006432:	4b6c      	ldr	r3, [pc, #432]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f0      	bne.n	8006420 <HAL_RCC_OscConfig+0xe8>
 800643e:	e000      	b.n	8006442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d063      	beq.n	8006516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800644e:	4b65      	ldr	r3, [pc, #404]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 030c 	and.w	r3, r3, #12
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00b      	beq.n	8006472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800645a:	4b62      	ldr	r3, [pc, #392]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006462:	2b08      	cmp	r3, #8
 8006464:	d11c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006466:	4b5f      	ldr	r3, [pc, #380]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d116      	bne.n	80064a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006472:	4b5c      	ldr	r3, [pc, #368]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d005      	beq.n	800648a <HAL_RCC_OscConfig+0x152>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d001      	beq.n	800648a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e1bb      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800648a:	4b56      	ldr	r3, [pc, #344]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	4952      	ldr	r1, [pc, #328]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 800649a:	4313      	orrs	r3, r2
 800649c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800649e:	e03a      	b.n	8006516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d020      	beq.n	80064ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a8:	4b4f      	ldr	r3, [pc, #316]	; (80065e8 <HAL_RCC_OscConfig+0x2b0>)
 80064aa:	2201      	movs	r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ae:	f7fe f9a7 	bl	8004800 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064b6:	f7fe f9a3 	bl	8004800 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e19c      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c8:	4b46      	ldr	r3, [pc, #280]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d4:	4b43      	ldr	r3, [pc, #268]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	4940      	ldr	r1, [pc, #256]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	600b      	str	r3, [r1, #0]
 80064e8:	e015      	b.n	8006516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ea:	4b3f      	ldr	r3, [pc, #252]	; (80065e8 <HAL_RCC_OscConfig+0x2b0>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f0:	f7fe f986 	bl	8004800 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064f8:	f7fe f982 	bl	8004800 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e17b      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800650a:	4b36      	ldr	r3, [pc, #216]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f0      	bne.n	80064f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d030      	beq.n	8006584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d016      	beq.n	8006558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800652a:	4b30      	ldr	r3, [pc, #192]	; (80065ec <HAL_RCC_OscConfig+0x2b4>)
 800652c:	2201      	movs	r2, #1
 800652e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006530:	f7fe f966 	bl	8004800 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006538:	f7fe f962 	bl	8004800 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e15b      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800654a:	4b26      	ldr	r3, [pc, #152]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 800654c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCC_OscConfig+0x200>
 8006556:	e015      	b.n	8006584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006558:	4b24      	ldr	r3, [pc, #144]	; (80065ec <HAL_RCC_OscConfig+0x2b4>)
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655e:	f7fe f94f 	bl	8004800 <HAL_GetTick>
 8006562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006564:	e008      	b.n	8006578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006566:	f7fe f94b 	bl	8004800 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b02      	cmp	r3, #2
 8006572:	d901      	bls.n	8006578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e144      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006578:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 800657a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1f0      	bne.n	8006566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80a0 	beq.w	80066d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006592:	2300      	movs	r3, #0
 8006594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006596:	4b13      	ldr	r3, [pc, #76]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	4a0e      	ldr	r2, [pc, #56]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80065ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b0:	6413      	str	r3, [r2, #64]	; 0x40
 80065b2:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <HAL_RCC_OscConfig+0x2ac>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ba:	60bb      	str	r3, [r7, #8]
 80065bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c2:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <HAL_RCC_OscConfig+0x2b8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d121      	bne.n	8006612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ce:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <HAL_RCC_OscConfig+0x2b8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a07      	ldr	r2, [pc, #28]	; (80065f0 <HAL_RCC_OscConfig+0x2b8>)
 80065d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065da:	f7fe f911 	bl	8004800 <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e0:	e011      	b.n	8006606 <HAL_RCC_OscConfig+0x2ce>
 80065e2:	bf00      	nop
 80065e4:	40023800 	.word	0x40023800
 80065e8:	42470000 	.word	0x42470000
 80065ec:	42470e80 	.word	0x42470e80
 80065f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f4:	f7fe f904 	bl	8004800 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e0fd      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006606:	4b81      	ldr	r3, [pc, #516]	; (800680c <HAL_RCC_OscConfig+0x4d4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0f0      	beq.n	80065f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d106      	bne.n	8006628 <HAL_RCC_OscConfig+0x2f0>
 800661a:	4b7d      	ldr	r3, [pc, #500]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 800661c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661e:	4a7c      	ldr	r2, [pc, #496]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	6713      	str	r3, [r2, #112]	; 0x70
 8006626:	e01c      	b.n	8006662 <HAL_RCC_OscConfig+0x32a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	2b05      	cmp	r3, #5
 800662e:	d10c      	bne.n	800664a <HAL_RCC_OscConfig+0x312>
 8006630:	4b77      	ldr	r3, [pc, #476]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 8006632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006634:	4a76      	ldr	r2, [pc, #472]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 8006636:	f043 0304 	orr.w	r3, r3, #4
 800663a:	6713      	str	r3, [r2, #112]	; 0x70
 800663c:	4b74      	ldr	r3, [pc, #464]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 800663e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006640:	4a73      	ldr	r2, [pc, #460]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	6713      	str	r3, [r2, #112]	; 0x70
 8006648:	e00b      	b.n	8006662 <HAL_RCC_OscConfig+0x32a>
 800664a:	4b71      	ldr	r3, [pc, #452]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	4a70      	ldr	r2, [pc, #448]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	6713      	str	r3, [r2, #112]	; 0x70
 8006656:	4b6e      	ldr	r3, [pc, #440]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665a:	4a6d      	ldr	r2, [pc, #436]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d015      	beq.n	8006696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666a:	f7fe f8c9 	bl	8004800 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006670:	e00a      	b.n	8006688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006672:	f7fe f8c5 	bl	8004800 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006680:	4293      	cmp	r3, r2
 8006682:	d901      	bls.n	8006688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e0bc      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006688:	4b61      	ldr	r3, [pc, #388]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 800668a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0ee      	beq.n	8006672 <HAL_RCC_OscConfig+0x33a>
 8006694:	e014      	b.n	80066c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006696:	f7fe f8b3 	bl	8004800 <HAL_GetTick>
 800669a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800669c:	e00a      	b.n	80066b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800669e:	f7fe f8af 	bl	8004800 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e0a6      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b4:	4b56      	ldr	r3, [pc, #344]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 80066b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1ee      	bne.n	800669e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d105      	bne.n	80066d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066c6:	4b52      	ldr	r3, [pc, #328]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	4a51      	ldr	r2, [pc, #324]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 80066cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 8092 	beq.w	8006800 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066dc:	4b4c      	ldr	r3, [pc, #304]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 030c 	and.w	r3, r3, #12
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d05c      	beq.n	80067a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d141      	bne.n	8006774 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f0:	4b48      	ldr	r3, [pc, #288]	; (8006814 <HAL_RCC_OscConfig+0x4dc>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f6:	f7fe f883 	bl	8004800 <HAL_GetTick>
 80066fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066fe:	f7fe f87f 	bl	8004800 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e078      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006710:	4b3f      	ldr	r3, [pc, #252]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1f0      	bne.n	80066fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69da      	ldr	r2, [r3, #28]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	019b      	lsls	r3, r3, #6
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	3b01      	subs	r3, #1
 8006736:	041b      	lsls	r3, r3, #16
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	061b      	lsls	r3, r3, #24
 8006740:	4933      	ldr	r1, [pc, #204]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 8006742:	4313      	orrs	r3, r2
 8006744:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006746:	4b33      	ldr	r3, [pc, #204]	; (8006814 <HAL_RCC_OscConfig+0x4dc>)
 8006748:	2201      	movs	r2, #1
 800674a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674c:	f7fe f858 	bl	8004800 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006754:	f7fe f854 	bl	8004800 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e04d      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006766:	4b2a      	ldr	r3, [pc, #168]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0f0      	beq.n	8006754 <HAL_RCC_OscConfig+0x41c>
 8006772:	e045      	b.n	8006800 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006774:	4b27      	ldr	r3, [pc, #156]	; (8006814 <HAL_RCC_OscConfig+0x4dc>)
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677a:	f7fe f841 	bl	8004800 <HAL_GetTick>
 800677e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006782:	f7fe f83d 	bl	8004800 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e036      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006794:	4b1e      	ldr	r3, [pc, #120]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1f0      	bne.n	8006782 <HAL_RCC_OscConfig+0x44a>
 80067a0:	e02e      	b.n	8006800 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e029      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067ae:	4b18      	ldr	r3, [pc, #96]	; (8006810 <HAL_RCC_OscConfig+0x4d8>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d11c      	bne.n	80067fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d115      	bne.n	80067fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067d6:	4013      	ands	r3, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10d      	bne.n	80067fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d106      	bne.n	80067fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d001      	beq.n	8006800 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40007000 	.word	0x40007000
 8006810:	40023800 	.word	0x40023800
 8006814:	42470060 	.word	0x42470060

08006818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e0cc      	b.n	80069c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800682c:	4b68      	ldr	r3, [pc, #416]	; (80069d0 <HAL_RCC_ClockConfig+0x1b8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 030f 	and.w	r3, r3, #15
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d90c      	bls.n	8006854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683a:	4b65      	ldr	r3, [pc, #404]	; (80069d0 <HAL_RCC_ClockConfig+0x1b8>)
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006842:	4b63      	ldr	r3, [pc, #396]	; (80069d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e0b8      	b.n	80069c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d020      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800686c:	4b59      	ldr	r3, [pc, #356]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	4a58      	ldr	r2, [pc, #352]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006884:	4b53      	ldr	r3, [pc, #332]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	4a52      	ldr	r2, [pc, #328]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 800688a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800688e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006890:	4b50      	ldr	r3, [pc, #320]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	494d      	ldr	r1, [pc, #308]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d044      	beq.n	8006938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d107      	bne.n	80068c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b6:	4b47      	ldr	r3, [pc, #284]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d119      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e07f      	b.n	80069c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d003      	beq.n	80068d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d107      	bne.n	80068e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068d6:	4b3f      	ldr	r3, [pc, #252]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d109      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e06f      	b.n	80069c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e6:	4b3b      	ldr	r3, [pc, #236]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e067      	b.n	80069c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068f6:	4b37      	ldr	r3, [pc, #220]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f023 0203 	bic.w	r2, r3, #3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4934      	ldr	r1, [pc, #208]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006904:	4313      	orrs	r3, r2
 8006906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006908:	f7fd ff7a 	bl	8004800 <HAL_GetTick>
 800690c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690e:	e00a      	b.n	8006926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006910:	f7fd ff76 	bl	8004800 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	f241 3288 	movw	r2, #5000	; 0x1388
 800691e:	4293      	cmp	r3, r2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e04f      	b.n	80069c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006926:	4b2b      	ldr	r3, [pc, #172]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 020c 	and.w	r2, r3, #12
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	429a      	cmp	r2, r3
 8006936:	d1eb      	bne.n	8006910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006938:	4b25      	ldr	r3, [pc, #148]	; (80069d0 <HAL_RCC_ClockConfig+0x1b8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d20c      	bcs.n	8006960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006946:	4b22      	ldr	r3, [pc, #136]	; (80069d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800694e:	4b20      	ldr	r3, [pc, #128]	; (80069d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d001      	beq.n	8006960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e032      	b.n	80069c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d008      	beq.n	800697e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800696c:	4b19      	ldr	r3, [pc, #100]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4916      	ldr	r1, [pc, #88]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	4313      	orrs	r3, r2
 800697c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d009      	beq.n	800699e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800698a:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	490e      	ldr	r1, [pc, #56]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	4313      	orrs	r3, r2
 800699c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800699e:	f000 f821 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 80069a2:	4601      	mov	r1, r0
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <HAL_RCC_ClockConfig+0x1bc>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	091b      	lsrs	r3, r3, #4
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <HAL_RCC_ClockConfig+0x1c0>)
 80069b0:	5cd3      	ldrb	r3, [r2, r3]
 80069b2:	fa21 f303 	lsr.w	r3, r1, r3
 80069b6:	4a09      	ldr	r2, [pc, #36]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 80069b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069ba:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fd fc3c 	bl	800423c <HAL_InitTick>

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	40023c00 	.word	0x40023c00
 80069d4:	40023800 	.word	0x40023800
 80069d8:	0800e428 	.word	0x0800e428
 80069dc:	20000004 	.word	0x20000004
 80069e0:	20000008 	.word	0x20000008

080069e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	607b      	str	r3, [r7, #4]
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	2300      	movs	r3, #0
 80069f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069fa:	4b63      	ldr	r3, [pc, #396]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d007      	beq.n	8006a16 <HAL_RCC_GetSysClockFreq+0x32>
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d008      	beq.n	8006a1c <HAL_RCC_GetSysClockFreq+0x38>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f040 80b4 	bne.w	8006b78 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a10:	4b5e      	ldr	r3, [pc, #376]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006a12:	60bb      	str	r3, [r7, #8]
       break;
 8006a14:	e0b3      	b.n	8006b7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a16:	4b5e      	ldr	r3, [pc, #376]	; (8006b90 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006a18:	60bb      	str	r3, [r7, #8]
      break;
 8006a1a:	e0b0      	b.n	8006b7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a1c:	4b5a      	ldr	r3, [pc, #360]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a26:	4b58      	ldr	r3, [pc, #352]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d04a      	beq.n	8006ac8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a32:	4b55      	ldr	r3, [pc, #340]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	099b      	lsrs	r3, r3, #6
 8006a38:	f04f 0400 	mov.w	r4, #0
 8006a3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	ea03 0501 	and.w	r5, r3, r1
 8006a48:	ea04 0602 	and.w	r6, r4, r2
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4632      	mov	r2, r6
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	f04f 0400 	mov.w	r4, #0
 8006a58:	0154      	lsls	r4, r2, #5
 8006a5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a5e:	014b      	lsls	r3, r1, #5
 8006a60:	4619      	mov	r1, r3
 8006a62:	4622      	mov	r2, r4
 8006a64:	1b49      	subs	r1, r1, r5
 8006a66:	eb62 0206 	sbc.w	r2, r2, r6
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	f04f 0400 	mov.w	r4, #0
 8006a72:	0194      	lsls	r4, r2, #6
 8006a74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a78:	018b      	lsls	r3, r1, #6
 8006a7a:	1a5b      	subs	r3, r3, r1
 8006a7c:	eb64 0402 	sbc.w	r4, r4, r2
 8006a80:	f04f 0100 	mov.w	r1, #0
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	00e2      	lsls	r2, r4, #3
 8006a8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a8e:	00d9      	lsls	r1, r3, #3
 8006a90:	460b      	mov	r3, r1
 8006a92:	4614      	mov	r4, r2
 8006a94:	195b      	adds	r3, r3, r5
 8006a96:	eb44 0406 	adc.w	r4, r4, r6
 8006a9a:	f04f 0100 	mov.w	r1, #0
 8006a9e:	f04f 0200 	mov.w	r2, #0
 8006aa2:	0262      	lsls	r2, r4, #9
 8006aa4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006aa8:	0259      	lsls	r1, r3, #9
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4614      	mov	r4, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f04f 0400 	mov.w	r4, #0
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4623      	mov	r3, r4
 8006abc:	f7fa f81c 	bl	8000af8 <__aeabi_uldivmod>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	e049      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ac8:	4b2f      	ldr	r3, [pc, #188]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	099b      	lsrs	r3, r3, #6
 8006ace:	f04f 0400 	mov.w	r4, #0
 8006ad2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	ea03 0501 	and.w	r5, r3, r1
 8006ade:	ea04 0602 	and.w	r6, r4, r2
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	4632      	mov	r2, r6
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	f04f 0400 	mov.w	r4, #0
 8006aee:	0154      	lsls	r4, r2, #5
 8006af0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006af4:	014b      	lsls	r3, r1, #5
 8006af6:	4619      	mov	r1, r3
 8006af8:	4622      	mov	r2, r4
 8006afa:	1b49      	subs	r1, r1, r5
 8006afc:	eb62 0206 	sbc.w	r2, r2, r6
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	f04f 0400 	mov.w	r4, #0
 8006b08:	0194      	lsls	r4, r2, #6
 8006b0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006b0e:	018b      	lsls	r3, r1, #6
 8006b10:	1a5b      	subs	r3, r3, r1
 8006b12:	eb64 0402 	sbc.w	r4, r4, r2
 8006b16:	f04f 0100 	mov.w	r1, #0
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	00e2      	lsls	r2, r4, #3
 8006b20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006b24:	00d9      	lsls	r1, r3, #3
 8006b26:	460b      	mov	r3, r1
 8006b28:	4614      	mov	r4, r2
 8006b2a:	195b      	adds	r3, r3, r5
 8006b2c:	eb44 0406 	adc.w	r4, r4, r6
 8006b30:	f04f 0100 	mov.w	r1, #0
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	02a2      	lsls	r2, r4, #10
 8006b3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006b3e:	0299      	lsls	r1, r3, #10
 8006b40:	460b      	mov	r3, r1
 8006b42:	4614      	mov	r4, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	4621      	mov	r1, r4
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f04f 0400 	mov.w	r4, #0
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4623      	mov	r3, r4
 8006b52:	f7f9 ffd1 	bl	8000af8 <__aeabi_uldivmod>
 8006b56:	4603      	mov	r3, r0
 8006b58:	460c      	mov	r4, r1
 8006b5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	0c1b      	lsrs	r3, r3, #16
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	3301      	adds	r3, #1
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b74:	60bb      	str	r3, [r7, #8]
      break;
 8006b76:	e002      	b.n	8006b7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b78:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006b7a:	60bb      	str	r3, [r7, #8]
      break;
 8006b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	00f42400 	.word	0x00f42400
 8006b90:	007a1200 	.word	0x007a1200

08006b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b98:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000004 	.word	0x20000004

08006bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bb0:	f7ff fff0 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	0a9b      	lsrs	r3, r3, #10
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	4a03      	ldr	r2, [pc, #12]	; (8006bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bc2:	5cd3      	ldrb	r3, [r2, r3]
 8006bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	0800e438 	.word	0x0800e438

08006bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bd8:	f7ff ffdc 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006bdc:	4601      	mov	r1, r0
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	0b5b      	lsrs	r3, r3, #13
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4a03      	ldr	r2, [pc, #12]	; (8006bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bea:	5cd3      	ldrb	r3, [r2, r3]
 8006bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	0800e438 	.word	0x0800e438

08006bfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	220f      	movs	r2, #15
 8006c0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c0c:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <HAL_RCC_GetClockConfig+0x5c>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 0203 	and.w	r2, r3, #3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c18:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <HAL_RCC_GetClockConfig+0x5c>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c24:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <HAL_RCC_GetClockConfig+0x5c>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c30:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <HAL_RCC_GetClockConfig+0x5c>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	08db      	lsrs	r3, r3, #3
 8006c36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c3e:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <HAL_RCC_GetClockConfig+0x60>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 020f 	and.w	r2, r3, #15
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	601a      	str	r2, [r3, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	40023c00 	.word	0x40023c00

08006c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e056      	b.n	8006d20 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d106      	bne.n	8006c92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fd fa0b 	bl	80040a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	ea42 0103 	orr.w	r1, r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	0c1b      	lsrs	r3, r3, #16
 8006cf0:	f003 0104 	and.w	r1, r3, #4
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69da      	ldr	r2, [r3, #28]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	4613      	mov	r3, r2
 8006d36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_SPI_Transmit+0x22>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e11e      	b.n	8006f88 <HAL_SPI_Transmit+0x260>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d52:	f7fd fd55 	bl	8004800 <HAL_GetTick>
 8006d56:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d002      	beq.n	8006d6e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d6c:	e103      	b.n	8006f76 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <HAL_SPI_Transmit+0x52>
 8006d74:	88fb      	ldrh	r3, [r7, #6]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d7e:	e0fa      	b.n	8006f76 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2203      	movs	r2, #3
 8006d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	88fa      	ldrh	r2, [r7, #6]
 8006d98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	88fa      	ldrh	r2, [r7, #6]
 8006d9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc6:	d107      	bne.n	8006dd8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d007      	beq.n	8006df6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dfe:	d14b      	bne.n	8006e98 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <HAL_SPI_Transmit+0xe6>
 8006e08:	8afb      	ldrh	r3, [r7, #22]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d13e      	bne.n	8006e8c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	881a      	ldrh	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1e:	1c9a      	adds	r2, r3, #2
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e32:	e02b      	b.n	8006e8c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d112      	bne.n	8006e68 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	881a      	ldrh	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	1c9a      	adds	r2, r3, #2
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e66:	e011      	b.n	8006e8c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e68:	f7fd fcca 	bl	8004800 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d803      	bhi.n	8006e80 <HAL_SPI_Transmit+0x158>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d102      	bne.n	8006e86 <HAL_SPI_Transmit+0x15e>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d102      	bne.n	8006e8c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e8a:	e074      	b.n	8006f76 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1ce      	bne.n	8006e34 <HAL_SPI_Transmit+0x10c>
 8006e96:	e04c      	b.n	8006f32 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_SPI_Transmit+0x17e>
 8006ea0:	8afb      	ldrh	r3, [r7, #22]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d140      	bne.n	8006f28 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	330c      	adds	r3, #12
 8006eb0:	7812      	ldrb	r2, [r2, #0]
 8006eb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ecc:	e02c      	b.n	8006f28 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d113      	bne.n	8006f04 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	7812      	ldrb	r2, [r2, #0]
 8006ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	3b01      	subs	r3, #1
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f02:	e011      	b.n	8006f28 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f04:	f7fd fc7c 	bl	8004800 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d803      	bhi.n	8006f1c <HAL_SPI_Transmit+0x1f4>
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	d102      	bne.n	8006f22 <HAL_SPI_Transmit+0x1fa>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d102      	bne.n	8006f28 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f26:	e026      	b.n	8006f76 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1cd      	bne.n	8006ece <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f894 	bl	8007064 <SPI_EndRxTxTransaction>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f50:	2300      	movs	r3, #0
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	77fb      	strb	r3, [r7, #31]
 8006f72:	e000      	b.n	8006f76 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006f74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3720      	adds	r7, #32
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fa0:	e04c      	b.n	800703c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d048      	beq.n	800703c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006faa:	f7fd fc29 	bl	8004800 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d902      	bls.n	8006fc0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d13d      	bne.n	800703c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fd8:	d111      	bne.n	8006ffe <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe2:	d004      	beq.n	8006fee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fec:	d107      	bne.n	8006ffe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ffc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007006:	d10f      	bne.n	8007028 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007026:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e00f      	b.n	800705c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4013      	ands	r3, r2
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	429a      	cmp	r2, r3
 800704a:	bf0c      	ite	eq
 800704c:	2301      	moveq	r3, #1
 800704e:	2300      	movne	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	429a      	cmp	r2, r3
 8007058:	d1a3      	bne.n	8006fa2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007070:	4b1b      	ldr	r3, [pc, #108]	; (80070e0 <SPI_EndRxTxTransaction+0x7c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1b      	ldr	r2, [pc, #108]	; (80070e4 <SPI_EndRxTxTransaction+0x80>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	0d5b      	lsrs	r3, r3, #21
 800707c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007080:	fb02 f303 	mul.w	r3, r2, r3
 8007084:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800708e:	d112      	bne.n	80070b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff ff78 	bl	8006f90 <SPI_WaitFlagStateUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d016      	beq.n	80070d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070aa:	f043 0220 	orr.w	r2, r3, #32
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e00f      	b.n	80070d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	3b01      	subs	r3, #1
 80070c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070cc:	2b80      	cmp	r3, #128	; 0x80
 80070ce:	d0f2      	beq.n	80070b6 <SPI_EndRxTxTransaction+0x52>
 80070d0:	e000      	b.n	80070d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80070d2:	bf00      	nop
  }

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000004 	.word	0x20000004
 80070e4:	165e9f81 	.word	0x165e9f81

080070e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e01d      	b.n	8007136 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fd f9c2 	bl	8004498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3304      	adds	r3, #4
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f000 f95e 	bl	80073e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0201 	orr.w	r2, r2, #1
 8007154:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b06      	cmp	r3, #6
 8007166:	d007      	beq.n	8007178 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b02      	cmp	r3, #2
 800719a:	d122      	bne.n	80071e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d11b      	bne.n	80071e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f06f 0202 	mvn.w	r2, #2
 80071b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d003      	beq.n	80071d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f8ee 	bl	80073aa <HAL_TIM_IC_CaptureCallback>
 80071ce:	e005      	b.n	80071dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f8e0 	bl	8007396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8f1 	bl	80073be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d122      	bne.n	8007236 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d11b      	bne.n	8007236 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f06f 0204 	mvn.w	r2, #4
 8007206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f8c4 	bl	80073aa <HAL_TIM_IC_CaptureCallback>
 8007222:	e005      	b.n	8007230 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f8b6 	bl	8007396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f8c7 	bl	80073be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b08      	cmp	r3, #8
 8007242:	d122      	bne.n	800728a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b08      	cmp	r3, #8
 8007250:	d11b      	bne.n	800728a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f06f 0208 	mvn.w	r2, #8
 800725a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2204      	movs	r2, #4
 8007260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f89a 	bl	80073aa <HAL_TIM_IC_CaptureCallback>
 8007276:	e005      	b.n	8007284 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f88c 	bl	8007396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f89d 	bl	80073be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b10      	cmp	r3, #16
 8007296:	d122      	bne.n	80072de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f003 0310 	and.w	r3, r3, #16
 80072a2:	2b10      	cmp	r3, #16
 80072a4:	d11b      	bne.n	80072de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f06f 0210 	mvn.w	r2, #16
 80072ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2208      	movs	r2, #8
 80072b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f870 	bl	80073aa <HAL_TIM_IC_CaptureCallback>
 80072ca:	e005      	b.n	80072d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f862 	bl	8007396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f873 	bl	80073be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d10e      	bne.n	800730a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d107      	bne.n	800730a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f06f 0201 	mvn.w	r2, #1
 8007302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7fc fe43 	bl	8003f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007314:	2b80      	cmp	r3, #128	; 0x80
 8007316:	d10e      	bne.n	8007336 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b80      	cmp	r3, #128	; 0x80
 8007324:	d107      	bne.n	8007336 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800732e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f97f 	bl	8007634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	d10e      	bne.n	8007362 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d107      	bne.n	8007362 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800735a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f838 	bl	80073d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	f003 0320 	and.w	r3, r3, #32
 800736c:	2b20      	cmp	r3, #32
 800736e:	d10e      	bne.n	800738e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b20      	cmp	r3, #32
 800737c:	d107      	bne.n	800738e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f06f 0220 	mvn.w	r2, #32
 8007386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f949 	bl	8007620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800738e:	bf00      	nop
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
	...

080073e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a40      	ldr	r2, [pc, #256]	; (80074fc <TIM_Base_SetConfig+0x114>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d013      	beq.n	8007428 <TIM_Base_SetConfig+0x40>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007406:	d00f      	beq.n	8007428 <TIM_Base_SetConfig+0x40>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a3d      	ldr	r2, [pc, #244]	; (8007500 <TIM_Base_SetConfig+0x118>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00b      	beq.n	8007428 <TIM_Base_SetConfig+0x40>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a3c      	ldr	r2, [pc, #240]	; (8007504 <TIM_Base_SetConfig+0x11c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d007      	beq.n	8007428 <TIM_Base_SetConfig+0x40>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a3b      	ldr	r2, [pc, #236]	; (8007508 <TIM_Base_SetConfig+0x120>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d003      	beq.n	8007428 <TIM_Base_SetConfig+0x40>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a3a      	ldr	r2, [pc, #232]	; (800750c <TIM_Base_SetConfig+0x124>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d108      	bne.n	800743a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	4313      	orrs	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a2f      	ldr	r2, [pc, #188]	; (80074fc <TIM_Base_SetConfig+0x114>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d02b      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007448:	d027      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a2c      	ldr	r2, [pc, #176]	; (8007500 <TIM_Base_SetConfig+0x118>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d023      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a2b      	ldr	r2, [pc, #172]	; (8007504 <TIM_Base_SetConfig+0x11c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d01f      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a2a      	ldr	r2, [pc, #168]	; (8007508 <TIM_Base_SetConfig+0x120>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d01b      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a29      	ldr	r2, [pc, #164]	; (800750c <TIM_Base_SetConfig+0x124>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d017      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a28      	ldr	r2, [pc, #160]	; (8007510 <TIM_Base_SetConfig+0x128>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d013      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a27      	ldr	r2, [pc, #156]	; (8007514 <TIM_Base_SetConfig+0x12c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00f      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a26      	ldr	r2, [pc, #152]	; (8007518 <TIM_Base_SetConfig+0x130>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00b      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a25      	ldr	r2, [pc, #148]	; (800751c <TIM_Base_SetConfig+0x134>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d007      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a24      	ldr	r2, [pc, #144]	; (8007520 <TIM_Base_SetConfig+0x138>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d003      	beq.n	800749a <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a23      	ldr	r2, [pc, #140]	; (8007524 <TIM_Base_SetConfig+0x13c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d108      	bne.n	80074ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <TIM_Base_SetConfig+0x114>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <TIM_Base_SetConfig+0xf8>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a0c      	ldr	r2, [pc, #48]	; (800750c <TIM_Base_SetConfig+0x124>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d103      	bne.n	80074e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	615a      	str	r2, [r3, #20]
}
 80074ee:	bf00      	nop
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40010000 	.word	0x40010000
 8007500:	40000400 	.word	0x40000400
 8007504:	40000800 	.word	0x40000800
 8007508:	40000c00 	.word	0x40000c00
 800750c:	40010400 	.word	0x40010400
 8007510:	40014000 	.word	0x40014000
 8007514:	40014400 	.word	0x40014400
 8007518:	40014800 	.word	0x40014800
 800751c:	40001800 	.word	0x40001800
 8007520:	40001c00 	.word	0x40001c00
 8007524:	40002000 	.word	0x40002000

08007528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800753c:	2302      	movs	r3, #2
 800753e:	e05a      	b.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a21      	ldr	r2, [pc, #132]	; (8007604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d022      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758c:	d01d      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1d      	ldr	r2, [pc, #116]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d018      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1b      	ldr	r2, [pc, #108]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1a      	ldr	r2, [pc, #104]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00e      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a18      	ldr	r2, [pc, #96]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d009      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a17      	ldr	r2, [pc, #92]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d004      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a15      	ldr	r2, [pc, #84]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d10c      	bne.n	80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40010000 	.word	0x40010000
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800
 8007610:	40000c00 	.word	0x40000c00
 8007614:	40010400 	.word	0x40010400
 8007618:	40014000 	.word	0x40014000
 800761c:	40001800 	.word	0x40001800

08007620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e03f      	b.n	80076da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d106      	bne.n	8007674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7fc ffac 	bl	80045cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2224      	movs	r2, #36	; 0x24
 8007678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800768a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fcc9 	bl	8008024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	695a      	ldr	r2, [r3, #20]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b088      	sub	sp, #32
 80076e6:	af02      	add	r7, sp, #8
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	4613      	mov	r3, r2
 80076f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b20      	cmp	r3, #32
 8007700:	f040 8083 	bne.w	800780a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_UART_Transmit+0x2e>
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e07b      	b.n	800780c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_UART_Transmit+0x40>
 800771e:	2302      	movs	r3, #2
 8007720:	e074      	b.n	800780c <HAL_UART_Transmit+0x12a>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2221      	movs	r2, #33	; 0x21
 8007734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007738:	f7fd f862 	bl	8004800 <HAL_GetTick>
 800773c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	88fa      	ldrh	r2, [r7, #6]
 8007742:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	88fa      	ldrh	r2, [r7, #6]
 8007748:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007752:	e042      	b.n	80077da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776a:	d122      	bne.n	80077b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2200      	movs	r2, #0
 8007774:	2180      	movs	r1, #128	; 0x80
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 fad2 	bl	8007d20 <UART_WaitOnFlagUntilTimeout>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e042      	b.n	800780c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007798:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d103      	bne.n	80077aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	3302      	adds	r3, #2
 80077a6:	60bb      	str	r3, [r7, #8]
 80077a8:	e017      	b.n	80077da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	3301      	adds	r3, #1
 80077ae:	60bb      	str	r3, [r7, #8]
 80077b0:	e013      	b.n	80077da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2200      	movs	r2, #0
 80077ba:	2180      	movs	r1, #128	; 0x80
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 faaf 	bl	8007d20 <UART_WaitOnFlagUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e01f      	b.n	800780c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	60ba      	str	r2, [r7, #8]
 80077d2:	781a      	ldrb	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1b7      	bne.n	8007754 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2200      	movs	r2, #0
 80077ec:	2140      	movs	r1, #64	; 0x40
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 fa96 	bl	8007d20 <UART_WaitOnFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e006      	b.n	800780c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2220      	movs	r2, #32
 8007802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	e000      	b.n	800780c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800780a:	2302      	movs	r3, #2
  }
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4613      	mov	r3, r2
 8007820:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b20      	cmp	r3, #32
 800782c:	d166      	bne.n	80078fc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <HAL_UART_Receive_DMA+0x26>
 8007834:	88fb      	ldrh	r3, [r7, #6]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e05f      	b.n	80078fe <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_UART_Receive_DMA+0x38>
 8007848:	2302      	movs	r3, #2
 800784a:	e058      	b.n	80078fe <HAL_UART_Receive_DMA+0xea>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	88fa      	ldrh	r2, [r7, #6]
 800785e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2222      	movs	r2, #34	; 0x22
 800786a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007872:	4a25      	ldr	r2, [pc, #148]	; (8007908 <HAL_UART_Receive_DMA+0xf4>)
 8007874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	4a24      	ldr	r2, [pc, #144]	; (800790c <HAL_UART_Receive_DMA+0xf8>)
 800787c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007882:	4a23      	ldr	r2, [pc, #140]	; (8007910 <HAL_UART_Receive_DMA+0xfc>)
 8007884:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788a:	2200      	movs	r2, #0
 800788c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800788e:	f107 0308 	add.w	r3, r7, #8
 8007892:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	f7fd fea7 	bl	80055f8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80078aa:	2300      	movs	r3, #0
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	613b      	str	r3, [r7, #16]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078d6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	695a      	ldr	r2, [r3, #20]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078f6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	e000      	b.n	80078fe <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80078fc:	2302      	movs	r3, #2
  }
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	08007c09 	.word	0x08007c09
 800790c:	08007c71 	.word	0x08007c71
 8007910:	08007c8d 	.word	0x08007c8d

08007914 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792a:	2b80      	cmp	r3, #128	; 0x80
 800792c:	bf0c      	ite	eq
 800792e:	2301      	moveq	r3, #1
 8007930:	2300      	movne	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b21      	cmp	r3, #33	; 0x21
 8007940:	d116      	bne.n	8007970 <HAL_UART_DMAStop+0x5c>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d013      	beq.n	8007970 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695a      	ldr	r2, [r3, #20]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007956:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	2b00      	cmp	r3, #0
 800795e:	d004      	beq.n	800796a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	4618      	mov	r0, r3
 8007966:	f7fd fe9f 	bl	80056a8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa22 	bl	8007db4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	bf0c      	ite	eq
 800797e:	2301      	moveq	r3, #1
 8007980:	2300      	movne	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b22      	cmp	r3, #34	; 0x22
 8007990:	d116      	bne.n	80079c0 <HAL_UART_DMAStop+0xac>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d013      	beq.n	80079c0 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695a      	ldr	r2, [r3, #20]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fd fe77 	bl	80056a8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa10 	bl	8007de0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	f003 030f 	and.w	r3, r3, #15
 80079fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10d      	bne.n	8007a1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d008      	beq.n	8007a1e <HAL_UART_IRQHandler+0x52>
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa82 	bl	8007f20 <UART_Receive_IT>
      return;
 8007a1c:	e0d1      	b.n	8007bc2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80b0 	beq.w	8007b86 <HAL_UART_IRQHandler+0x1ba>
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <HAL_UART_IRQHandler+0x70>
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 80a5 	beq.w	8007b86 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <HAL_UART_IRQHandler+0x90>
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a54:	f043 0201 	orr.w	r2, r3, #1
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <HAL_UART_IRQHandler+0xb0>
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a74:	f043 0202 	orr.w	r2, r3, #2
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <HAL_UART_IRQHandler+0xd0>
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a94:	f043 0204 	orr.w	r2, r3, #4
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	f003 0308 	and.w	r3, r3, #8
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00f      	beq.n	8007ac6 <HAL_UART_IRQHandler+0xfa>
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <HAL_UART_IRQHandler+0xee>
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	f043 0208 	orr.w	r2, r3, #8
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d078      	beq.n	8007bc0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x11c>
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa1c 	bl	8007f20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	bf0c      	ite	eq
 8007af6:	2301      	moveq	r3, #1
 8007af8:	2300      	movne	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b02:	f003 0308 	and.w	r3, r3, #8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d102      	bne.n	8007b10 <HAL_UART_IRQHandler+0x144>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d031      	beq.n	8007b74 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f965 	bl	8007de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b20:	2b40      	cmp	r3, #64	; 0x40
 8007b22:	d123      	bne.n	8007b6c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695a      	ldr	r2, [r3, #20]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b32:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d013      	beq.n	8007b64 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b40:	4a21      	ldr	r2, [pc, #132]	; (8007bc8 <HAL_UART_IRQHandler+0x1fc>)
 8007b42:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd fe1d 	bl	8005788 <HAL_DMA_Abort_IT>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d016      	beq.n	8007b82 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b5e:	4610      	mov	r0, r2
 8007b60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b62:	e00e      	b.n	8007b82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f845 	bl	8007bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6a:	e00a      	b.n	8007b82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f841 	bl	8007bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b72:	e006      	b.n	8007b82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f83d 	bl	8007bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007b80:	e01e      	b.n	8007bc0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b82:	bf00      	nop
    return;
 8007b84:	e01c      	b.n	8007bc0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x1d6>
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f952 	bl	8007e44 <UART_Transmit_IT>
    return;
 8007ba0:	e00f      	b.n	8007bc2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x1f6>
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f99a 	bl	8007ef0 <UART_EndTransmit_IT>
    return;
 8007bbc:	bf00      	nop
 8007bbe:	e000      	b.n	8007bc2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007bc0:	bf00      	nop
  }
}
 8007bc2:	3720      	adds	r7, #32
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	08007e1d 	.word	0x08007e1d

08007bcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d11e      	bne.n	8007c62 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c38:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	695a      	ldr	r2, [r3, #20]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0201 	bic.w	r2, r2, #1
 8007c48:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695a      	ldr	r2, [r3, #20]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c58:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff ffbc 	bl	8007be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c68:	bf00      	nop
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7fb fd6c 	bl	800375c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca8:	2b80      	cmp	r3, #128	; 0x80
 8007caa:	bf0c      	ite	eq
 8007cac:	2301      	moveq	r3, #1
 8007cae:	2300      	movne	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b21      	cmp	r3, #33	; 0x21
 8007cbe:	d108      	bne.n	8007cd2 <UART_DMAError+0x46>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d005      	beq.n	8007cd2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ccc:	68b8      	ldr	r0, [r7, #8]
 8007cce:	f000 f871 	bl	8007db4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b40      	cmp	r3, #64	; 0x40
 8007cde:	bf0c      	ite	eq
 8007ce0:	2301      	moveq	r3, #1
 8007ce2:	2300      	movne	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b22      	cmp	r3, #34	; 0x22
 8007cf2:	d108      	bne.n	8007d06 <UART_DMAError+0x7a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d005      	beq.n	8007d06 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d00:	68b8      	ldr	r0, [r7, #8]
 8007d02:	f000 f86d 	bl	8007de0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0a:	f043 0210 	orr.w	r2, r3, #16
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d12:	68b8      	ldr	r0, [r7, #8]
 8007d14:	f7ff ff6e 	bl	8007bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d30:	e02c      	b.n	8007d8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d028      	beq.n	8007d8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d007      	beq.n	8007d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d40:	f7fc fd5e 	bl	8004800 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d21d      	bcs.n	8007d8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	695a      	ldr	r2, [r3, #20]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0201 	bic.w	r2, r2, #1
 8007d6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e00f      	b.n	8007dac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	4013      	ands	r3, r2
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2301      	moveq	r3, #1
 8007d9e:	2300      	movne	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d0c3      	beq.n	8007d32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007dca:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68da      	ldr	r2, [r3, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007df6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695a      	ldr	r2, [r3, #20]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0201 	bic.w	r2, r2, #1
 8007e06:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff fedc 	bl	8007bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b21      	cmp	r3, #33	; 0x21
 8007e56:	d144      	bne.n	8007ee2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e60:	d11a      	bne.n	8007e98 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e76:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d105      	bne.n	8007e8c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	1c9a      	adds	r2, r3, #2
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	621a      	str	r2, [r3, #32]
 8007e8a:	e00e      	b.n	8007eaa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	621a      	str	r2, [r3, #32]
 8007e96:	e008      	b.n	8007eaa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	1c59      	adds	r1, r3, #1
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6211      	str	r1, [r2, #32]
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10f      	bne.n	8007ede <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ecc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007edc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e000      	b.n	8007ee4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ee2:	2302      	movs	r3, #2
  }
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff fe5b 	bl	8007bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b22      	cmp	r3, #34	; 0x22
 8007f32:	d171      	bne.n	8008018 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f3c:	d123      	bne.n	8007f86 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10e      	bne.n	8007f6a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	1c9a      	adds	r2, r3, #2
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	629a      	str	r2, [r3, #40]	; 0x28
 8007f68:	e029      	b.n	8007fbe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	629a      	str	r2, [r3, #40]	; 0x28
 8007f84:	e01b      	b.n	8007fbe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6858      	ldr	r0, [r3, #4]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	1c59      	adds	r1, r3, #1
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6291      	str	r1, [r2, #40]	; 0x28
 8007f9e:	b2c2      	uxtb	r2, r0
 8007fa0:	701a      	strb	r2, [r3, #0]
 8007fa2:	e00c      	b.n	8007fbe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	1c58      	adds	r0, r3, #1
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	6288      	str	r0, [r1, #40]	; 0x28
 8007fb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007fba:	b2d2      	uxtb	r2, r2
 8007fbc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d120      	bne.n	8008014 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0220 	bic.w	r2, r2, #32
 8007fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	695a      	ldr	r2, [r3, #20]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0201 	bic.w	r2, r2, #1
 8008000:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff fde8 	bl	8007be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	e002      	b.n	800801a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e000      	b.n	800801a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008018:	2302      	movs	r3, #2
  }
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	b085      	sub	sp, #20
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008066:	f023 030c 	bic.w	r3, r3, #12
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6812      	ldr	r2, [r2, #0]
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	430b      	orrs	r3, r1
 8008072:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699a      	ldr	r2, [r3, #24]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008092:	f040 818b 	bne.w	80083ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4ac1      	ldr	r2, [pc, #772]	; (80083a0 <UART_SetConfig+0x37c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d005      	beq.n	80080ac <UART_SetConfig+0x88>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4abf      	ldr	r2, [pc, #764]	; (80083a4 <UART_SetConfig+0x380>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	f040 80bd 	bne.w	8008226 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080ac:	f7fe fd92 	bl	8006bd4 <HAL_RCC_GetPCLK2Freq>
 80080b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	461d      	mov	r5, r3
 80080b6:	f04f 0600 	mov.w	r6, #0
 80080ba:	46a8      	mov	r8, r5
 80080bc:	46b1      	mov	r9, r6
 80080be:	eb18 0308 	adds.w	r3, r8, r8
 80080c2:	eb49 0409 	adc.w	r4, r9, r9
 80080c6:	4698      	mov	r8, r3
 80080c8:	46a1      	mov	r9, r4
 80080ca:	eb18 0805 	adds.w	r8, r8, r5
 80080ce:	eb49 0906 	adc.w	r9, r9, r6
 80080d2:	f04f 0100 	mov.w	r1, #0
 80080d6:	f04f 0200 	mov.w	r2, #0
 80080da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80080de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80080e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80080e6:	4688      	mov	r8, r1
 80080e8:	4691      	mov	r9, r2
 80080ea:	eb18 0005 	adds.w	r0, r8, r5
 80080ee:	eb49 0106 	adc.w	r1, r9, r6
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	461d      	mov	r5, r3
 80080f8:	f04f 0600 	mov.w	r6, #0
 80080fc:	196b      	adds	r3, r5, r5
 80080fe:	eb46 0406 	adc.w	r4, r6, r6
 8008102:	461a      	mov	r2, r3
 8008104:	4623      	mov	r3, r4
 8008106:	f7f8 fcf7 	bl	8000af8 <__aeabi_uldivmod>
 800810a:	4603      	mov	r3, r0
 800810c:	460c      	mov	r4, r1
 800810e:	461a      	mov	r2, r3
 8008110:	4ba5      	ldr	r3, [pc, #660]	; (80083a8 <UART_SetConfig+0x384>)
 8008112:	fba3 2302 	umull	r2, r3, r3, r2
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	461d      	mov	r5, r3
 8008120:	f04f 0600 	mov.w	r6, #0
 8008124:	46a9      	mov	r9, r5
 8008126:	46b2      	mov	sl, r6
 8008128:	eb19 0309 	adds.w	r3, r9, r9
 800812c:	eb4a 040a 	adc.w	r4, sl, sl
 8008130:	4699      	mov	r9, r3
 8008132:	46a2      	mov	sl, r4
 8008134:	eb19 0905 	adds.w	r9, r9, r5
 8008138:	eb4a 0a06 	adc.w	sl, sl, r6
 800813c:	f04f 0100 	mov.w	r1, #0
 8008140:	f04f 0200 	mov.w	r2, #0
 8008144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008148:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800814c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008150:	4689      	mov	r9, r1
 8008152:	4692      	mov	sl, r2
 8008154:	eb19 0005 	adds.w	r0, r9, r5
 8008158:	eb4a 0106 	adc.w	r1, sl, r6
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	461d      	mov	r5, r3
 8008162:	f04f 0600 	mov.w	r6, #0
 8008166:	196b      	adds	r3, r5, r5
 8008168:	eb46 0406 	adc.w	r4, r6, r6
 800816c:	461a      	mov	r2, r3
 800816e:	4623      	mov	r3, r4
 8008170:	f7f8 fcc2 	bl	8000af8 <__aeabi_uldivmod>
 8008174:	4603      	mov	r3, r0
 8008176:	460c      	mov	r4, r1
 8008178:	461a      	mov	r2, r3
 800817a:	4b8b      	ldr	r3, [pc, #556]	; (80083a8 <UART_SetConfig+0x384>)
 800817c:	fba3 1302 	umull	r1, r3, r3, r2
 8008180:	095b      	lsrs	r3, r3, #5
 8008182:	2164      	movs	r1, #100	; 0x64
 8008184:	fb01 f303 	mul.w	r3, r1, r3
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	3332      	adds	r3, #50	; 0x32
 800818e:	4a86      	ldr	r2, [pc, #536]	; (80083a8 <UART_SetConfig+0x384>)
 8008190:	fba2 2303 	umull	r2, r3, r2, r3
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800819c:	4498      	add	r8, r3
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	461d      	mov	r5, r3
 80081a2:	f04f 0600 	mov.w	r6, #0
 80081a6:	46a9      	mov	r9, r5
 80081a8:	46b2      	mov	sl, r6
 80081aa:	eb19 0309 	adds.w	r3, r9, r9
 80081ae:	eb4a 040a 	adc.w	r4, sl, sl
 80081b2:	4699      	mov	r9, r3
 80081b4:	46a2      	mov	sl, r4
 80081b6:	eb19 0905 	adds.w	r9, r9, r5
 80081ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80081be:	f04f 0100 	mov.w	r1, #0
 80081c2:	f04f 0200 	mov.w	r2, #0
 80081c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081d2:	4689      	mov	r9, r1
 80081d4:	4692      	mov	sl, r2
 80081d6:	eb19 0005 	adds.w	r0, r9, r5
 80081da:	eb4a 0106 	adc.w	r1, sl, r6
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	461d      	mov	r5, r3
 80081e4:	f04f 0600 	mov.w	r6, #0
 80081e8:	196b      	adds	r3, r5, r5
 80081ea:	eb46 0406 	adc.w	r4, r6, r6
 80081ee:	461a      	mov	r2, r3
 80081f0:	4623      	mov	r3, r4
 80081f2:	f7f8 fc81 	bl	8000af8 <__aeabi_uldivmod>
 80081f6:	4603      	mov	r3, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	461a      	mov	r2, r3
 80081fc:	4b6a      	ldr	r3, [pc, #424]	; (80083a8 <UART_SetConfig+0x384>)
 80081fe:	fba3 1302 	umull	r1, r3, r3, r2
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	2164      	movs	r1, #100	; 0x64
 8008206:	fb01 f303 	mul.w	r3, r1, r3
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	3332      	adds	r3, #50	; 0x32
 8008210:	4a65      	ldr	r2, [pc, #404]	; (80083a8 <UART_SetConfig+0x384>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	095b      	lsrs	r3, r3, #5
 8008218:	f003 0207 	and.w	r2, r3, #7
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4442      	add	r2, r8
 8008222:	609a      	str	r2, [r3, #8]
 8008224:	e26f      	b.n	8008706 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008226:	f7fe fcc1 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 800822a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	461d      	mov	r5, r3
 8008230:	f04f 0600 	mov.w	r6, #0
 8008234:	46a8      	mov	r8, r5
 8008236:	46b1      	mov	r9, r6
 8008238:	eb18 0308 	adds.w	r3, r8, r8
 800823c:	eb49 0409 	adc.w	r4, r9, r9
 8008240:	4698      	mov	r8, r3
 8008242:	46a1      	mov	r9, r4
 8008244:	eb18 0805 	adds.w	r8, r8, r5
 8008248:	eb49 0906 	adc.w	r9, r9, r6
 800824c:	f04f 0100 	mov.w	r1, #0
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008258:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800825c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008260:	4688      	mov	r8, r1
 8008262:	4691      	mov	r9, r2
 8008264:	eb18 0005 	adds.w	r0, r8, r5
 8008268:	eb49 0106 	adc.w	r1, r9, r6
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	461d      	mov	r5, r3
 8008272:	f04f 0600 	mov.w	r6, #0
 8008276:	196b      	adds	r3, r5, r5
 8008278:	eb46 0406 	adc.w	r4, r6, r6
 800827c:	461a      	mov	r2, r3
 800827e:	4623      	mov	r3, r4
 8008280:	f7f8 fc3a 	bl	8000af8 <__aeabi_uldivmod>
 8008284:	4603      	mov	r3, r0
 8008286:	460c      	mov	r4, r1
 8008288:	461a      	mov	r2, r3
 800828a:	4b47      	ldr	r3, [pc, #284]	; (80083a8 <UART_SetConfig+0x384>)
 800828c:	fba3 2302 	umull	r2, r3, r3, r2
 8008290:	095b      	lsrs	r3, r3, #5
 8008292:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	461d      	mov	r5, r3
 800829a:	f04f 0600 	mov.w	r6, #0
 800829e:	46a9      	mov	r9, r5
 80082a0:	46b2      	mov	sl, r6
 80082a2:	eb19 0309 	adds.w	r3, r9, r9
 80082a6:	eb4a 040a 	adc.w	r4, sl, sl
 80082aa:	4699      	mov	r9, r3
 80082ac:	46a2      	mov	sl, r4
 80082ae:	eb19 0905 	adds.w	r9, r9, r5
 80082b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80082b6:	f04f 0100 	mov.w	r1, #0
 80082ba:	f04f 0200 	mov.w	r2, #0
 80082be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082ca:	4689      	mov	r9, r1
 80082cc:	4692      	mov	sl, r2
 80082ce:	eb19 0005 	adds.w	r0, r9, r5
 80082d2:	eb4a 0106 	adc.w	r1, sl, r6
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	461d      	mov	r5, r3
 80082dc:	f04f 0600 	mov.w	r6, #0
 80082e0:	196b      	adds	r3, r5, r5
 80082e2:	eb46 0406 	adc.w	r4, r6, r6
 80082e6:	461a      	mov	r2, r3
 80082e8:	4623      	mov	r3, r4
 80082ea:	f7f8 fc05 	bl	8000af8 <__aeabi_uldivmod>
 80082ee:	4603      	mov	r3, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	461a      	mov	r2, r3
 80082f4:	4b2c      	ldr	r3, [pc, #176]	; (80083a8 <UART_SetConfig+0x384>)
 80082f6:	fba3 1302 	umull	r1, r3, r3, r2
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	2164      	movs	r1, #100	; 0x64
 80082fe:	fb01 f303 	mul.w	r3, r1, r3
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	00db      	lsls	r3, r3, #3
 8008306:	3332      	adds	r3, #50	; 0x32
 8008308:	4a27      	ldr	r2, [pc, #156]	; (80083a8 <UART_SetConfig+0x384>)
 800830a:	fba2 2303 	umull	r2, r3, r2, r3
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008316:	4498      	add	r8, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	461d      	mov	r5, r3
 800831c:	f04f 0600 	mov.w	r6, #0
 8008320:	46a9      	mov	r9, r5
 8008322:	46b2      	mov	sl, r6
 8008324:	eb19 0309 	adds.w	r3, r9, r9
 8008328:	eb4a 040a 	adc.w	r4, sl, sl
 800832c:	4699      	mov	r9, r3
 800832e:	46a2      	mov	sl, r4
 8008330:	eb19 0905 	adds.w	r9, r9, r5
 8008334:	eb4a 0a06 	adc.w	sl, sl, r6
 8008338:	f04f 0100 	mov.w	r1, #0
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008344:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008348:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800834c:	4689      	mov	r9, r1
 800834e:	4692      	mov	sl, r2
 8008350:	eb19 0005 	adds.w	r0, r9, r5
 8008354:	eb4a 0106 	adc.w	r1, sl, r6
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	461d      	mov	r5, r3
 800835e:	f04f 0600 	mov.w	r6, #0
 8008362:	196b      	adds	r3, r5, r5
 8008364:	eb46 0406 	adc.w	r4, r6, r6
 8008368:	461a      	mov	r2, r3
 800836a:	4623      	mov	r3, r4
 800836c:	f7f8 fbc4 	bl	8000af8 <__aeabi_uldivmod>
 8008370:	4603      	mov	r3, r0
 8008372:	460c      	mov	r4, r1
 8008374:	461a      	mov	r2, r3
 8008376:	4b0c      	ldr	r3, [pc, #48]	; (80083a8 <UART_SetConfig+0x384>)
 8008378:	fba3 1302 	umull	r1, r3, r3, r2
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	2164      	movs	r1, #100	; 0x64
 8008380:	fb01 f303 	mul.w	r3, r1, r3
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	3332      	adds	r3, #50	; 0x32
 800838a:	4a07      	ldr	r2, [pc, #28]	; (80083a8 <UART_SetConfig+0x384>)
 800838c:	fba2 2303 	umull	r2, r3, r2, r3
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	f003 0207 	and.w	r2, r3, #7
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4442      	add	r2, r8
 800839c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800839e:	e1b2      	b.n	8008706 <UART_SetConfig+0x6e2>
 80083a0:	40011000 	.word	0x40011000
 80083a4:	40011400 	.word	0x40011400
 80083a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4ad7      	ldr	r2, [pc, #860]	; (8008710 <UART_SetConfig+0x6ec>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d005      	beq.n	80083c2 <UART_SetConfig+0x39e>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4ad6      	ldr	r2, [pc, #856]	; (8008714 <UART_SetConfig+0x6f0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	f040 80d1 	bne.w	8008564 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80083c2:	f7fe fc07 	bl	8006bd4 <HAL_RCC_GetPCLK2Freq>
 80083c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	469a      	mov	sl, r3
 80083cc:	f04f 0b00 	mov.w	fp, #0
 80083d0:	46d0      	mov	r8, sl
 80083d2:	46d9      	mov	r9, fp
 80083d4:	eb18 0308 	adds.w	r3, r8, r8
 80083d8:	eb49 0409 	adc.w	r4, r9, r9
 80083dc:	4698      	mov	r8, r3
 80083de:	46a1      	mov	r9, r4
 80083e0:	eb18 080a 	adds.w	r8, r8, sl
 80083e4:	eb49 090b 	adc.w	r9, r9, fp
 80083e8:	f04f 0100 	mov.w	r1, #0
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80083f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80083f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80083fc:	4688      	mov	r8, r1
 80083fe:	4691      	mov	r9, r2
 8008400:	eb1a 0508 	adds.w	r5, sl, r8
 8008404:	eb4b 0609 	adc.w	r6, fp, r9
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	4619      	mov	r1, r3
 800840e:	f04f 0200 	mov.w	r2, #0
 8008412:	f04f 0300 	mov.w	r3, #0
 8008416:	f04f 0400 	mov.w	r4, #0
 800841a:	0094      	lsls	r4, r2, #2
 800841c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008420:	008b      	lsls	r3, r1, #2
 8008422:	461a      	mov	r2, r3
 8008424:	4623      	mov	r3, r4
 8008426:	4628      	mov	r0, r5
 8008428:	4631      	mov	r1, r6
 800842a:	f7f8 fb65 	bl	8000af8 <__aeabi_uldivmod>
 800842e:	4603      	mov	r3, r0
 8008430:	460c      	mov	r4, r1
 8008432:	461a      	mov	r2, r3
 8008434:	4bb8      	ldr	r3, [pc, #736]	; (8008718 <UART_SetConfig+0x6f4>)
 8008436:	fba3 2302 	umull	r2, r3, r3, r2
 800843a:	095b      	lsrs	r3, r3, #5
 800843c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	469b      	mov	fp, r3
 8008444:	f04f 0c00 	mov.w	ip, #0
 8008448:	46d9      	mov	r9, fp
 800844a:	46e2      	mov	sl, ip
 800844c:	eb19 0309 	adds.w	r3, r9, r9
 8008450:	eb4a 040a 	adc.w	r4, sl, sl
 8008454:	4699      	mov	r9, r3
 8008456:	46a2      	mov	sl, r4
 8008458:	eb19 090b 	adds.w	r9, r9, fp
 800845c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008460:	f04f 0100 	mov.w	r1, #0
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800846c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008470:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008474:	4689      	mov	r9, r1
 8008476:	4692      	mov	sl, r2
 8008478:	eb1b 0509 	adds.w	r5, fp, r9
 800847c:	eb4c 060a 	adc.w	r6, ip, sl
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	4619      	mov	r1, r3
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	f04f 0400 	mov.w	r4, #0
 8008492:	0094      	lsls	r4, r2, #2
 8008494:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008498:	008b      	lsls	r3, r1, #2
 800849a:	461a      	mov	r2, r3
 800849c:	4623      	mov	r3, r4
 800849e:	4628      	mov	r0, r5
 80084a0:	4631      	mov	r1, r6
 80084a2:	f7f8 fb29 	bl	8000af8 <__aeabi_uldivmod>
 80084a6:	4603      	mov	r3, r0
 80084a8:	460c      	mov	r4, r1
 80084aa:	461a      	mov	r2, r3
 80084ac:	4b9a      	ldr	r3, [pc, #616]	; (8008718 <UART_SetConfig+0x6f4>)
 80084ae:	fba3 1302 	umull	r1, r3, r3, r2
 80084b2:	095b      	lsrs	r3, r3, #5
 80084b4:	2164      	movs	r1, #100	; 0x64
 80084b6:	fb01 f303 	mul.w	r3, r1, r3
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	3332      	adds	r3, #50	; 0x32
 80084c0:	4a95      	ldr	r2, [pc, #596]	; (8008718 <UART_SetConfig+0x6f4>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084cc:	4498      	add	r8, r3
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	469b      	mov	fp, r3
 80084d2:	f04f 0c00 	mov.w	ip, #0
 80084d6:	46d9      	mov	r9, fp
 80084d8:	46e2      	mov	sl, ip
 80084da:	eb19 0309 	adds.w	r3, r9, r9
 80084de:	eb4a 040a 	adc.w	r4, sl, sl
 80084e2:	4699      	mov	r9, r3
 80084e4:	46a2      	mov	sl, r4
 80084e6:	eb19 090b 	adds.w	r9, r9, fp
 80084ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80084ee:	f04f 0100 	mov.w	r1, #0
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008502:	4689      	mov	r9, r1
 8008504:	4692      	mov	sl, r2
 8008506:	eb1b 0509 	adds.w	r5, fp, r9
 800850a:	eb4c 060a 	adc.w	r6, ip, sl
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4619      	mov	r1, r3
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	f04f 0400 	mov.w	r4, #0
 8008520:	0094      	lsls	r4, r2, #2
 8008522:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008526:	008b      	lsls	r3, r1, #2
 8008528:	461a      	mov	r2, r3
 800852a:	4623      	mov	r3, r4
 800852c:	4628      	mov	r0, r5
 800852e:	4631      	mov	r1, r6
 8008530:	f7f8 fae2 	bl	8000af8 <__aeabi_uldivmod>
 8008534:	4603      	mov	r3, r0
 8008536:	460c      	mov	r4, r1
 8008538:	461a      	mov	r2, r3
 800853a:	4b77      	ldr	r3, [pc, #476]	; (8008718 <UART_SetConfig+0x6f4>)
 800853c:	fba3 1302 	umull	r1, r3, r3, r2
 8008540:	095b      	lsrs	r3, r3, #5
 8008542:	2164      	movs	r1, #100	; 0x64
 8008544:	fb01 f303 	mul.w	r3, r1, r3
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	3332      	adds	r3, #50	; 0x32
 800854e:	4a72      	ldr	r2, [pc, #456]	; (8008718 <UART_SetConfig+0x6f4>)
 8008550:	fba2 2303 	umull	r2, r3, r2, r3
 8008554:	095b      	lsrs	r3, r3, #5
 8008556:	f003 020f 	and.w	r2, r3, #15
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4442      	add	r2, r8
 8008560:	609a      	str	r2, [r3, #8]
 8008562:	e0d0      	b.n	8008706 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008564:	f7fe fb22 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 8008568:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	469a      	mov	sl, r3
 800856e:	f04f 0b00 	mov.w	fp, #0
 8008572:	46d0      	mov	r8, sl
 8008574:	46d9      	mov	r9, fp
 8008576:	eb18 0308 	adds.w	r3, r8, r8
 800857a:	eb49 0409 	adc.w	r4, r9, r9
 800857e:	4698      	mov	r8, r3
 8008580:	46a1      	mov	r9, r4
 8008582:	eb18 080a 	adds.w	r8, r8, sl
 8008586:	eb49 090b 	adc.w	r9, r9, fp
 800858a:	f04f 0100 	mov.w	r1, #0
 800858e:	f04f 0200 	mov.w	r2, #0
 8008592:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008596:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800859a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800859e:	4688      	mov	r8, r1
 80085a0:	4691      	mov	r9, r2
 80085a2:	eb1a 0508 	adds.w	r5, sl, r8
 80085a6:	eb4b 0609 	adc.w	r6, fp, r9
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	4619      	mov	r1, r3
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	f04f 0300 	mov.w	r3, #0
 80085b8:	f04f 0400 	mov.w	r4, #0
 80085bc:	0094      	lsls	r4, r2, #2
 80085be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80085c2:	008b      	lsls	r3, r1, #2
 80085c4:	461a      	mov	r2, r3
 80085c6:	4623      	mov	r3, r4
 80085c8:	4628      	mov	r0, r5
 80085ca:	4631      	mov	r1, r6
 80085cc:	f7f8 fa94 	bl	8000af8 <__aeabi_uldivmod>
 80085d0:	4603      	mov	r3, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	461a      	mov	r2, r3
 80085d6:	4b50      	ldr	r3, [pc, #320]	; (8008718 <UART_SetConfig+0x6f4>)
 80085d8:	fba3 2302 	umull	r2, r3, r3, r2
 80085dc:	095b      	lsrs	r3, r3, #5
 80085de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	469b      	mov	fp, r3
 80085e6:	f04f 0c00 	mov.w	ip, #0
 80085ea:	46d9      	mov	r9, fp
 80085ec:	46e2      	mov	sl, ip
 80085ee:	eb19 0309 	adds.w	r3, r9, r9
 80085f2:	eb4a 040a 	adc.w	r4, sl, sl
 80085f6:	4699      	mov	r9, r3
 80085f8:	46a2      	mov	sl, r4
 80085fa:	eb19 090b 	adds.w	r9, r9, fp
 80085fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008602:	f04f 0100 	mov.w	r1, #0
 8008606:	f04f 0200 	mov.w	r2, #0
 800860a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800860e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008612:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008616:	4689      	mov	r9, r1
 8008618:	4692      	mov	sl, r2
 800861a:	eb1b 0509 	adds.w	r5, fp, r9
 800861e:	eb4c 060a 	adc.w	r6, ip, sl
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	4619      	mov	r1, r3
 8008628:	f04f 0200 	mov.w	r2, #0
 800862c:	f04f 0300 	mov.w	r3, #0
 8008630:	f04f 0400 	mov.w	r4, #0
 8008634:	0094      	lsls	r4, r2, #2
 8008636:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800863a:	008b      	lsls	r3, r1, #2
 800863c:	461a      	mov	r2, r3
 800863e:	4623      	mov	r3, r4
 8008640:	4628      	mov	r0, r5
 8008642:	4631      	mov	r1, r6
 8008644:	f7f8 fa58 	bl	8000af8 <__aeabi_uldivmod>
 8008648:	4603      	mov	r3, r0
 800864a:	460c      	mov	r4, r1
 800864c:	461a      	mov	r2, r3
 800864e:	4b32      	ldr	r3, [pc, #200]	; (8008718 <UART_SetConfig+0x6f4>)
 8008650:	fba3 1302 	umull	r1, r3, r3, r2
 8008654:	095b      	lsrs	r3, r3, #5
 8008656:	2164      	movs	r1, #100	; 0x64
 8008658:	fb01 f303 	mul.w	r3, r1, r3
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	011b      	lsls	r3, r3, #4
 8008660:	3332      	adds	r3, #50	; 0x32
 8008662:	4a2d      	ldr	r2, [pc, #180]	; (8008718 <UART_SetConfig+0x6f4>)
 8008664:	fba2 2303 	umull	r2, r3, r2, r3
 8008668:	095b      	lsrs	r3, r3, #5
 800866a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800866e:	4498      	add	r8, r3
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	469b      	mov	fp, r3
 8008674:	f04f 0c00 	mov.w	ip, #0
 8008678:	46d9      	mov	r9, fp
 800867a:	46e2      	mov	sl, ip
 800867c:	eb19 0309 	adds.w	r3, r9, r9
 8008680:	eb4a 040a 	adc.w	r4, sl, sl
 8008684:	4699      	mov	r9, r3
 8008686:	46a2      	mov	sl, r4
 8008688:	eb19 090b 	adds.w	r9, r9, fp
 800868c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008690:	f04f 0100 	mov.w	r1, #0
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800869c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086a4:	4689      	mov	r9, r1
 80086a6:	4692      	mov	sl, r2
 80086a8:	eb1b 0509 	adds.w	r5, fp, r9
 80086ac:	eb4c 060a 	adc.w	r6, ip, sl
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	4619      	mov	r1, r3
 80086b6:	f04f 0200 	mov.w	r2, #0
 80086ba:	f04f 0300 	mov.w	r3, #0
 80086be:	f04f 0400 	mov.w	r4, #0
 80086c2:	0094      	lsls	r4, r2, #2
 80086c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086c8:	008b      	lsls	r3, r1, #2
 80086ca:	461a      	mov	r2, r3
 80086cc:	4623      	mov	r3, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	4631      	mov	r1, r6
 80086d2:	f7f8 fa11 	bl	8000af8 <__aeabi_uldivmod>
 80086d6:	4603      	mov	r3, r0
 80086d8:	460c      	mov	r4, r1
 80086da:	461a      	mov	r2, r3
 80086dc:	4b0e      	ldr	r3, [pc, #56]	; (8008718 <UART_SetConfig+0x6f4>)
 80086de:	fba3 1302 	umull	r1, r3, r3, r2
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	2164      	movs	r1, #100	; 0x64
 80086e6:	fb01 f303 	mul.w	r3, r1, r3
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	3332      	adds	r3, #50	; 0x32
 80086f0:	4a09      	ldr	r2, [pc, #36]	; (8008718 <UART_SetConfig+0x6f4>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	095b      	lsrs	r3, r3, #5
 80086f8:	f003 020f 	and.w	r2, r3, #15
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4442      	add	r2, r8
 8008702:	609a      	str	r2, [r3, #8]
}
 8008704:	e7ff      	b.n	8008706 <UART_SetConfig+0x6e2>
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008710:	40011000 	.word	0x40011000
 8008714:	40011400 	.word	0x40011400
 8008718:	51eb851f 	.word	0x51eb851f

0800871c <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af02      	add	r7, sp, #8
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	4608      	mov	r0, r1
 8008726:	4611      	mov	r1, r2
 8008728:	461a      	mov	r2, r3
 800872a:	4603      	mov	r3, r0
 800872c:	70fb      	strb	r3, [r7, #3]
 800872e:	460b      	mov	r3, r1
 8008730:	70bb      	strb	r3, [r7, #2]
 8008732:	4613      	mov	r3, r2
 8008734:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800873c:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b00      	cmp	r3, #0
 8008742:	bf0c      	ite	eq
 8008744:	2301      	moveq	r3, #1
 8008746:	2300      	movne	r3, #0
 8008748:	b2db      	uxtb	r3, r3
 800874a:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800874c:	78fa      	ldrb	r2, [r7, #3]
 800874e:	787b      	ldrb	r3, [r7, #1]
 8008750:	4413      	add	r3, r2
 8008752:	b2d8      	uxtb	r0, r3
 8008754:	78bb      	ldrb	r3, [r7, #2]
 8008756:	3301      	adds	r3, #1
 8008758:	b2db      	uxtb	r3, r3
 800875a:	78ba      	ldrb	r2, [r7, #2]
 800875c:	78f9      	ldrb	r1, [r7, #3]
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	4603      	mov	r3, r0
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 f8b8 	bl	80098d8 <u8g2_IsIntersection>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d040      	beq.n	80087f0 <u8g2_DrawHXBMP+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800876e:	2301      	movs	r3, #1
 8008770:	73fb      	strb	r3, [r7, #15]
  while(len > 0)
 8008772:	e035      	b.n	80087e0 <u8g2_DrawHXBMP+0xc4>
  {
    if( u8x8_pgm_read(b) & mask ) {
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	781a      	ldrb	r2, [r3, #0]
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	4013      	ands	r3, r2
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00c      	beq.n	800879c <u8g2_DrawHXBMP+0x80>
      u8g2->draw_color = color;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7bba      	ldrb	r2, [r7, #14]
 8008786:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800878a:	78ba      	ldrb	r2, [r7, #2]
 800878c:	78f9      	ldrb	r1, [r7, #3]
 800878e:	2300      	movs	r3, #0
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	2301      	movs	r3, #1
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 ffd2 	bl	800973e <u8g2_DrawHVLine>
 800879a:	e010      	b.n	80087be <u8g2_DrawHXBMP+0xa2>
    } else if( u8g2->bitmap_transparency == 0 ) {
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10b      	bne.n	80087be <u8g2_DrawHXBMP+0xa2>
      u8g2->draw_color = ncolor;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	7b7a      	ldrb	r2, [r7, #13]
 80087aa:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80087ae:	78ba      	ldrb	r2, [r7, #2]
 80087b0:	78f9      	ldrb	r1, [r7, #3]
 80087b2:	2300      	movs	r3, #0
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	2301      	movs	r3, #1
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 ffc0 	bl	800973e <u8g2_DrawHVLine>
    }
   
    x++;
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	3301      	adds	r3, #1
 80087c2:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <u8g2_DrawHXBMP+0xbe>
    {
      mask = 1;
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
      b++;
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	3301      	adds	r3, #1
 80087d8:	61bb      	str	r3, [r7, #24]
    }
    len--;
 80087da:	787b      	ldrb	r3, [r7, #1]
 80087dc:	3b01      	subs	r3, #1
 80087de:	707b      	strb	r3, [r7, #1]
  while(len > 0)
 80087e0:	787b      	ldrb	r3, [r7, #1]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1c6      	bne.n	8008774 <u8g2_DrawHXBMP+0x58>
  }
  u8g2->draw_color = color;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	7bba      	ldrb	r2, [r7, #14]
 80087ea:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 80087ee:	e000      	b.n	80087f2 <u8g2_DrawHXBMP+0xd6>
    return;
 80087f0:	bf00      	nop
}
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	4608      	mov	r0, r1
 8008802:	4611      	mov	r1, r2
 8008804:	461a      	mov	r2, r3
 8008806:	4603      	mov	r3, r0
 8008808:	70fb      	strb	r3, [r7, #3]
 800880a:	460b      	mov	r3, r1
 800880c:	70bb      	strb	r3, [r7, #2]
 800880e:	4613      	mov	r3, r2
 8008810:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 8008812:	787b      	ldrb	r3, [r7, #1]
 8008814:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
 8008818:	3307      	adds	r3, #7
 800881a:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	08db      	lsrs	r3, r3, #3
 8008820:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8008822:	78fa      	ldrb	r2, [r7, #3]
 8008824:	787b      	ldrb	r3, [r7, #1]
 8008826:	4413      	add	r3, r2
 8008828:	b2d8      	uxtb	r0, r3
 800882a:	78ba      	ldrb	r2, [r7, #2]
 800882c:	7e3b      	ldrb	r3, [r7, #24]
 800882e:	4413      	add	r3, r2
 8008830:	b2db      	uxtb	r3, r3
 8008832:	78ba      	ldrb	r2, [r7, #2]
 8008834:	78f9      	ldrb	r1, [r7, #3]
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	4603      	mov	r3, r0
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f001 f84c 	bl	80098d8 <u8g2_IsIntersection>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d017      	beq.n	8008876 <u8g2_DrawXBMP+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8008846:	e012      	b.n	800886e <u8g2_DrawXBMP+0x76>
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 8008848:	7878      	ldrb	r0, [r7, #1]
 800884a:	78ba      	ldrb	r2, [r7, #2]
 800884c:	78f9      	ldrb	r1, [r7, #3]
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	4603      	mov	r3, r0
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff ff61 	bl	800871c <u8g2_DrawHXBMP>
    bitmap += blen;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	4413      	add	r3, r2
 8008860:	61fb      	str	r3, [r7, #28]
    y++;
 8008862:	78bb      	ldrb	r3, [r7, #2]
 8008864:	3301      	adds	r3, #1
 8008866:	70bb      	strb	r3, [r7, #2]
    h--;
 8008868:	7e3b      	ldrb	r3, [r7, #24]
 800886a:	3b01      	subs	r3, #1
 800886c:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 800886e:	7e3b      	ldrb	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e9      	bne.n	8008848 <u8g2_DrawXBMP+0x50>
 8008874:	e000      	b.n	8008878 <u8g2_DrawXBMP+0x80>
    return;
 8008876:	bf00      	nop
  }
}
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af02      	add	r7, sp, #8
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	4608      	mov	r0, r1
 8008888:	4611      	mov	r1, r2
 800888a:	461a      	mov	r2, r3
 800888c:	4603      	mov	r3, r0
 800888e:	70fb      	strb	r3, [r7, #3]
 8008890:	460b      	mov	r3, r1
 8008892:	70bb      	strb	r3, [r7, #2]
 8008894:	4613      	mov	r3, r2
 8008896:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8008898:	78fa      	ldrb	r2, [r7, #3]
 800889a:	787b      	ldrb	r3, [r7, #1]
 800889c:	4413      	add	r3, r2
 800889e:	b2d8      	uxtb	r0, r3
 80088a0:	78ba      	ldrb	r2, [r7, #2]
 80088a2:	7c3b      	ldrb	r3, [r7, #16]
 80088a4:	4413      	add	r3, r2
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	78ba      	ldrb	r2, [r7, #2]
 80088aa:	78f9      	ldrb	r1, [r7, #3]
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	4603      	mov	r3, r0
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f001 f811 	bl	80098d8 <u8g2_IsIntersection>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d013      	beq.n	80088e4 <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80088bc:	e00e      	b.n	80088dc <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80088be:	7878      	ldrb	r0, [r7, #1]
 80088c0:	78ba      	ldrb	r2, [r7, #2]
 80088c2:	78f9      	ldrb	r1, [r7, #3]
 80088c4:	2300      	movs	r3, #0
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	4603      	mov	r3, r0
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 ff37 	bl	800973e <u8g2_DrawHVLine>
    y++;    
 80088d0:	78bb      	ldrb	r3, [r7, #2]
 80088d2:	3301      	adds	r3, #1
 80088d4:	70bb      	strb	r3, [r7, #2]
    h--;
 80088d6:	7c3b      	ldrb	r3, [r7, #16]
 80088d8:	3b01      	subs	r3, #1
 80088da:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 80088dc:	7c3b      	ldrb	r3, [r7, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1ed      	bne.n	80088be <u8g2_DrawBox+0x40>
 80088e2:	e000      	b.n	80088e6 <u8g2_DrawBox+0x68>
    return;
 80088e4:	bf00      	nop
  }
}
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <u8g2_ClearBuffer>:
#include <string.h>
#include "../u8g2/u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	7c1b      	ldrb	r3, [r3, #16]
 80088fa:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008902:	461a      	mov	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	2100      	movs	r1, #0
 800891a:	4618      	mov	r0, r3
 800891c:	f003 ff0f 	bl	800c73e <memset>
}
 8008920:	bf00      	nop
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af02      	add	r7, sp, #8
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	70fb      	strb	r3, [r7, #3]
 8008934:	4613      	mov	r3, r2
 8008936:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	7c1b      	ldrb	r3, [r3, #16]
 800893e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008948:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	b29b      	uxth	r3, r3
 800894e:	89ba      	ldrh	r2, [r7, #12]
 8008950:	fb12 f303 	smulbb	r3, r2, r3
 8008954:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8008956:	89bb      	ldrh	r3, [r7, #12]
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800895c:	89bb      	ldrh	r3, [r7, #12]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8008964:	7bf9      	ldrb	r1, [r7, #15]
 8008966:	78ba      	ldrb	r2, [r7, #2]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	460b      	mov	r3, r1
 800896e:	2100      	movs	r1, #0
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 fd26 	bl	800a3c2 <u8x8_DrawTile>
}
 8008976:	bf00      	nop
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008990:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008998:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	7c5b      	ldrb	r3, [r3, #17]
 80089a0:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80089a2:	7bba      	ldrb	r2, [r7, #14]
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7ff ffbd 	bl	8008928 <u8g2_send_tile_row>
    src_row++;
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	3301      	adds	r3, #1
 80089b2:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	3301      	adds	r3, #1
 80089b8:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80089ba:	7bfa      	ldrb	r2, [r7, #15]
 80089bc:	7b7b      	ldrb	r3, [r7, #13]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d203      	bcs.n	80089ca <u8g2_send_buffer+0x4c>
 80089c2:	7bba      	ldrb	r2, [r7, #14]
 80089c4:	7b3b      	ldrb	r3, [r7, #12]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d3eb      	bcc.n	80089a2 <u8g2_send_buffer+0x24>
}
 80089ca:	bf00      	nop
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff ffcf 	bl	800897e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 fd3f 	bl	800a464 <u8x8_RefreshDisplay>
}
 80089e6:	bf00      	nop
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	78fa      	ldrb	r2, [r7, #3]
 80089fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff ff5b 	bl	80088ec <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8008a36:	2100      	movs	r1, #0
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff ffd8 	bl	80089ee <u8g2_SetBufferCurrTileRow>
}
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff ff95 	bl	800897e <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5a:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	4413      	add	r3, r2
 8008a66:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	7c5b      	ldrb	r3, [r3, #17]
 8008a6e:	7bfa      	ldrb	r2, [r7, #15]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d304      	bcc.n	8008a7e <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 fcf5 	bl	800a464 <u8x8_RefreshDisplay>
    return 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e00d      	b.n	8008a9a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff ff2f 	bl	80088ec <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff ffab 	bl	80089ee <u8g2_SetBufferCurrTileRow>
  return 1;
 8008a98:	2301      	movs	r3, #1
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <u8g2_ClearDisplay>:
#include "../u8g2/u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff ffb7 	bl	8008a1e <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff ffc8 	bl	8008a46 <u8g2_NextPage>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1f9      	bne.n	8008ab0 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff ff95 	bl	80089ee <u8g2_SetBufferCurrTileRow>
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <u8g2_m_32_8_f>:
  static uint8_t buf[512];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_32_8_f(uint8_t *page_cnt)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  static uint8_t buf[2048];
  *page_cnt = 8;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2208      	movs	r2, #8
 8008ad8:	701a      	strb	r2, [r3, #0]
  return buf;
 8008ada:	4b03      	ldr	r3, [pc, #12]	; (8008ae8 <u8g2_m_32_8_f+0x1c>)
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	2000128c 	.word	0x2000128c

08008aec <u8g2_Setup_ssd1322_nhd_256x64_f>:
  buf = u8g2_m_32_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1322 f */
void u8g2_Setup_ssd1322_nhd_256x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1322_nhd_256x64, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a0b      	ldr	r2, [pc, #44]	; (8008b30 <u8g2_Setup_ssd1322_nhd_256x64_f+0x44>)
 8008b02:	490c      	ldr	r1, [pc, #48]	; (8008b34 <u8g2_Setup_ssd1322_nhd_256x64_f+0x48>)
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f001 fd0f 	bl	800a528 <u8x8_Setup>
  buf = u8g2_m_32_8_f(&tile_buf_height);
 8008b0a:	f107 0313 	add.w	r3, r7, #19
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff ffdc 	bl	8008acc <u8g2_m_32_8_f>
 8008b14:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8008b16:	7cfa      	ldrb	r2, [r7, #19]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <u8g2_Setup_ssd1322_nhd_256x64_f+0x4c>)
 8008b1e:	6979      	ldr	r1, [r7, #20]
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 ffc2 	bl	8009aaa <u8g2_SetupBuffer>
}
 8008b26:	bf00      	nop
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	0800a02d 	.word	0x0800a02d
 8008b34:	0800a289 	.word	0x0800a289
 8008b38:	0800992f 	.word	0x0800992f

08008b3c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	781b      	ldrb	r3, [r3, #0]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	4413      	add	r3, r2
 8008b72:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	81fb      	strh	r3, [r7, #14]
    font++;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8008b80:	89fb      	ldrh	r3, [r7, #14]
 8008b82:	021b      	lsls	r3, r3, #8
 8008b84:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	89fb      	ldrh	r3, [r7, #14]
 8008b8e:	4413      	add	r3, r2
 8008b90:	81fb      	strh	r3, [r7, #14]
    return pos;
 8008b92:	89fb      	ldrh	r3, [r7, #14]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8008baa:	2100      	movs	r1, #0
 8008bac:	6838      	ldr	r0, [r7, #0]
 8008bae:	f7ff ffc5 	bl	8008b3c <u8g2_font_get_byte>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8008bba:	2101      	movs	r1, #1
 8008bbc:	6838      	ldr	r0, [r7, #0]
 8008bbe:	f7ff ffbd 	bl	8008b3c <u8g2_font_get_byte>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8008bca:	2102      	movs	r1, #2
 8008bcc:	6838      	ldr	r0, [r7, #0]
 8008bce:	f7ff ffb5 	bl	8008b3c <u8g2_font_get_byte>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8008bda:	2103      	movs	r1, #3
 8008bdc:	6838      	ldr	r0, [r7, #0]
 8008bde:	f7ff ffad 	bl	8008b3c <u8g2_font_get_byte>
 8008be2:	4603      	mov	r3, r0
 8008be4:	461a      	mov	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8008bea:	2104      	movs	r1, #4
 8008bec:	6838      	ldr	r0, [r7, #0]
 8008bee:	f7ff ffa5 	bl	8008b3c <u8g2_font_get_byte>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8008bfa:	2105      	movs	r1, #5
 8008bfc:	6838      	ldr	r0, [r7, #0]
 8008bfe:	f7ff ff9d 	bl	8008b3c <u8g2_font_get_byte>
 8008c02:	4603      	mov	r3, r0
 8008c04:	461a      	mov	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8008c0a:	2106      	movs	r1, #6
 8008c0c:	6838      	ldr	r0, [r7, #0]
 8008c0e:	f7ff ff95 	bl	8008b3c <u8g2_font_get_byte>
 8008c12:	4603      	mov	r3, r0
 8008c14:	461a      	mov	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8008c1a:	2107      	movs	r1, #7
 8008c1c:	6838      	ldr	r0, [r7, #0]
 8008c1e:	f7ff ff8d 	bl	8008b3c <u8g2_font_get_byte>
 8008c22:	4603      	mov	r3, r0
 8008c24:	461a      	mov	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8008c2a:	2108      	movs	r1, #8
 8008c2c:	6838      	ldr	r0, [r7, #0]
 8008c2e:	f7ff ff85 	bl	8008b3c <u8g2_font_get_byte>
 8008c32:	4603      	mov	r3, r0
 8008c34:	461a      	mov	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8008c3a:	2109      	movs	r1, #9
 8008c3c:	6838      	ldr	r0, [r7, #0]
 8008c3e:	f7ff ff7d 	bl	8008b3c <u8g2_font_get_byte>
 8008c42:	4603      	mov	r3, r0
 8008c44:	b25a      	sxtb	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8008c4a:	210a      	movs	r1, #10
 8008c4c:	6838      	ldr	r0, [r7, #0]
 8008c4e:	f7ff ff75 	bl	8008b3c <u8g2_font_get_byte>
 8008c52:	4603      	mov	r3, r0
 8008c54:	b25a      	sxtb	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8008c5a:	210b      	movs	r1, #11
 8008c5c:	6838      	ldr	r0, [r7, #0]
 8008c5e:	f7ff ff6d 	bl	8008b3c <u8g2_font_get_byte>
 8008c62:	4603      	mov	r3, r0
 8008c64:	b25a      	sxtb	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8008c6a:	210c      	movs	r1, #12
 8008c6c:	6838      	ldr	r0, [r7, #0]
 8008c6e:	f7ff ff65 	bl	8008b3c <u8g2_font_get_byte>
 8008c72:	4603      	mov	r3, r0
 8008c74:	b25a      	sxtb	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8008c7a:	210d      	movs	r1, #13
 8008c7c:	6838      	ldr	r0, [r7, #0]
 8008c7e:	f7ff ff5d 	bl	8008b3c <u8g2_font_get_byte>
 8008c82:	4603      	mov	r3, r0
 8008c84:	b25a      	sxtb	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8008c8a:	210e      	movs	r1, #14
 8008c8c:	6838      	ldr	r0, [r7, #0]
 8008c8e:	f7ff ff55 	bl	8008b3c <u8g2_font_get_byte>
 8008c92:	4603      	mov	r3, r0
 8008c94:	b25a      	sxtb	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8008c9a:	210f      	movs	r1, #15
 8008c9c:	6838      	ldr	r0, [r7, #0]
 8008c9e:	f7ff ff4d 	bl	8008b3c <u8g2_font_get_byte>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	b25a      	sxtb	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8008caa:	2110      	movs	r1, #16
 8008cac:	6838      	ldr	r0, [r7, #0]
 8008cae:	f7ff ff45 	bl	8008b3c <u8g2_font_get_byte>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	b25a      	sxtb	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8008cba:	2111      	movs	r1, #17
 8008cbc:	6838      	ldr	r0, [r7, #0]
 8008cbe:	f7ff ff4f 	bl	8008b60 <u8g2_font_get_word>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8008cca:	2113      	movs	r1, #19
 8008ccc:	6838      	ldr	r0, [r7, #0]
 8008cce:	f7ff ff47 	bl	8008b60 <u8g2_font_get_word>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8008cda:	2115      	movs	r1, #21
 8008cdc:	6838      	ldr	r0, [r7, #0]
 8008cde:	f7ff ff3f 	bl	8008b60 <u8g2_font_get_word>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	82da      	strh	r2, [r3, #22]
#endif
}
 8008cea:	bf00      	nop
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	7a9b      	ldrb	r3, [r3, #10]
 8008d02:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8008d0c:	7bfa      	ldrb	r2, [r7, #15]
 8008d0e:	7b7b      	ldrb	r3, [r7, #13]
 8008d10:	fa42 f303 	asr.w	r3, r2, r3
 8008d14:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8008d16:	7b7b      	ldrb	r3, [r7, #13]
 8008d18:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8008d1a:	7bba      	ldrb	r2, [r7, #14]
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	4413      	add	r3, r2
 8008d20:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b07      	cmp	r3, #7
 8008d26:	d91a      	bls.n	8008d5e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8008d28:	2308      	movs	r3, #8
 8008d2a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8008d2c:	7b3a      	ldrb	r2, [r7, #12]
 8008d2e:	7b7b      	ldrb	r3, [r7, #13]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	461a      	mov	r2, r3
 8008d46:	7b3b      	ldrb	r3, [r7, #12]
 8008d48:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4c:	b25a      	sxtb	r2, r3
 8008d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	b25b      	sxtb	r3, r3
 8008d56:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	3b08      	subs	r3, #8
 8008d5c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	f04f 32ff 	mov.w	r2, #4294967295
 8008d64:	fa02 f303 	lsl.w	r3, r2, r3
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	4013      	ands	r3, r2
 8008d72:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	7bba      	ldrb	r2, [r7, #14]
 8008d78:	729a      	strb	r2, [r3, #10]
  return val;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff ffaa 	bl	8008cf2 <u8g2_font_decode_get_unsigned_bits>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8008da2:	2301      	movs	r3, #1
 8008da4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8008dac:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8008db0:	78fb      	ldrb	r3, [r7, #3]
 8008db2:	fa02 f303 	lsl.w	r3, r2, r3
 8008db6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8008db8:	7bfa      	ldrb	r2, [r7, #15]
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	73fb      	strb	r3, [r7, #15]
  return v;
 8008dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8008dce:	b490      	push	{r4, r7}
 8008dd0:	b082      	sub	sp, #8
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	4608      	mov	r0, r1
 8008dd8:	4611      	mov	r1, r2
 8008dda:	461a      	mov	r2, r3
 8008ddc:	4623      	mov	r3, r4
 8008dde:	71fb      	strb	r3, [r7, #7]
 8008de0:	4603      	mov	r3, r0
 8008de2:	71bb      	strb	r3, [r7, #6]
 8008de4:	460b      	mov	r3, r1
 8008de6:	717b      	strb	r3, [r7, #5]
 8008de8:	4613      	mov	r3, r2
 8008dea:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8008dec:	793b      	ldrb	r3, [r7, #4]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d008      	beq.n	8008e04 <u8g2_add_vector_y+0x36>
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d00b      	beq.n	8008e0e <u8g2_add_vector_y+0x40>
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10e      	bne.n	8008e18 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8008dfa:	797a      	ldrb	r2, [r7, #5]
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	4413      	add	r3, r2
 8008e00:	71fb      	strb	r3, [r7, #7]
      break;
 8008e02:	e00e      	b.n	8008e22 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8008e04:	79ba      	ldrb	r2, [r7, #6]
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	4413      	add	r3, r2
 8008e0a:	71fb      	strb	r3, [r7, #7]
      break;
 8008e0c:	e009      	b.n	8008e22 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8008e0e:	797b      	ldrb	r3, [r7, #5]
 8008e10:	79fa      	ldrb	r2, [r7, #7]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	71fb      	strb	r3, [r7, #7]
      break;
 8008e16:	e004      	b.n	8008e22 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8008e18:	79bb      	ldrb	r3, [r7, #6]
 8008e1a:	79fa      	ldrb	r2, [r7, #7]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	71fb      	strb	r3, [r7, #7]
      break;      
 8008e20:	bf00      	nop
  }
  return dy;
 8008e22:	79fb      	ldrb	r3, [r7, #7]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bc90      	pop	{r4, r7}
 8008e2c:	4770      	bx	lr

08008e2e <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8008e2e:	b490      	push	{r4, r7}
 8008e30:	b082      	sub	sp, #8
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	4604      	mov	r4, r0
 8008e36:	4608      	mov	r0, r1
 8008e38:	4611      	mov	r1, r2
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	4623      	mov	r3, r4
 8008e3e:	71fb      	strb	r3, [r7, #7]
 8008e40:	4603      	mov	r3, r0
 8008e42:	71bb      	strb	r3, [r7, #6]
 8008e44:	460b      	mov	r3, r1
 8008e46:	717b      	strb	r3, [r7, #5]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8008e4c:	793b      	ldrb	r3, [r7, #4]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d008      	beq.n	8008e64 <u8g2_add_vector_x+0x36>
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d00b      	beq.n	8008e6e <u8g2_add_vector_x+0x40>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10e      	bne.n	8008e78 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8008e5a:	79ba      	ldrb	r2, [r7, #6]
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	4413      	add	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
      break;
 8008e62:	e00e      	b.n	8008e82 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 8008e64:	797b      	ldrb	r3, [r7, #5]
 8008e66:	79fa      	ldrb	r2, [r7, #7]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	71fb      	strb	r3, [r7, #7]
      break;
 8008e6c:	e009      	b.n	8008e82 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8008e6e:	79bb      	ldrb	r3, [r7, #6]
 8008e70:	79fa      	ldrb	r2, [r7, #7]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	71fb      	strb	r3, [r7, #7]
      break;
 8008e76:	e004      	b.n	8008e82 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8008e78:	797a      	ldrb	r2, [r7, #5]
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	71fb      	strb	r3, [r7, #7]
      break;      
 8008e80:	bf00      	nop
  }
  return dx;
 8008e82:	79fb      	ldrb	r3, [r7, #7]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bc90      	pop	{r4, r7}
 8008e8c:	4770      	bx	lr

08008e8e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b088      	sub	sp, #32
 8008e92:	af02      	add	r7, sp, #8
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	460b      	mov	r3, r1
 8008e98:	70fb      	strb	r3, [r7, #3]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	3358      	adds	r3, #88	; 0x58
 8008ea2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8008eae:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8008eb6:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008ebe:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8008ec0:	7bfa      	ldrb	r2, [r7, #15]
 8008ec2:	7d7b      	ldrb	r3, [r7, #21]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8008ecc:	7dfa      	ldrb	r2, [r7, #23]
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d201      	bcs.n	8008ed8 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	791b      	ldrb	r3, [r3, #4]
 8008edc:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	795b      	ldrb	r3, [r3, #5]
 8008ee2:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8008ee4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8008ee8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	7b9b      	ldrb	r3, [r3, #14]
 8008ef0:	7bb8      	ldrb	r0, [r7, #14]
 8008ef2:	f7ff ff9c 	bl	8008e2e <u8g2_add_vector_x>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8008efa:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8008efe:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	7b9b      	ldrb	r3, [r3, #14]
 8008f06:	7b78      	ldrb	r0, [r7, #13]
 8008f08:	f7ff ff61 	bl	8008dce <u8g2_add_vector_y>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8008f10:	78bb      	ldrb	r3, [r7, #2]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00f      	beq.n	8008f36 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	7b1a      	ldrb	r2, [r3, #12]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	7b9b      	ldrb	r3, [r3, #14]
 8008f24:	7db8      	ldrb	r0, [r7, #22]
 8008f26:	7b7a      	ldrb	r2, [r7, #13]
 8008f28:	7bb9      	ldrb	r1, [r7, #14]
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fc05 	bl	800973e <u8g2_DrawHVLine>
 8008f34:	e012      	b.n	8008f5c <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	7adb      	ldrb	r3, [r3, #11]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10e      	bne.n	8008f5c <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	7b5a      	ldrb	r2, [r3, #13]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	7b9b      	ldrb	r3, [r3, #14]
 8008f4c:	7db8      	ldrb	r0, [r7, #22]
 8008f4e:	7b7a      	ldrb	r2, [r7, #13]
 8008f50:	7bb9      	ldrb	r1, [r7, #14]
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	4603      	mov	r3, r0
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fbf1 	bl	800973e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8008f5c:	7dfa      	ldrb	r2, [r7, #23]
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d309      	bcc.n	8008f78 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8008f64:	7dfa      	ldrb	r2, [r7, #23]
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	757b      	strb	r3, [r7, #21]
    ly++;
 8008f70:	7d3b      	ldrb	r3, [r7, #20]
 8008f72:	3301      	adds	r3, #1
 8008f74:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8008f76:	e79f      	b.n	8008eb8 <u8g2_font_decode_len+0x2a>
      break;
 8008f78:	bf00      	nop
  }
  lx += cnt;
 8008f7a:	7d7a      	ldrb	r2, [r7, #21]
 8008f7c:	7dfb      	ldrb	r3, [r7, #23]
 8008f7e:	4413      	add	r3, r2
 8008f80:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8008f82:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8008f8a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	71da      	strb	r2, [r3, #7]
  
}
 8008f92:	bf00      	nop
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3358      	adds	r3, #88	; 0x58
 8008fa8:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f7ff fe97 	bl	8008cf2 <u8g2_font_decode_get_unsigned_bits>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	b25a      	sxtb	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7ff fe8c 	bl	8008cf2 <u8g2_font_decode_get_unsigned_bits>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	b25a      	sxtb	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	7b1b      	ldrb	r3, [r3, #12]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	bf0c      	ite	eq
 8008ff4:	2301      	moveq	r3, #1
 8008ff6:	2300      	movne	r3, #0
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	735a      	strb	r2, [r3, #13]
}
 8009000:	bf00      	nop
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af02      	add	r7, sp, #8
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3358      	adds	r3, #88	; 0x58
 8009016:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff ffbd 	bl	8008f9a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009026:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800902e:	4619      	mov	r1, r3
 8009030:	6938      	ldr	r0, [r7, #16]
 8009032:	f7ff fea9 	bl	8008d88 <u8g2_font_decode_get_signed_bits>
 8009036:	4603      	mov	r3, r0
 8009038:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8009040:	4619      	mov	r1, r3
 8009042:	6938      	ldr	r0, [r7, #16]
 8009044:	f7ff fea0 	bl	8008d88 <u8g2_font_decode_get_signed_bits>
 8009048:	4603      	mov	r3, r0
 800904a:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009052:	4619      	mov	r1, r3
 8009054:	6938      	ldr	r0, [r7, #16]
 8009056:	f7ff fe97 	bl	8008d88 <u8g2_font_decode_get_signed_bits>
 800905a:	4603      	mov	r3, r0
 800905c:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f340 80cf 	ble.w	8009208 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	7918      	ldrb	r0, [r3, #4]
 800906e:	7bfa      	ldrb	r2, [r7, #15]
 8009070:	7b7b      	ldrb	r3, [r7, #13]
 8009072:	4413      	add	r3, r2
 8009074:	b2db      	uxtb	r3, r3
 8009076:	425b      	negs	r3, r3
 8009078:	b2db      	uxtb	r3, r3
 800907a:	b25a      	sxtb	r2, r3
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	7b9b      	ldrb	r3, [r3, #14]
 8009080:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8009084:	f7ff fed3 	bl	8008e2e <u8g2_add_vector_x>
 8009088:	4603      	mov	r3, r0
 800908a:	461a      	mov	r2, r3
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	7958      	ldrb	r0, [r3, #5]
 8009094:	7bfa      	ldrb	r2, [r7, #15]
 8009096:	7b7b      	ldrb	r3, [r7, #13]
 8009098:	4413      	add	r3, r2
 800909a:	b2db      	uxtb	r3, r3
 800909c:	425b      	negs	r3, r3
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	b25a      	sxtb	r2, r3
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	7b9b      	ldrb	r3, [r3, #14]
 80090a6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80090aa:	f7ff fe90 	bl	8008dce <u8g2_add_vector_y>
 80090ae:	4603      	mov	r3, r0
 80090b0:	461a      	mov	r2, r3
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	791b      	ldrb	r3, [r3, #4]
 80090ba:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	795b      	ldrb	r3, [r3, #5]
 80090c0:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
 80090c4:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 80090c6:	7d7b      	ldrb	r3, [r7, #21]
 80090c8:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	7b9b      	ldrb	r3, [r3, #14]
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d852      	bhi.n	8009178 <u8g2_font_decode_glyph+0x170>
 80090d2:	a201      	add	r2, pc, #4	; (adr r2, 80090d8 <u8g2_font_decode_glyph+0xd0>)
 80090d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d8:	080090e9 	.word	0x080090e9
 80090dc:	08009101 	.word	0x08009101
 80090e0:	08009125 	.word	0x08009125
 80090e4:	08009155 	.word	0x08009155
      {
	case 0:
	    x1 += decode->glyph_width;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	7dbb      	ldrb	r3, [r7, #22]
 80090f2:	4413      	add	r3, r2
 80090f4:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 80090f6:	7bfa      	ldrb	r2, [r7, #15]
 80090f8:	7d3b      	ldrb	r3, [r7, #20]
 80090fa:	4413      	add	r3, r2
 80090fc:	753b      	strb	r3, [r7, #20]
	    break;
 80090fe:	e03b      	b.n	8009178 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	7dfa      	ldrb	r2, [r7, #23]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009108:	7dfb      	ldrb	r3, [r7, #23]
 800910a:	3301      	adds	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800910e:	7dbb      	ldrb	r3, [r7, #22]
 8009110:	3301      	adds	r3, #1
 8009112:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800911a:	b2da      	uxtb	r2, r3
 800911c:	7d3b      	ldrb	r3, [r7, #20]
 800911e:	4413      	add	r3, r2
 8009120:	753b      	strb	r3, [r7, #20]
	    break;
 8009122:	e029      	b.n	8009178 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800912a:	b2db      	uxtb	r3, r3
 800912c:	7dfa      	ldrb	r2, [r7, #23]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	3301      	adds	r3, #1
 8009136:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8009138:	7dbb      	ldrb	r3, [r7, #22]
 800913a:	3301      	adds	r3, #1
 800913c:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	7d7a      	ldrb	r2, [r7, #21]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009146:	7d7b      	ldrb	r3, [r7, #21]
 8009148:	3301      	adds	r3, #1
 800914a:	757b      	strb	r3, [r7, #21]
	    y1++;
 800914c:	7d3b      	ldrb	r3, [r7, #20]
 800914e:	3301      	adds	r3, #1
 8009150:	753b      	strb	r3, [r7, #20]
	    break;	  
 8009152:	e011      	b.n	8009178 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8009154:	7bfa      	ldrb	r2, [r7, #15]
 8009156:	7dbb      	ldrb	r3, [r7, #22]
 8009158:	4413      	add	r3, r2
 800915a:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	7d7a      	ldrb	r2, [r7, #21]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800916a:	7d7b      	ldrb	r3, [r7, #21]
 800916c:	3301      	adds	r3, #1
 800916e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8009170:	7d3b      	ldrb	r3, [r7, #20]
 8009172:	3301      	adds	r3, #1
 8009174:	753b      	strb	r3, [r7, #20]
	    break;	  
 8009176:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8009178:	7db8      	ldrb	r0, [r7, #22]
 800917a:	7d7a      	ldrb	r2, [r7, #21]
 800917c:	7df9      	ldrb	r1, [r7, #23]
 800917e:	7d3b      	ldrb	r3, [r7, #20]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	4603      	mov	r3, r0
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fba7 	bl	80098d8 <u8g2_IsIntersection>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d102      	bne.n	8009196 <u8g2_font_decode_glyph+0x18e>
	return d;
 8009190:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009194:	e03a      	b.n	800920c <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2200      	movs	r2, #0
 800919a:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	2200      	movs	r2, #0
 80091a0:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80091a8:	4619      	mov	r1, r3
 80091aa:	6938      	ldr	r0, [r7, #16]
 80091ac:	f7ff fda1 	bl	8008cf2 <u8g2_font_decode_get_unsigned_bits>
 80091b0:	4603      	mov	r3, r0
 80091b2:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80091ba:	4619      	mov	r1, r3
 80091bc:	6938      	ldr	r0, [r7, #16]
 80091be:	f7ff fd98 	bl	8008cf2 <u8g2_font_decode_get_unsigned_bits>
 80091c2:	4603      	mov	r3, r0
 80091c4:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80091c6:	7afb      	ldrb	r3, [r7, #11]
 80091c8:	2200      	movs	r2, #0
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7ff fe5e 	bl	8008e8e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80091d2:	7abb      	ldrb	r3, [r7, #10]
 80091d4:	2201      	movs	r2, #1
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff fe58 	bl	8008e8e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80091de:	2101      	movs	r1, #1
 80091e0:	6938      	ldr	r0, [r7, #16]
 80091e2:	f7ff fd86 	bl	8008cf2 <u8g2_font_decode_get_unsigned_bits>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1ec      	bne.n	80091c6 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80091f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	dd00      	ble.n	80091fc <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80091fa:	e7d2      	b.n	80091a2 <u8g2_font_decode_glyph+0x19a>
	break;
 80091fc:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	7b1a      	ldrb	r2, [r3, #12]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8009208:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009224:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	3317      	adds	r3, #23
 800922a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 256 )
 800922c:	887b      	ldrh	r3, [r7, #2]
 800922e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009232:	d82a      	bhi.n	800928a <u8g2_font_get_glyph_data+0x76>
  {
    if ( encoding >= 'a' )
 8009234:	887b      	ldrh	r3, [r7, #2]
 8009236:	2b60      	cmp	r3, #96	; 0x60
 8009238:	d907      	bls.n	800924a <u8g2_font_get_glyph_data+0x36>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009240:	461a      	mov	r2, r3
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	4413      	add	r3, r2
 8009246:	617b      	str	r3, [r7, #20]
 8009248:	e009      	b.n	800925e <u8g2_font_get_glyph_data+0x4a>
    }
    else if ( encoding >= 'A' )
 800924a:	887b      	ldrh	r3, [r7, #2]
 800924c:	2b40      	cmp	r3, #64	; 0x40
 800924e:	d906      	bls.n	800925e <u8g2_font_get_glyph_data+0x4a>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8009256:	461a      	mov	r2, r3
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	4413      	add	r3, r2
 800925c:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	3301      	adds	r3, #1
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d04e      	beq.n	8009306 <u8g2_font_get_glyph_data+0xf2>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b29b      	uxth	r3, r3
 800926e:	887a      	ldrh	r2, [r7, #2]
 8009270:	429a      	cmp	r2, r3
 8009272:	d102      	bne.n	800927a <u8g2_font_get_glyph_data+0x66>
      {
	return font+2;	/* skip encoding and glyph size */
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	3302      	adds	r3, #2
 8009278:	e049      	b.n	800930e <u8g2_font_get_glyph_data+0xfa>
      }
      font += u8x8_pgm_read( font + 1 );
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	3301      	adds	r3, #1
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	4413      	add	r3, r2
 8009286:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8009288:	e7e9      	b.n	800925e <u8g2_font_get_glyph_data+0x4a>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8009290:	461a      	mov	r2, r3
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	4413      	add	r3, r2
 8009296:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800929c:	2100      	movs	r1, #0
 800929e:	6938      	ldr	r0, [r7, #16]
 80092a0:	f7ff fc5e 	bl	8008b60 <u8g2_font_get_word>
 80092a4:	4603      	mov	r3, r0
 80092a6:	461a      	mov	r2, r3
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	4413      	add	r3, r2
 80092ac:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80092ae:	2102      	movs	r1, #2
 80092b0:	6938      	ldr	r0, [r7, #16]
 80092b2:	f7ff fc55 	bl	8008b60 <u8g2_font_get_word>
 80092b6:	4603      	mov	r3, r0
 80092b8:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	3304      	adds	r3, #4
 80092be:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80092c0:	89fa      	ldrh	r2, [r7, #14]
 80092c2:	887b      	ldrh	r3, [r7, #2]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d3e9      	bcc.n	800929c <u8g2_font_get_glyph_data+0x88>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80092ce:	89fb      	ldrh	r3, [r7, #14]
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	3301      	adds	r3, #1
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	89fb      	ldrh	r3, [r7, #14]
 80092de:	4313      	orrs	r3, r2
 80092e0:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80092e2:	89fb      	ldrh	r3, [r7, #14]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d010      	beq.n	800930a <u8g2_font_get_glyph_data+0xf6>
	break;
  
      if ( e == encoding )
 80092e8:	89fa      	ldrh	r2, [r7, #14]
 80092ea:	887b      	ldrh	r3, [r7, #2]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d102      	bne.n	80092f6 <u8g2_font_get_glyph_data+0xe2>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	3303      	adds	r3, #3
 80092f4:	e00b      	b.n	800930e <u8g2_font_get_glyph_data+0xfa>
      }
      font += u8x8_pgm_read( font + 2 );
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	3302      	adds	r3, #2
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	461a      	mov	r2, r3
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	4413      	add	r3, r2
 8009302:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8009304:	e7e0      	b.n	80092c8 <u8g2_font_get_glyph_data+0xb4>
	break;
 8009306:	bf00      	nop
 8009308:	e000      	b.n	800930c <u8g2_font_get_glyph_data+0xf8>
	break;
 800930a:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	4608      	mov	r0, r1
 8009320:	4611      	mov	r1, r2
 8009322:	461a      	mov	r2, r3
 8009324:	4603      	mov	r3, r0
 8009326:	70fb      	strb	r3, [r7, #3]
 8009328:	460b      	mov	r3, r1
 800932a:	70bb      	strb	r3, [r7, #2]
 800932c:	4613      	mov	r3, r2
 800932e:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	78ba      	ldrb	r2, [r7, #2]
 8009340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8009344:	883b      	ldrh	r3, [r7, #0]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff ff63 	bl	8009214 <u8g2_font_get_glyph_data>
 800934e:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8009356:	68b9      	ldr	r1, [r7, #8]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff fe55 	bl	8009008 <u8g2_font_decode_glyph>
 800935e:	4603      	mov	r3, r0
 8009360:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8009362:	7bfb      	ldrb	r3, [r7, #15]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	78fa      	ldrb	r2, [r7, #3]
 800937c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	4608      	mov	r0, r1
 8009396:	4611      	mov	r1, r2
 8009398:	461a      	mov	r2, r3
 800939a:	4603      	mov	r3, r0
 800939c:	70fb      	strb	r3, [r7, #3]
 800939e:	460b      	mov	r3, r1
 80093a0:	70bb      	strb	r3, [r7, #2]
 80093a2:	4613      	mov	r3, r2
 80093a4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	d833      	bhi.n	8009418 <u8g2_DrawGlyph+0x8c>
 80093b0:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <u8g2_DrawGlyph+0x2c>)
 80093b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b6:	bf00      	nop
 80093b8:	080093c9 	.word	0x080093c9
 80093bc:	080093dd 	.word	0x080093dd
 80093c0:	080093f1 	.word	0x080093f1
 80093c4:	08009405 	.word	0x08009405
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	4798      	blx	r3
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	78bb      	ldrb	r3, [r7, #2]
 80093d6:	4413      	add	r3, r2
 80093d8:	70bb      	strb	r3, [r7, #2]
      break;
 80093da:	e01d      	b.n	8009418 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	4798      	blx	r3
 80093e4:	4603      	mov	r3, r0
 80093e6:	461a      	mov	r2, r3
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	1a9b      	subs	r3, r3, r2
 80093ec:	70fb      	strb	r3, [r7, #3]
      break;
 80093ee:	e013      	b.n	8009418 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	4798      	blx	r3
 80093f8:	4603      	mov	r3, r0
 80093fa:	461a      	mov	r2, r3
 80093fc:	78bb      	ldrb	r3, [r7, #2]
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	70bb      	strb	r3, [r7, #2]
      break;
 8009402:	e009      	b.n	8009418 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	4798      	blx	r3
 800940c:	4603      	mov	r3, r0
 800940e:	461a      	mov	r2, r3
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	4413      	add	r3, r2
 8009414:	70fb      	strb	r3, [r7, #3]
      break;
 8009416:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8009418:	883b      	ldrh	r3, [r7, #0]
 800941a:	78ba      	ldrb	r2, [r7, #2]
 800941c:	78f9      	ldrb	r1, [r7, #3]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff ff79 	bl	8009316 <u8g2_font_draw_glyph>
 8009424:	4603      	mov	r3, r0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop

08009430 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	607b      	str	r3, [r7, #4]
 800943a:	460b      	mov	r3, r1
 800943c:	72fb      	strb	r3, [r7, #11]
 800943e:	4613      	mov	r3, r2
 8009440:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fc85 	bl	8009d52 <u8x8_utf8_init>
  sum = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	7812      	ldrb	r2, [r2, #0]
 8009454:	4611      	mov	r1, r2
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	4798      	blx	r3
 800945a:	4603      	mov	r3, r0
 800945c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800945e:	8abb      	ldrh	r3, [r7, #20]
 8009460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009464:	4293      	cmp	r3, r2
 8009466:	d038      	beq.n	80094da <u8g2_draw_string+0xaa>
      break;
    str++;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3301      	adds	r3, #1
 800946c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800946e:	8abb      	ldrh	r3, [r7, #20]
 8009470:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009474:	4293      	cmp	r3, r2
 8009476:	d0e9      	beq.n	800944c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8009478:	8abb      	ldrh	r3, [r7, #20]
 800947a:	7aba      	ldrb	r2, [r7, #10]
 800947c:	7af9      	ldrb	r1, [r7, #11]
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f7ff ff84 	bl	800938c <u8g2_DrawGlyph>
 8009484:	4603      	mov	r3, r0
 8009486:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800948e:	2b03      	cmp	r3, #3
 8009490:	d81e      	bhi.n	80094d0 <u8g2_draw_string+0xa0>
 8009492:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <u8g2_draw_string+0x68>)
 8009494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009498:	080094a9 	.word	0x080094a9
 800949c:	080094b3 	.word	0x080094b3
 80094a0:	080094bd 	.word	0x080094bd
 80094a4:	080094c7 	.word	0x080094c7
      {
	case 0:
	  x += delta;
 80094a8:	7afa      	ldrb	r2, [r7, #11]
 80094aa:	7cfb      	ldrb	r3, [r7, #19]
 80094ac:	4413      	add	r3, r2
 80094ae:	72fb      	strb	r3, [r7, #11]
	  break;
 80094b0:	e00e      	b.n	80094d0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80094b2:	7aba      	ldrb	r2, [r7, #10]
 80094b4:	7cfb      	ldrb	r3, [r7, #19]
 80094b6:	4413      	add	r3, r2
 80094b8:	72bb      	strb	r3, [r7, #10]
	  break;
 80094ba:	e009      	b.n	80094d0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80094bc:	7afa      	ldrb	r2, [r7, #11]
 80094be:	7cfb      	ldrb	r3, [r7, #19]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	72fb      	strb	r3, [r7, #11]
	  break;
 80094c4:	e004      	b.n	80094d0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80094c6:	7aba      	ldrb	r2, [r7, #10]
 80094c8:	7cfb      	ldrb	r3, [r7, #19]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	72bb      	strb	r3, [r7, #10]
	  break;
 80094ce:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 80094d0:	7dfa      	ldrb	r2, [r7, #23]
 80094d2:	7cfb      	ldrb	r3, [r7, #19]
 80094d4:	4413      	add	r3, r2
 80094d6:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80094d8:	e7b8      	b.n	800944c <u8g2_draw_string+0x1c>
      break;
 80094da:	bf00      	nop
    }
  }
  return sum;
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop

080094e8 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	607b      	str	r3, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	72fb      	strb	r3, [r7, #11]
 80094f6:	4613      	mov	r3, r2
 80094f8:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4a06      	ldr	r2, [pc, #24]	; (8009518 <u8g2_DrawUTF8+0x30>)
 80094fe:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8009500:	7aba      	ldrb	r2, [r7, #10]
 8009502:	7af9      	ldrb	r1, [r7, #11]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f7ff ff92 	bl	8009430 <u8g2_draw_string>
 800950c:	4603      	mov	r3, r0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	08009d6f 	.word	0x08009d6f

0800951c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009528:	2b00      	cmp	r3, #0
 800952a:	d05d      	beq.n	80095e8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800954a:	2b00      	cmp	r3, #0
 800954c:	d04d      	beq.n	80095ea <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009554:	2b01      	cmp	r3, #1
 8009556:	d11c      	bne.n	8009592 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8009564:	429a      	cmp	r2, r3
 8009566:	da05      	bge.n	8009574 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 8009580:	429a      	cmp	r2, r3
 8009582:	dd32      	ble.n	80095ea <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8009590:	e02b      	b.n	80095ea <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8009598:	461a      	mov	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80095a0:	4619      	mov	r1, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80095a8:	440b      	add	r3, r1
 80095aa:	429a      	cmp	r2, r3
 80095ac:	da0d      	bge.n	80095ca <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	4413      	add	r3, r2
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	b25a      	sxtb	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80095d6:	429a      	cmp	r2, r3
 80095d8:	dd07      	ble.n	80095ea <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80095e6:	e000      	b.n	80095ea <u8g2_UpdateRefHeight+0xce>
    return;
 80095e8:	bf00      	nop
  }  
}
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  return 0;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
	...

0800960c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a04      	ldr	r2, [pc, #16]	; (8009628 <u8g2_SetFontPosBaseline+0x1c>)
 8009618:	655a      	str	r2, [r3, #84]	; 0x54
}
 800961a:	bf00      	nop
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	080095f5 	.word	0x080095f5

0800962c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d00b      	beq.n	8009658 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3368      	adds	r3, #104	; 0x68
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff faa7 	bl	8008ba0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7ff ff62 	bl	800951c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8009658:	bf00      	nop
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4611      	mov	r1, r2
 800966c:	461a      	mov	r2, r3
 800966e:	460b      	mov	r3, r1
 8009670:	71fb      	strb	r3, [r7, #7]
 8009672:	4613      	mov	r3, r2
 8009674:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800967c:	7dfb      	ldrb	r3, [r7, #23]
 800967e:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	781a      	ldrb	r2, [r3, #0]
 8009684:	7dbb      	ldrb	r3, [r7, #22]
 8009686:	4413      	add	r3, r2
 8009688:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800968a:	7dfa      	ldrb	r2, [r7, #23]
 800968c:	7dbb      	ldrb	r3, [r7, #22]
 800968e:	429a      	cmp	r2, r3
 8009690:	d90b      	bls.n	80096aa <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8009692:	7dfa      	ldrb	r2, [r7, #23]
 8009694:	79bb      	ldrb	r3, [r7, #6]
 8009696:	429a      	cmp	r2, r3
 8009698:	d205      	bcs.n	80096a6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800969a:	79bb      	ldrb	r3, [r7, #6]
 800969c:	75bb      	strb	r3, [r7, #22]
      b--;
 800969e:	7dbb      	ldrb	r3, [r7, #22]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	75bb      	strb	r3, [r7, #22]
 80096a4:	e001      	b.n	80096aa <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80096aa:	7dfa      	ldrb	r2, [r7, #23]
 80096ac:	79bb      	ldrb	r3, [r7, #6]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d301      	bcc.n	80096b6 <u8g2_clip_intersection2+0x56>
    return 0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	e01c      	b.n	80096f0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80096b6:	7dba      	ldrb	r2, [r7, #22]
 80096b8:	79fb      	ldrb	r3, [r7, #7]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d801      	bhi.n	80096c2 <u8g2_clip_intersection2+0x62>
    return 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	e016      	b.n	80096f0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80096c2:	7dfa      	ldrb	r2, [r7, #23]
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d201      	bcs.n	80096ce <u8g2_clip_intersection2+0x6e>
    a = c;
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80096ce:	7dba      	ldrb	r2, [r7, #22]
 80096d0:	79bb      	ldrb	r3, [r7, #6]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d901      	bls.n	80096da <u8g2_clip_intersection2+0x7a>
    b = d;
 80096d6:	79bb      	ldrb	r3, [r7, #6]
 80096d8:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	7dfa      	ldrb	r2, [r7, #23]
 80096de:	701a      	strb	r2, [r3, #0]
  b -= a;
 80096e0:	7dba      	ldrb	r2, [r7, #22]
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	75bb      	strb	r3, [r7, #22]
  *len = b;
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	7dba      	ldrb	r2, [r7, #22]
 80096ec:	701a      	strb	r2, [r3, #0]
  return 1;
 80096ee:	2301      	movs	r3, #1
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80096fc:	b590      	push	{r4, r7, lr}
 80096fe:	b085      	sub	sp, #20
 8009700:	af02      	add	r7, sp, #8
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	4608      	mov	r0, r1
 8009706:	4611      	mov	r1, r2
 8009708:	461a      	mov	r2, r3
 800970a:	4603      	mov	r3, r0
 800970c:	70fb      	strb	r3, [r7, #3]
 800970e:	460b      	mov	r3, r1
 8009710:	70bb      	strb	r3, [r7, #2]
 8009712:	4613      	mov	r3, r2
 8009714:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800971c:	78ba      	ldrb	r2, [r7, #2]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8009726:	7878      	ldrb	r0, [r7, #1]
 8009728:	78ba      	ldrb	r2, [r7, #2]
 800972a:	78f9      	ldrb	r1, [r7, #3]
 800972c:	7e3b      	ldrb	r3, [r7, #24]
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	4603      	mov	r3, r0
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	47a0      	blx	r4
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	bd90      	pop	{r4, r7, pc}

0800973e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800973e:	b590      	push	{r4, r7, lr}
 8009740:	b085      	sub	sp, #20
 8009742:	af02      	add	r7, sp, #8
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	4608      	mov	r0, r1
 8009748:	4611      	mov	r1, r2
 800974a:	461a      	mov	r2, r3
 800974c:	4603      	mov	r3, r0
 800974e:	70fb      	strb	r3, [r7, #3]
 8009750:	460b      	mov	r3, r1
 8009752:	70bb      	strb	r3, [r7, #2]
 8009754:	4613      	mov	r3, r2
 8009756:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800975e:	2b00      	cmp	r3, #0
 8009760:	d06d      	beq.n	800983e <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8009762:	787b      	ldrb	r3, [r7, #1]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d06a      	beq.n	800983e <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8009768:	787b      	ldrb	r3, [r7, #1]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d918      	bls.n	80097a0 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800976e:	7e3b      	ldrb	r3, [r7, #24]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d109      	bne.n	8009788 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8009774:	78fa      	ldrb	r2, [r7, #3]
 8009776:	787b      	ldrb	r3, [r7, #1]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	b2db      	uxtb	r3, r3
 800977c:	70fb      	strb	r3, [r7, #3]
	  x++;
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	3301      	adds	r3, #1
 8009782:	b2db      	uxtb	r3, r3
 8009784:	70fb      	strb	r3, [r7, #3]
 8009786:	e00b      	b.n	80097a0 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8009788:	7e3b      	ldrb	r3, [r7, #24]
 800978a:	2b03      	cmp	r3, #3
 800978c:	d108      	bne.n	80097a0 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800978e:	78ba      	ldrb	r2, [r7, #2]
 8009790:	787b      	ldrb	r3, [r7, #1]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	b2db      	uxtb	r3, r3
 8009796:	70bb      	strb	r3, [r7, #2]
	  y++;
 8009798:	78bb      	ldrb	r3, [r7, #2]
 800979a:	3301      	adds	r3, #1
 800979c:	b2db      	uxtb	r3, r3
 800979e:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80097a0:	7e3b      	ldrb	r3, [r7, #24]
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80097a8:	7e3b      	ldrb	r3, [r7, #24]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d119      	bne.n	80097e2 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80097b4:	78bb      	ldrb	r3, [r7, #2]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d838      	bhi.n	800982c <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80097c0:	78bb      	ldrb	r3, [r7, #2]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d934      	bls.n	8009830 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80097d2:	1c79      	adds	r1, r7, #1
 80097d4:	1cf8      	adds	r0, r7, #3
 80097d6:	f7ff ff43 	bl	8009660 <u8g2_clip_intersection2>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d119      	bne.n	8009814 <u8g2_DrawHVLine+0xd6>
	  return;
 80097e0:	e02d      	b.n	800983e <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80097e8:	78fb      	ldrb	r3, [r7, #3]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d822      	bhi.n	8009834 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80097f4:	78fb      	ldrb	r3, [r7, #3]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d91e      	bls.n	8009838 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009806:	1c79      	adds	r1, r7, #1
 8009808:	1cb8      	adds	r0, r7, #2
 800980a:	f7ff ff29 	bl	8009660 <u8g2_clip_intersection2>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d013      	beq.n	800983c <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009818:	689c      	ldr	r4, [r3, #8]
 800981a:	78f9      	ldrb	r1, [r7, #3]
 800981c:	78ba      	ldrb	r2, [r7, #2]
 800981e:	7878      	ldrb	r0, [r7, #1]
 8009820:	7e3b      	ldrb	r3, [r7, #24]
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	4603      	mov	r3, r0
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	47a0      	blx	r4
 800982a:	e008      	b.n	800983e <u8g2_DrawHVLine+0x100>
	  return;
 800982c:	bf00      	nop
 800982e:	e006      	b.n	800983e <u8g2_DrawHVLine+0x100>
	  return;
 8009830:	bf00      	nop
 8009832:	e004      	b.n	800983e <u8g2_DrawHVLine+0x100>
	  return;
 8009834:	bf00      	nop
 8009836:	e002      	b.n	800983e <u8g2_DrawHVLine+0x100>
	  return;
 8009838:	bf00      	nop
 800983a:	e000      	b.n	800983e <u8g2_DrawHVLine+0x100>
	  return;
 800983c:	bf00      	nop
    }
}
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	bd90      	pop	{r4, r7, pc}

08009844 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	78fa      	ldrb	r2, [r7, #3]
 8009854:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	2b02      	cmp	r3, #2
 800985c:	d903      	bls.n	8009866 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8009872:	b490      	push	{r4, r7}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	4604      	mov	r4, r0
 800987a:	4608      	mov	r0, r1
 800987c:	4611      	mov	r1, r2
 800987e:	461a      	mov	r2, r3
 8009880:	4623      	mov	r3, r4
 8009882:	71fb      	strb	r3, [r7, #7]
 8009884:	4603      	mov	r3, r0
 8009886:	71bb      	strb	r3, [r7, #6]
 8009888:	460b      	mov	r3, r1
 800988a:	717b      	strb	r3, [r7, #5]
 800988c:	4613      	mov	r3, r2
 800988e:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8009890:	797a      	ldrb	r2, [r7, #5]
 8009892:	79bb      	ldrb	r3, [r7, #6]
 8009894:	429a      	cmp	r2, r3
 8009896:	d20d      	bcs.n	80098b4 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8009898:	793a      	ldrb	r2, [r7, #4]
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	429a      	cmp	r2, r3
 800989e:	d901      	bls.n	80098a4 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e014      	b.n	80098ce <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80098a4:	797a      	ldrb	r2, [r7, #5]
 80098a6:	793b      	ldrb	r3, [r7, #4]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d901      	bls.n	80098b0 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e00e      	b.n	80098ce <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	e00c      	b.n	80098ce <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80098b4:	793a      	ldrb	r2, [r7, #4]
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d907      	bls.n	80098cc <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80098bc:	797a      	ldrb	r2, [r7, #5]
 80098be:	793b      	ldrb	r3, [r7, #4]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d901      	bls.n	80098c8 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e002      	b.n	80098ce <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	e000      	b.n	80098ce <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80098cc:	2300      	movs	r3, #0
    }
  }
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bc90      	pop	{r4, r7}
 80098d6:	4770      	bx	lr

080098d8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	4608      	mov	r0, r1
 80098e2:	4611      	mov	r1, r2
 80098e4:	461a      	mov	r2, r3
 80098e6:	4603      	mov	r3, r0
 80098e8:	70fb      	strb	r3, [r7, #3]
 80098ea:	460b      	mov	r3, r1
 80098ec:	70bb      	strb	r3, [r7, #2]
 80098ee:	4613      	mov	r3, r2
 80098f0:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80098fe:	7c3b      	ldrb	r3, [r7, #16]
 8009900:	78ba      	ldrb	r2, [r7, #2]
 8009902:	f7ff ffb6 	bl	8009872 <u8g2_is_intersection_decision_tree>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <u8g2_IsIntersection+0x38>
    return 0; 
 800990c:	2300      	movs	r3, #0
 800990e:	e00a      	b.n	8009926 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800991c:	787b      	ldrb	r3, [r7, #1]
 800991e:	78fa      	ldrb	r2, [r7, #3]
 8009920:	f7ff ffa7 	bl	8009872 <u8g2_is_intersection_decision_tree>
 8009924:	4603      	mov	r3, r0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800992e:	b480      	push	{r7}
 8009930:	b087      	sub	sp, #28
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	4608      	mov	r0, r1
 8009938:	4611      	mov	r1, r2
 800993a:	461a      	mov	r2, r3
 800993c:	4603      	mov	r3, r0
 800993e:	70fb      	strb	r3, [r7, #3]
 8009940:	460b      	mov	r3, r1
 8009942:	70bb      	strb	r3, [r7, #2]
 8009944:	4613      	mov	r3, r2
 8009946:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8009948:	78bb      	ldrb	r3, [r7, #2]
 800994a:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800994c:	7cfb      	ldrb	r3, [r7, #19]
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8009954:	2301      	movs	r3, #1
 8009956:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8009958:	7c3a      	ldrb	r2, [r7, #16]
 800995a:	7cfb      	ldrb	r3, [r7, #19]
 800995c:	fa02 f303 	lsl.w	r3, r2, r3
 8009960:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009970:	2b01      	cmp	r3, #1
 8009972:	d801      	bhi.n	8009978 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8009974:	7c3b      	ldrb	r3, [r7, #16]
 8009976:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800997e:	2b01      	cmp	r3, #1
 8009980:	d001      	beq.n	8009986 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8009982:	7c3b      	ldrb	r3, [r7, #16]
 8009984:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8009986:	78bb      	ldrb	r3, [r7, #2]
 8009988:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800998a:	89fb      	ldrh	r3, [r7, #14]
 800998c:	f023 0307 	bic.w	r3, r3, #7
 8009990:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	7c1b      	ldrb	r3, [r3, #16]
 8009998:	b29b      	uxth	r3, r3
 800999a:	89fa      	ldrh	r2, [r7, #14]
 800999c:	fb12 f303 	smulbb	r3, r2, r3
 80099a0:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80099a8:	89fb      	ldrh	r3, [r7, #14]
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	4413      	add	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]
  ptr += x;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4413      	add	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80099b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d117      	bne.n	80099f0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	781a      	ldrb	r2, [r3, #0]
 80099c4:	7cbb      	ldrb	r3, [r7, #18]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	781a      	ldrb	r2, [r3, #0]
 80099d2:	7c7b      	ldrb	r3, [r7, #17]
 80099d4:	4053      	eors	r3, r2
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	701a      	strb	r2, [r3, #0]
	ptr++;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	3301      	adds	r3, #1
 80099e0:	617b      	str	r3, [r7, #20]
	len--;
 80099e2:	787b      	ldrb	r3, [r7, #1]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80099e8:	787b      	ldrb	r3, [r7, #1]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1e8      	bne.n	80099c0 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80099ee:	e039      	b.n	8009a64 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	781a      	ldrb	r2, [r3, #0]
 80099f4:	7cbb      	ldrb	r3, [r7, #18]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	7c7b      	ldrb	r3, [r7, #17]
 8009a04:	4053      	eors	r3, r2
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8009a0c:	7cfb      	ldrb	r3, [r7, #19]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8009a12:	7cfb      	ldrb	r3, [r7, #19]
 8009a14:	f003 0307 	and.w	r3, r3, #7
 8009a18:	74fb      	strb	r3, [r7, #19]
      len--;
 8009a1a:	787b      	ldrb	r3, [r7, #1]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8009a20:	7cfb      	ldrb	r3, [r7, #19]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d115      	bne.n	8009a52 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	4413      	add	r3, r2
 8009a32:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d801      	bhi.n	8009a42 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d008      	beq.n	8009a5e <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	747b      	strb	r3, [r7, #17]
 8009a50:	e005      	b.n	8009a5e <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8009a52:	7cbb      	ldrb	r3, [r7, #18]
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8009a58:	7c7b      	ldrb	r3, [r7, #17]
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8009a5e:	787b      	ldrb	r3, [r7, #1]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1c5      	bne.n	80099f0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8009a64:	bf00      	nop
 8009a66:	371c      	adds	r7, #28
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	22ff      	movs	r2, #255	; 0xff
 8009a8c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	22ff      	movs	r2, #255	; 0xff
 8009a94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	60b9      	str	r1, [r7, #8]
 8009ab4:	603b      	str	r3, [r7, #0]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	79fa      	ldrb	r2, [r7, #7]
 8009ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f7ff ffaf 	bl	8009a70 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f7ff fd7a 	bl	800960c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8009b20:	bf00      	nop
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b3c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
 8009b40:	00db      	lsls	r3, r3, #3
 8009b42:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	7bfa      	ldrb	r2, [r7, #15]
 8009b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	7c1b      	ldrb	r3, [r3, #16]
 8009b50:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	2b1f      	cmp	r3, #31
 8009b56:	d901      	bls.n	8009b5c <u8g2_update_dimension_common+0x34>
    t = 31;
 8009b58:	231f      	movs	r3, #31
 8009b5a:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	00db      	lsls	r3, r3, #3
 8009b60:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	7bfa      	ldrb	r2, [r7, #15]
 8009b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b70:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	00db      	lsls	r3, r3, #3
 8009b76:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7bfa      	ldrb	r2, [r7, #15]
 8009b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b86:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8009b90:	4413      	add	r3, r2
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	7c52      	ldrb	r2, [r2, #17]
 8009b96:	4293      	cmp	r3, r2
 8009b98:	dd06      	ble.n	8009ba8 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	7c5a      	ldrb	r2, [r3, #17]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	4413      	add	r3, r2
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	22f0      	movs	r2, #240	; 0xf0
 8009bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	8a9b      	ldrh	r3, [r3, #20]
 8009be4:	2bf0      	cmp	r3, #240	; 0xf0
 8009be6:	d805      	bhi.n	8009bf4 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	8a9b      	ldrh	r3, [r3, #20]
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	8adb      	ldrh	r3, [r3, #22]
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8009c00:	bf00      	nop
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af02      	add	r7, sp, #8
 8009c12:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	4603      	mov	r3, r0
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff fe51 	bl	80098d8 <u8g2_IsIntersection>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d104      	bne.n	8009c46 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8009c44:	e03b      	b.n	8009cbe <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d205      	bcs.n	8009c6a <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d905      	bls.n	8009c86 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d205      	bcs.n	8009ca2 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d905      	bls.n	8009cbe <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7ff ff2a 	bl	8009b28 <u8g2_update_dimension_common>
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7ff ff7b 	bl	8009c0c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8009d16:	bf00      	nop
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af02      	add	r7, sp, #8
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	4608      	mov	r0, r1
 8009d28:	4611      	mov	r1, r2
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	70fb      	strb	r3, [r7, #3]
 8009d30:	460b      	mov	r3, r1
 8009d32:	70bb      	strb	r3, [r7, #2]
 8009d34:	4613      	mov	r3, r2
 8009d36:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8009d38:	7878      	ldrb	r0, [r7, #1]
 8009d3a:	78ba      	ldrb	r2, [r7, #2]
 8009d3c:	78f9      	ldrb	r1, [r7, #3]
 8009d3e:	7c3b      	ldrb	r3, [r7, #16]
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	4603      	mov	r3, r0
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff fcd9 	bl	80096fc <u8g2_draw_hv_line_2dir>
}
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	460b      	mov	r3, r1
 8009d78:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <u8x8_utf8_next+0x18>
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	2b0a      	cmp	r3, #10
 8009d84:	d102      	bne.n	8009d8c <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8009d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d8a:	e06e      	b.n	8009e6a <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d145      	bne.n	8009e22 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8009d96:	78fb      	ldrb	r3, [r7, #3]
 8009d98:	2bfb      	cmp	r3, #251	; 0xfb
 8009d9a:	d908      	bls.n	8009dae <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2205      	movs	r2, #5
 8009da0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 1;
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	70fb      	strb	r3, [r7, #3]
 8009dac:	e032      	b.n	8009e14 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	2bf7      	cmp	r3, #247	; 0xf7
 8009db2:	d908      	bls.n	8009dc6 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2204      	movs	r2, #4
 8009db8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 3;
 8009dbc:	78fb      	ldrb	r3, [r7, #3]
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	70fb      	strb	r3, [r7, #3]
 8009dc4:	e026      	b.n	8009e14 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8009dc6:	78fb      	ldrb	r3, [r7, #3]
 8009dc8:	2bef      	cmp	r3, #239	; 0xef
 8009dca:	d908      	bls.n	8009dde <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2203      	movs	r2, #3
 8009dd0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 7;      
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	f003 0307 	and.w	r3, r3, #7
 8009dda:	70fb      	strb	r3, [r7, #3]
 8009ddc:	e01a      	b.n	8009e14 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8009dde:	78fb      	ldrb	r3, [r7, #3]
 8009de0:	2bdf      	cmp	r3, #223	; 0xdf
 8009de2:	d908      	bls.n	8009df6 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2202      	movs	r2, #2
 8009de8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 15;
 8009dec:	78fb      	ldrb	r3, [r7, #3]
 8009dee:	f003 030f 	and.w	r3, r3, #15
 8009df2:	70fb      	strb	r3, [r7, #3]
 8009df4:	e00e      	b.n	8009e14 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	2bbf      	cmp	r3, #191	; 0xbf
 8009dfa:	d908      	bls.n	8009e0e <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 0x01f;
 8009e04:	78fb      	ldrb	r3, [r7, #3]
 8009e06:	f003 031f 	and.w	r3, r3, #31
 8009e0a:	70fb      	strb	r3, [r7, #3]
 8009e0c:	e002      	b.n	8009e14 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	e02a      	b.n	8009e6a <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8009e1c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009e20:	e023      	b.n	8009e6a <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	8c1b      	ldrh	r3, [r3, #32]
 8009e36:	019b      	lsls	r3, r3, #6
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8009e3e:	78fb      	ldrb	r3, [r7, #3]
 8009e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e44:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8c1a      	ldrh	r2, [r3, #32]
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8009e60:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009e64:	e001      	b.n	8009e6a <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	8c1b      	ldrh	r3, [r3, #32]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <u8x8_byte_SetDC>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8009e76:	b590      	push	{r4, r7, lr}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691c      	ldr	r4, [r3, #16]
 8009e86:	78fa      	ldrb	r2, [r7, #3]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	2120      	movs	r1, #32
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	47a0      	blx	r4
 8009e90:	4603      	mov	r3, r0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd90      	pop	{r4, r7, pc}

08009e9a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8009e9a:	b590      	push	{r4, r7, lr}
 8009e9c:	b085      	sub	sp, #20
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	607a      	str	r2, [r7, #4]
 8009ea6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	691c      	ldr	r4, [r3, #16]
 8009eac:	7afa      	ldrb	r2, [r7, #11]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2117      	movs	r1, #23
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	47a0      	blx	r4
 8009eb6:	4603      	mov	r3, r0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd90      	pop	{r4, r7, pc}

08009ec0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8009ecc:	1cfb      	adds	r3, r7, #3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff ffe1 	bl	8009e9a <u8x8_byte_SendBytes>
 8009ed8:	4603      	mov	r3, r0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <u8x8_cad_SendCmd>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8009ee2:	b590      	push	{r4, r7, lr}
 8009ee4:	b083      	sub	sp, #12
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	460b      	mov	r3, r1
 8009eec:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68dc      	ldr	r4, [r3, #12]
 8009ef2:	78fa      	ldrb	r2, [r7, #3]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	2115      	movs	r1, #21
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	47a0      	blx	r4
 8009efc:	4603      	mov	r3, r0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd90      	pop	{r4, r7, pc}

08009f06 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8009f06:	b590      	push	{r4, r7, lr}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68dc      	ldr	r4, [r3, #12]
 8009f16:	78fa      	ldrb	r2, [r7, #3]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	2116      	movs	r1, #22
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	47a0      	blx	r4
 8009f20:	4603      	mov	r3, r0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd90      	pop	{r4, r7, pc}

08009f2a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8009f2a:	b590      	push	{r4, r7, lr}
 8009f2c:	b085      	sub	sp, #20
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	460b      	mov	r3, r1
 8009f34:	607a      	str	r2, [r7, #4]
 8009f36:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	68dc      	ldr	r4, [r3, #12]
 8009f3c:	7afa      	ldrb	r2, [r7, #11]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2117      	movs	r1, #23
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	47a0      	blx	r4
 8009f46:	4603      	mov	r3, r0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd90      	pop	{r4, r7, pc}

08009f50 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8009f50:	b590      	push	{r4, r7, lr}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68dc      	ldr	r4, [r3, #12]
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2118      	movs	r1, #24
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	47a0      	blx	r4
 8009f66:	4603      	mov	r3, r0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd90      	pop	{r4, r7, pc}

08009f70 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8009f70:	b590      	push	{r4, r7, lr}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68dc      	ldr	r4, [r3, #12]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2119      	movs	r1, #25
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	47a0      	blx	r4
 8009f86:	4603      	mov	r3, r0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd90      	pop	{r4, r7, pc}

08009f90 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8009f90:	b590      	push	{r4, r7, lr}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	73fb      	strb	r3, [r7, #15]
    data++;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	2b17      	cmp	r3, #23
 8009faa:	d017      	beq.n	8009fdc <u8x8_cad_SendSequence+0x4c>
 8009fac:	2b17      	cmp	r3, #23
 8009fae:	dc02      	bgt.n	8009fb6 <u8x8_cad_SendSequence+0x26>
 8009fb0:	2b15      	cmp	r3, #21
 8009fb2:	db37      	blt.n	800a024 <u8x8_cad_SendSequence+0x94>
 8009fb4:	e004      	b.n	8009fc0 <u8x8_cad_SendSequence+0x30>
 8009fb6:	2b19      	cmp	r3, #25
 8009fb8:	dd1e      	ble.n	8009ff8 <u8x8_cad_SendSequence+0x68>
 8009fba:	2bfe      	cmp	r3, #254	; 0xfe
 8009fbc:	d024      	beq.n	800a008 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8009fbe:	e031      	b.n	800a024 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68dc      	ldr	r4, [r3, #12]
 8009fca:	7bba      	ldrb	r2, [r7, #14]
 8009fcc:	7bf9      	ldrb	r1, [r7, #15]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	47a0      	blx	r4
	  data++;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	603b      	str	r3, [r7, #0]
	  break;
 8009fda:	e022      	b.n	800a022 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8009fe2:	f107 030e 	add.w	r3, r7, #14
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	2101      	movs	r1, #1
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7ff ff9d 	bl	8009f2a <u8x8_cad_SendData>
	  data++;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	603b      	str	r3, [r7, #0]
	  break;
 8009ff6:	e014      	b.n	800a022 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68dc      	ldr	r4, [r3, #12]
 8009ffc:	7bf9      	ldrb	r1, [r7, #15]
 8009ffe:	2300      	movs	r3, #0
 800a000:	2200      	movs	r2, #0
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	47a0      	blx	r4
	  break;
 800a006:	e00c      	b.n	800a022 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	461a      	mov	r2, r3
 800a012:	2129      	movs	r1, #41	; 0x29
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fa34 	bl	800a482 <u8x8_gpio_call>
	  data++;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	3301      	adds	r3, #1
 800a01e:	603b      	str	r3, [r7, #0]
	  break;
 800a020:	bf00      	nop
    cmd = *data;
 800a022:	e7ba      	b.n	8009f9a <u8x8_cad_SendSequence+0xa>
	return;
 800a024:	bf00      	nop
    }
  }
}
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd90      	pop	{r4, r7, pc}

0800a02c <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800a02c:	b590      	push	{r4, r7, lr}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	607b      	str	r3, [r7, #4]
 800a036:	460b      	mov	r3, r1
 800a038:	72fb      	strb	r3, [r7, #11]
 800a03a:	4613      	mov	r3, r2
 800a03c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800a03e:	7afb      	ldrb	r3, [r7, #11]
 800a040:	3b14      	subs	r3, #20
 800a042:	2b05      	cmp	r3, #5
 800a044:	d82f      	bhi.n	800a0a6 <u8x8_cad_011+0x7a>
 800a046:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <u8x8_cad_011+0x20>)
 800a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04c:	0800a095 	.word	0x0800a095
 800a050:	0800a065 	.word	0x0800a065
 800a054:	0800a079 	.word	0x0800a079
 800a058:	0800a08d 	.word	0x0800a08d
 800a05c:	0800a095 	.word	0x0800a095
 800a060:	0800a095 	.word	0x0800a095
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800a064:	2100      	movs	r1, #0
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7ff ff05 	bl	8009e76 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800a06c:	7abb      	ldrb	r3, [r7, #10]
 800a06e:	4619      	mov	r1, r3
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7ff ff25 	bl	8009ec0 <u8x8_byte_SendByte>
      break;
 800a076:	e018      	b.n	800a0aa <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 800a078:	2101      	movs	r1, #1
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff fefb 	bl	8009e76 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800a080:	7abb      	ldrb	r3, [r7, #10]
 800a082:	4619      	mov	r1, r3
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f7ff ff1b 	bl	8009ec0 <u8x8_byte_SendByte>
      break;
 800a08a:	e00e      	b.n	800a0aa <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800a08c:	2101      	movs	r1, #1
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff fef1 	bl	8009e76 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	691c      	ldr	r4, [r3, #16]
 800a098:	7aba      	ldrb	r2, [r7, #10]
 800a09a:	7af9      	ldrb	r1, [r7, #11]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	47a0      	blx	r4
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	e002      	b.n	800a0ac <u8x8_cad_011+0x80>
    default:
      return 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	e000      	b.n	800a0ac <u8x8_cad_011+0x80>
  }
  return 1;
 800a0aa:	2301      	movs	r3, #1
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd90      	pop	{r4, r7, pc}

0800a0b4 <u8x8_ssd1322_8to32>:
*/

static uint8_t u8x8_ssd1322_to32_dest_buf[32];

static uint8_t *u8x8_ssd1322_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint8_t v;
  uint8_t a,b;
  uint8_t i, j;
  uint8_t *dest;
  
  for( j = 0; j < 4; j++ )
 800a0be:	2300      	movs	r3, #0
 800a0c0:	74fb      	strb	r3, [r7, #19]
 800a0c2:	e03d      	b.n	800a140 <u8x8_ssd1322_8to32+0x8c>
  {
    dest = u8x8_ssd1322_to32_dest_buf;
 800a0c4:	4b23      	ldr	r3, [pc, #140]	; (800a154 <u8x8_ssd1322_8to32+0xa0>)
 800a0c6:	60fb      	str	r3, [r7, #12]
    dest += j;
 800a0c8:	7cfb      	ldrb	r3, [r7, #19]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
    a =*ptr;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	75bb      	strb	r3, [r7, #22]
    ptr++;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	603b      	str	r3, [r7, #0]
    b = *ptr;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	757b      	strb	r3, [r7, #21]
    ptr++;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 8; i++ )
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	753b      	strb	r3, [r7, #20]
 800a0ec:	e022      	b.n	800a134 <u8x8_ssd1322_8to32+0x80>
    {
      v = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	75fb      	strb	r3, [r7, #23]
      if ( a&1 ) v |= 0xf0;
 800a0f2:	7dbb      	ldrb	r3, [r7, #22]
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <u8x8_ssd1322_8to32+0x50>
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	f063 030f 	orn	r3, r3, #15
 800a102:	75fb      	strb	r3, [r7, #23]
      if ( b&1 ) v |= 0x0f;
 800a104:	7d7b      	ldrb	r3, [r7, #21]
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d003      	beq.n	800a116 <u8x8_ssd1322_8to32+0x62>
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	f043 030f 	orr.w	r3, r3, #15
 800a114:	75fb      	strb	r3, [r7, #23]
      *dest = v;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	7dfa      	ldrb	r2, [r7, #23]
 800a11a:	701a      	strb	r2, [r3, #0]
      dest+=4;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	3304      	adds	r3, #4
 800a120:	60fb      	str	r3, [r7, #12]
      a >>= 1;
 800a122:	7dbb      	ldrb	r3, [r7, #22]
 800a124:	085b      	lsrs	r3, r3, #1
 800a126:	75bb      	strb	r3, [r7, #22]
      b >>= 1;
 800a128:	7d7b      	ldrb	r3, [r7, #21]
 800a12a:	085b      	lsrs	r3, r3, #1
 800a12c:	757b      	strb	r3, [r7, #21]
    for( i = 0; i < 8; i++ )
 800a12e:	7d3b      	ldrb	r3, [r7, #20]
 800a130:	3301      	adds	r3, #1
 800a132:	753b      	strb	r3, [r7, #20]
 800a134:	7d3b      	ldrb	r3, [r7, #20]
 800a136:	2b07      	cmp	r3, #7
 800a138:	d9d9      	bls.n	800a0ee <u8x8_ssd1322_8to32+0x3a>
  for( j = 0; j < 4; j++ )
 800a13a:	7cfb      	ldrb	r3, [r7, #19]
 800a13c:	3301      	adds	r3, #1
 800a13e:	74fb      	strb	r3, [r7, #19]
 800a140:	7cfb      	ldrb	r3, [r7, #19]
 800a142:	2b03      	cmp	r3, #3
 800a144:	d9be      	bls.n	800a0c4 <u8x8_ssd1322_8to32+0x10>
    }
  }
  
  return u8x8_ssd1322_to32_dest_buf;
 800a146:	4b03      	ldr	r3, [pc, #12]	; (800a154 <u8x8_ssd1322_8to32+0xa0>)
}
 800a148:	4618      	mov	r0, r3
 800a14a:	371c      	adds	r7, #28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	20001a8c 	.word	0x20001a8c

0800a158 <u8x8_d_ssd1322_common>:
  return u8x8_ssd1322_to32_dest_buf;
}


uint8_t u8x8_d_ssd1322_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	607b      	str	r3, [r7, #4]
 800a162:	460b      	mov	r3, r1
 800a164:	72fb      	strb	r3, [r7, #11]
 800a166:	4613      	mov	r3, r2
 800a168:	72bb      	strb	r3, [r7, #10]
  uint8_t x; 
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	2b0e      	cmp	r3, #14
 800a16e:	d010      	beq.n	800a192 <u8x8_d_ssd1322_common+0x3a>
 800a170:	2b0f      	cmp	r3, #15
 800a172:	d01e      	beq.n	800a1b2 <u8x8_d_ssd1322_common+0x5a>
 800a174:	2b0b      	cmp	r3, #11
 800a176:	d17b      	bne.n	800a270 <u8x8_d_ssd1322_common+0x118>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800a178:	7abb      	ldrb	r3, [r7, #10]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d104      	bne.n	800a188 <u8x8_d_ssd1322_common+0x30>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave0_seq);
 800a17e:	4940      	ldr	r1, [pc, #256]	; (800a280 <u8x8_d_ssd1322_common+0x128>)
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7ff ff05 	bl	8009f90 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
      break;
 800a186:	e075      	b.n	800a274 <u8x8_d_ssd1322_common+0x11c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
 800a188:	493e      	ldr	r1, [pc, #248]	; (800a284 <u8x8_d_ssd1322_common+0x12c>)
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7ff ff00 	bl	8009f90 <u8x8_cad_SendSequence>
      break;
 800a190:	e070      	b.n	800a274 <u8x8_d_ssd1322_common+0x11c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f7ff fedc 	bl	8009f50 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x0C1 );
 800a198:	21c1      	movs	r1, #193	; 0xc1
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f7ff fea1 	bl	8009ee2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1322 has range from 0 to 255 */
 800a1a0:	7abb      	ldrb	r3, [r7, #10]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f7ff feae 	bl	8009f06 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7ff fee0 	bl	8009f70 <u8x8_cad_EndTransfer>
      break;
 800a1b0:	e060      	b.n	800a274 <u8x8_d_ssd1322_common+0x11c>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f7ff fecc 	bl	8009f50 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	795b      	ldrb	r3, [r3, #5]
 800a1bc:	77fb      	strb	r3, [r7, #31]
      x *= 2;		// only every 4th col can be addressed
 800a1be:	7ffb      	ldrb	r3, [r7, #31]
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	77fb      	strb	r3, [r7, #31]
      x += u8x8->x_offset;		
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a1ca:	7ffb      	ldrb	r3, [r7, #31]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	77fb      	strb	r3, [r7, #31]
    
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	799b      	ldrb	r3, [r3, #6]
 800a1d4:	75fb      	strb	r3, [r7, #23]
      y *= 8;
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	00db      	lsls	r3, r3, #3
 800a1da:	75fb      	strb	r3, [r7, #23]
    
      
      u8x8_cad_SendCmd(u8x8, 0x075 );	/* set row address, moved out of the loop (issue 302) */
 800a1dc:	2175      	movs	r1, #117	; 0x75
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7ff fe7f 	bl	8009ee2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, y);
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7ff fe8c 	bl	8009f06 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, y+7);
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff fe85 	bl	8009f06 <u8x8_cad_SendArg>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	791b      	ldrb	r3, [r3, #4]
 800a200:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	61bb      	str	r3, [r7, #24]

	do
	{
	  u8x8_cad_SendCmd(u8x8, 0x015 );	/* set column address */
 800a208:	2115      	movs	r1, #21
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff fe69 	bl	8009ee2 <u8x8_cad_SendCmd>
	  u8x8_cad_SendArg(u8x8, x );	/* start */
 800a210:	7ffb      	ldrb	r3, [r7, #31]
 800a212:	4619      	mov	r1, r3
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f7ff fe76 	bl	8009f06 <u8x8_cad_SendArg>
	  u8x8_cad_SendArg(u8x8, x+1 );	/* end */
 800a21a:	7ffb      	ldrb	r3, [r7, #31]
 800a21c:	3301      	adds	r3, #1
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	4619      	mov	r1, r3
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f7ff fe6f 	bl	8009f06 <u8x8_cad_SendArg>

	  u8x8_cad_SendCmd(u8x8, 0x05c );	/* write to ram */
 800a228:	215c      	movs	r1, #92	; 0x5c
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7ff fe59 	bl	8009ee2 <u8x8_cad_SendCmd>
	  
	  u8x8_cad_SendData(u8x8, 32, u8x8_ssd1322_8to32(u8x8, ptr));
 800a230:	69b9      	ldr	r1, [r7, #24]
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7ff ff3e 	bl	800a0b4 <u8x8_ssd1322_8to32>
 800a238:	4603      	mov	r3, r0
 800a23a:	461a      	mov	r2, r3
 800a23c:	2120      	movs	r1, #32
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f7ff fe73 	bl	8009f2a <u8x8_cad_SendData>
	  
	  ptr += 8;
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	3308      	adds	r3, #8
 800a248:	61bb      	str	r3, [r7, #24]
	  x += 2;
 800a24a:	7ffb      	ldrb	r3, [r7, #31]
 800a24c:	3302      	adds	r3, #2
 800a24e:	77fb      	strb	r3, [r7, #31]
	  c--;
 800a250:	7fbb      	ldrb	r3, [r7, #30]
 800a252:	3b01      	subs	r3, #1
 800a254:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );
 800a256:	7fbb      	ldrb	r3, [r7, #30]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1d5      	bne.n	800a208 <u8x8_d_ssd1322_common+0xb0>
	
	//x += 2;
	arg_int--;
 800a25c:	7abb      	ldrb	r3, [r7, #10]
 800a25e:	3b01      	subs	r3, #1
 800a260:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800a262:	7abb      	ldrb	r3, [r7, #10]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1c9      	bne.n	800a1fc <u8x8_d_ssd1322_common+0xa4>
      
      u8x8_cad_EndTransfer(u8x8);
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7ff fe81 	bl	8009f70 <u8x8_cad_EndTransfer>
      break;
 800a26e:	e001      	b.n	800a274 <u8x8_d_ssd1322_common+0x11c>
    default:
      return 0;
 800a270:	2300      	movs	r3, #0
 800a272:	e000      	b.n	800a276 <u8x8_d_ssd1322_common+0x11e>
  }
  return 1;
 800a274:	2301      	movs	r3, #1
}
 800a276:	4618      	mov	r0, r3
 800a278:	3720      	adds	r7, #32
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	08012a04 	.word	0x08012a04
 800a284:	08012a0c 	.word	0x08012a0c

0800a288 <u8x8_d_ssd1322_nhd_256x64>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1322_nhd_256x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	607b      	str	r3, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	72fb      	strb	r3, [r7, #11]
 800a296:	4613      	mov	r3, r2
 800a298:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800a29a:	7afb      	ldrb	r3, [r7, #11]
 800a29c:	2b0a      	cmp	r3, #10
 800a29e:	d008      	beq.n	800a2b2 <u8x8_d_ssd1322_nhd_256x64+0x2a>
 800a2a0:	2b0d      	cmp	r3, #13
 800a2a2:	d00e      	beq.n	800a2c2 <u8x8_d_ssd1322_nhd_256x64+0x3a>
 800a2a4:	2b09      	cmp	r3, #9
 800a2a6:	d125      	bne.n	800a2f4 <u8x8_d_ssd1322_nhd_256x64+0x6c>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1322_256x64_display_info);
 800a2a8:	4919      	ldr	r1, [pc, #100]	; (800a310 <u8x8_d_ssd1322_nhd_256x64+0x88>)
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 f838 	bl	800a320 <u8x8_d_helper_display_setup_memory>
      break;
 800a2b0:	e028      	b.n	800a304 <u8x8_d_ssd1322_nhd_256x64+0x7c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 f848 	bl	800a348 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
 800a2b8:	4916      	ldr	r1, [pc, #88]	; (800a314 <u8x8_d_ssd1322_nhd_256x64+0x8c>)
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f7ff fe68 	bl	8009f90 <u8x8_cad_SendSequence>
      break;
 800a2c0:	e020      	b.n	800a304 <u8x8_d_ssd1322_nhd_256x64+0x7c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800a2c2:	7abb      	ldrb	r3, [r7, #10]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <u8x8_d_ssd1322_nhd_256x64+0x56>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip0_seq);
 800a2c8:	4913      	ldr	r1, [pc, #76]	; (800a318 <u8x8_d_ssd1322_nhd_256x64+0x90>)
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f7ff fe60 	bl	8009f90 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	7c9a      	ldrb	r2, [r3, #18]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800a2dc:	e012      	b.n	800a304 <u8x8_d_ssd1322_nhd_256x64+0x7c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
 800a2de:	490f      	ldr	r1, [pc, #60]	; (800a31c <u8x8_d_ssd1322_nhd_256x64+0x94>)
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f7ff fe55 	bl	8009f90 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	7cda      	ldrb	r2, [r3, #19]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800a2f2:	e007      	b.n	800a304 <u8x8_d_ssd1322_nhd_256x64+0x7c>
    
    default:
      return u8x8_d_ssd1322_common(u8x8, msg, arg_int, arg_ptr);
 800a2f4:	7aba      	ldrb	r2, [r7, #10]
 800a2f6:	7af9      	ldrb	r1, [r7, #11]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f7ff ff2c 	bl	800a158 <u8x8_d_ssd1322_common>
 800a300:	4603      	mov	r3, r0
 800a302:	e000      	b.n	800a306 <u8x8_d_ssd1322_nhd_256x64+0x7e>
  }
  return 1;
 800a304:	2301      	movs	r3, #1
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	08012a2c 	.word	0x08012a2c
 800a314:	08012a44 	.word	0x08012a44
 800a318:	08012a14 	.word	0x08012a14
 800a31c:	08012a20 	.word	0x08012a20

0800a320 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	7c9a      	ldrb	r2, [r3, #18]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800a348:	b590      	push	{r4, r7, lr}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	695c      	ldr	r4, [r3, #20]
 800a354:	2300      	movs	r3, #0
 800a356:	2200      	movs	r2, #0
 800a358:	2128      	movs	r1, #40	; 0x28
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68dc      	ldr	r4, [r3, #12]
 800a362:	2300      	movs	r3, #0
 800a364:	2200      	movs	r2, #0
 800a366:	2114      	movs	r1, #20
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800a36c:	2201      	movs	r2, #1
 800a36e:	214b      	movs	r1, #75	; 0x4b
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f886 	bl	800a482 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	791b      	ldrb	r3, [r3, #4]
 800a37c:	461a      	mov	r2, r3
 800a37e:	2129      	movs	r1, #41	; 0x29
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f87e 	bl	800a482 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800a386:	2200      	movs	r2, #0
 800a388:	214b      	movs	r1, #75	; 0x4b
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f879 	bl	800a482 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	791b      	ldrb	r3, [r3, #4]
 800a396:	461a      	mov	r2, r3
 800a398:	2129      	movs	r1, #41	; 0x29
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f871 	bl	800a482 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	214b      	movs	r1, #75	; 0x4b
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f86c 	bl	800a482 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	795b      	ldrb	r3, [r3, #5]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	2129      	movs	r1, #41	; 0x29
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f864 	bl	800a482 <u8x8_gpio_call>
}    
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd90      	pop	{r4, r7, pc}

0800a3c2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800a3c2:	b590      	push	{r4, r7, lr}
 800a3c4:	b085      	sub	sp, #20
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	70fb      	strb	r3, [r7, #3]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70bb      	strb	r3, [r7, #2]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800a3dc:	78fb      	ldrb	r3, [r7, #3]
 800a3de:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800a3e0:	78bb      	ldrb	r3, [r7, #2]
 800a3e2:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800a3e4:	787b      	ldrb	r3, [r7, #1]
 800a3e6:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689c      	ldr	r4, [r3, #8]
 800a3f0:	f107 0308 	add.w	r3, r7, #8
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	210f      	movs	r1, #15
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	47a0      	blx	r4
 800a3fc:	4603      	mov	r3, r0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	bd90      	pop	{r4, r7, pc}

0800a406 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800a406:	b590      	push	{r4, r7, lr}
 800a408:	b083      	sub	sp, #12
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	689c      	ldr	r4, [r3, #8]
 800a412:	2300      	movs	r3, #0
 800a414:	2200      	movs	r2, #0
 800a416:	2109      	movs	r1, #9
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	47a0      	blx	r4
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	bd90      	pop	{r4, r7, pc}

0800a424 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800a424:	b590      	push	{r4, r7, lr}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	689c      	ldr	r4, [r3, #8]
 800a430:	2300      	movs	r3, #0
 800a432:	2200      	movs	r2, #0
 800a434:	210a      	movs	r1, #10
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	47a0      	blx	r4
}
 800a43a:	bf00      	nop
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd90      	pop	{r4, r7, pc}

0800a442 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800a442:	b590      	push	{r4, r7, lr}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	460b      	mov	r3, r1
 800a44c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689c      	ldr	r4, [r3, #8]
 800a452:	78fa      	ldrb	r2, [r7, #3]
 800a454:	2300      	movs	r3, #0
 800a456:	210b      	movs	r1, #11
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	47a0      	blx	r4
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	bd90      	pop	{r4, r7, pc}

0800a464 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800a464:	b590      	push	{r4, r7, lr}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	689c      	ldr	r4, [r3, #8]
 800a470:	2300      	movs	r3, #0
 800a472:	2200      	movs	r2, #0
 800a474:	2110      	movs	r1, #16
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	47a0      	blx	r4
}
 800a47a:	bf00      	nop
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd90      	pop	{r4, r7, pc}

0800a482 <u8x8_gpio_call>:

#include "../u8g2/u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800a482:	b590      	push	{r4, r7, lr}
 800a484:	b083      	sub	sp, #12
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	460b      	mov	r3, r1
 800a48c:	70fb      	strb	r3, [r7, #3]
 800a48e:	4613      	mov	r3, r2
 800a490:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	695c      	ldr	r4, [r3, #20]
 800a496:	78ba      	ldrb	r2, [r7, #2]
 800a498:	78f9      	ldrb	r1, [r7, #3]
 800a49a:	2300      	movs	r3, #0
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	47a0      	blx	r4
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd90      	pop	{r4, r7, pc}

0800a4a8 <u8x8_dummy_cb>:

#include "../u8g2/u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	607b      	str	r3, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	72fb      	strb	r3, [r7, #11]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a12      	ldr	r2, [pc, #72]	; (800a524 <u8x8_SetupDefaults+0x5c>)
 800a4da:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a11      	ldr	r2, [pc, #68]	; (800a524 <u8x8_SetupDefaults+0x5c>)
 800a4e0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a0f      	ldr	r2, [pc, #60]	; (800a524 <u8x8_SetupDefaults+0x5c>)
 800a4e6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a0e      	ldr	r2, [pc, #56]	; (800a524 <u8x8_SetupDefaults+0x5c>)
 800a4ec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->i2c_address = 255;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	22ff      	movs	r2, #255	; 0xff
 800a50a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	22ff      	movs	r2, #255	; 0xff
 800a512:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	0800a4a9 	.word	0x0800a4a9

0800a528 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff ffc6 	bl	800a4c8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	69ba      	ldr	r2, [r7, #24]
 800a552:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7ff ff56 	bl	800a406 <u8x8_SetupMemory>
}
 800a55a:	bf00      	nop
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a562:	b480      	push	{r7}
 800a564:	b085      	sub	sp, #20
 800a566:	af00      	add	r7, sp, #0
 800a568:	4603      	mov	r3, r0
 800a56a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a56c:	2300      	movs	r3, #0
 800a56e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a574:	2b84      	cmp	r3, #132	; 0x84
 800a576:	d005      	beq.n	800a584 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a578:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4413      	add	r3, r2
 800a580:	3303      	adds	r3, #3
 800a582:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a584:	68fb      	ldr	r3, [r7, #12]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a596:	f000 ffa5 	bl	800b4e4 <vTaskStartScheduler>
  
  return osOK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5a2:	b089      	sub	sp, #36	; 0x24
 800a5a4:	af04      	add	r7, sp, #16
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d020      	beq.n	800a5f4 <osThreadCreate+0x54>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01c      	beq.n	800a5f4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685c      	ldr	r4, [r3, #4]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681d      	ldr	r5, [r3, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	691e      	ldr	r6, [r3, #16]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7ff ffc8 	bl	800a562 <makeFreeRtosPriority>
 800a5d2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5dc:	9202      	str	r2, [sp, #8]
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	9100      	str	r1, [sp, #0]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	4632      	mov	r2, r6
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f000 fd33 	bl	800b054 <xTaskCreateStatic>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	e01c      	b.n	800a62e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685c      	ldr	r4, [r3, #4]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a600:	b29e      	uxth	r6, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff ffaa 	bl	800a562 <makeFreeRtosPriority>
 800a60e:	4602      	mov	r2, r0
 800a610:	f107 030c 	add.w	r3, r7, #12
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	9200      	str	r2, [sp, #0]
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	4632      	mov	r2, r6
 800a61c:	4629      	mov	r1, r5
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 fd71 	bl	800b106 <xTaskCreate>
 800a624:	4603      	mov	r3, r0
 800a626:	2b01      	cmp	r3, #1
 800a628:	d001      	beq.n	800a62e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a62a:	2300      	movs	r3, #0
 800a62c:	e000      	b.n	800a630 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a62e:	68fb      	ldr	r3, [r7, #12]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3714      	adds	r7, #20
 800a634:	46bd      	mov	sp, r7
 800a636:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a638 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <osDelay+0x16>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	e000      	b.n	800a650 <osDelay+0x18>
 800a64e:	2301      	movs	r3, #1
 800a650:	4618      	mov	r0, r3
 800a652:	f000 ff13 	bl	800b47c <vTaskDelay>
  
  return osOK;
 800a656:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a660:	b590      	push	{r4, r7, lr}
 800a662:	b085      	sub	sp, #20
 800a664:	af02      	add	r7, sp, #8
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d012      	beq.n	800a698 <osMessageCreate+0x38>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00e      	beq.n	800a698 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6859      	ldr	r1, [r3, #4]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689a      	ldr	r2, [r3, #8]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68dc      	ldr	r4, [r3, #12]
 800a68a:	2300      	movs	r3, #0
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	4623      	mov	r3, r4
 800a690:	f000 f92c 	bl	800a8ec <xQueueGenericCreateStatic>
 800a694:	4603      	mov	r3, r0
 800a696:	e008      	b.n	800a6aa <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	f000 f994 	bl	800a9d0 <xQueueGenericCreate>
 800a6a8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd90      	pop	{r4, r7, pc}

0800a6b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f103 0208 	add.w	r2, r3, #8
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f103 0208 	add.w	r2, r3, #8
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f103 0208 	add.w	r2, r3, #8
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6e6:	bf00      	nop
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	683a      	ldr	r2, [r7, #0]
 800a736:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	601a      	str	r2, [r3, #0]
}
 800a748:	bf00      	nop
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d103      	bne.n	800a774 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	60fb      	str	r3, [r7, #12]
 800a772:	e00c      	b.n	800a78e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3308      	adds	r3, #8
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	e002      	b.n	800a782 <vListInsert+0x2e>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d2f6      	bcs.n	800a77c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
}
 800a7ba:	bf00      	nop
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b085      	sub	sp, #20
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	6892      	ldr	r2, [r2, #8]
 800a7dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	6852      	ldr	r2, [r2, #4]
 800a7e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d103      	bne.n	800a7fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	689a      	ldr	r2, [r3, #8]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	1e5a      	subs	r2, r3, #1
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
	...

0800a81c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d109      	bne.n	800a844 <xQueueGenericReset+0x28>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	60bb      	str	r3, [r7, #8]
 800a842:	e7fe      	b.n	800a842 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a844:	f001 fc7a 	bl	800c13c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a850:	68f9      	ldr	r1, [r7, #12]
 800a852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a854:	fb01 f303 	mul.w	r3, r1, r3
 800a858:	441a      	add	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a874:	3b01      	subs	r3, #1
 800a876:	68f9      	ldr	r1, [r7, #12]
 800a878:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a87a:	fb01 f303 	mul.w	r3, r1, r3
 800a87e:	441a      	add	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	22ff      	movs	r2, #255	; 0xff
 800a888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	22ff      	movs	r2, #255	; 0xff
 800a890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d114      	bne.n	800a8c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d01a      	beq.n	800a8d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3310      	adds	r3, #16
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f001 f85e 	bl	800b968 <xTaskRemoveFromEventList>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d012      	beq.n	800a8d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <xQueueGenericReset+0xcc>)
 800a8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	e009      	b.n	800a8d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3310      	adds	r3, #16
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff fef2 	bl	800a6b2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3324      	adds	r3, #36	; 0x24
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff feed 	bl	800a6b2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8d8:	f001 fc5e 	bl	800c198 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8dc:	2301      	movs	r3, #1
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08e      	sub	sp, #56	; 0x38
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d109      	bne.n	800a914 <xQueueGenericCreateStatic+0x28>
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	62bb      	str	r3, [r7, #40]	; 0x28
 800a912:	e7fe      	b.n	800a912 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d109      	bne.n	800a92e <xQueueGenericCreateStatic+0x42>
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24
 800a92c:	e7fe      	b.n	800a92c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <xQueueGenericCreateStatic+0x4e>
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <xQueueGenericCreateStatic+0x52>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e000      	b.n	800a940 <xQueueGenericCreateStatic+0x54>
 800a93e:	2300      	movs	r3, #0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d109      	bne.n	800a958 <xQueueGenericCreateStatic+0x6c>
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	623b      	str	r3, [r7, #32]
 800a956:	e7fe      	b.n	800a956 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d102      	bne.n	800a964 <xQueueGenericCreateStatic+0x78>
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <xQueueGenericCreateStatic+0x7c>
 800a964:	2301      	movs	r3, #1
 800a966:	e000      	b.n	800a96a <xQueueGenericCreateStatic+0x7e>
 800a968:	2300      	movs	r3, #0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d109      	bne.n	800a982 <xQueueGenericCreateStatic+0x96>
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	61fb      	str	r3, [r7, #28]
 800a980:	e7fe      	b.n	800a980 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a982:	2348      	movs	r3, #72	; 0x48
 800a984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2b48      	cmp	r3, #72	; 0x48
 800a98a:	d009      	beq.n	800a9a0 <xQueueGenericCreateStatic+0xb4>
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	61bb      	str	r3, [r7, #24]
 800a99e:	e7fe      	b.n	800a99e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00d      	beq.n	800a9c6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	68b9      	ldr	r1, [r7, #8]
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f842 	bl	800aa4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3730      	adds	r7, #48	; 0x30
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b08a      	sub	sp, #40	; 0x28
 800a9d4:	af02      	add	r7, sp, #8
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d109      	bne.n	800a9f8 <xQueueGenericCreate+0x28>
 800a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	613b      	str	r3, [r7, #16]
 800a9f6:	e7fe      	b.n	800a9f6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d102      	bne.n	800aa04 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]
 800aa02:	e004      	b.n	800aa0e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	fb02 f303 	mul.w	r3, r2, r3
 800aa0c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	3348      	adds	r3, #72	; 0x48
 800aa12:	4618      	mov	r0, r3
 800aa14:	f001 fc6e 	bl	800c2f4 <pvPortMalloc>
 800aa18:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00f      	beq.n	800aa40 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	3348      	adds	r3, #72	; 0x48
 800aa24:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa2e:	79fa      	ldrb	r2, [r7, #7]
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	4613      	mov	r3, r2
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	68b9      	ldr	r1, [r7, #8]
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 f805 	bl	800aa4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800aa40:	69bb      	ldr	r3, [r7, #24]
	}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3720      	adds	r7, #32
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b084      	sub	sp, #16
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	607a      	str	r2, [r7, #4]
 800aa56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d103      	bne.n	800aa66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	69ba      	ldr	r2, [r7, #24]
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	e002      	b.n	800aa6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa78:	2101      	movs	r1, #1
 800aa7a:	69b8      	ldr	r0, [r7, #24]
 800aa7c:	f7ff fece 	bl	800a81c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b08e      	sub	sp, #56	; 0x38
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa96:	2300      	movs	r3, #0
 800aa98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d109      	bne.n	800aab8 <xQueueGenericSend+0x30>
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	62bb      	str	r3, [r7, #40]	; 0x28
 800aab6:	e7fe      	b.n	800aab6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d103      	bne.n	800aac6 <xQueueGenericSend+0x3e>
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <xQueueGenericSend+0x42>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e000      	b.n	800aacc <xQueueGenericSend+0x44>
 800aaca:	2300      	movs	r3, #0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d109      	bne.n	800aae4 <xQueueGenericSend+0x5c>
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	627b      	str	r3, [r7, #36]	; 0x24
 800aae2:	e7fe      	b.n	800aae2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d103      	bne.n	800aaf2 <xQueueGenericSend+0x6a>
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d101      	bne.n	800aaf6 <xQueueGenericSend+0x6e>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e000      	b.n	800aaf8 <xQueueGenericSend+0x70>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d109      	bne.n	800ab10 <xQueueGenericSend+0x88>
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	623b      	str	r3, [r7, #32]
 800ab0e:	e7fe      	b.n	800ab0e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab10:	f001 f8e6 	bl	800bce0 <xTaskGetSchedulerState>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d102      	bne.n	800ab20 <xQueueGenericSend+0x98>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d101      	bne.n	800ab24 <xQueueGenericSend+0x9c>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e000      	b.n	800ab26 <xQueueGenericSend+0x9e>
 800ab24:	2300      	movs	r3, #0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d109      	bne.n	800ab3e <xQueueGenericSend+0xb6>
 800ab2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	61fb      	str	r3, [r7, #28]
 800ab3c:	e7fe      	b.n	800ab3c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab3e:	f001 fafd 	bl	800c13c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d302      	bcc.n	800ab54 <xQueueGenericSend+0xcc>
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d129      	bne.n	800aba8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	68b9      	ldr	r1, [r7, #8]
 800ab58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab5a:	f000 f96b 	bl	800ae34 <prvCopyDataToQueue>
 800ab5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d010      	beq.n	800ab8a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	3324      	adds	r3, #36	; 0x24
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 fefb 	bl	800b968 <xTaskRemoveFromEventList>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d013      	beq.n	800aba0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab78:	4b3f      	ldr	r3, [pc, #252]	; (800ac78 <xQueueGenericSend+0x1f0>)
 800ab7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	e00a      	b.n	800aba0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d007      	beq.n	800aba0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab90:	4b39      	ldr	r3, [pc, #228]	; (800ac78 <xQueueGenericSend+0x1f0>)
 800ab92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab96:	601a      	str	r2, [r3, #0]
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aba0:	f001 fafa 	bl	800c198 <vPortExitCritical>
				return pdPASS;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e063      	b.n	800ac70 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d103      	bne.n	800abb6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abae:	f001 faf3 	bl	800c198 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	e05c      	b.n	800ac70 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d106      	bne.n	800abca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abbc:	f107 0314 	add.w	r3, r7, #20
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 ff33 	bl	800ba2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abc6:	2301      	movs	r3, #1
 800abc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abca:	f001 fae5 	bl	800c198 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abce:	f000 fce7 	bl	800b5a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abd2:	f001 fab3 	bl	800c13c <vPortEnterCritical>
 800abd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abdc:	b25b      	sxtb	r3, r3
 800abde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe2:	d103      	bne.n	800abec <xQueueGenericSend+0x164>
 800abe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abf2:	b25b      	sxtb	r3, r3
 800abf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf8:	d103      	bne.n	800ac02 <xQueueGenericSend+0x17a>
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac02:	f001 fac9 	bl	800c198 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac06:	1d3a      	adds	r2, r7, #4
 800ac08:	f107 0314 	add.w	r3, r7, #20
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 ff22 	bl	800ba58 <xTaskCheckForTimeOut>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d124      	bne.n	800ac64 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac1c:	f000 fa02 	bl	800b024 <prvIsQueueFull>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d018      	beq.n	800ac58 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	3310      	adds	r3, #16
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 fe76 	bl	800b920 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac36:	f000 f98d 	bl	800af54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac3a:	f000 fcbf 	bl	800b5bc <xTaskResumeAll>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f47f af7c 	bne.w	800ab3e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ac46:	4b0c      	ldr	r3, [pc, #48]	; (800ac78 <xQueueGenericSend+0x1f0>)
 800ac48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	e772      	b.n	800ab3e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac5a:	f000 f97b 	bl	800af54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac5e:	f000 fcad 	bl	800b5bc <xTaskResumeAll>
 800ac62:	e76c      	b.n	800ab3e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac66:	f000 f975 	bl	800af54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac6a:	f000 fca7 	bl	800b5bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac6e:	2300      	movs	r3, #0
		}
	}
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3738      	adds	r7, #56	; 0x38
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	e000ed04 	.word	0xe000ed04

0800ac7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08c      	sub	sp, #48	; 0x30
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d109      	bne.n	800acaa <xQueueReceive+0x2e>
 800ac96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	623b      	str	r3, [r7, #32]
 800aca8:	e7fe      	b.n	800aca8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d103      	bne.n	800acb8 <xQueueReceive+0x3c>
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <xQueueReceive+0x40>
 800acb8:	2301      	movs	r3, #1
 800acba:	e000      	b.n	800acbe <xQueueReceive+0x42>
 800acbc:	2300      	movs	r3, #0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d109      	bne.n	800acd6 <xQueueReceive+0x5a>
 800acc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	61fb      	str	r3, [r7, #28]
 800acd4:	e7fe      	b.n	800acd4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acd6:	f001 f803 	bl	800bce0 <xTaskGetSchedulerState>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <xQueueReceive+0x6a>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <xQueueReceive+0x6e>
 800ace6:	2301      	movs	r3, #1
 800ace8:	e000      	b.n	800acec <xQueueReceive+0x70>
 800acea:	2300      	movs	r3, #0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d109      	bne.n	800ad04 <xQueueReceive+0x88>
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	61bb      	str	r3, [r7, #24]
 800ad02:	e7fe      	b.n	800ad02 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad04:	f001 fa1a 	bl	800c13c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d01f      	beq.n	800ad54 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad14:	68b9      	ldr	r1, [r7, #8]
 800ad16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad18:	f000 f8f6 	bl	800af08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	1e5a      	subs	r2, r3, #1
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00f      	beq.n	800ad4c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2e:	3310      	adds	r3, #16
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 fe19 	bl	800b968 <xTaskRemoveFromEventList>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d007      	beq.n	800ad4c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad3c:	4b3c      	ldr	r3, [pc, #240]	; (800ae30 <xQueueReceive+0x1b4>)
 800ad3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad4c:	f001 fa24 	bl	800c198 <vPortExitCritical>
				return pdPASS;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e069      	b.n	800ae28 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d103      	bne.n	800ad62 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad5a:	f001 fa1d 	bl	800c198 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e062      	b.n	800ae28 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d106      	bne.n	800ad76 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad68:	f107 0310 	add.w	r3, r7, #16
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 fe5d 	bl	800ba2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad72:	2301      	movs	r3, #1
 800ad74:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad76:	f001 fa0f 	bl	800c198 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad7a:	f000 fc11 	bl	800b5a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad7e:	f001 f9dd 	bl	800c13c <vPortEnterCritical>
 800ad82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad88:	b25b      	sxtb	r3, r3
 800ad8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8e:	d103      	bne.n	800ad98 <xQueueReceive+0x11c>
 800ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad9e:	b25b      	sxtb	r3, r3
 800ada0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada4:	d103      	bne.n	800adae <xQueueReceive+0x132>
 800ada6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adae:	f001 f9f3 	bl	800c198 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adb2:	1d3a      	adds	r2, r7, #4
 800adb4:	f107 0310 	add.w	r3, r7, #16
 800adb8:	4611      	mov	r1, r2
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 fe4c 	bl	800ba58 <xTaskCheckForTimeOut>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d123      	bne.n	800ae0e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adc8:	f000 f916 	bl	800aff8 <prvIsQueueEmpty>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d017      	beq.n	800ae02 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add4:	3324      	adds	r3, #36	; 0x24
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	4611      	mov	r1, r2
 800adda:	4618      	mov	r0, r3
 800addc:	f000 fda0 	bl	800b920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ade0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ade2:	f000 f8b7 	bl	800af54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ade6:	f000 fbe9 	bl	800b5bc <xTaskResumeAll>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d189      	bne.n	800ad04 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800adf0:	4b0f      	ldr	r3, [pc, #60]	; (800ae30 <xQueueReceive+0x1b4>)
 800adf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	e780      	b.n	800ad04 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae04:	f000 f8a6 	bl	800af54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae08:	f000 fbd8 	bl	800b5bc <xTaskResumeAll>
 800ae0c:	e77a      	b.n	800ad04 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae10:	f000 f8a0 	bl	800af54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae14:	f000 fbd2 	bl	800b5bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae1a:	f000 f8ed 	bl	800aff8 <prvIsQueueEmpty>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f43f af6f 	beq.w	800ad04 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3730      	adds	r7, #48	; 0x30
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae40:	2300      	movs	r3, #0
 800ae42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10d      	bne.n	800ae6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d14d      	bne.n	800aef6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 ff5c 	bl	800bd1c <xTaskPriorityDisinherit>
 800ae64:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	605a      	str	r2, [r3, #4]
 800ae6c:	e043      	b.n	800aef6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d119      	bne.n	800aea8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6898      	ldr	r0, [r3, #8]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	68b9      	ldr	r1, [r7, #8]
 800ae80:	f001 fc52 	bl	800c728 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8c:	441a      	add	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	689a      	ldr	r2, [r3, #8]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d32b      	bcc.n	800aef6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	609a      	str	r2, [r3, #8]
 800aea6:	e026      	b.n	800aef6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	68d8      	ldr	r0, [r3, #12]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	68b9      	ldr	r1, [r7, #8]
 800aeb4:	f001 fc38 	bl	800c728 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	68da      	ldr	r2, [r3, #12]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec0:	425b      	negs	r3, r3
 800aec2:	441a      	add	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	68da      	ldr	r2, [r3, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d207      	bcs.n	800aee4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aedc:	425b      	negs	r3, r3
 800aede:	441a      	add	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d105      	bne.n	800aef6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	1c5a      	adds	r2, r3, #1
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aefe:	697b      	ldr	r3, [r7, #20]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	d018      	beq.n	800af4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af22:	441a      	add	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68da      	ldr	r2, [r3, #12]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	429a      	cmp	r2, r3
 800af32:	d303      	bcc.n	800af3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	68d9      	ldr	r1, [r3, #12]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af44:	461a      	mov	r2, r3
 800af46:	6838      	ldr	r0, [r7, #0]
 800af48:	f001 fbee 	bl	800c728 <memcpy>
	}
}
 800af4c:	bf00      	nop
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af5c:	f001 f8ee 	bl	800c13c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af68:	e011      	b.n	800af8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d012      	beq.n	800af98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	3324      	adds	r3, #36	; 0x24
 800af76:	4618      	mov	r0, r3
 800af78:	f000 fcf6 	bl	800b968 <xTaskRemoveFromEventList>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d001      	beq.n	800af86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af82:	f000 fdc9 	bl	800bb18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af86:	7bfb      	ldrb	r3, [r7, #15]
 800af88:	3b01      	subs	r3, #1
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af92:	2b00      	cmp	r3, #0
 800af94:	dce9      	bgt.n	800af6a <prvUnlockQueue+0x16>
 800af96:	e000      	b.n	800af9a <prvUnlockQueue+0x46>
					break;
 800af98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	22ff      	movs	r2, #255	; 0xff
 800af9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800afa2:	f001 f8f9 	bl	800c198 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afa6:	f001 f8c9 	bl	800c13c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afb2:	e011      	b.n	800afd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d012      	beq.n	800afe2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3310      	adds	r3, #16
 800afc0:	4618      	mov	r0, r3
 800afc2:	f000 fcd1 	bl	800b968 <xTaskRemoveFromEventList>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afcc:	f000 fda4 	bl	800bb18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	dce9      	bgt.n	800afb4 <prvUnlockQueue+0x60>
 800afe0:	e000      	b.n	800afe4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afe2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	22ff      	movs	r2, #255	; 0xff
 800afe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800afec:	f001 f8d4 	bl	800c198 <vPortExitCritical>
}
 800aff0:	bf00      	nop
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b000:	f001 f89c 	bl	800c13c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b00c:	2301      	movs	r3, #1
 800b00e:	60fb      	str	r3, [r7, #12]
 800b010:	e001      	b.n	800b016 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b012:	2300      	movs	r3, #0
 800b014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b016:	f001 f8bf 	bl	800c198 <vPortExitCritical>

	return xReturn;
 800b01a:	68fb      	ldr	r3, [r7, #12]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b02c:	f001 f886 	bl	800c13c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b038:	429a      	cmp	r2, r3
 800b03a:	d102      	bne.n	800b042 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b03c:	2301      	movs	r3, #1
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	e001      	b.n	800b046 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b042:	2300      	movs	r3, #0
 800b044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b046:	f001 f8a7 	bl	800c198 <vPortExitCritical>

	return xReturn;
 800b04a:	68fb      	ldr	r3, [r7, #12]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08e      	sub	sp, #56	; 0x38
 800b058:	af04      	add	r7, sp, #16
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b064:	2b00      	cmp	r3, #0
 800b066:	d109      	bne.n	800b07c <xTaskCreateStatic+0x28>
 800b068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	623b      	str	r3, [r7, #32]
 800b07a:	e7fe      	b.n	800b07a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d109      	bne.n	800b096 <xTaskCreateStatic+0x42>
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	61fb      	str	r3, [r7, #28]
 800b094:	e7fe      	b.n	800b094 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b096:	2354      	movs	r3, #84	; 0x54
 800b098:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	2b54      	cmp	r3, #84	; 0x54
 800b09e:	d009      	beq.n	800b0b4 <xTaskCreateStatic+0x60>
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	61bb      	str	r3, [r7, #24]
 800b0b2:	e7fe      	b.n	800b0b2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d01e      	beq.n	800b0f8 <xTaskCreateStatic+0xa4>
 800b0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01b      	beq.n	800b0f8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	9303      	str	r3, [sp, #12]
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	9302      	str	r3, [sp, #8]
 800b0da:	f107 0314 	add.w	r3, r7, #20
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	68b9      	ldr	r1, [r7, #8]
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f000 f850 	bl	800b190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0f2:	f000 f8cb 	bl	800b28c <prvAddNewTaskToReadyList>
 800b0f6:	e001      	b.n	800b0fc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0fc:	697b      	ldr	r3, [r7, #20]
	}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3728      	adds	r7, #40	; 0x28
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b106:	b580      	push	{r7, lr}
 800b108:	b08c      	sub	sp, #48	; 0x30
 800b10a:	af04      	add	r7, sp, #16
 800b10c:	60f8      	str	r0, [r7, #12]
 800b10e:	60b9      	str	r1, [r7, #8]
 800b110:	603b      	str	r3, [r7, #0]
 800b112:	4613      	mov	r3, r2
 800b114:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b116:	88fb      	ldrh	r3, [r7, #6]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f001 f8ea 	bl	800c2f4 <pvPortMalloc>
 800b120:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00e      	beq.n	800b146 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b128:	2054      	movs	r0, #84	; 0x54
 800b12a:	f001 f8e3 	bl	800c2f4 <pvPortMalloc>
 800b12e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	631a      	str	r2, [r3, #48]	; 0x30
 800b13c:	e005      	b.n	800b14a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b13e:	6978      	ldr	r0, [r7, #20]
 800b140:	f001 f99a 	bl	800c478 <vPortFree>
 800b144:	e001      	b.n	800b14a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d017      	beq.n	800b180 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b158:	88fa      	ldrh	r2, [r7, #6]
 800b15a:	2300      	movs	r3, #0
 800b15c:	9303      	str	r3, [sp, #12]
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	9302      	str	r3, [sp, #8]
 800b162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	68b9      	ldr	r1, [r7, #8]
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f000 f80e 	bl	800b190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b174:	69f8      	ldr	r0, [r7, #28]
 800b176:	f000 f889 	bl	800b28c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b17a:	2301      	movs	r3, #1
 800b17c:	61bb      	str	r3, [r7, #24]
 800b17e:	e002      	b.n	800b186 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b180:	f04f 33ff 	mov.w	r3, #4294967295
 800b184:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b186:	69bb      	ldr	r3, [r7, #24]
	}
 800b188:	4618      	mov	r0, r3
 800b18a:	3720      	adds	r7, #32
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b088      	sub	sp, #32
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4413      	add	r3, r2
 800b1ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	f023 0307 	bic.w	r3, r3, #7
 800b1b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	f003 0307 	and.w	r3, r3, #7
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d009      	beq.n	800b1d6 <prvInitialiseNewTask+0x46>
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	617b      	str	r3, [r7, #20]
 800b1d4:	e7fe      	b.n	800b1d4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	61fb      	str	r3, [r7, #28]
 800b1da:	e012      	b.n	800b202 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	7819      	ldrb	r1, [r3, #0]
 800b1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	3334      	adds	r3, #52	; 0x34
 800b1ec:	460a      	mov	r2, r1
 800b1ee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d006      	beq.n	800b20a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	3301      	adds	r3, #1
 800b200:	61fb      	str	r3, [r7, #28]
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	2b0f      	cmp	r3, #15
 800b206:	d9e9      	bls.n	800b1dc <prvInitialiseNewTask+0x4c>
 800b208:	e000      	b.n	800b20c <prvInitialiseNewTask+0x7c>
		{
			break;
 800b20a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	2b06      	cmp	r3, #6
 800b218:	d901      	bls.n	800b21e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b21a:	2306      	movs	r3, #6
 800b21c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b222:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b228:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22c:	2200      	movs	r2, #0
 800b22e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	3304      	adds	r3, #4
 800b234:	4618      	mov	r0, r3
 800b236:	f7ff fa5c 	bl	800a6f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23c:	3318      	adds	r3, #24
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff fa57 	bl	800a6f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b248:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24c:	f1c3 0207 	rsb	r2, r3, #7
 800b250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b252:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b258:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	2200      	movs	r2, #0
 800b25e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	2200      	movs	r2, #0
 800b264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	68f9      	ldr	r1, [r7, #12]
 800b26c:	69b8      	ldr	r0, [r7, #24]
 800b26e:	f000 fe3f 	bl	800bef0 <pxPortInitialiseStack>
 800b272:	4602      	mov	r2, r0
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d002      	beq.n	800b284 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b282:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b284:	bf00      	nop
 800b286:	3720      	adds	r7, #32
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b294:	f000 ff52 	bl	800c13c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b298:	4b2a      	ldr	r3, [pc, #168]	; (800b344 <prvAddNewTaskToReadyList+0xb8>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3301      	adds	r3, #1
 800b29e:	4a29      	ldr	r2, [pc, #164]	; (800b344 <prvAddNewTaskToReadyList+0xb8>)
 800b2a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2a2:	4b29      	ldr	r3, [pc, #164]	; (800b348 <prvAddNewTaskToReadyList+0xbc>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d109      	bne.n	800b2be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2aa:	4a27      	ldr	r2, [pc, #156]	; (800b348 <prvAddNewTaskToReadyList+0xbc>)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2b0:	4b24      	ldr	r3, [pc, #144]	; (800b344 <prvAddNewTaskToReadyList+0xb8>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d110      	bne.n	800b2da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2b8:	f000 fc52 	bl	800bb60 <prvInitialiseTaskLists>
 800b2bc:	e00d      	b.n	800b2da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2be:	4b23      	ldr	r3, [pc, #140]	; (800b34c <prvAddNewTaskToReadyList+0xc0>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d109      	bne.n	800b2da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2c6:	4b20      	ldr	r3, [pc, #128]	; (800b348 <prvAddNewTaskToReadyList+0xbc>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d802      	bhi.n	800b2da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2d4:	4a1c      	ldr	r2, [pc, #112]	; (800b348 <prvAddNewTaskToReadyList+0xbc>)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2da:	4b1d      	ldr	r3, [pc, #116]	; (800b350 <prvAddNewTaskToReadyList+0xc4>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	4a1b      	ldr	r2, [pc, #108]	; (800b350 <prvAddNewTaskToReadyList+0xc4>)
 800b2e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	409a      	lsls	r2, r3
 800b2ec:	4b19      	ldr	r3, [pc, #100]	; (800b354 <prvAddNewTaskToReadyList+0xc8>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	4a18      	ldr	r2, [pc, #96]	; (800b354 <prvAddNewTaskToReadyList+0xc8>)
 800b2f4:	6013      	str	r3, [r2, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	4413      	add	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4a15      	ldr	r2, [pc, #84]	; (800b358 <prvAddNewTaskToReadyList+0xcc>)
 800b304:	441a      	add	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3304      	adds	r3, #4
 800b30a:	4619      	mov	r1, r3
 800b30c:	4610      	mov	r0, r2
 800b30e:	f7ff f9fd 	bl	800a70c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b312:	f000 ff41 	bl	800c198 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b316:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <prvAddNewTaskToReadyList+0xc0>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00e      	beq.n	800b33c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b31e:	4b0a      	ldr	r3, [pc, #40]	; (800b348 <prvAddNewTaskToReadyList+0xbc>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	429a      	cmp	r2, r3
 800b32a:	d207      	bcs.n	800b33c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b32c:	4b0b      	ldr	r3, [pc, #44]	; (800b35c <prvAddNewTaskToReadyList+0xd0>)
 800b32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b332:	601a      	str	r2, [r3, #0]
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	20001bac 	.word	0x20001bac
 800b348:	20001aac 	.word	0x20001aac
 800b34c:	20001bb8 	.word	0x20001bb8
 800b350:	20001bc8 	.word	0x20001bc8
 800b354:	20001bb4 	.word	0x20001bb4
 800b358:	20001ab0 	.word	0x20001ab0
 800b35c:	e000ed04 	.word	0xe000ed04

0800b360 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b368:	f000 fee8 	bl	800c13c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <vTaskDelete+0x18>
 800b372:	4b38      	ldr	r3, [pc, #224]	; (800b454 <vTaskDelete+0xf4>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	e000      	b.n	800b37a <vTaskDelete+0x1a>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3304      	adds	r3, #4
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff fa20 	bl	800a7c6 <uxListRemove>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d115      	bne.n	800b3b8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b390:	4931      	ldr	r1, [pc, #196]	; (800b458 <vTaskDelete+0xf8>)
 800b392:	4613      	mov	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4413      	add	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	440b      	add	r3, r1
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10a      	bne.n	800b3b8 <vTaskDelete+0x58>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ac:	43da      	mvns	r2, r3
 800b3ae:	4b2b      	ldr	r3, [pc, #172]	; (800b45c <vTaskDelete+0xfc>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	4a29      	ldr	r2, [pc, #164]	; (800b45c <vTaskDelete+0xfc>)
 800b3b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d004      	beq.n	800b3ca <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	3318      	adds	r3, #24
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7ff f9fe 	bl	800a7c6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b3ca:	4b25      	ldr	r3, [pc, #148]	; (800b460 <vTaskDelete+0x100>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	4a23      	ldr	r2, [pc, #140]	; (800b460 <vTaskDelete+0x100>)
 800b3d2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b3d4:	4b1f      	ldr	r3, [pc, #124]	; (800b454 <vTaskDelete+0xf4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d10b      	bne.n	800b3f6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	481f      	ldr	r0, [pc, #124]	; (800b464 <vTaskDelete+0x104>)
 800b3e6:	f7ff f991 	bl	800a70c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b3ea:	4b1f      	ldr	r3, [pc, #124]	; (800b468 <vTaskDelete+0x108>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	4a1d      	ldr	r2, [pc, #116]	; (800b468 <vTaskDelete+0x108>)
 800b3f2:	6013      	str	r3, [r2, #0]
 800b3f4:	e009      	b.n	800b40a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b3f6:	4b1d      	ldr	r3, [pc, #116]	; (800b46c <vTaskDelete+0x10c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	4a1b      	ldr	r2, [pc, #108]	; (800b46c <vTaskDelete+0x10c>)
 800b3fe:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f000 fc19 	bl	800bc38 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b406:	f000 fc45 	bl	800bc94 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800b40a:	f000 fec5 	bl	800c198 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b40e:	4b18      	ldr	r3, [pc, #96]	; (800b470 <vTaskDelete+0x110>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d01a      	beq.n	800b44c <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800b416:	4b0f      	ldr	r3, [pc, #60]	; (800b454 <vTaskDelete+0xf4>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d115      	bne.n	800b44c <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b420:	4b14      	ldr	r3, [pc, #80]	; (800b474 <vTaskDelete+0x114>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d009      	beq.n	800b43c <vTaskDelete+0xdc>
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	60bb      	str	r3, [r7, #8]
 800b43a:	e7fe      	b.n	800b43a <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800b43c:	4b0e      	ldr	r3, [pc, #56]	; (800b478 <vTaskDelete+0x118>)
 800b43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b44c:	bf00      	nop
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	20001aac 	.word	0x20001aac
 800b458:	20001ab0 	.word	0x20001ab0
 800b45c:	20001bb4 	.word	0x20001bb4
 800b460:	20001bc8 	.word	0x20001bc8
 800b464:	20001b80 	.word	0x20001b80
 800b468:	20001b94 	.word	0x20001b94
 800b46c:	20001bac 	.word	0x20001bac
 800b470:	20001bb8 	.word	0x20001bb8
 800b474:	20001bd4 	.word	0x20001bd4
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b484:	2300      	movs	r3, #0
 800b486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d016      	beq.n	800b4bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b48e:	4b13      	ldr	r3, [pc, #76]	; (800b4dc <vTaskDelay+0x60>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d009      	beq.n	800b4aa <vTaskDelay+0x2e>
 800b496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	60bb      	str	r3, [r7, #8]
 800b4a8:	e7fe      	b.n	800b4a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b4aa:	f000 f879 	bl	800b5a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fcb7 	bl	800be24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4b6:	f000 f881 	bl	800b5bc <xTaskResumeAll>
 800b4ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d107      	bne.n	800b4d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b4c2:	4b07      	ldr	r3, [pc, #28]	; (800b4e0 <vTaskDelay+0x64>)
 800b4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c8:	601a      	str	r2, [r3, #0]
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4d2:	bf00      	nop
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20001bd4 	.word	0x20001bd4
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b08a      	sub	sp, #40	; 0x28
 800b4e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4f2:	463a      	mov	r2, r7
 800b4f4:	1d39      	adds	r1, r7, #4
 800b4f6:	f107 0308 	add.w	r3, r7, #8
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7f5 fe06 	bl	800110c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	9202      	str	r2, [sp, #8]
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	2300      	movs	r3, #0
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	2300      	movs	r3, #0
 800b510:	460a      	mov	r2, r1
 800b512:	491d      	ldr	r1, [pc, #116]	; (800b588 <vTaskStartScheduler+0xa4>)
 800b514:	481d      	ldr	r0, [pc, #116]	; (800b58c <vTaskStartScheduler+0xa8>)
 800b516:	f7ff fd9d 	bl	800b054 <xTaskCreateStatic>
 800b51a:	4602      	mov	r2, r0
 800b51c:	4b1c      	ldr	r3, [pc, #112]	; (800b590 <vTaskStartScheduler+0xac>)
 800b51e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b520:	4b1b      	ldr	r3, [pc, #108]	; (800b590 <vTaskStartScheduler+0xac>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b528:	2301      	movs	r3, #1
 800b52a:	617b      	str	r3, [r7, #20]
 800b52c:	e001      	b.n	800b532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b52e:	2300      	movs	r3, #0
 800b530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d115      	bne.n	800b564 <vTaskStartScheduler+0x80>
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b54a:	4b12      	ldr	r3, [pc, #72]	; (800b594 <vTaskStartScheduler+0xb0>)
 800b54c:	f04f 32ff 	mov.w	r2, #4294967295
 800b550:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b552:	4b11      	ldr	r3, [pc, #68]	; (800b598 <vTaskStartScheduler+0xb4>)
 800b554:	2201      	movs	r2, #1
 800b556:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b558:	4b10      	ldr	r3, [pc, #64]	; (800b59c <vTaskStartScheduler+0xb8>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b55e:	f000 fd4f 	bl	800c000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b562:	e00d      	b.n	800b580 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56a:	d109      	bne.n	800b580 <vTaskStartScheduler+0x9c>
 800b56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b570:	f383 8811 	msr	BASEPRI, r3
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	e7fe      	b.n	800b57e <vTaskStartScheduler+0x9a>
}
 800b580:	bf00      	nop
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	0800da4c 	.word	0x0800da4c
 800b58c:	0800bb31 	.word	0x0800bb31
 800b590:	20001bd0 	.word	0x20001bd0
 800b594:	20001bcc 	.word	0x20001bcc
 800b598:	20001bb8 	.word	0x20001bb8
 800b59c:	20001bb0 	.word	0x20001bb0

0800b5a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b5a4:	4b04      	ldr	r3, [pc, #16]	; (800b5b8 <vTaskSuspendAll+0x18>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	4a03      	ldr	r2, [pc, #12]	; (800b5b8 <vTaskSuspendAll+0x18>)
 800b5ac:	6013      	str	r3, [r2, #0]
}
 800b5ae:	bf00      	nop
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	20001bd4 	.word	0x20001bd4

0800b5bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5ca:	4b41      	ldr	r3, [pc, #260]	; (800b6d0 <xTaskResumeAll+0x114>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d109      	bne.n	800b5e6 <xTaskResumeAll+0x2a>
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	603b      	str	r3, [r7, #0]
 800b5e4:	e7fe      	b.n	800b5e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5e6:	f000 fda9 	bl	800c13c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5ea:	4b39      	ldr	r3, [pc, #228]	; (800b6d0 <xTaskResumeAll+0x114>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	4a37      	ldr	r2, [pc, #220]	; (800b6d0 <xTaskResumeAll+0x114>)
 800b5f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5f4:	4b36      	ldr	r3, [pc, #216]	; (800b6d0 <xTaskResumeAll+0x114>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d161      	bne.n	800b6c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5fc:	4b35      	ldr	r3, [pc, #212]	; (800b6d4 <xTaskResumeAll+0x118>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d05d      	beq.n	800b6c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b604:	e02e      	b.n	800b664 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b606:	4b34      	ldr	r3, [pc, #208]	; (800b6d8 <xTaskResumeAll+0x11c>)
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3318      	adds	r3, #24
 800b612:	4618      	mov	r0, r3
 800b614:	f7ff f8d7 	bl	800a7c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7ff f8d2 	bl	800a7c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b626:	2201      	movs	r2, #1
 800b628:	409a      	lsls	r2, r3
 800b62a:	4b2c      	ldr	r3, [pc, #176]	; (800b6dc <xTaskResumeAll+0x120>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4313      	orrs	r3, r2
 800b630:	4a2a      	ldr	r2, [pc, #168]	; (800b6dc <xTaskResumeAll+0x120>)
 800b632:	6013      	str	r3, [r2, #0]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b638:	4613      	mov	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4a27      	ldr	r2, [pc, #156]	; (800b6e0 <xTaskResumeAll+0x124>)
 800b642:	441a      	add	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3304      	adds	r3, #4
 800b648:	4619      	mov	r1, r3
 800b64a:	4610      	mov	r0, r2
 800b64c:	f7ff f85e 	bl	800a70c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b654:	4b23      	ldr	r3, [pc, #140]	; (800b6e4 <xTaskResumeAll+0x128>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d302      	bcc.n	800b664 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b65e:	4b22      	ldr	r3, [pc, #136]	; (800b6e8 <xTaskResumeAll+0x12c>)
 800b660:	2201      	movs	r2, #1
 800b662:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b664:	4b1c      	ldr	r3, [pc, #112]	; (800b6d8 <xTaskResumeAll+0x11c>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1cc      	bne.n	800b606 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b672:	f000 fb0f 	bl	800bc94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b676:	4b1d      	ldr	r3, [pc, #116]	; (800b6ec <xTaskResumeAll+0x130>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d010      	beq.n	800b6a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b682:	f000 f837 	bl	800b6f4 <xTaskIncrementTick>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b68c:	4b16      	ldr	r3, [pc, #88]	; (800b6e8 <xTaskResumeAll+0x12c>)
 800b68e:	2201      	movs	r2, #1
 800b690:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	3b01      	subs	r3, #1
 800b696:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1f1      	bne.n	800b682 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b69e:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <xTaskResumeAll+0x130>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6a4:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <xTaskResumeAll+0x12c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d009      	beq.n	800b6c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6b0:	4b0f      	ldr	r3, [pc, #60]	; (800b6f0 <xTaskResumeAll+0x134>)
 800b6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6c0:	f000 fd6a 	bl	800c198 <vPortExitCritical>

	return xAlreadyYielded;
 800b6c4:	68bb      	ldr	r3, [r7, #8]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20001bd4 	.word	0x20001bd4
 800b6d4:	20001bac 	.word	0x20001bac
 800b6d8:	20001b6c 	.word	0x20001b6c
 800b6dc:	20001bb4 	.word	0x20001bb4
 800b6e0:	20001ab0 	.word	0x20001ab0
 800b6e4:	20001aac 	.word	0x20001aac
 800b6e8:	20001bc0 	.word	0x20001bc0
 800b6ec:	20001bbc 	.word	0x20001bbc
 800b6f0:	e000ed04 	.word	0xe000ed04

0800b6f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6fe:	4b50      	ldr	r3, [pc, #320]	; (800b840 <xTaskIncrementTick+0x14c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	f040 808c 	bne.w	800b820 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b708:	4b4e      	ldr	r3, [pc, #312]	; (800b844 <xTaskIncrementTick+0x150>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	3301      	adds	r3, #1
 800b70e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b710:	4a4c      	ldr	r2, [pc, #304]	; (800b844 <xTaskIncrementTick+0x150>)
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d11f      	bne.n	800b75c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b71c:	4b4a      	ldr	r3, [pc, #296]	; (800b848 <xTaskIncrementTick+0x154>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d009      	beq.n	800b73a <xTaskIncrementTick+0x46>
 800b726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	603b      	str	r3, [r7, #0]
 800b738:	e7fe      	b.n	800b738 <xTaskIncrementTick+0x44>
 800b73a:	4b43      	ldr	r3, [pc, #268]	; (800b848 <xTaskIncrementTick+0x154>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	4b42      	ldr	r3, [pc, #264]	; (800b84c <xTaskIncrementTick+0x158>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a40      	ldr	r2, [pc, #256]	; (800b848 <xTaskIncrementTick+0x154>)
 800b746:	6013      	str	r3, [r2, #0]
 800b748:	4a40      	ldr	r2, [pc, #256]	; (800b84c <xTaskIncrementTick+0x158>)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	4b40      	ldr	r3, [pc, #256]	; (800b850 <xTaskIncrementTick+0x15c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3301      	adds	r3, #1
 800b754:	4a3e      	ldr	r2, [pc, #248]	; (800b850 <xTaskIncrementTick+0x15c>)
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	f000 fa9c 	bl	800bc94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b75c:	4b3d      	ldr	r3, [pc, #244]	; (800b854 <xTaskIncrementTick+0x160>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	429a      	cmp	r2, r3
 800b764:	d34d      	bcc.n	800b802 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b766:	4b38      	ldr	r3, [pc, #224]	; (800b848 <xTaskIncrementTick+0x154>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <xTaskIncrementTick+0x80>
 800b770:	2301      	movs	r3, #1
 800b772:	e000      	b.n	800b776 <xTaskIncrementTick+0x82>
 800b774:	2300      	movs	r3, #0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d004      	beq.n	800b784 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b77a:	4b36      	ldr	r3, [pc, #216]	; (800b854 <xTaskIncrementTick+0x160>)
 800b77c:	f04f 32ff 	mov.w	r2, #4294967295
 800b780:	601a      	str	r2, [r3, #0]
					break;
 800b782:	e03e      	b.n	800b802 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b784:	4b30      	ldr	r3, [pc, #192]	; (800b848 <xTaskIncrementTick+0x154>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d203      	bcs.n	800b7a4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b79c:	4a2d      	ldr	r2, [pc, #180]	; (800b854 <xTaskIncrementTick+0x160>)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6013      	str	r3, [r2, #0]
						break;
 800b7a2:	e02e      	b.n	800b802 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	3304      	adds	r3, #4
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff f80c 	bl	800a7c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d004      	beq.n	800b7c0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	3318      	adds	r3, #24
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7ff f803 	bl	800a7c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	409a      	lsls	r2, r3
 800b7c8:	4b23      	ldr	r3, [pc, #140]	; (800b858 <xTaskIncrementTick+0x164>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	4a22      	ldr	r2, [pc, #136]	; (800b858 <xTaskIncrementTick+0x164>)
 800b7d0:	6013      	str	r3, [r2, #0]
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4413      	add	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4a1f      	ldr	r2, [pc, #124]	; (800b85c <xTaskIncrementTick+0x168>)
 800b7e0:	441a      	add	r2, r3
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	f7fe ff8f 	bl	800a70c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f2:	4b1b      	ldr	r3, [pc, #108]	; (800b860 <xTaskIncrementTick+0x16c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d3b4      	bcc.n	800b766 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b800:	e7b1      	b.n	800b766 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b802:	4b17      	ldr	r3, [pc, #92]	; (800b860 <xTaskIncrementTick+0x16c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4914      	ldr	r1, [pc, #80]	; (800b85c <xTaskIncrementTick+0x168>)
 800b80a:	4613      	mov	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	440b      	add	r3, r1
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d907      	bls.n	800b82a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800b81a:	2301      	movs	r3, #1
 800b81c:	617b      	str	r3, [r7, #20]
 800b81e:	e004      	b.n	800b82a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b820:	4b10      	ldr	r3, [pc, #64]	; (800b864 <xTaskIncrementTick+0x170>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3301      	adds	r3, #1
 800b826:	4a0f      	ldr	r2, [pc, #60]	; (800b864 <xTaskIncrementTick+0x170>)
 800b828:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b82a:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <xTaskIncrementTick+0x174>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d001      	beq.n	800b836 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800b832:	2301      	movs	r3, #1
 800b834:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b836:	697b      	ldr	r3, [r7, #20]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3718      	adds	r7, #24
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20001bd4 	.word	0x20001bd4
 800b844:	20001bb0 	.word	0x20001bb0
 800b848:	20001b64 	.word	0x20001b64
 800b84c:	20001b68 	.word	0x20001b68
 800b850:	20001bc4 	.word	0x20001bc4
 800b854:	20001bcc 	.word	0x20001bcc
 800b858:	20001bb4 	.word	0x20001bb4
 800b85c:	20001ab0 	.word	0x20001ab0
 800b860:	20001aac 	.word	0x20001aac
 800b864:	20001bbc 	.word	0x20001bbc
 800b868:	20001bc0 	.word	0x20001bc0

0800b86c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b86c:	b480      	push	{r7}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b872:	4b26      	ldr	r3, [pc, #152]	; (800b90c <vTaskSwitchContext+0xa0>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b87a:	4b25      	ldr	r3, [pc, #148]	; (800b910 <vTaskSwitchContext+0xa4>)
 800b87c:	2201      	movs	r2, #1
 800b87e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b880:	e03e      	b.n	800b900 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b882:	4b23      	ldr	r3, [pc, #140]	; (800b910 <vTaskSwitchContext+0xa4>)
 800b884:	2200      	movs	r2, #0
 800b886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b888:	4b22      	ldr	r3, [pc, #136]	; (800b914 <vTaskSwitchContext+0xa8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	fab3 f383 	clz	r3, r3
 800b894:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b896:	7afb      	ldrb	r3, [r7, #11]
 800b898:	f1c3 031f 	rsb	r3, r3, #31
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	491e      	ldr	r1, [pc, #120]	; (800b918 <vTaskSwitchContext+0xac>)
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	440b      	add	r3, r1
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d109      	bne.n	800b8c6 <vTaskSwitchContext+0x5a>
	__asm volatile
 800b8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	607b      	str	r3, [r7, #4]
 800b8c4:	e7fe      	b.n	800b8c4 <vTaskSwitchContext+0x58>
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4a11      	ldr	r2, [pc, #68]	; (800b918 <vTaskSwitchContext+0xac>)
 800b8d2:	4413      	add	r3, r2
 800b8d4:	613b      	str	r3, [r7, #16]
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	605a      	str	r2, [r3, #4]
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	685a      	ldr	r2, [r3, #4]
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d104      	bne.n	800b8f6 <vTaskSwitchContext+0x8a>
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	605a      	str	r2, [r3, #4]
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	4a07      	ldr	r2, [pc, #28]	; (800b91c <vTaskSwitchContext+0xb0>)
 800b8fe:	6013      	str	r3, [r2, #0]
}
 800b900:	bf00      	nop
 800b902:	371c      	adds	r7, #28
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	20001bd4 	.word	0x20001bd4
 800b910:	20001bc0 	.word	0x20001bc0
 800b914:	20001bb4 	.word	0x20001bb4
 800b918:	20001ab0 	.word	0x20001ab0
 800b91c:	20001aac 	.word	0x20001aac

0800b920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d109      	bne.n	800b944 <vTaskPlaceOnEventList+0x24>
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	60fb      	str	r3, [r7, #12]
 800b942:	e7fe      	b.n	800b942 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b944:	4b07      	ldr	r3, [pc, #28]	; (800b964 <vTaskPlaceOnEventList+0x44>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	3318      	adds	r3, #24
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f7fe ff01 	bl	800a754 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b952:	2101      	movs	r1, #1
 800b954:	6838      	ldr	r0, [r7, #0]
 800b956:	f000 fa65 	bl	800be24 <prvAddCurrentTaskToDelayedList>
}
 800b95a:	bf00      	nop
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	20001aac 	.word	0x20001aac

0800b968 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d109      	bne.n	800b992 <xTaskRemoveFromEventList+0x2a>
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	e7fe      	b.n	800b990 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	3318      	adds	r3, #24
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe ff15 	bl	800a7c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b99c:	4b1d      	ldr	r3, [pc, #116]	; (800ba14 <xTaskRemoveFromEventList+0xac>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d11c      	bne.n	800b9de <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fe ff0c 	bl	800a7c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	409a      	lsls	r2, r3
 800b9b6:	4b18      	ldr	r3, [pc, #96]	; (800ba18 <xTaskRemoveFromEventList+0xb0>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	4a16      	ldr	r2, [pc, #88]	; (800ba18 <xTaskRemoveFromEventList+0xb0>)
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4a13      	ldr	r2, [pc, #76]	; (800ba1c <xTaskRemoveFromEventList+0xb4>)
 800b9ce:	441a      	add	r2, r3
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	f7fe fe98 	bl	800a70c <vListInsertEnd>
 800b9dc:	e005      	b.n	800b9ea <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	3318      	adds	r3, #24
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	480e      	ldr	r0, [pc, #56]	; (800ba20 <xTaskRemoveFromEventList+0xb8>)
 800b9e6:	f7fe fe91 	bl	800a70c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <xTaskRemoveFromEventList+0xbc>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d905      	bls.n	800ba04 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <xTaskRemoveFromEventList+0xc0>)
 800b9fe:	2201      	movs	r2, #1
 800ba00:	601a      	str	r2, [r3, #0]
 800ba02:	e001      	b.n	800ba08 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ba08:	697b      	ldr	r3, [r7, #20]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	20001bd4 	.word	0x20001bd4
 800ba18:	20001bb4 	.word	0x20001bb4
 800ba1c:	20001ab0 	.word	0x20001ab0
 800ba20:	20001b6c 	.word	0x20001b6c
 800ba24:	20001aac 	.word	0x20001aac
 800ba28:	20001bc0 	.word	0x20001bc0

0800ba2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba34:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <vTaskInternalSetTimeOutState+0x24>)
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba3c:	4b05      	ldr	r3, [pc, #20]	; (800ba54 <vTaskInternalSetTimeOutState+0x28>)
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	605a      	str	r2, [r3, #4]
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	20001bc4 	.word	0x20001bc4
 800ba54:	20001bb0 	.word	0x20001bb0

0800ba58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d109      	bne.n	800ba7c <xTaskCheckForTimeOut+0x24>
 800ba68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	613b      	str	r3, [r7, #16]
 800ba7a:	e7fe      	b.n	800ba7a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d109      	bne.n	800ba96 <xTaskCheckForTimeOut+0x3e>
 800ba82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba86:	f383 8811 	msr	BASEPRI, r3
 800ba8a:	f3bf 8f6f 	isb	sy
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e7fe      	b.n	800ba94 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ba96:	f000 fb51 	bl	800c13c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba9a:	4b1d      	ldr	r3, [pc, #116]	; (800bb10 <xTaskCheckForTimeOut+0xb8>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	69ba      	ldr	r2, [r7, #24]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab2:	d102      	bne.n	800baba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bab4:	2300      	movs	r3, #0
 800bab6:	61fb      	str	r3, [r7, #28]
 800bab8:	e023      	b.n	800bb02 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	4b15      	ldr	r3, [pc, #84]	; (800bb14 <xTaskCheckForTimeOut+0xbc>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d007      	beq.n	800bad6 <xTaskCheckForTimeOut+0x7e>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	69ba      	ldr	r2, [r7, #24]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d302      	bcc.n	800bad6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	61fb      	str	r3, [r7, #28]
 800bad4:	e015      	b.n	800bb02 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	429a      	cmp	r2, r3
 800bade:	d20b      	bcs.n	800baf8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	1ad2      	subs	r2, r2, r3
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff ff9d 	bl	800ba2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800baf2:	2300      	movs	r3, #0
 800baf4:	61fb      	str	r3, [r7, #28]
 800baf6:	e004      	b.n	800bb02 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bafe:	2301      	movs	r3, #1
 800bb00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb02:	f000 fb49 	bl	800c198 <vPortExitCritical>

	return xReturn;
 800bb06:	69fb      	ldr	r3, [r7, #28]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3720      	adds	r7, #32
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20001bb0 	.word	0x20001bb0
 800bb14:	20001bc4 	.word	0x20001bc4

0800bb18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb18:	b480      	push	{r7}
 800bb1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb1c:	4b03      	ldr	r3, [pc, #12]	; (800bb2c <vTaskMissedYield+0x14>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	601a      	str	r2, [r3, #0]
}
 800bb22:	bf00      	nop
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	20001bc0 	.word	0x20001bc0

0800bb30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb38:	f000 f852 	bl	800bbe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb3c:	4b06      	ldr	r3, [pc, #24]	; (800bb58 <prvIdleTask+0x28>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d9f9      	bls.n	800bb38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb44:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <prvIdleTask+0x2c>)
 800bb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb4a:	601a      	str	r2, [r3, #0]
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb54:	e7f0      	b.n	800bb38 <prvIdleTask+0x8>
 800bb56:	bf00      	nop
 800bb58:	20001ab0 	.word	0x20001ab0
 800bb5c:	e000ed04 	.word	0xe000ed04

0800bb60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb66:	2300      	movs	r3, #0
 800bb68:	607b      	str	r3, [r7, #4]
 800bb6a:	e00c      	b.n	800bb86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4a12      	ldr	r2, [pc, #72]	; (800bbc0 <prvInitialiseTaskLists+0x60>)
 800bb78:	4413      	add	r3, r2
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fe fd99 	bl	800a6b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3301      	adds	r3, #1
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b06      	cmp	r3, #6
 800bb8a:	d9ef      	bls.n	800bb6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb8c:	480d      	ldr	r0, [pc, #52]	; (800bbc4 <prvInitialiseTaskLists+0x64>)
 800bb8e:	f7fe fd90 	bl	800a6b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb92:	480d      	ldr	r0, [pc, #52]	; (800bbc8 <prvInitialiseTaskLists+0x68>)
 800bb94:	f7fe fd8d 	bl	800a6b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb98:	480c      	ldr	r0, [pc, #48]	; (800bbcc <prvInitialiseTaskLists+0x6c>)
 800bb9a:	f7fe fd8a 	bl	800a6b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb9e:	480c      	ldr	r0, [pc, #48]	; (800bbd0 <prvInitialiseTaskLists+0x70>)
 800bba0:	f7fe fd87 	bl	800a6b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bba4:	480b      	ldr	r0, [pc, #44]	; (800bbd4 <prvInitialiseTaskLists+0x74>)
 800bba6:	f7fe fd84 	bl	800a6b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbaa:	4b0b      	ldr	r3, [pc, #44]	; (800bbd8 <prvInitialiseTaskLists+0x78>)
 800bbac:	4a05      	ldr	r2, [pc, #20]	; (800bbc4 <prvInitialiseTaskLists+0x64>)
 800bbae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	; (800bbdc <prvInitialiseTaskLists+0x7c>)
 800bbb2:	4a05      	ldr	r2, [pc, #20]	; (800bbc8 <prvInitialiseTaskLists+0x68>)
 800bbb4:	601a      	str	r2, [r3, #0]
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20001ab0 	.word	0x20001ab0
 800bbc4:	20001b3c 	.word	0x20001b3c
 800bbc8:	20001b50 	.word	0x20001b50
 800bbcc:	20001b6c 	.word	0x20001b6c
 800bbd0:	20001b80 	.word	0x20001b80
 800bbd4:	20001b98 	.word	0x20001b98
 800bbd8:	20001b64 	.word	0x20001b64
 800bbdc:	20001b68 	.word	0x20001b68

0800bbe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbe6:	e019      	b.n	800bc1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbe8:	f000 faa8 	bl	800c13c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <prvCheckTasksWaitingTermination+0x4c>)
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fe fde4 	bl	800a7c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	; (800bc30 <prvCheckTasksWaitingTermination+0x50>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3b01      	subs	r3, #1
 800bc04:	4a0a      	ldr	r2, [pc, #40]	; (800bc30 <prvCheckTasksWaitingTermination+0x50>)
 800bc06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <prvCheckTasksWaitingTermination+0x54>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	4a09      	ldr	r2, [pc, #36]	; (800bc34 <prvCheckTasksWaitingTermination+0x54>)
 800bc10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc12:	f000 fac1 	bl	800c198 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f80e 	bl	800bc38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc1c:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <prvCheckTasksWaitingTermination+0x54>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e1      	bne.n	800bbe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	20001b80 	.word	0x20001b80
 800bc30:	20001bac 	.word	0x20001bac
 800bc34:	20001b94 	.word	0x20001b94

0800bc38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d108      	bne.n	800bc5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 fc12 	bl	800c478 <vPortFree>
				vPortFree( pxTCB );
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fc0f 	bl	800c478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc5a:	e017      	b.n	800bc8c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d103      	bne.n	800bc6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fc06 	bl	800c478 <vPortFree>
	}
 800bc6c:	e00e      	b.n	800bc8c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d009      	beq.n	800bc8c <prvDeleteTCB+0x54>
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	60fb      	str	r3, [r7, #12]
 800bc8a:	e7fe      	b.n	800bc8a <prvDeleteTCB+0x52>
	}
 800bc8c:	bf00      	nop
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc9a:	4b0f      	ldr	r3, [pc, #60]	; (800bcd8 <prvResetNextTaskUnblockTime+0x44>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <prvResetNextTaskUnblockTime+0x14>
 800bca4:	2301      	movs	r3, #1
 800bca6:	e000      	b.n	800bcaa <prvResetNextTaskUnblockTime+0x16>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d004      	beq.n	800bcb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcae:	4b0b      	ldr	r3, [pc, #44]	; (800bcdc <prvResetNextTaskUnblockTime+0x48>)
 800bcb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcb6:	e008      	b.n	800bcca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bcb8:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <prvResetNextTaskUnblockTime+0x44>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	4a05      	ldr	r2, [pc, #20]	; (800bcdc <prvResetNextTaskUnblockTime+0x48>)
 800bcc8:	6013      	str	r3, [r2, #0]
}
 800bcca:	bf00      	nop
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	20001b64 	.word	0x20001b64
 800bcdc:	20001bcc 	.word	0x20001bcc

0800bce0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bce6:	4b0b      	ldr	r3, [pc, #44]	; (800bd14 <xTaskGetSchedulerState+0x34>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d102      	bne.n	800bcf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	607b      	str	r3, [r7, #4]
 800bcf2:	e008      	b.n	800bd06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcf4:	4b08      	ldr	r3, [pc, #32]	; (800bd18 <xTaskGetSchedulerState+0x38>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d102      	bne.n	800bd02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	607b      	str	r3, [r7, #4]
 800bd00:	e001      	b.n	800bd06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd02:	2300      	movs	r3, #0
 800bd04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd06:	687b      	ldr	r3, [r7, #4]
	}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	20001bb8 	.word	0x20001bb8
 800bd18:	20001bd4 	.word	0x20001bd4

0800bd1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d06c      	beq.n	800be0c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd32:	4b39      	ldr	r3, [pc, #228]	; (800be18 <xTaskPriorityDisinherit+0xfc>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	693a      	ldr	r2, [r7, #16]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d009      	beq.n	800bd50 <xTaskPriorityDisinherit+0x34>
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	60fb      	str	r3, [r7, #12]
 800bd4e:	e7fe      	b.n	800bd4e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d109      	bne.n	800bd6c <xTaskPriorityDisinherit+0x50>
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	60bb      	str	r3, [r7, #8]
 800bd6a:	e7fe      	b.n	800bd6a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd70:	1e5a      	subs	r2, r3, #1
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d044      	beq.n	800be0c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d140      	bne.n	800be0c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fe fd19 	bl	800a7c6 <uxListRemove>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d115      	bne.n	800bdc6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd9e:	491f      	ldr	r1, [pc, #124]	; (800be1c <xTaskPriorityDisinherit+0x100>)
 800bda0:	4613      	mov	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	440b      	add	r3, r1
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10a      	bne.n	800bdc6 <xTaskPriorityDisinherit+0xaa>
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdba:	43da      	mvns	r2, r3
 800bdbc:	4b18      	ldr	r3, [pc, #96]	; (800be20 <xTaskPriorityDisinherit+0x104>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	4a17      	ldr	r2, [pc, #92]	; (800be20 <xTaskPriorityDisinherit+0x104>)
 800bdc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd2:	f1c3 0207 	rsb	r2, r3, #7
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdde:	2201      	movs	r2, #1
 800bde0:	409a      	lsls	r2, r3
 800bde2:	4b0f      	ldr	r3, [pc, #60]	; (800be20 <xTaskPriorityDisinherit+0x104>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	4a0d      	ldr	r2, [pc, #52]	; (800be20 <xTaskPriorityDisinherit+0x104>)
 800bdea:	6013      	str	r3, [r2, #0]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	4a08      	ldr	r2, [pc, #32]	; (800be1c <xTaskPriorityDisinherit+0x100>)
 800bdfa:	441a      	add	r2, r3
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	3304      	adds	r3, #4
 800be00:	4619      	mov	r1, r3
 800be02:	4610      	mov	r0, r2
 800be04:	f7fe fc82 	bl	800a70c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be08:	2301      	movs	r3, #1
 800be0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be0c:	697b      	ldr	r3, [r7, #20]
	}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20001aac 	.word	0x20001aac
 800be1c:	20001ab0 	.word	0x20001ab0
 800be20:	20001bb4 	.word	0x20001bb4

0800be24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be2e:	4b29      	ldr	r3, [pc, #164]	; (800bed4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be34:	4b28      	ldr	r3, [pc, #160]	; (800bed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	3304      	adds	r3, #4
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fe fcc3 	bl	800a7c6 <uxListRemove>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10b      	bne.n	800be5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800be46:	4b24      	ldr	r3, [pc, #144]	; (800bed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4c:	2201      	movs	r2, #1
 800be4e:	fa02 f303 	lsl.w	r3, r2, r3
 800be52:	43da      	mvns	r2, r3
 800be54:	4b21      	ldr	r3, [pc, #132]	; (800bedc <prvAddCurrentTaskToDelayedList+0xb8>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4013      	ands	r3, r2
 800be5a:	4a20      	ldr	r2, [pc, #128]	; (800bedc <prvAddCurrentTaskToDelayedList+0xb8>)
 800be5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be64:	d10a      	bne.n	800be7c <prvAddCurrentTaskToDelayedList+0x58>
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d007      	beq.n	800be7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be6c:	4b1a      	ldr	r3, [pc, #104]	; (800bed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3304      	adds	r3, #4
 800be72:	4619      	mov	r1, r3
 800be74:	481a      	ldr	r0, [pc, #104]	; (800bee0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800be76:	f7fe fc49 	bl	800a70c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be7a:	e026      	b.n	800beca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4413      	add	r3, r2
 800be82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be84:	4b14      	ldr	r3, [pc, #80]	; (800bed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	429a      	cmp	r2, r3
 800be92:	d209      	bcs.n	800bea8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be94:	4b13      	ldr	r3, [pc, #76]	; (800bee4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	4b0f      	ldr	r3, [pc, #60]	; (800bed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3304      	adds	r3, #4
 800be9e:	4619      	mov	r1, r3
 800bea0:	4610      	mov	r0, r2
 800bea2:	f7fe fc57 	bl	800a754 <vListInsert>
}
 800bea6:	e010      	b.n	800beca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bea8:	4b0f      	ldr	r3, [pc, #60]	; (800bee8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	4b0a      	ldr	r3, [pc, #40]	; (800bed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3304      	adds	r3, #4
 800beb2:	4619      	mov	r1, r3
 800beb4:	4610      	mov	r0, r2
 800beb6:	f7fe fc4d 	bl	800a754 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800beba:	4b0c      	ldr	r3, [pc, #48]	; (800beec <prvAddCurrentTaskToDelayedList+0xc8>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d202      	bcs.n	800beca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bec4:	4a09      	ldr	r2, [pc, #36]	; (800beec <prvAddCurrentTaskToDelayedList+0xc8>)
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	6013      	str	r3, [r2, #0]
}
 800beca:	bf00      	nop
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	20001bb0 	.word	0x20001bb0
 800bed8:	20001aac 	.word	0x20001aac
 800bedc:	20001bb4 	.word	0x20001bb4
 800bee0:	20001b98 	.word	0x20001b98
 800bee4:	20001b68 	.word	0x20001b68
 800bee8:	20001b64 	.word	0x20001b64
 800beec:	20001bcc 	.word	0x20001bcc

0800bef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3b04      	subs	r3, #4
 800bf00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3b04      	subs	r3, #4
 800bf0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	f023 0201 	bic.w	r2, r3, #1
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	3b04      	subs	r3, #4
 800bf1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf20:	4a0c      	ldr	r2, [pc, #48]	; (800bf54 <pxPortInitialiseStack+0x64>)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	3b14      	subs	r3, #20
 800bf2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	3b04      	subs	r3, #4
 800bf36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f06f 0202 	mvn.w	r2, #2
 800bf3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3b20      	subs	r3, #32
 800bf44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf46:	68fb      	ldr	r3, [r7, #12]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	0800bf59 	.word	0x0800bf59

0800bf58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf62:	4b11      	ldr	r3, [pc, #68]	; (800bfa8 <prvTaskExitError+0x50>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6a:	d009      	beq.n	800bf80 <prvTaskExitError+0x28>
 800bf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf70:	f383 8811 	msr	BASEPRI, r3
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	60fb      	str	r3, [r7, #12]
 800bf7e:	e7fe      	b.n	800bf7e <prvTaskExitError+0x26>
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf92:	bf00      	nop
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d0fc      	beq.n	800bf94 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf9a:	bf00      	nop
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	20000010 	.word	0x20000010
 800bfac:	00000000 	.word	0x00000000

0800bfb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfb0:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <pxCurrentTCBConst2>)
 800bfb2:	6819      	ldr	r1, [r3, #0]
 800bfb4:	6808      	ldr	r0, [r1, #0]
 800bfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	f380 8809 	msr	PSP, r0
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f04f 0000 	mov.w	r0, #0
 800bfc6:	f380 8811 	msr	BASEPRI, r0
 800bfca:	4770      	bx	lr
 800bfcc:	f3af 8000 	nop.w

0800bfd0 <pxCurrentTCBConst2>:
 800bfd0:	20001aac 	.word	0x20001aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop

0800bfd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfd8:	4808      	ldr	r0, [pc, #32]	; (800bffc <prvPortStartFirstTask+0x24>)
 800bfda:	6800      	ldr	r0, [r0, #0]
 800bfdc:	6800      	ldr	r0, [r0, #0]
 800bfde:	f380 8808 	msr	MSP, r0
 800bfe2:	f04f 0000 	mov.w	r0, #0
 800bfe6:	f380 8814 	msr	CONTROL, r0
 800bfea:	b662      	cpsie	i
 800bfec:	b661      	cpsie	f
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	df00      	svc	0
 800bff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bffa:	bf00      	nop
 800bffc:	e000ed08 	.word	0xe000ed08

0800c000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c006:	4b44      	ldr	r3, [pc, #272]	; (800c118 <xPortStartScheduler+0x118>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a44      	ldr	r2, [pc, #272]	; (800c11c <xPortStartScheduler+0x11c>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d109      	bne.n	800c024 <xPortStartScheduler+0x24>
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	613b      	str	r3, [r7, #16]
 800c022:	e7fe      	b.n	800c022 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c024:	4b3c      	ldr	r3, [pc, #240]	; (800c118 <xPortStartScheduler+0x118>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a3d      	ldr	r2, [pc, #244]	; (800c120 <xPortStartScheduler+0x120>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d109      	bne.n	800c042 <xPortStartScheduler+0x42>
 800c02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	60fb      	str	r3, [r7, #12]
 800c040:	e7fe      	b.n	800c040 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c042:	4b38      	ldr	r3, [pc, #224]	; (800c124 <xPortStartScheduler+0x124>)
 800c044:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	22ff      	movs	r2, #255	; 0xff
 800c052:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c05c:	78fb      	ldrb	r3, [r7, #3]
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c064:	b2da      	uxtb	r2, r3
 800c066:	4b30      	ldr	r3, [pc, #192]	; (800c128 <xPortStartScheduler+0x128>)
 800c068:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c06a:	4b30      	ldr	r3, [pc, #192]	; (800c12c <xPortStartScheduler+0x12c>)
 800c06c:	2207      	movs	r2, #7
 800c06e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c070:	e009      	b.n	800c086 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c072:	4b2e      	ldr	r3, [pc, #184]	; (800c12c <xPortStartScheduler+0x12c>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3b01      	subs	r3, #1
 800c078:	4a2c      	ldr	r2, [pc, #176]	; (800c12c <xPortStartScheduler+0x12c>)
 800c07a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c07c:	78fb      	ldrb	r3, [r7, #3]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	b2db      	uxtb	r3, r3
 800c084:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c086:	78fb      	ldrb	r3, [r7, #3]
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c08e:	2b80      	cmp	r3, #128	; 0x80
 800c090:	d0ef      	beq.n	800c072 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c092:	4b26      	ldr	r3, [pc, #152]	; (800c12c <xPortStartScheduler+0x12c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f1c3 0307 	rsb	r3, r3, #7
 800c09a:	2b04      	cmp	r3, #4
 800c09c:	d009      	beq.n	800c0b2 <xPortStartScheduler+0xb2>
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	60bb      	str	r3, [r7, #8]
 800c0b0:	e7fe      	b.n	800c0b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0b2:	4b1e      	ldr	r3, [pc, #120]	; (800c12c <xPortStartScheduler+0x12c>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	021b      	lsls	r3, r3, #8
 800c0b8:	4a1c      	ldr	r2, [pc, #112]	; (800c12c <xPortStartScheduler+0x12c>)
 800c0ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0bc:	4b1b      	ldr	r3, [pc, #108]	; (800c12c <xPortStartScheduler+0x12c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0c4:	4a19      	ldr	r2, [pc, #100]	; (800c12c <xPortStartScheduler+0x12c>)
 800c0c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0d0:	4b17      	ldr	r3, [pc, #92]	; (800c130 <xPortStartScheduler+0x130>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a16      	ldr	r2, [pc, #88]	; (800c130 <xPortStartScheduler+0x130>)
 800c0d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0dc:	4b14      	ldr	r3, [pc, #80]	; (800c130 <xPortStartScheduler+0x130>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a13      	ldr	r2, [pc, #76]	; (800c130 <xPortStartScheduler+0x130>)
 800c0e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c0e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0e8:	f000 f8d6 	bl	800c298 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0ec:	4b11      	ldr	r3, [pc, #68]	; (800c134 <xPortStartScheduler+0x134>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0f2:	f000 f8f5 	bl	800c2e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c0f6:	4b10      	ldr	r3, [pc, #64]	; (800c138 <xPortStartScheduler+0x138>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a0f      	ldr	r2, [pc, #60]	; (800c138 <xPortStartScheduler+0x138>)
 800c0fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c100:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c102:	f7ff ff69 	bl	800bfd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c106:	f7ff fbb1 	bl	800b86c <vTaskSwitchContext>
	prvTaskExitError();
 800c10a:	f7ff ff25 	bl	800bf58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3718      	adds	r7, #24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	e000ed00 	.word	0xe000ed00
 800c11c:	410fc271 	.word	0x410fc271
 800c120:	410fc270 	.word	0x410fc270
 800c124:	e000e400 	.word	0xe000e400
 800c128:	20001bd8 	.word	0x20001bd8
 800c12c:	20001bdc 	.word	0x20001bdc
 800c130:	e000ed20 	.word	0xe000ed20
 800c134:	20000010 	.word	0x20000010
 800c138:	e000ef34 	.word	0xe000ef34

0800c13c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c154:	4b0e      	ldr	r3, [pc, #56]	; (800c190 <vPortEnterCritical+0x54>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3301      	adds	r3, #1
 800c15a:	4a0d      	ldr	r2, [pc, #52]	; (800c190 <vPortEnterCritical+0x54>)
 800c15c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c15e:	4b0c      	ldr	r3, [pc, #48]	; (800c190 <vPortEnterCritical+0x54>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d10e      	bne.n	800c184 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c166:	4b0b      	ldr	r3, [pc, #44]	; (800c194 <vPortEnterCritical+0x58>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d009      	beq.n	800c184 <vPortEnterCritical+0x48>
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	603b      	str	r3, [r7, #0]
 800c182:	e7fe      	b.n	800c182 <vPortEnterCritical+0x46>
	}
}
 800c184:	bf00      	nop
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr
 800c190:	20000010 	.word	0x20000010
 800c194:	e000ed04 	.word	0xe000ed04

0800c198 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c19e:	4b11      	ldr	r3, [pc, #68]	; (800c1e4 <vPortExitCritical+0x4c>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d109      	bne.n	800c1ba <vPortExitCritical+0x22>
 800c1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	607b      	str	r3, [r7, #4]
 800c1b8:	e7fe      	b.n	800c1b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c1ba:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <vPortExitCritical+0x4c>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	4a08      	ldr	r2, [pc, #32]	; (800c1e4 <vPortExitCritical+0x4c>)
 800c1c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1c4:	4b07      	ldr	r3, [pc, #28]	; (800c1e4 <vPortExitCritical+0x4c>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d104      	bne.n	800c1d6 <vPortExitCritical+0x3e>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	20000010 	.word	0x20000010
	...

0800c1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1f0:	f3ef 8009 	mrs	r0, PSP
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	4b15      	ldr	r3, [pc, #84]	; (800c250 <pxCurrentTCBConst>)
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	f01e 0f10 	tst.w	lr, #16
 800c200:	bf08      	it	eq
 800c202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20a:	6010      	str	r0, [r2, #0]
 800c20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c210:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c214:	f380 8811 	msr	BASEPRI, r0
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f7ff fb24 	bl	800b86c <vTaskSwitchContext>
 800c224:	f04f 0000 	mov.w	r0, #0
 800c228:	f380 8811 	msr	BASEPRI, r0
 800c22c:	bc09      	pop	{r0, r3}
 800c22e:	6819      	ldr	r1, [r3, #0]
 800c230:	6808      	ldr	r0, [r1, #0]
 800c232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c236:	f01e 0f10 	tst.w	lr, #16
 800c23a:	bf08      	it	eq
 800c23c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c240:	f380 8809 	msr	PSP, r0
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	f3af 8000 	nop.w

0800c250 <pxCurrentTCBConst>:
 800c250:	20001aac 	.word	0x20001aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c254:	bf00      	nop
 800c256:	bf00      	nop

0800c258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c270:	f7ff fa40 	bl	800b6f4 <xTaskIncrementTick>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c27a:	4b06      	ldr	r3, [pc, #24]	; (800c294 <SysTick_Handler+0x3c>)
 800c27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	2300      	movs	r3, #0
 800c284:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c28c:	bf00      	nop
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	e000ed04 	.word	0xe000ed04

0800c298 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c298:	b480      	push	{r7}
 800c29a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c29c:	4b0b      	ldr	r3, [pc, #44]	; (800c2cc <vPortSetupTimerInterrupt+0x34>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2a2:	4b0b      	ldr	r3, [pc, #44]	; (800c2d0 <vPortSetupTimerInterrupt+0x38>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2a8:	4b0a      	ldr	r3, [pc, #40]	; (800c2d4 <vPortSetupTimerInterrupt+0x3c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a0a      	ldr	r2, [pc, #40]	; (800c2d8 <vPortSetupTimerInterrupt+0x40>)
 800c2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b2:	099b      	lsrs	r3, r3, #6
 800c2b4:	4a09      	ldr	r2, [pc, #36]	; (800c2dc <vPortSetupTimerInterrupt+0x44>)
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ba:	4b04      	ldr	r3, [pc, #16]	; (800c2cc <vPortSetupTimerInterrupt+0x34>)
 800c2bc:	2207      	movs	r2, #7
 800c2be:	601a      	str	r2, [r3, #0]
}
 800c2c0:	bf00      	nop
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	e000e010 	.word	0xe000e010
 800c2d0:	e000e018 	.word	0xe000e018
 800c2d4:	20000004 	.word	0x20000004
 800c2d8:	10624dd3 	.word	0x10624dd3
 800c2dc:	e000e014 	.word	0xe000e014

0800c2e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c2e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c2f0 <vPortEnableVFP+0x10>
 800c2e4:	6801      	ldr	r1, [r0, #0]
 800c2e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c2ea:	6001      	str	r1, [r0, #0]
 800c2ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c2ee:	bf00      	nop
 800c2f0:	e000ed88 	.word	0xe000ed88

0800c2f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b08a      	sub	sp, #40	; 0x28
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c300:	f7ff f94e 	bl	800b5a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c304:	4b57      	ldr	r3, [pc, #348]	; (800c464 <pvPortMalloc+0x170>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c30c:	f000 f90c 	bl	800c528 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c310:	4b55      	ldr	r3, [pc, #340]	; (800c468 <pvPortMalloc+0x174>)
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4013      	ands	r3, r2
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f040 808c 	bne.w	800c436 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d01c      	beq.n	800c35e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c324:	2208      	movs	r2, #8
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4413      	add	r3, r2
 800c32a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f003 0307 	and.w	r3, r3, #7
 800c332:	2b00      	cmp	r3, #0
 800c334:	d013      	beq.n	800c35e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f023 0307 	bic.w	r3, r3, #7
 800c33c:	3308      	adds	r3, #8
 800c33e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f003 0307 	and.w	r3, r3, #7
 800c346:	2b00      	cmp	r3, #0
 800c348:	d009      	beq.n	800c35e <pvPortMalloc+0x6a>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	617b      	str	r3, [r7, #20]
 800c35c:	e7fe      	b.n	800c35c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d068      	beq.n	800c436 <pvPortMalloc+0x142>
 800c364:	4b41      	ldr	r3, [pc, #260]	; (800c46c <pvPortMalloc+0x178>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d863      	bhi.n	800c436 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c36e:	4b40      	ldr	r3, [pc, #256]	; (800c470 <pvPortMalloc+0x17c>)
 800c370:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c372:	4b3f      	ldr	r3, [pc, #252]	; (800c470 <pvPortMalloc+0x17c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c378:	e004      	b.n	800c384 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d903      	bls.n	800c396 <pvPortMalloc+0xa2>
 800c38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1f1      	bne.n	800c37a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c396:	4b33      	ldr	r3, [pc, #204]	; (800c464 <pvPortMalloc+0x170>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d04a      	beq.n	800c436 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2208      	movs	r2, #8
 800c3a6:	4413      	add	r3, r2
 800c3a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	6a3b      	ldr	r3, [r7, #32]
 800c3b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	1ad2      	subs	r2, r2, r3
 800c3ba:	2308      	movs	r3, #8
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d91e      	bls.n	800c400 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	f003 0307 	and.w	r3, r3, #7
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d009      	beq.n	800c3e8 <pvPortMalloc+0xf4>
 800c3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	613b      	str	r3, [r7, #16]
 800c3e6:	e7fe      	b.n	800c3e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	1ad2      	subs	r2, r2, r3
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3fa:	69b8      	ldr	r0, [r7, #24]
 800c3fc:	f000 f8f6 	bl	800c5ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c400:	4b1a      	ldr	r3, [pc, #104]	; (800c46c <pvPortMalloc+0x178>)
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	4a18      	ldr	r2, [pc, #96]	; (800c46c <pvPortMalloc+0x178>)
 800c40c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c40e:	4b17      	ldr	r3, [pc, #92]	; (800c46c <pvPortMalloc+0x178>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	4b18      	ldr	r3, [pc, #96]	; (800c474 <pvPortMalloc+0x180>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	429a      	cmp	r2, r3
 800c418:	d203      	bcs.n	800c422 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c41a:	4b14      	ldr	r3, [pc, #80]	; (800c46c <pvPortMalloc+0x178>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a15      	ldr	r2, [pc, #84]	; (800c474 <pvPortMalloc+0x180>)
 800c420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	4b10      	ldr	r3, [pc, #64]	; (800c468 <pvPortMalloc+0x174>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	431a      	orrs	r2, r3
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c436:	f7ff f8c1 	bl	800b5bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	f003 0307 	and.w	r3, r3, #7
 800c440:	2b00      	cmp	r3, #0
 800c442:	d009      	beq.n	800c458 <pvPortMalloc+0x164>
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	60fb      	str	r3, [r7, #12]
 800c456:	e7fe      	b.n	800c456 <pvPortMalloc+0x162>
	return pvReturn;
 800c458:	69fb      	ldr	r3, [r7, #28]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3728      	adds	r7, #40	; 0x28
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20006a08 	.word	0x20006a08
 800c468:	20006a14 	.word	0x20006a14
 800c46c:	20006a0c 	.word	0x20006a0c
 800c470:	20006a00 	.word	0x20006a00
 800c474:	20006a10 	.word	0x20006a10

0800c478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d046      	beq.n	800c518 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c48a:	2308      	movs	r3, #8
 800c48c:	425b      	negs	r3, r3
 800c48e:	697a      	ldr	r2, [r7, #20]
 800c490:	4413      	add	r3, r2
 800c492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	4b20      	ldr	r3, [pc, #128]	; (800c520 <vPortFree+0xa8>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d109      	bne.n	800c4ba <vPortFree+0x42>
 800c4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	e7fe      	b.n	800c4b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d009      	beq.n	800c4d6 <vPortFree+0x5e>
 800c4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c6:	f383 8811 	msr	BASEPRI, r3
 800c4ca:	f3bf 8f6f 	isb	sy
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	60bb      	str	r3, [r7, #8]
 800c4d4:	e7fe      	b.n	800c4d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	685a      	ldr	r2, [r3, #4]
 800c4da:	4b11      	ldr	r3, [pc, #68]	; (800c520 <vPortFree+0xa8>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4013      	ands	r3, r2
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d019      	beq.n	800c518 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d115      	bne.n	800c518 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	4b0b      	ldr	r3, [pc, #44]	; (800c520 <vPortFree+0xa8>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	43db      	mvns	r3, r3
 800c4f6:	401a      	ands	r2, r3
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4fc:	f7ff f850 	bl	800b5a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	685a      	ldr	r2, [r3, #4]
 800c504:	4b07      	ldr	r3, [pc, #28]	; (800c524 <vPortFree+0xac>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4413      	add	r3, r2
 800c50a:	4a06      	ldr	r2, [pc, #24]	; (800c524 <vPortFree+0xac>)
 800c50c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c50e:	6938      	ldr	r0, [r7, #16]
 800c510:	f000 f86c 	bl	800c5ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c514:	f7ff f852 	bl	800b5bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c518:	bf00      	nop
 800c51a:	3718      	adds	r7, #24
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	20006a14 	.word	0x20006a14
 800c524:	20006a0c 	.word	0x20006a0c

0800c528 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c52e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c532:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c534:	4b27      	ldr	r3, [pc, #156]	; (800c5d4 <prvHeapInit+0xac>)
 800c536:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f003 0307 	and.w	r3, r3, #7
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00c      	beq.n	800c55c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	3307      	adds	r3, #7
 800c546:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f023 0307 	bic.w	r3, r3, #7
 800c54e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	4a1f      	ldr	r2, [pc, #124]	; (800c5d4 <prvHeapInit+0xac>)
 800c558:	4413      	add	r3, r2
 800c55a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c560:	4a1d      	ldr	r2, [pc, #116]	; (800c5d8 <prvHeapInit+0xb0>)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c566:	4b1c      	ldr	r3, [pc, #112]	; (800c5d8 <prvHeapInit+0xb0>)
 800c568:	2200      	movs	r2, #0
 800c56a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	4413      	add	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c574:	2208      	movs	r2, #8
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	1a9b      	subs	r3, r3, r2
 800c57a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f023 0307 	bic.w	r3, r3, #7
 800c582:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	4a15      	ldr	r2, [pc, #84]	; (800c5dc <prvHeapInit+0xb4>)
 800c588:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c58a:	4b14      	ldr	r3, [pc, #80]	; (800c5dc <prvHeapInit+0xb4>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2200      	movs	r2, #0
 800c590:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c592:	4b12      	ldr	r3, [pc, #72]	; (800c5dc <prvHeapInit+0xb4>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2200      	movs	r2, #0
 800c598:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	1ad2      	subs	r2, r2, r3
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5a8:	4b0c      	ldr	r3, [pc, #48]	; (800c5dc <prvHeapInit+0xb4>)
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	4a0a      	ldr	r2, [pc, #40]	; (800c5e0 <prvHeapInit+0xb8>)
 800c5b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	4a09      	ldr	r2, [pc, #36]	; (800c5e4 <prvHeapInit+0xbc>)
 800c5be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5c0:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <prvHeapInit+0xc0>)
 800c5c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c5c6:	601a      	str	r2, [r3, #0]
}
 800c5c8:	bf00      	nop
 800c5ca:	3714      	adds	r7, #20
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr
 800c5d4:	20001be0 	.word	0x20001be0
 800c5d8:	20006a00 	.word	0x20006a00
 800c5dc:	20006a08 	.word	0x20006a08
 800c5e0:	20006a10 	.word	0x20006a10
 800c5e4:	20006a0c 	.word	0x20006a0c
 800c5e8:	20006a14 	.word	0x20006a14

0800c5ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5f4:	4b28      	ldr	r3, [pc, #160]	; (800c698 <prvInsertBlockIntoFreeList+0xac>)
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	e002      	b.n	800c600 <prvInsertBlockIntoFreeList+0x14>
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	60fb      	str	r3, [r7, #12]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	429a      	cmp	r2, r3
 800c608:	d8f7      	bhi.n	800c5fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	4413      	add	r3, r2
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d108      	bne.n	800c62e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	685a      	ldr	r2, [r3, #4]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	441a      	add	r2, r3
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	441a      	add	r2, r3
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d118      	bne.n	800c674 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	4b15      	ldr	r3, [pc, #84]	; (800c69c <prvInsertBlockIntoFreeList+0xb0>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d00d      	beq.n	800c66a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	441a      	add	r2, r3
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	e008      	b.n	800c67c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c66a:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <prvInsertBlockIntoFreeList+0xb0>)
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	601a      	str	r2, [r3, #0]
 800c672:	e003      	b.n	800c67c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	429a      	cmp	r2, r3
 800c682:	d002      	beq.n	800c68a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c68a:	bf00      	nop
 800c68c:	3714      	adds	r7, #20
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	20006a00 	.word	0x20006a00
 800c69c:	20006a08 	.word	0x20006a08

0800c6a0 <__errno>:
 800c6a0:	4b01      	ldr	r3, [pc, #4]	; (800c6a8 <__errno+0x8>)
 800c6a2:	6818      	ldr	r0, [r3, #0]
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	20000014 	.word	0x20000014

0800c6ac <__libc_init_array>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	4e0d      	ldr	r6, [pc, #52]	; (800c6e4 <__libc_init_array+0x38>)
 800c6b0:	4c0d      	ldr	r4, [pc, #52]	; (800c6e8 <__libc_init_array+0x3c>)
 800c6b2:	1ba4      	subs	r4, r4, r6
 800c6b4:	10a4      	asrs	r4, r4, #2
 800c6b6:	2500      	movs	r5, #0
 800c6b8:	42a5      	cmp	r5, r4
 800c6ba:	d109      	bne.n	800c6d0 <__libc_init_array+0x24>
 800c6bc:	4e0b      	ldr	r6, [pc, #44]	; (800c6ec <__libc_init_array+0x40>)
 800c6be:	4c0c      	ldr	r4, [pc, #48]	; (800c6f0 <__libc_init_array+0x44>)
 800c6c0:	f001 f8dc 	bl	800d87c <_init>
 800c6c4:	1ba4      	subs	r4, r4, r6
 800c6c6:	10a4      	asrs	r4, r4, #2
 800c6c8:	2500      	movs	r5, #0
 800c6ca:	42a5      	cmp	r5, r4
 800c6cc:	d105      	bne.n	800c6da <__libc_init_array+0x2e>
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6d4:	4798      	blx	r3
 800c6d6:	3501      	adds	r5, #1
 800c6d8:	e7ee      	b.n	800c6b8 <__libc_init_array+0xc>
 800c6da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6de:	4798      	blx	r3
 800c6e0:	3501      	adds	r5, #1
 800c6e2:	e7f2      	b.n	800c6ca <__libc_init_array+0x1e>
 800c6e4:	08012b68 	.word	0x08012b68
 800c6e8:	08012b68 	.word	0x08012b68
 800c6ec:	08012b68 	.word	0x08012b68
 800c6f0:	08012b6c 	.word	0x08012b6c

0800c6f4 <__itoa>:
 800c6f4:	1e93      	subs	r3, r2, #2
 800c6f6:	2b22      	cmp	r3, #34	; 0x22
 800c6f8:	b510      	push	{r4, lr}
 800c6fa:	460c      	mov	r4, r1
 800c6fc:	d904      	bls.n	800c708 <__itoa+0x14>
 800c6fe:	2300      	movs	r3, #0
 800c700:	700b      	strb	r3, [r1, #0]
 800c702:	461c      	mov	r4, r3
 800c704:	4620      	mov	r0, r4
 800c706:	bd10      	pop	{r4, pc}
 800c708:	2a0a      	cmp	r2, #10
 800c70a:	d109      	bne.n	800c720 <__itoa+0x2c>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	da07      	bge.n	800c720 <__itoa+0x2c>
 800c710:	232d      	movs	r3, #45	; 0x2d
 800c712:	700b      	strb	r3, [r1, #0]
 800c714:	4240      	negs	r0, r0
 800c716:	2101      	movs	r1, #1
 800c718:	4421      	add	r1, r4
 800c71a:	f000 f819 	bl	800c750 <__utoa>
 800c71e:	e7f1      	b.n	800c704 <__itoa+0x10>
 800c720:	2100      	movs	r1, #0
 800c722:	e7f9      	b.n	800c718 <__itoa+0x24>

0800c724 <itoa>:
 800c724:	f7ff bfe6 	b.w	800c6f4 <__itoa>

0800c728 <memcpy>:
 800c728:	b510      	push	{r4, lr}
 800c72a:	1e43      	subs	r3, r0, #1
 800c72c:	440a      	add	r2, r1
 800c72e:	4291      	cmp	r1, r2
 800c730:	d100      	bne.n	800c734 <memcpy+0xc>
 800c732:	bd10      	pop	{r4, pc}
 800c734:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c73c:	e7f7      	b.n	800c72e <memcpy+0x6>

0800c73e <memset>:
 800c73e:	4402      	add	r2, r0
 800c740:	4603      	mov	r3, r0
 800c742:	4293      	cmp	r3, r2
 800c744:	d100      	bne.n	800c748 <memset+0xa>
 800c746:	4770      	bx	lr
 800c748:	f803 1b01 	strb.w	r1, [r3], #1
 800c74c:	e7f9      	b.n	800c742 <memset+0x4>
	...

0800c750 <__utoa>:
 800c750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c752:	4b1d      	ldr	r3, [pc, #116]	; (800c7c8 <__utoa+0x78>)
 800c754:	b08b      	sub	sp, #44	; 0x2c
 800c756:	4605      	mov	r5, r0
 800c758:	460c      	mov	r4, r1
 800c75a:	466e      	mov	r6, sp
 800c75c:	f103 0c20 	add.w	ip, r3, #32
 800c760:	6818      	ldr	r0, [r3, #0]
 800c762:	6859      	ldr	r1, [r3, #4]
 800c764:	4637      	mov	r7, r6
 800c766:	c703      	stmia	r7!, {r0, r1}
 800c768:	3308      	adds	r3, #8
 800c76a:	4563      	cmp	r3, ip
 800c76c:	463e      	mov	r6, r7
 800c76e:	d1f7      	bne.n	800c760 <__utoa+0x10>
 800c770:	6818      	ldr	r0, [r3, #0]
 800c772:	791b      	ldrb	r3, [r3, #4]
 800c774:	713b      	strb	r3, [r7, #4]
 800c776:	1e93      	subs	r3, r2, #2
 800c778:	2b22      	cmp	r3, #34	; 0x22
 800c77a:	6038      	str	r0, [r7, #0]
 800c77c:	f04f 0300 	mov.w	r3, #0
 800c780:	d904      	bls.n	800c78c <__utoa+0x3c>
 800c782:	7023      	strb	r3, [r4, #0]
 800c784:	461c      	mov	r4, r3
 800c786:	4620      	mov	r0, r4
 800c788:	b00b      	add	sp, #44	; 0x2c
 800c78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c78c:	1e66      	subs	r6, r4, #1
 800c78e:	fbb5 f0f2 	udiv	r0, r5, r2
 800c792:	af0a      	add	r7, sp, #40	; 0x28
 800c794:	fb02 5510 	mls	r5, r2, r0, r5
 800c798:	443d      	add	r5, r7
 800c79a:	1c59      	adds	r1, r3, #1
 800c79c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800c7a0:	f806 5f01 	strb.w	r5, [r6, #1]!
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	b968      	cbnz	r0, 800c7c4 <__utoa+0x74>
 800c7a8:	5460      	strb	r0, [r4, r1]
 800c7aa:	4423      	add	r3, r4
 800c7ac:	4622      	mov	r2, r4
 800c7ae:	1b19      	subs	r1, r3, r4
 800c7b0:	1b10      	subs	r0, r2, r4
 800c7b2:	4281      	cmp	r1, r0
 800c7b4:	dde7      	ble.n	800c786 <__utoa+0x36>
 800c7b6:	7811      	ldrb	r1, [r2, #0]
 800c7b8:	7818      	ldrb	r0, [r3, #0]
 800c7ba:	f802 0b01 	strb.w	r0, [r2], #1
 800c7be:	f803 1901 	strb.w	r1, [r3], #-1
 800c7c2:	e7f4      	b.n	800c7ae <__utoa+0x5e>
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	e7e2      	b.n	800c78e <__utoa+0x3e>
 800c7c8:	08012a97 	.word	0x08012a97

0800c7cc <pow>:
 800c7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	ed2d 8b04 	vpush	{d8-d9}
 800c7d4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800caa8 <pow+0x2dc>
 800c7d8:	b08d      	sub	sp, #52	; 0x34
 800c7da:	ec57 6b10 	vmov	r6, r7, d0
 800c7de:	ec55 4b11 	vmov	r4, r5, d1
 800c7e2:	f000 f965 	bl	800cab0 <__ieee754_pow>
 800c7e6:	f999 3000 	ldrsb.w	r3, [r9]
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	eeb0 8a40 	vmov.f32	s16, s0
 800c7f2:	eef0 8a60 	vmov.f32	s17, s1
 800c7f6:	46c8      	mov	r8, r9
 800c7f8:	d05f      	beq.n	800c8ba <pow+0xee>
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	462b      	mov	r3, r5
 800c7fe:	4620      	mov	r0, r4
 800c800:	4629      	mov	r1, r5
 800c802:	f7f4 f943 	bl	8000a8c <__aeabi_dcmpun>
 800c806:	4683      	mov	fp, r0
 800c808:	2800      	cmp	r0, #0
 800c80a:	d156      	bne.n	800c8ba <pow+0xee>
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	4630      	mov	r0, r6
 800c812:	4639      	mov	r1, r7
 800c814:	f7f4 f93a 	bl	8000a8c <__aeabi_dcmpun>
 800c818:	9001      	str	r0, [sp, #4]
 800c81a:	b1e8      	cbz	r0, 800c858 <pow+0x8c>
 800c81c:	2200      	movs	r2, #0
 800c81e:	2300      	movs	r3, #0
 800c820:	4620      	mov	r0, r4
 800c822:	4629      	mov	r1, r5
 800c824:	f7f4 f900 	bl	8000a28 <__aeabi_dcmpeq>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d046      	beq.n	800c8ba <pow+0xee>
 800c82c:	2301      	movs	r3, #1
 800c82e:	9302      	str	r3, [sp, #8]
 800c830:	4b96      	ldr	r3, [pc, #600]	; (800ca8c <pow+0x2c0>)
 800c832:	9303      	str	r3, [sp, #12]
 800c834:	4b96      	ldr	r3, [pc, #600]	; (800ca90 <pow+0x2c4>)
 800c836:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c83a:	2200      	movs	r2, #0
 800c83c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c840:	9b00      	ldr	r3, [sp, #0]
 800c842:	2b02      	cmp	r3, #2
 800c844:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c848:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c84c:	d033      	beq.n	800c8b6 <pow+0xea>
 800c84e:	a802      	add	r0, sp, #8
 800c850:	f000 fefd 	bl	800d64e <matherr>
 800c854:	bb48      	cbnz	r0, 800c8aa <pow+0xde>
 800c856:	e05d      	b.n	800c914 <pow+0x148>
 800c858:	f04f 0a00 	mov.w	sl, #0
 800c85c:	f04f 0b00 	mov.w	fp, #0
 800c860:	4652      	mov	r2, sl
 800c862:	465b      	mov	r3, fp
 800c864:	4630      	mov	r0, r6
 800c866:	4639      	mov	r1, r7
 800c868:	f7f4 f8de 	bl	8000a28 <__aeabi_dcmpeq>
 800c86c:	ec4b ab19 	vmov	d9, sl, fp
 800c870:	2800      	cmp	r0, #0
 800c872:	d054      	beq.n	800c91e <pow+0x152>
 800c874:	4652      	mov	r2, sl
 800c876:	465b      	mov	r3, fp
 800c878:	4620      	mov	r0, r4
 800c87a:	4629      	mov	r1, r5
 800c87c:	f7f4 f8d4 	bl	8000a28 <__aeabi_dcmpeq>
 800c880:	4680      	mov	r8, r0
 800c882:	b318      	cbz	r0, 800c8cc <pow+0x100>
 800c884:	2301      	movs	r3, #1
 800c886:	9302      	str	r3, [sp, #8]
 800c888:	4b80      	ldr	r3, [pc, #512]	; (800ca8c <pow+0x2c0>)
 800c88a:	9303      	str	r3, [sp, #12]
 800c88c:	9b01      	ldr	r3, [sp, #4]
 800c88e:	930a      	str	r3, [sp, #40]	; 0x28
 800c890:	9b00      	ldr	r3, [sp, #0]
 800c892:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c896:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c89a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d0d5      	beq.n	800c84e <pow+0x82>
 800c8a2:	4b7b      	ldr	r3, [pc, #492]	; (800ca90 <pow+0x2c4>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ac:	b11b      	cbz	r3, 800c8b6 <pow+0xea>
 800c8ae:	f7ff fef7 	bl	800c6a0 <__errno>
 800c8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8b4:	6003      	str	r3, [r0, #0]
 800c8b6:	ed9d 8b08 	vldr	d8, [sp, #32]
 800c8ba:	eeb0 0a48 	vmov.f32	s0, s16
 800c8be:	eef0 0a68 	vmov.f32	s1, s17
 800c8c2:	b00d      	add	sp, #52	; 0x34
 800c8c4:	ecbd 8b04 	vpop	{d8-d9}
 800c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8cc:	ec45 4b10 	vmov	d0, r4, r5
 800c8d0:	f000 feb5 	bl	800d63e <finite>
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	d0f0      	beq.n	800c8ba <pow+0xee>
 800c8d8:	4652      	mov	r2, sl
 800c8da:	465b      	mov	r3, fp
 800c8dc:	4620      	mov	r0, r4
 800c8de:	4629      	mov	r1, r5
 800c8e0:	f7f4 f8ac 	bl	8000a3c <__aeabi_dcmplt>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d0e8      	beq.n	800c8ba <pow+0xee>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	9302      	str	r3, [sp, #8]
 800c8ec:	4b67      	ldr	r3, [pc, #412]	; (800ca8c <pow+0x2c0>)
 800c8ee:	9303      	str	r3, [sp, #12]
 800c8f0:	f999 3000 	ldrsb.w	r3, [r9]
 800c8f4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800c8f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c8fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c900:	b913      	cbnz	r3, 800c908 <pow+0x13c>
 800c902:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c906:	e7a2      	b.n	800c84e <pow+0x82>
 800c908:	4962      	ldr	r1, [pc, #392]	; (800ca94 <pow+0x2c8>)
 800c90a:	2000      	movs	r0, #0
 800c90c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c910:	2b02      	cmp	r3, #2
 800c912:	d19c      	bne.n	800c84e <pow+0x82>
 800c914:	f7ff fec4 	bl	800c6a0 <__errno>
 800c918:	2321      	movs	r3, #33	; 0x21
 800c91a:	6003      	str	r3, [r0, #0]
 800c91c:	e7c5      	b.n	800c8aa <pow+0xde>
 800c91e:	eeb0 0a48 	vmov.f32	s0, s16
 800c922:	eef0 0a68 	vmov.f32	s1, s17
 800c926:	f000 fe8a 	bl	800d63e <finite>
 800c92a:	9000      	str	r0, [sp, #0]
 800c92c:	2800      	cmp	r0, #0
 800c92e:	f040 8081 	bne.w	800ca34 <pow+0x268>
 800c932:	ec47 6b10 	vmov	d0, r6, r7
 800c936:	f000 fe82 	bl	800d63e <finite>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d07a      	beq.n	800ca34 <pow+0x268>
 800c93e:	ec45 4b10 	vmov	d0, r4, r5
 800c942:	f000 fe7c 	bl	800d63e <finite>
 800c946:	2800      	cmp	r0, #0
 800c948:	d074      	beq.n	800ca34 <pow+0x268>
 800c94a:	ec53 2b18 	vmov	r2, r3, d8
 800c94e:	ee18 0a10 	vmov	r0, s16
 800c952:	4619      	mov	r1, r3
 800c954:	f7f4 f89a 	bl	8000a8c <__aeabi_dcmpun>
 800c958:	f999 9000 	ldrsb.w	r9, [r9]
 800c95c:	4b4b      	ldr	r3, [pc, #300]	; (800ca8c <pow+0x2c0>)
 800c95e:	b1b0      	cbz	r0, 800c98e <pow+0x1c2>
 800c960:	2201      	movs	r2, #1
 800c962:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c966:	9b00      	ldr	r3, [sp, #0]
 800c968:	930a      	str	r3, [sp, #40]	; 0x28
 800c96a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c96e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c972:	f1b9 0f00 	cmp.w	r9, #0
 800c976:	d0c4      	beq.n	800c902 <pow+0x136>
 800c978:	4652      	mov	r2, sl
 800c97a:	465b      	mov	r3, fp
 800c97c:	4650      	mov	r0, sl
 800c97e:	4659      	mov	r1, fp
 800c980:	f7f3 ff14 	bl	80007ac <__aeabi_ddiv>
 800c984:	f1b9 0f02 	cmp.w	r9, #2
 800c988:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c98c:	e7c1      	b.n	800c912 <pow+0x146>
 800c98e:	2203      	movs	r2, #3
 800c990:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c994:	900a      	str	r0, [sp, #40]	; 0x28
 800c996:	4629      	mov	r1, r5
 800c998:	4620      	mov	r0, r4
 800c99a:	2200      	movs	r2, #0
 800c99c:	4b3e      	ldr	r3, [pc, #248]	; (800ca98 <pow+0x2cc>)
 800c99e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c9a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c9a6:	f7f3 fdd7 	bl	8000558 <__aeabi_dmul>
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	f1b9 0f00 	cmp.w	r9, #0
 800c9b2:	d124      	bne.n	800c9fe <pow+0x232>
 800c9b4:	4b39      	ldr	r3, [pc, #228]	; (800ca9c <pow+0x2d0>)
 800c9b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c9ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c9be:	4630      	mov	r0, r6
 800c9c0:	4652      	mov	r2, sl
 800c9c2:	465b      	mov	r3, fp
 800c9c4:	4639      	mov	r1, r7
 800c9c6:	f7f4 f839 	bl	8000a3c <__aeabi_dcmplt>
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d056      	beq.n	800ca7c <pow+0x2b0>
 800c9ce:	ec45 4b10 	vmov	d0, r4, r5
 800c9d2:	f000 fe49 	bl	800d668 <rint>
 800c9d6:	4622      	mov	r2, r4
 800c9d8:	462b      	mov	r3, r5
 800c9da:	ec51 0b10 	vmov	r0, r1, d0
 800c9de:	f7f4 f823 	bl	8000a28 <__aeabi_dcmpeq>
 800c9e2:	b920      	cbnz	r0, 800c9ee <pow+0x222>
 800c9e4:	4b2e      	ldr	r3, [pc, #184]	; (800caa0 <pow+0x2d4>)
 800c9e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c9ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c9ee:	f998 3000 	ldrsb.w	r3, [r8]
 800c9f2:	2b02      	cmp	r3, #2
 800c9f4:	d142      	bne.n	800ca7c <pow+0x2b0>
 800c9f6:	f7ff fe53 	bl	800c6a0 <__errno>
 800c9fa:	2322      	movs	r3, #34	; 0x22
 800c9fc:	e78d      	b.n	800c91a <pow+0x14e>
 800c9fe:	4b29      	ldr	r3, [pc, #164]	; (800caa4 <pow+0x2d8>)
 800ca00:	2200      	movs	r2, #0
 800ca02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ca06:	4630      	mov	r0, r6
 800ca08:	4652      	mov	r2, sl
 800ca0a:	465b      	mov	r3, fp
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	f7f4 f815 	bl	8000a3c <__aeabi_dcmplt>
 800ca12:	2800      	cmp	r0, #0
 800ca14:	d0eb      	beq.n	800c9ee <pow+0x222>
 800ca16:	ec45 4b10 	vmov	d0, r4, r5
 800ca1a:	f000 fe25 	bl	800d668 <rint>
 800ca1e:	4622      	mov	r2, r4
 800ca20:	462b      	mov	r3, r5
 800ca22:	ec51 0b10 	vmov	r0, r1, d0
 800ca26:	f7f3 ffff 	bl	8000a28 <__aeabi_dcmpeq>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d1df      	bne.n	800c9ee <pow+0x222>
 800ca2e:	2200      	movs	r2, #0
 800ca30:	4b18      	ldr	r3, [pc, #96]	; (800ca94 <pow+0x2c8>)
 800ca32:	e7da      	b.n	800c9ea <pow+0x21e>
 800ca34:	2200      	movs	r2, #0
 800ca36:	2300      	movs	r3, #0
 800ca38:	ec51 0b18 	vmov	r0, r1, d8
 800ca3c:	f7f3 fff4 	bl	8000a28 <__aeabi_dcmpeq>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	f43f af3a 	beq.w	800c8ba <pow+0xee>
 800ca46:	ec47 6b10 	vmov	d0, r6, r7
 800ca4a:	f000 fdf8 	bl	800d63e <finite>
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	f43f af33 	beq.w	800c8ba <pow+0xee>
 800ca54:	ec45 4b10 	vmov	d0, r4, r5
 800ca58:	f000 fdf1 	bl	800d63e <finite>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	f43f af2c 	beq.w	800c8ba <pow+0xee>
 800ca62:	2304      	movs	r3, #4
 800ca64:	9302      	str	r3, [sp, #8]
 800ca66:	4b09      	ldr	r3, [pc, #36]	; (800ca8c <pow+0x2c0>)
 800ca68:	9303      	str	r3, [sp, #12]
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	930a      	str	r3, [sp, #40]	; 0x28
 800ca6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ca72:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ca76:	ed8d 9b08 	vstr	d9, [sp, #32]
 800ca7a:	e7b8      	b.n	800c9ee <pow+0x222>
 800ca7c:	a802      	add	r0, sp, #8
 800ca7e:	f000 fde6 	bl	800d64e <matherr>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	f47f af11 	bne.w	800c8aa <pow+0xde>
 800ca88:	e7b5      	b.n	800c9f6 <pow+0x22a>
 800ca8a:	bf00      	nop
 800ca8c:	08012b1c 	.word	0x08012b1c
 800ca90:	3ff00000 	.word	0x3ff00000
 800ca94:	fff00000 	.word	0xfff00000
 800ca98:	3fe00000 	.word	0x3fe00000
 800ca9c:	47efffff 	.word	0x47efffff
 800caa0:	c7efffff 	.word	0xc7efffff
 800caa4:	7ff00000 	.word	0x7ff00000
 800caa8:	20000078 	.word	0x20000078
 800caac:	00000000 	.word	0x00000000

0800cab0 <__ieee754_pow>:
 800cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab4:	b091      	sub	sp, #68	; 0x44
 800cab6:	ed8d 1b00 	vstr	d1, [sp]
 800caba:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cabe:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cac2:	ea58 0302 	orrs.w	r3, r8, r2
 800cac6:	ec57 6b10 	vmov	r6, r7, d0
 800caca:	f000 84be 	beq.w	800d44a <__ieee754_pow+0x99a>
 800cace:	4b7a      	ldr	r3, [pc, #488]	; (800ccb8 <__ieee754_pow+0x208>)
 800cad0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cad4:	429c      	cmp	r4, r3
 800cad6:	463d      	mov	r5, r7
 800cad8:	ee10 aa10 	vmov	sl, s0
 800cadc:	dc09      	bgt.n	800caf2 <__ieee754_pow+0x42>
 800cade:	d103      	bne.n	800cae8 <__ieee754_pow+0x38>
 800cae0:	b93e      	cbnz	r6, 800caf2 <__ieee754_pow+0x42>
 800cae2:	45a0      	cmp	r8, r4
 800cae4:	dc0d      	bgt.n	800cb02 <__ieee754_pow+0x52>
 800cae6:	e001      	b.n	800caec <__ieee754_pow+0x3c>
 800cae8:	4598      	cmp	r8, r3
 800caea:	dc02      	bgt.n	800caf2 <__ieee754_pow+0x42>
 800caec:	4598      	cmp	r8, r3
 800caee:	d10e      	bne.n	800cb0e <__ieee754_pow+0x5e>
 800caf0:	b16a      	cbz	r2, 800cb0e <__ieee754_pow+0x5e>
 800caf2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800caf6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cafa:	ea54 030a 	orrs.w	r3, r4, sl
 800cafe:	f000 84a4 	beq.w	800d44a <__ieee754_pow+0x99a>
 800cb02:	486e      	ldr	r0, [pc, #440]	; (800ccbc <__ieee754_pow+0x20c>)
 800cb04:	b011      	add	sp, #68	; 0x44
 800cb06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0a:	f000 bda5 	b.w	800d658 <nan>
 800cb0e:	2d00      	cmp	r5, #0
 800cb10:	da53      	bge.n	800cbba <__ieee754_pow+0x10a>
 800cb12:	4b6b      	ldr	r3, [pc, #428]	; (800ccc0 <__ieee754_pow+0x210>)
 800cb14:	4598      	cmp	r8, r3
 800cb16:	dc4d      	bgt.n	800cbb4 <__ieee754_pow+0x104>
 800cb18:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cb1c:	4598      	cmp	r8, r3
 800cb1e:	dd4c      	ble.n	800cbba <__ieee754_pow+0x10a>
 800cb20:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cb24:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cb28:	2b14      	cmp	r3, #20
 800cb2a:	dd26      	ble.n	800cb7a <__ieee754_pow+0xca>
 800cb2c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cb30:	fa22 f103 	lsr.w	r1, r2, r3
 800cb34:	fa01 f303 	lsl.w	r3, r1, r3
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d13e      	bne.n	800cbba <__ieee754_pow+0x10a>
 800cb3c:	f001 0101 	and.w	r1, r1, #1
 800cb40:	f1c1 0b02 	rsb	fp, r1, #2
 800cb44:	2a00      	cmp	r2, #0
 800cb46:	d15b      	bne.n	800cc00 <__ieee754_pow+0x150>
 800cb48:	4b5b      	ldr	r3, [pc, #364]	; (800ccb8 <__ieee754_pow+0x208>)
 800cb4a:	4598      	cmp	r8, r3
 800cb4c:	d124      	bne.n	800cb98 <__ieee754_pow+0xe8>
 800cb4e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cb52:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cb56:	ea53 030a 	orrs.w	r3, r3, sl
 800cb5a:	f000 8476 	beq.w	800d44a <__ieee754_pow+0x99a>
 800cb5e:	4b59      	ldr	r3, [pc, #356]	; (800ccc4 <__ieee754_pow+0x214>)
 800cb60:	429c      	cmp	r4, r3
 800cb62:	dd2d      	ble.n	800cbc0 <__ieee754_pow+0x110>
 800cb64:	f1b9 0f00 	cmp.w	r9, #0
 800cb68:	f280 8473 	bge.w	800d452 <__ieee754_pow+0x9a2>
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	2100      	movs	r1, #0
 800cb70:	ec41 0b10 	vmov	d0, r0, r1
 800cb74:	b011      	add	sp, #68	; 0x44
 800cb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb7a:	2a00      	cmp	r2, #0
 800cb7c:	d13e      	bne.n	800cbfc <__ieee754_pow+0x14c>
 800cb7e:	f1c3 0314 	rsb	r3, r3, #20
 800cb82:	fa48 f103 	asr.w	r1, r8, r3
 800cb86:	fa01 f303 	lsl.w	r3, r1, r3
 800cb8a:	4543      	cmp	r3, r8
 800cb8c:	f040 8469 	bne.w	800d462 <__ieee754_pow+0x9b2>
 800cb90:	f001 0101 	and.w	r1, r1, #1
 800cb94:	f1c1 0b02 	rsb	fp, r1, #2
 800cb98:	4b4b      	ldr	r3, [pc, #300]	; (800ccc8 <__ieee754_pow+0x218>)
 800cb9a:	4598      	cmp	r8, r3
 800cb9c:	d118      	bne.n	800cbd0 <__ieee754_pow+0x120>
 800cb9e:	f1b9 0f00 	cmp.w	r9, #0
 800cba2:	f280 845a 	bge.w	800d45a <__ieee754_pow+0x9aa>
 800cba6:	4948      	ldr	r1, [pc, #288]	; (800ccc8 <__ieee754_pow+0x218>)
 800cba8:	4632      	mov	r2, r6
 800cbaa:	463b      	mov	r3, r7
 800cbac:	2000      	movs	r0, #0
 800cbae:	f7f3 fdfd 	bl	80007ac <__aeabi_ddiv>
 800cbb2:	e7dd      	b.n	800cb70 <__ieee754_pow+0xc0>
 800cbb4:	f04f 0b02 	mov.w	fp, #2
 800cbb8:	e7c4      	b.n	800cb44 <__ieee754_pow+0x94>
 800cbba:	f04f 0b00 	mov.w	fp, #0
 800cbbe:	e7c1      	b.n	800cb44 <__ieee754_pow+0x94>
 800cbc0:	f1b9 0f00 	cmp.w	r9, #0
 800cbc4:	dad2      	bge.n	800cb6c <__ieee754_pow+0xbc>
 800cbc6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cbca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cbce:	e7cf      	b.n	800cb70 <__ieee754_pow+0xc0>
 800cbd0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800cbd4:	d106      	bne.n	800cbe4 <__ieee754_pow+0x134>
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	463b      	mov	r3, r7
 800cbda:	4610      	mov	r0, r2
 800cbdc:	4619      	mov	r1, r3
 800cbde:	f7f3 fcbb 	bl	8000558 <__aeabi_dmul>
 800cbe2:	e7c5      	b.n	800cb70 <__ieee754_pow+0xc0>
 800cbe4:	4b39      	ldr	r3, [pc, #228]	; (800cccc <__ieee754_pow+0x21c>)
 800cbe6:	4599      	cmp	r9, r3
 800cbe8:	d10a      	bne.n	800cc00 <__ieee754_pow+0x150>
 800cbea:	2d00      	cmp	r5, #0
 800cbec:	db08      	blt.n	800cc00 <__ieee754_pow+0x150>
 800cbee:	ec47 6b10 	vmov	d0, r6, r7
 800cbf2:	b011      	add	sp, #68	; 0x44
 800cbf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	f000 bc68 	b.w	800d4cc <__ieee754_sqrt>
 800cbfc:	f04f 0b00 	mov.w	fp, #0
 800cc00:	ec47 6b10 	vmov	d0, r6, r7
 800cc04:	f000 fd12 	bl	800d62c <fabs>
 800cc08:	ec51 0b10 	vmov	r0, r1, d0
 800cc0c:	f1ba 0f00 	cmp.w	sl, #0
 800cc10:	d127      	bne.n	800cc62 <__ieee754_pow+0x1b2>
 800cc12:	b124      	cbz	r4, 800cc1e <__ieee754_pow+0x16e>
 800cc14:	4b2c      	ldr	r3, [pc, #176]	; (800ccc8 <__ieee754_pow+0x218>)
 800cc16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d121      	bne.n	800cc62 <__ieee754_pow+0x1b2>
 800cc1e:	f1b9 0f00 	cmp.w	r9, #0
 800cc22:	da05      	bge.n	800cc30 <__ieee754_pow+0x180>
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	2000      	movs	r0, #0
 800cc2a:	4927      	ldr	r1, [pc, #156]	; (800ccc8 <__ieee754_pow+0x218>)
 800cc2c:	f7f3 fdbe 	bl	80007ac <__aeabi_ddiv>
 800cc30:	2d00      	cmp	r5, #0
 800cc32:	da9d      	bge.n	800cb70 <__ieee754_pow+0xc0>
 800cc34:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cc38:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cc3c:	ea54 030b 	orrs.w	r3, r4, fp
 800cc40:	d108      	bne.n	800cc54 <__ieee754_pow+0x1a4>
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	4610      	mov	r0, r2
 800cc48:	4619      	mov	r1, r3
 800cc4a:	f7f3 facd 	bl	80001e8 <__aeabi_dsub>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	460b      	mov	r3, r1
 800cc52:	e7ac      	b.n	800cbae <__ieee754_pow+0xfe>
 800cc54:	f1bb 0f01 	cmp.w	fp, #1
 800cc58:	d18a      	bne.n	800cb70 <__ieee754_pow+0xc0>
 800cc5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc5e:	4619      	mov	r1, r3
 800cc60:	e786      	b.n	800cb70 <__ieee754_pow+0xc0>
 800cc62:	0fed      	lsrs	r5, r5, #31
 800cc64:	1e6b      	subs	r3, r5, #1
 800cc66:	930d      	str	r3, [sp, #52]	; 0x34
 800cc68:	ea5b 0303 	orrs.w	r3, fp, r3
 800cc6c:	d102      	bne.n	800cc74 <__ieee754_pow+0x1c4>
 800cc6e:	4632      	mov	r2, r6
 800cc70:	463b      	mov	r3, r7
 800cc72:	e7e8      	b.n	800cc46 <__ieee754_pow+0x196>
 800cc74:	4b16      	ldr	r3, [pc, #88]	; (800ccd0 <__ieee754_pow+0x220>)
 800cc76:	4598      	cmp	r8, r3
 800cc78:	f340 80fe 	ble.w	800ce78 <__ieee754_pow+0x3c8>
 800cc7c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cc80:	4598      	cmp	r8, r3
 800cc82:	dd0a      	ble.n	800cc9a <__ieee754_pow+0x1ea>
 800cc84:	4b0f      	ldr	r3, [pc, #60]	; (800ccc4 <__ieee754_pow+0x214>)
 800cc86:	429c      	cmp	r4, r3
 800cc88:	dc0d      	bgt.n	800cca6 <__ieee754_pow+0x1f6>
 800cc8a:	f1b9 0f00 	cmp.w	r9, #0
 800cc8e:	f6bf af6d 	bge.w	800cb6c <__ieee754_pow+0xbc>
 800cc92:	a307      	add	r3, pc, #28	; (adr r3, 800ccb0 <__ieee754_pow+0x200>)
 800cc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc98:	e79f      	b.n	800cbda <__ieee754_pow+0x12a>
 800cc9a:	4b0e      	ldr	r3, [pc, #56]	; (800ccd4 <__ieee754_pow+0x224>)
 800cc9c:	429c      	cmp	r4, r3
 800cc9e:	ddf4      	ble.n	800cc8a <__ieee754_pow+0x1da>
 800cca0:	4b09      	ldr	r3, [pc, #36]	; (800ccc8 <__ieee754_pow+0x218>)
 800cca2:	429c      	cmp	r4, r3
 800cca4:	dd18      	ble.n	800ccd8 <__ieee754_pow+0x228>
 800cca6:	f1b9 0f00 	cmp.w	r9, #0
 800ccaa:	dcf2      	bgt.n	800cc92 <__ieee754_pow+0x1e2>
 800ccac:	e75e      	b.n	800cb6c <__ieee754_pow+0xbc>
 800ccae:	bf00      	nop
 800ccb0:	8800759c 	.word	0x8800759c
 800ccb4:	7e37e43c 	.word	0x7e37e43c
 800ccb8:	7ff00000 	.word	0x7ff00000
 800ccbc:	08012b1f 	.word	0x08012b1f
 800ccc0:	433fffff 	.word	0x433fffff
 800ccc4:	3fefffff 	.word	0x3fefffff
 800ccc8:	3ff00000 	.word	0x3ff00000
 800cccc:	3fe00000 	.word	0x3fe00000
 800ccd0:	41e00000 	.word	0x41e00000
 800ccd4:	3feffffe 	.word	0x3feffffe
 800ccd8:	2200      	movs	r2, #0
 800ccda:	4b63      	ldr	r3, [pc, #396]	; (800ce68 <__ieee754_pow+0x3b8>)
 800ccdc:	f7f3 fa84 	bl	80001e8 <__aeabi_dsub>
 800cce0:	a355      	add	r3, pc, #340	; (adr r3, 800ce38 <__ieee754_pow+0x388>)
 800cce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce6:	4604      	mov	r4, r0
 800cce8:	460d      	mov	r5, r1
 800ccea:	f7f3 fc35 	bl	8000558 <__aeabi_dmul>
 800ccee:	a354      	add	r3, pc, #336	; (adr r3, 800ce40 <__ieee754_pow+0x390>)
 800ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	460f      	mov	r7, r1
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	f7f3 fc2c 	bl	8000558 <__aeabi_dmul>
 800cd00:	2200      	movs	r2, #0
 800cd02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd06:	4b59      	ldr	r3, [pc, #356]	; (800ce6c <__ieee754_pow+0x3bc>)
 800cd08:	4620      	mov	r0, r4
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	f7f3 fc24 	bl	8000558 <__aeabi_dmul>
 800cd10:	4602      	mov	r2, r0
 800cd12:	460b      	mov	r3, r1
 800cd14:	a14c      	add	r1, pc, #304	; (adr r1, 800ce48 <__ieee754_pow+0x398>)
 800cd16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd1a:	f7f3 fa65 	bl	80001e8 <__aeabi_dsub>
 800cd1e:	4622      	mov	r2, r4
 800cd20:	462b      	mov	r3, r5
 800cd22:	f7f3 fc19 	bl	8000558 <__aeabi_dmul>
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	4950      	ldr	r1, [pc, #320]	; (800ce70 <__ieee754_pow+0x3c0>)
 800cd2e:	f7f3 fa5b 	bl	80001e8 <__aeabi_dsub>
 800cd32:	4622      	mov	r2, r4
 800cd34:	462b      	mov	r3, r5
 800cd36:	4680      	mov	r8, r0
 800cd38:	4689      	mov	r9, r1
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	f7f3 fc0b 	bl	8000558 <__aeabi_dmul>
 800cd42:	4602      	mov	r2, r0
 800cd44:	460b      	mov	r3, r1
 800cd46:	4640      	mov	r0, r8
 800cd48:	4649      	mov	r1, r9
 800cd4a:	f7f3 fc05 	bl	8000558 <__aeabi_dmul>
 800cd4e:	a340      	add	r3, pc, #256	; (adr r3, 800ce50 <__ieee754_pow+0x3a0>)
 800cd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd54:	f7f3 fc00 	bl	8000558 <__aeabi_dmul>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd60:	f7f3 fa42 	bl	80001e8 <__aeabi_dsub>
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	4604      	mov	r4, r0
 800cd6a:	460d      	mov	r5, r1
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	4639      	mov	r1, r7
 800cd70:	f7f3 fa3c 	bl	80001ec <__adddf3>
 800cd74:	2000      	movs	r0, #0
 800cd76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd7a:	4632      	mov	r2, r6
 800cd7c:	463b      	mov	r3, r7
 800cd7e:	f7f3 fa33 	bl	80001e8 <__aeabi_dsub>
 800cd82:	4602      	mov	r2, r0
 800cd84:	460b      	mov	r3, r1
 800cd86:	4620      	mov	r0, r4
 800cd88:	4629      	mov	r1, r5
 800cd8a:	f7f3 fa2d 	bl	80001e8 <__aeabi_dsub>
 800cd8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd90:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cd94:	4313      	orrs	r3, r2
 800cd96:	4606      	mov	r6, r0
 800cd98:	460f      	mov	r7, r1
 800cd9a:	f040 81eb 	bne.w	800d174 <__ieee754_pow+0x6c4>
 800cd9e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ce58 <__ieee754_pow+0x3a8>
 800cda2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800cda6:	2400      	movs	r4, #0
 800cda8:	4622      	mov	r2, r4
 800cdaa:	462b      	mov	r3, r5
 800cdac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cdb4:	f7f3 fa18 	bl	80001e8 <__aeabi_dsub>
 800cdb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdbc:	f7f3 fbcc 	bl	8000558 <__aeabi_dmul>
 800cdc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdc4:	4680      	mov	r8, r0
 800cdc6:	4689      	mov	r9, r1
 800cdc8:	4630      	mov	r0, r6
 800cdca:	4639      	mov	r1, r7
 800cdcc:	f7f3 fbc4 	bl	8000558 <__aeabi_dmul>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	4640      	mov	r0, r8
 800cdd6:	4649      	mov	r1, r9
 800cdd8:	f7f3 fa08 	bl	80001ec <__adddf3>
 800cddc:	4622      	mov	r2, r4
 800cdde:	462b      	mov	r3, r5
 800cde0:	4680      	mov	r8, r0
 800cde2:	4689      	mov	r9, r1
 800cde4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cde8:	f7f3 fbb6 	bl	8000558 <__aeabi_dmul>
 800cdec:	460b      	mov	r3, r1
 800cdee:	4604      	mov	r4, r0
 800cdf0:	460d      	mov	r5, r1
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	4649      	mov	r1, r9
 800cdf6:	4640      	mov	r0, r8
 800cdf8:	e9cd 4500 	strd	r4, r5, [sp]
 800cdfc:	f7f3 f9f6 	bl	80001ec <__adddf3>
 800ce00:	4b1c      	ldr	r3, [pc, #112]	; (800ce74 <__ieee754_pow+0x3c4>)
 800ce02:	4299      	cmp	r1, r3
 800ce04:	4606      	mov	r6, r0
 800ce06:	460f      	mov	r7, r1
 800ce08:	468b      	mov	fp, r1
 800ce0a:	f340 82f7 	ble.w	800d3fc <__ieee754_pow+0x94c>
 800ce0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ce12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ce16:	4303      	orrs	r3, r0
 800ce18:	f000 81ea 	beq.w	800d1f0 <__ieee754_pow+0x740>
 800ce1c:	a310      	add	r3, pc, #64	; (adr r3, 800ce60 <__ieee754_pow+0x3b0>)
 800ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce26:	f7f3 fb97 	bl	8000558 <__aeabi_dmul>
 800ce2a:	a30d      	add	r3, pc, #52	; (adr r3, 800ce60 <__ieee754_pow+0x3b0>)
 800ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce30:	e6d5      	b.n	800cbde <__ieee754_pow+0x12e>
 800ce32:	bf00      	nop
 800ce34:	f3af 8000 	nop.w
 800ce38:	60000000 	.word	0x60000000
 800ce3c:	3ff71547 	.word	0x3ff71547
 800ce40:	f85ddf44 	.word	0xf85ddf44
 800ce44:	3e54ae0b 	.word	0x3e54ae0b
 800ce48:	55555555 	.word	0x55555555
 800ce4c:	3fd55555 	.word	0x3fd55555
 800ce50:	652b82fe 	.word	0x652b82fe
 800ce54:	3ff71547 	.word	0x3ff71547
 800ce58:	00000000 	.word	0x00000000
 800ce5c:	bff00000 	.word	0xbff00000
 800ce60:	8800759c 	.word	0x8800759c
 800ce64:	7e37e43c 	.word	0x7e37e43c
 800ce68:	3ff00000 	.word	0x3ff00000
 800ce6c:	3fd00000 	.word	0x3fd00000
 800ce70:	3fe00000 	.word	0x3fe00000
 800ce74:	408fffff 	.word	0x408fffff
 800ce78:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ce7c:	f04f 0200 	mov.w	r2, #0
 800ce80:	da05      	bge.n	800ce8e <__ieee754_pow+0x3de>
 800ce82:	4bd3      	ldr	r3, [pc, #844]	; (800d1d0 <__ieee754_pow+0x720>)
 800ce84:	f7f3 fb68 	bl	8000558 <__aeabi_dmul>
 800ce88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ce8c:	460c      	mov	r4, r1
 800ce8e:	1523      	asrs	r3, r4, #20
 800ce90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ce94:	4413      	add	r3, r2
 800ce96:	9309      	str	r3, [sp, #36]	; 0x24
 800ce98:	4bce      	ldr	r3, [pc, #824]	; (800d1d4 <__ieee754_pow+0x724>)
 800ce9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ce9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cea2:	429c      	cmp	r4, r3
 800cea4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cea8:	dd08      	ble.n	800cebc <__ieee754_pow+0x40c>
 800ceaa:	4bcb      	ldr	r3, [pc, #812]	; (800d1d8 <__ieee754_pow+0x728>)
 800ceac:	429c      	cmp	r4, r3
 800ceae:	f340 815e 	ble.w	800d16e <__ieee754_pow+0x6be>
 800ceb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cebc:	f04f 0a00 	mov.w	sl, #0
 800cec0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800cec4:	930c      	str	r3, [sp, #48]	; 0x30
 800cec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cec8:	4bc4      	ldr	r3, [pc, #784]	; (800d1dc <__ieee754_pow+0x72c>)
 800ceca:	4413      	add	r3, r2
 800cecc:	ed93 7b00 	vldr	d7, [r3]
 800ced0:	4629      	mov	r1, r5
 800ced2:	ec53 2b17 	vmov	r2, r3, d7
 800ced6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ceda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cede:	f7f3 f983 	bl	80001e8 <__aeabi_dsub>
 800cee2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cee6:	4606      	mov	r6, r0
 800cee8:	460f      	mov	r7, r1
 800ceea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ceee:	f7f3 f97d 	bl	80001ec <__adddf3>
 800cef2:	4602      	mov	r2, r0
 800cef4:	460b      	mov	r3, r1
 800cef6:	2000      	movs	r0, #0
 800cef8:	49b9      	ldr	r1, [pc, #740]	; (800d1e0 <__ieee754_pow+0x730>)
 800cefa:	f7f3 fc57 	bl	80007ac <__aeabi_ddiv>
 800cefe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cf02:	4602      	mov	r2, r0
 800cf04:	460b      	mov	r3, r1
 800cf06:	4630      	mov	r0, r6
 800cf08:	4639      	mov	r1, r7
 800cf0a:	f7f3 fb25 	bl	8000558 <__aeabi_dmul>
 800cf0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cf16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	9302      	str	r3, [sp, #8]
 800cf1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cf22:	106d      	asrs	r5, r5, #1
 800cf24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cf28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800cf32:	4640      	mov	r0, r8
 800cf34:	4649      	mov	r1, r9
 800cf36:	4614      	mov	r4, r2
 800cf38:	461d      	mov	r5, r3
 800cf3a:	f7f3 fb0d 	bl	8000558 <__aeabi_dmul>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	460b      	mov	r3, r1
 800cf42:	4630      	mov	r0, r6
 800cf44:	4639      	mov	r1, r7
 800cf46:	f7f3 f94f 	bl	80001e8 <__aeabi_dsub>
 800cf4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf4e:	4606      	mov	r6, r0
 800cf50:	460f      	mov	r7, r1
 800cf52:	4620      	mov	r0, r4
 800cf54:	4629      	mov	r1, r5
 800cf56:	f7f3 f947 	bl	80001e8 <__aeabi_dsub>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cf62:	f7f3 f941 	bl	80001e8 <__aeabi_dsub>
 800cf66:	4642      	mov	r2, r8
 800cf68:	464b      	mov	r3, r9
 800cf6a:	f7f3 faf5 	bl	8000558 <__aeabi_dmul>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	460b      	mov	r3, r1
 800cf72:	4630      	mov	r0, r6
 800cf74:	4639      	mov	r1, r7
 800cf76:	f7f3 f937 	bl	80001e8 <__aeabi_dsub>
 800cf7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cf7e:	f7f3 faeb 	bl	8000558 <__aeabi_dmul>
 800cf82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf8a:	4610      	mov	r0, r2
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	f7f3 fae3 	bl	8000558 <__aeabi_dmul>
 800cf92:	a37b      	add	r3, pc, #492	; (adr r3, 800d180 <__ieee754_pow+0x6d0>)
 800cf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf98:	4604      	mov	r4, r0
 800cf9a:	460d      	mov	r5, r1
 800cf9c:	f7f3 fadc 	bl	8000558 <__aeabi_dmul>
 800cfa0:	a379      	add	r3, pc, #484	; (adr r3, 800d188 <__ieee754_pow+0x6d8>)
 800cfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa6:	f7f3 f921 	bl	80001ec <__adddf3>
 800cfaa:	4622      	mov	r2, r4
 800cfac:	462b      	mov	r3, r5
 800cfae:	f7f3 fad3 	bl	8000558 <__aeabi_dmul>
 800cfb2:	a377      	add	r3, pc, #476	; (adr r3, 800d190 <__ieee754_pow+0x6e0>)
 800cfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb8:	f7f3 f918 	bl	80001ec <__adddf3>
 800cfbc:	4622      	mov	r2, r4
 800cfbe:	462b      	mov	r3, r5
 800cfc0:	f7f3 faca 	bl	8000558 <__aeabi_dmul>
 800cfc4:	a374      	add	r3, pc, #464	; (adr r3, 800d198 <__ieee754_pow+0x6e8>)
 800cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfca:	f7f3 f90f 	bl	80001ec <__adddf3>
 800cfce:	4622      	mov	r2, r4
 800cfd0:	462b      	mov	r3, r5
 800cfd2:	f7f3 fac1 	bl	8000558 <__aeabi_dmul>
 800cfd6:	a372      	add	r3, pc, #456	; (adr r3, 800d1a0 <__ieee754_pow+0x6f0>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	f7f3 f906 	bl	80001ec <__adddf3>
 800cfe0:	4622      	mov	r2, r4
 800cfe2:	462b      	mov	r3, r5
 800cfe4:	f7f3 fab8 	bl	8000558 <__aeabi_dmul>
 800cfe8:	a36f      	add	r3, pc, #444	; (adr r3, 800d1a8 <__ieee754_pow+0x6f8>)
 800cfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfee:	f7f3 f8fd 	bl	80001ec <__adddf3>
 800cff2:	4622      	mov	r2, r4
 800cff4:	4606      	mov	r6, r0
 800cff6:	460f      	mov	r7, r1
 800cff8:	462b      	mov	r3, r5
 800cffa:	4620      	mov	r0, r4
 800cffc:	4629      	mov	r1, r5
 800cffe:	f7f3 faab 	bl	8000558 <__aeabi_dmul>
 800d002:	4602      	mov	r2, r0
 800d004:	460b      	mov	r3, r1
 800d006:	4630      	mov	r0, r6
 800d008:	4639      	mov	r1, r7
 800d00a:	f7f3 faa5 	bl	8000558 <__aeabi_dmul>
 800d00e:	4642      	mov	r2, r8
 800d010:	4604      	mov	r4, r0
 800d012:	460d      	mov	r5, r1
 800d014:	464b      	mov	r3, r9
 800d016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d01a:	f7f3 f8e7 	bl	80001ec <__adddf3>
 800d01e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d022:	f7f3 fa99 	bl	8000558 <__aeabi_dmul>
 800d026:	4622      	mov	r2, r4
 800d028:	462b      	mov	r3, r5
 800d02a:	f7f3 f8df 	bl	80001ec <__adddf3>
 800d02e:	4642      	mov	r2, r8
 800d030:	4606      	mov	r6, r0
 800d032:	460f      	mov	r7, r1
 800d034:	464b      	mov	r3, r9
 800d036:	4640      	mov	r0, r8
 800d038:	4649      	mov	r1, r9
 800d03a:	f7f3 fa8d 	bl	8000558 <__aeabi_dmul>
 800d03e:	2200      	movs	r2, #0
 800d040:	4b68      	ldr	r3, [pc, #416]	; (800d1e4 <__ieee754_pow+0x734>)
 800d042:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d046:	f7f3 f8d1 	bl	80001ec <__adddf3>
 800d04a:	4632      	mov	r2, r6
 800d04c:	463b      	mov	r3, r7
 800d04e:	f7f3 f8cd 	bl	80001ec <__adddf3>
 800d052:	9802      	ldr	r0, [sp, #8]
 800d054:	460d      	mov	r5, r1
 800d056:	4604      	mov	r4, r0
 800d058:	4602      	mov	r2, r0
 800d05a:	460b      	mov	r3, r1
 800d05c:	4640      	mov	r0, r8
 800d05e:	4649      	mov	r1, r9
 800d060:	f7f3 fa7a 	bl	8000558 <__aeabi_dmul>
 800d064:	2200      	movs	r2, #0
 800d066:	4680      	mov	r8, r0
 800d068:	4689      	mov	r9, r1
 800d06a:	4b5e      	ldr	r3, [pc, #376]	; (800d1e4 <__ieee754_pow+0x734>)
 800d06c:	4620      	mov	r0, r4
 800d06e:	4629      	mov	r1, r5
 800d070:	f7f3 f8ba 	bl	80001e8 <__aeabi_dsub>
 800d074:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d078:	f7f3 f8b6 	bl	80001e8 <__aeabi_dsub>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	4630      	mov	r0, r6
 800d082:	4639      	mov	r1, r7
 800d084:	f7f3 f8b0 	bl	80001e8 <__aeabi_dsub>
 800d088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d08c:	f7f3 fa64 	bl	8000558 <__aeabi_dmul>
 800d090:	4622      	mov	r2, r4
 800d092:	4606      	mov	r6, r0
 800d094:	460f      	mov	r7, r1
 800d096:	462b      	mov	r3, r5
 800d098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d09c:	f7f3 fa5c 	bl	8000558 <__aeabi_dmul>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	4630      	mov	r0, r6
 800d0a6:	4639      	mov	r1, r7
 800d0a8:	f7f3 f8a0 	bl	80001ec <__adddf3>
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	460f      	mov	r7, r1
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	4640      	mov	r0, r8
 800d0b6:	4649      	mov	r1, r9
 800d0b8:	f7f3 f898 	bl	80001ec <__adddf3>
 800d0bc:	9802      	ldr	r0, [sp, #8]
 800d0be:	a33c      	add	r3, pc, #240	; (adr r3, 800d1b0 <__ieee754_pow+0x700>)
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	460d      	mov	r5, r1
 800d0c8:	f7f3 fa46 	bl	8000558 <__aeabi_dmul>
 800d0cc:	4642      	mov	r2, r8
 800d0ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d0d2:	464b      	mov	r3, r9
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	4629      	mov	r1, r5
 800d0d8:	f7f3 f886 	bl	80001e8 <__aeabi_dsub>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	4639      	mov	r1, r7
 800d0e4:	f7f3 f880 	bl	80001e8 <__aeabi_dsub>
 800d0e8:	a333      	add	r3, pc, #204	; (adr r3, 800d1b8 <__ieee754_pow+0x708>)
 800d0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ee:	f7f3 fa33 	bl	8000558 <__aeabi_dmul>
 800d0f2:	a333      	add	r3, pc, #204	; (adr r3, 800d1c0 <__ieee754_pow+0x710>)
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	4606      	mov	r6, r0
 800d0fa:	460f      	mov	r7, r1
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	4629      	mov	r1, r5
 800d100:	f7f3 fa2a 	bl	8000558 <__aeabi_dmul>
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	4630      	mov	r0, r6
 800d10a:	4639      	mov	r1, r7
 800d10c:	f7f3 f86e 	bl	80001ec <__adddf3>
 800d110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d112:	4b35      	ldr	r3, [pc, #212]	; (800d1e8 <__ieee754_pow+0x738>)
 800d114:	4413      	add	r3, r2
 800d116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11a:	f7f3 f867 	bl	80001ec <__adddf3>
 800d11e:	4604      	mov	r4, r0
 800d120:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d122:	460d      	mov	r5, r1
 800d124:	f7f3 f9ae 	bl	8000484 <__aeabi_i2d>
 800d128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d12a:	4b30      	ldr	r3, [pc, #192]	; (800d1ec <__ieee754_pow+0x73c>)
 800d12c:	4413      	add	r3, r2
 800d12e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d132:	4606      	mov	r6, r0
 800d134:	460f      	mov	r7, r1
 800d136:	4622      	mov	r2, r4
 800d138:	462b      	mov	r3, r5
 800d13a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d13e:	f7f3 f855 	bl	80001ec <__adddf3>
 800d142:	4642      	mov	r2, r8
 800d144:	464b      	mov	r3, r9
 800d146:	f7f3 f851 	bl	80001ec <__adddf3>
 800d14a:	4632      	mov	r2, r6
 800d14c:	463b      	mov	r3, r7
 800d14e:	f7f3 f84d 	bl	80001ec <__adddf3>
 800d152:	9802      	ldr	r0, [sp, #8]
 800d154:	4632      	mov	r2, r6
 800d156:	463b      	mov	r3, r7
 800d158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d15c:	f7f3 f844 	bl	80001e8 <__aeabi_dsub>
 800d160:	4642      	mov	r2, r8
 800d162:	464b      	mov	r3, r9
 800d164:	f7f3 f840 	bl	80001e8 <__aeabi_dsub>
 800d168:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d16c:	e607      	b.n	800cd7e <__ieee754_pow+0x2ce>
 800d16e:	f04f 0a01 	mov.w	sl, #1
 800d172:	e6a5      	b.n	800cec0 <__ieee754_pow+0x410>
 800d174:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d1c8 <__ieee754_pow+0x718>
 800d178:	e613      	b.n	800cda2 <__ieee754_pow+0x2f2>
 800d17a:	bf00      	nop
 800d17c:	f3af 8000 	nop.w
 800d180:	4a454eef 	.word	0x4a454eef
 800d184:	3fca7e28 	.word	0x3fca7e28
 800d188:	93c9db65 	.word	0x93c9db65
 800d18c:	3fcd864a 	.word	0x3fcd864a
 800d190:	a91d4101 	.word	0xa91d4101
 800d194:	3fd17460 	.word	0x3fd17460
 800d198:	518f264d 	.word	0x518f264d
 800d19c:	3fd55555 	.word	0x3fd55555
 800d1a0:	db6fabff 	.word	0xdb6fabff
 800d1a4:	3fdb6db6 	.word	0x3fdb6db6
 800d1a8:	33333303 	.word	0x33333303
 800d1ac:	3fe33333 	.word	0x3fe33333
 800d1b0:	e0000000 	.word	0xe0000000
 800d1b4:	3feec709 	.word	0x3feec709
 800d1b8:	dc3a03fd 	.word	0xdc3a03fd
 800d1bc:	3feec709 	.word	0x3feec709
 800d1c0:	145b01f5 	.word	0x145b01f5
 800d1c4:	be3e2fe0 	.word	0xbe3e2fe0
 800d1c8:	00000000 	.word	0x00000000
 800d1cc:	3ff00000 	.word	0x3ff00000
 800d1d0:	43400000 	.word	0x43400000
 800d1d4:	0003988e 	.word	0x0003988e
 800d1d8:	000bb679 	.word	0x000bb679
 800d1dc:	08012b20 	.word	0x08012b20
 800d1e0:	3ff00000 	.word	0x3ff00000
 800d1e4:	40080000 	.word	0x40080000
 800d1e8:	08012b40 	.word	0x08012b40
 800d1ec:	08012b30 	.word	0x08012b30
 800d1f0:	a3b4      	add	r3, pc, #720	; (adr r3, 800d4c4 <__ieee754_pow+0xa14>)
 800d1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f6:	4640      	mov	r0, r8
 800d1f8:	4649      	mov	r1, r9
 800d1fa:	f7f2 fff7 	bl	80001ec <__adddf3>
 800d1fe:	4622      	mov	r2, r4
 800d200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d204:	462b      	mov	r3, r5
 800d206:	4630      	mov	r0, r6
 800d208:	4639      	mov	r1, r7
 800d20a:	f7f2 ffed 	bl	80001e8 <__aeabi_dsub>
 800d20e:	4602      	mov	r2, r0
 800d210:	460b      	mov	r3, r1
 800d212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d216:	f7f3 fc2f 	bl	8000a78 <__aeabi_dcmpgt>
 800d21a:	2800      	cmp	r0, #0
 800d21c:	f47f adfe 	bne.w	800ce1c <__ieee754_pow+0x36c>
 800d220:	4aa3      	ldr	r2, [pc, #652]	; (800d4b0 <__ieee754_pow+0xa00>)
 800d222:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d226:	4293      	cmp	r3, r2
 800d228:	f340 810a 	ble.w	800d440 <__ieee754_pow+0x990>
 800d22c:	151b      	asrs	r3, r3, #20
 800d22e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d232:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d236:	fa4a f303 	asr.w	r3, sl, r3
 800d23a:	445b      	add	r3, fp
 800d23c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d240:	4e9c      	ldr	r6, [pc, #624]	; (800d4b4 <__ieee754_pow+0xa04>)
 800d242:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d246:	4116      	asrs	r6, r2
 800d248:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d24c:	2000      	movs	r0, #0
 800d24e:	ea23 0106 	bic.w	r1, r3, r6
 800d252:	f1c2 0214 	rsb	r2, r2, #20
 800d256:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d25a:	fa4a fa02 	asr.w	sl, sl, r2
 800d25e:	f1bb 0f00 	cmp.w	fp, #0
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	4620      	mov	r0, r4
 800d268:	4629      	mov	r1, r5
 800d26a:	bfb8      	it	lt
 800d26c:	f1ca 0a00 	rsblt	sl, sl, #0
 800d270:	f7f2 ffba 	bl	80001e8 <__aeabi_dsub>
 800d274:	e9cd 0100 	strd	r0, r1, [sp]
 800d278:	4642      	mov	r2, r8
 800d27a:	464b      	mov	r3, r9
 800d27c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d280:	f7f2 ffb4 	bl	80001ec <__adddf3>
 800d284:	2000      	movs	r0, #0
 800d286:	a378      	add	r3, pc, #480	; (adr r3, 800d468 <__ieee754_pow+0x9b8>)
 800d288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28c:	4604      	mov	r4, r0
 800d28e:	460d      	mov	r5, r1
 800d290:	f7f3 f962 	bl	8000558 <__aeabi_dmul>
 800d294:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d298:	4606      	mov	r6, r0
 800d29a:	460f      	mov	r7, r1
 800d29c:	4620      	mov	r0, r4
 800d29e:	4629      	mov	r1, r5
 800d2a0:	f7f2 ffa2 	bl	80001e8 <__aeabi_dsub>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	4640      	mov	r0, r8
 800d2aa:	4649      	mov	r1, r9
 800d2ac:	f7f2 ff9c 	bl	80001e8 <__aeabi_dsub>
 800d2b0:	a36f      	add	r3, pc, #444	; (adr r3, 800d470 <__ieee754_pow+0x9c0>)
 800d2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b6:	f7f3 f94f 	bl	8000558 <__aeabi_dmul>
 800d2ba:	a36f      	add	r3, pc, #444	; (adr r3, 800d478 <__ieee754_pow+0x9c8>)
 800d2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c0:	4680      	mov	r8, r0
 800d2c2:	4689      	mov	r9, r1
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	f7f3 f946 	bl	8000558 <__aeabi_dmul>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	4649      	mov	r1, r9
 800d2d4:	f7f2 ff8a 	bl	80001ec <__adddf3>
 800d2d8:	4604      	mov	r4, r0
 800d2da:	460d      	mov	r5, r1
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	4639      	mov	r1, r7
 800d2e4:	f7f2 ff82 	bl	80001ec <__adddf3>
 800d2e8:	4632      	mov	r2, r6
 800d2ea:	463b      	mov	r3, r7
 800d2ec:	4680      	mov	r8, r0
 800d2ee:	4689      	mov	r9, r1
 800d2f0:	f7f2 ff7a 	bl	80001e8 <__aeabi_dsub>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	4629      	mov	r1, r5
 800d2fc:	f7f2 ff74 	bl	80001e8 <__aeabi_dsub>
 800d300:	4642      	mov	r2, r8
 800d302:	4606      	mov	r6, r0
 800d304:	460f      	mov	r7, r1
 800d306:	464b      	mov	r3, r9
 800d308:	4640      	mov	r0, r8
 800d30a:	4649      	mov	r1, r9
 800d30c:	f7f3 f924 	bl	8000558 <__aeabi_dmul>
 800d310:	a35b      	add	r3, pc, #364	; (adr r3, 800d480 <__ieee754_pow+0x9d0>)
 800d312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d316:	4604      	mov	r4, r0
 800d318:	460d      	mov	r5, r1
 800d31a:	f7f3 f91d 	bl	8000558 <__aeabi_dmul>
 800d31e:	a35a      	add	r3, pc, #360	; (adr r3, 800d488 <__ieee754_pow+0x9d8>)
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	f7f2 ff60 	bl	80001e8 <__aeabi_dsub>
 800d328:	4622      	mov	r2, r4
 800d32a:	462b      	mov	r3, r5
 800d32c:	f7f3 f914 	bl	8000558 <__aeabi_dmul>
 800d330:	a357      	add	r3, pc, #348	; (adr r3, 800d490 <__ieee754_pow+0x9e0>)
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	f7f2 ff59 	bl	80001ec <__adddf3>
 800d33a:	4622      	mov	r2, r4
 800d33c:	462b      	mov	r3, r5
 800d33e:	f7f3 f90b 	bl	8000558 <__aeabi_dmul>
 800d342:	a355      	add	r3, pc, #340	; (adr r3, 800d498 <__ieee754_pow+0x9e8>)
 800d344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d348:	f7f2 ff4e 	bl	80001e8 <__aeabi_dsub>
 800d34c:	4622      	mov	r2, r4
 800d34e:	462b      	mov	r3, r5
 800d350:	f7f3 f902 	bl	8000558 <__aeabi_dmul>
 800d354:	a352      	add	r3, pc, #328	; (adr r3, 800d4a0 <__ieee754_pow+0x9f0>)
 800d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35a:	f7f2 ff47 	bl	80001ec <__adddf3>
 800d35e:	4622      	mov	r2, r4
 800d360:	462b      	mov	r3, r5
 800d362:	f7f3 f8f9 	bl	8000558 <__aeabi_dmul>
 800d366:	4602      	mov	r2, r0
 800d368:	460b      	mov	r3, r1
 800d36a:	4640      	mov	r0, r8
 800d36c:	4649      	mov	r1, r9
 800d36e:	f7f2 ff3b 	bl	80001e8 <__aeabi_dsub>
 800d372:	4604      	mov	r4, r0
 800d374:	460d      	mov	r5, r1
 800d376:	4602      	mov	r2, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	4640      	mov	r0, r8
 800d37c:	4649      	mov	r1, r9
 800d37e:	f7f3 f8eb 	bl	8000558 <__aeabi_dmul>
 800d382:	2200      	movs	r2, #0
 800d384:	e9cd 0100 	strd	r0, r1, [sp]
 800d388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d38c:	4620      	mov	r0, r4
 800d38e:	4629      	mov	r1, r5
 800d390:	f7f2 ff2a 	bl	80001e8 <__aeabi_dsub>
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d39c:	f7f3 fa06 	bl	80007ac <__aeabi_ddiv>
 800d3a0:	4632      	mov	r2, r6
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	460d      	mov	r5, r1
 800d3a6:	463b      	mov	r3, r7
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	f7f3 f8d4 	bl	8000558 <__aeabi_dmul>
 800d3b0:	4632      	mov	r2, r6
 800d3b2:	463b      	mov	r3, r7
 800d3b4:	f7f2 ff1a 	bl	80001ec <__adddf3>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	4620      	mov	r0, r4
 800d3be:	4629      	mov	r1, r5
 800d3c0:	f7f2 ff12 	bl	80001e8 <__aeabi_dsub>
 800d3c4:	4642      	mov	r2, r8
 800d3c6:	464b      	mov	r3, r9
 800d3c8:	f7f2 ff0e 	bl	80001e8 <__aeabi_dsub>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	4939      	ldr	r1, [pc, #228]	; (800d4b8 <__ieee754_pow+0xa08>)
 800d3d4:	f7f2 ff08 	bl	80001e8 <__aeabi_dsub>
 800d3d8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d3dc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	da2f      	bge.n	800d446 <__ieee754_pow+0x996>
 800d3e6:	4650      	mov	r0, sl
 800d3e8:	ec43 2b10 	vmov	d0, r2, r3
 800d3ec:	f000 f9c0 	bl	800d770 <scalbn>
 800d3f0:	ec51 0b10 	vmov	r0, r1, d0
 800d3f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3f8:	f7ff bbf1 	b.w	800cbde <__ieee754_pow+0x12e>
 800d3fc:	4b2f      	ldr	r3, [pc, #188]	; (800d4bc <__ieee754_pow+0xa0c>)
 800d3fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d402:	429e      	cmp	r6, r3
 800d404:	f77f af0c 	ble.w	800d220 <__ieee754_pow+0x770>
 800d408:	4b2d      	ldr	r3, [pc, #180]	; (800d4c0 <__ieee754_pow+0xa10>)
 800d40a:	440b      	add	r3, r1
 800d40c:	4303      	orrs	r3, r0
 800d40e:	d00b      	beq.n	800d428 <__ieee754_pow+0x978>
 800d410:	a325      	add	r3, pc, #148	; (adr r3, 800d4a8 <__ieee754_pow+0x9f8>)
 800d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d41a:	f7f3 f89d 	bl	8000558 <__aeabi_dmul>
 800d41e:	a322      	add	r3, pc, #136	; (adr r3, 800d4a8 <__ieee754_pow+0x9f8>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	f7ff bbdb 	b.w	800cbde <__ieee754_pow+0x12e>
 800d428:	4622      	mov	r2, r4
 800d42a:	462b      	mov	r3, r5
 800d42c:	f7f2 fedc 	bl	80001e8 <__aeabi_dsub>
 800d430:	4642      	mov	r2, r8
 800d432:	464b      	mov	r3, r9
 800d434:	f7f3 fb16 	bl	8000a64 <__aeabi_dcmpge>
 800d438:	2800      	cmp	r0, #0
 800d43a:	f43f aef1 	beq.w	800d220 <__ieee754_pow+0x770>
 800d43e:	e7e7      	b.n	800d410 <__ieee754_pow+0x960>
 800d440:	f04f 0a00 	mov.w	sl, #0
 800d444:	e718      	b.n	800d278 <__ieee754_pow+0x7c8>
 800d446:	4621      	mov	r1, r4
 800d448:	e7d4      	b.n	800d3f4 <__ieee754_pow+0x944>
 800d44a:	2000      	movs	r0, #0
 800d44c:	491a      	ldr	r1, [pc, #104]	; (800d4b8 <__ieee754_pow+0xa08>)
 800d44e:	f7ff bb8f 	b.w	800cb70 <__ieee754_pow+0xc0>
 800d452:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d456:	f7ff bb8b 	b.w	800cb70 <__ieee754_pow+0xc0>
 800d45a:	4630      	mov	r0, r6
 800d45c:	4639      	mov	r1, r7
 800d45e:	f7ff bb87 	b.w	800cb70 <__ieee754_pow+0xc0>
 800d462:	4693      	mov	fp, r2
 800d464:	f7ff bb98 	b.w	800cb98 <__ieee754_pow+0xe8>
 800d468:	00000000 	.word	0x00000000
 800d46c:	3fe62e43 	.word	0x3fe62e43
 800d470:	fefa39ef 	.word	0xfefa39ef
 800d474:	3fe62e42 	.word	0x3fe62e42
 800d478:	0ca86c39 	.word	0x0ca86c39
 800d47c:	be205c61 	.word	0xbe205c61
 800d480:	72bea4d0 	.word	0x72bea4d0
 800d484:	3e663769 	.word	0x3e663769
 800d488:	c5d26bf1 	.word	0xc5d26bf1
 800d48c:	3ebbbd41 	.word	0x3ebbbd41
 800d490:	af25de2c 	.word	0xaf25de2c
 800d494:	3f11566a 	.word	0x3f11566a
 800d498:	16bebd93 	.word	0x16bebd93
 800d49c:	3f66c16c 	.word	0x3f66c16c
 800d4a0:	5555553e 	.word	0x5555553e
 800d4a4:	3fc55555 	.word	0x3fc55555
 800d4a8:	c2f8f359 	.word	0xc2f8f359
 800d4ac:	01a56e1f 	.word	0x01a56e1f
 800d4b0:	3fe00000 	.word	0x3fe00000
 800d4b4:	000fffff 	.word	0x000fffff
 800d4b8:	3ff00000 	.word	0x3ff00000
 800d4bc:	4090cbff 	.word	0x4090cbff
 800d4c0:	3f6f3400 	.word	0x3f6f3400
 800d4c4:	652b82fe 	.word	0x652b82fe
 800d4c8:	3c971547 	.word	0x3c971547

0800d4cc <__ieee754_sqrt>:
 800d4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d0:	4955      	ldr	r1, [pc, #340]	; (800d628 <__ieee754_sqrt+0x15c>)
 800d4d2:	ec55 4b10 	vmov	r4, r5, d0
 800d4d6:	43a9      	bics	r1, r5
 800d4d8:	462b      	mov	r3, r5
 800d4da:	462a      	mov	r2, r5
 800d4dc:	d112      	bne.n	800d504 <__ieee754_sqrt+0x38>
 800d4de:	ee10 2a10 	vmov	r2, s0
 800d4e2:	ee10 0a10 	vmov	r0, s0
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	f7f3 f836 	bl	8000558 <__aeabi_dmul>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	f7f2 fe7a 	bl	80001ec <__adddf3>
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	460d      	mov	r5, r1
 800d4fc:	ec45 4b10 	vmov	d0, r4, r5
 800d500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d504:	2d00      	cmp	r5, #0
 800d506:	ee10 0a10 	vmov	r0, s0
 800d50a:	4621      	mov	r1, r4
 800d50c:	dc0f      	bgt.n	800d52e <__ieee754_sqrt+0x62>
 800d50e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d512:	4330      	orrs	r0, r6
 800d514:	d0f2      	beq.n	800d4fc <__ieee754_sqrt+0x30>
 800d516:	b155      	cbz	r5, 800d52e <__ieee754_sqrt+0x62>
 800d518:	ee10 2a10 	vmov	r2, s0
 800d51c:	4620      	mov	r0, r4
 800d51e:	4629      	mov	r1, r5
 800d520:	f7f2 fe62 	bl	80001e8 <__aeabi_dsub>
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	f7f3 f940 	bl	80007ac <__aeabi_ddiv>
 800d52c:	e7e4      	b.n	800d4f8 <__ieee754_sqrt+0x2c>
 800d52e:	151b      	asrs	r3, r3, #20
 800d530:	d073      	beq.n	800d61a <__ieee754_sqrt+0x14e>
 800d532:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d536:	07dd      	lsls	r5, r3, #31
 800d538:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d53c:	bf48      	it	mi
 800d53e:	0fc8      	lsrmi	r0, r1, #31
 800d540:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d544:	bf44      	itt	mi
 800d546:	0049      	lslmi	r1, r1, #1
 800d548:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d54c:	2500      	movs	r5, #0
 800d54e:	1058      	asrs	r0, r3, #1
 800d550:	0fcb      	lsrs	r3, r1, #31
 800d552:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d556:	0049      	lsls	r1, r1, #1
 800d558:	2316      	movs	r3, #22
 800d55a:	462c      	mov	r4, r5
 800d55c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d560:	19a7      	adds	r7, r4, r6
 800d562:	4297      	cmp	r7, r2
 800d564:	bfde      	ittt	le
 800d566:	19bc      	addle	r4, r7, r6
 800d568:	1bd2      	suble	r2, r2, r7
 800d56a:	19ad      	addle	r5, r5, r6
 800d56c:	0fcf      	lsrs	r7, r1, #31
 800d56e:	3b01      	subs	r3, #1
 800d570:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d574:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d578:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d57c:	d1f0      	bne.n	800d560 <__ieee754_sqrt+0x94>
 800d57e:	f04f 0c20 	mov.w	ip, #32
 800d582:	469e      	mov	lr, r3
 800d584:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d588:	42a2      	cmp	r2, r4
 800d58a:	eb06 070e 	add.w	r7, r6, lr
 800d58e:	dc02      	bgt.n	800d596 <__ieee754_sqrt+0xca>
 800d590:	d112      	bne.n	800d5b8 <__ieee754_sqrt+0xec>
 800d592:	428f      	cmp	r7, r1
 800d594:	d810      	bhi.n	800d5b8 <__ieee754_sqrt+0xec>
 800d596:	2f00      	cmp	r7, #0
 800d598:	eb07 0e06 	add.w	lr, r7, r6
 800d59c:	da42      	bge.n	800d624 <__ieee754_sqrt+0x158>
 800d59e:	f1be 0f00 	cmp.w	lr, #0
 800d5a2:	db3f      	blt.n	800d624 <__ieee754_sqrt+0x158>
 800d5a4:	f104 0801 	add.w	r8, r4, #1
 800d5a8:	1b12      	subs	r2, r2, r4
 800d5aa:	428f      	cmp	r7, r1
 800d5ac:	bf88      	it	hi
 800d5ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d5b2:	1bc9      	subs	r1, r1, r7
 800d5b4:	4433      	add	r3, r6
 800d5b6:	4644      	mov	r4, r8
 800d5b8:	0052      	lsls	r2, r2, #1
 800d5ba:	f1bc 0c01 	subs.w	ip, ip, #1
 800d5be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d5c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d5c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d5ca:	d1dd      	bne.n	800d588 <__ieee754_sqrt+0xbc>
 800d5cc:	430a      	orrs	r2, r1
 800d5ce:	d006      	beq.n	800d5de <__ieee754_sqrt+0x112>
 800d5d0:	1c5c      	adds	r4, r3, #1
 800d5d2:	bf13      	iteet	ne
 800d5d4:	3301      	addne	r3, #1
 800d5d6:	3501      	addeq	r5, #1
 800d5d8:	4663      	moveq	r3, ip
 800d5da:	f023 0301 	bicne.w	r3, r3, #1
 800d5de:	106a      	asrs	r2, r5, #1
 800d5e0:	085b      	lsrs	r3, r3, #1
 800d5e2:	07e9      	lsls	r1, r5, #31
 800d5e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d5e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d5ec:	bf48      	it	mi
 800d5ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d5f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d5f6:	461c      	mov	r4, r3
 800d5f8:	e780      	b.n	800d4fc <__ieee754_sqrt+0x30>
 800d5fa:	0aca      	lsrs	r2, r1, #11
 800d5fc:	3815      	subs	r0, #21
 800d5fe:	0549      	lsls	r1, r1, #21
 800d600:	2a00      	cmp	r2, #0
 800d602:	d0fa      	beq.n	800d5fa <__ieee754_sqrt+0x12e>
 800d604:	02d6      	lsls	r6, r2, #11
 800d606:	d50a      	bpl.n	800d61e <__ieee754_sqrt+0x152>
 800d608:	f1c3 0420 	rsb	r4, r3, #32
 800d60c:	fa21 f404 	lsr.w	r4, r1, r4
 800d610:	1e5d      	subs	r5, r3, #1
 800d612:	4099      	lsls	r1, r3
 800d614:	4322      	orrs	r2, r4
 800d616:	1b43      	subs	r3, r0, r5
 800d618:	e78b      	b.n	800d532 <__ieee754_sqrt+0x66>
 800d61a:	4618      	mov	r0, r3
 800d61c:	e7f0      	b.n	800d600 <__ieee754_sqrt+0x134>
 800d61e:	0052      	lsls	r2, r2, #1
 800d620:	3301      	adds	r3, #1
 800d622:	e7ef      	b.n	800d604 <__ieee754_sqrt+0x138>
 800d624:	46a0      	mov	r8, r4
 800d626:	e7bf      	b.n	800d5a8 <__ieee754_sqrt+0xdc>
 800d628:	7ff00000 	.word	0x7ff00000

0800d62c <fabs>:
 800d62c:	ec51 0b10 	vmov	r0, r1, d0
 800d630:	ee10 2a10 	vmov	r2, s0
 800d634:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d638:	ec43 2b10 	vmov	d0, r2, r3
 800d63c:	4770      	bx	lr

0800d63e <finite>:
 800d63e:	ee10 3a90 	vmov	r3, s1
 800d642:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800d646:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d64a:	0fc0      	lsrs	r0, r0, #31
 800d64c:	4770      	bx	lr

0800d64e <matherr>:
 800d64e:	2000      	movs	r0, #0
 800d650:	4770      	bx	lr
 800d652:	0000      	movs	r0, r0
 800d654:	0000      	movs	r0, r0
	...

0800d658 <nan>:
 800d658:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d660 <nan+0x8>
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	00000000 	.word	0x00000000
 800d664:	7ff80000 	.word	0x7ff80000

0800d668 <rint>:
 800d668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d66a:	ec51 0b10 	vmov	r0, r1, d0
 800d66e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d672:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d676:	2e13      	cmp	r6, #19
 800d678:	460b      	mov	r3, r1
 800d67a:	ee10 4a10 	vmov	r4, s0
 800d67e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d682:	dc56      	bgt.n	800d732 <rint+0xca>
 800d684:	2e00      	cmp	r6, #0
 800d686:	da2b      	bge.n	800d6e0 <rint+0x78>
 800d688:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d68c:	4302      	orrs	r2, r0
 800d68e:	d023      	beq.n	800d6d8 <rint+0x70>
 800d690:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d694:	4302      	orrs	r2, r0
 800d696:	4254      	negs	r4, r2
 800d698:	4314      	orrs	r4, r2
 800d69a:	0c4b      	lsrs	r3, r1, #17
 800d69c:	0b24      	lsrs	r4, r4, #12
 800d69e:	045b      	lsls	r3, r3, #17
 800d6a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d6a4:	ea44 0103 	orr.w	r1, r4, r3
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	492f      	ldr	r1, [pc, #188]	; (800d768 <rint+0x100>)
 800d6ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800d6b0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	4639      	mov	r1, r7
 800d6b8:	4630      	mov	r0, r6
 800d6ba:	f7f2 fd97 	bl	80001ec <__adddf3>
 800d6be:	e9cd 0100 	strd	r0, r1, [sp]
 800d6c2:	463b      	mov	r3, r7
 800d6c4:	4632      	mov	r2, r6
 800d6c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6ca:	f7f2 fd8d 	bl	80001e8 <__aeabi_dsub>
 800d6ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d6d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d6d6:	4639      	mov	r1, r7
 800d6d8:	ec41 0b10 	vmov	d0, r0, r1
 800d6dc:	b003      	add	sp, #12
 800d6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6e0:	4a22      	ldr	r2, [pc, #136]	; (800d76c <rint+0x104>)
 800d6e2:	4132      	asrs	r2, r6
 800d6e4:	ea01 0702 	and.w	r7, r1, r2
 800d6e8:	4307      	orrs	r7, r0
 800d6ea:	d0f5      	beq.n	800d6d8 <rint+0x70>
 800d6ec:	0852      	lsrs	r2, r2, #1
 800d6ee:	4011      	ands	r1, r2
 800d6f0:	430c      	orrs	r4, r1
 800d6f2:	d00b      	beq.n	800d70c <rint+0xa4>
 800d6f4:	ea23 0202 	bic.w	r2, r3, r2
 800d6f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d6fc:	2e13      	cmp	r6, #19
 800d6fe:	fa43 f306 	asr.w	r3, r3, r6
 800d702:	bf0c      	ite	eq
 800d704:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d708:	2400      	movne	r4, #0
 800d70a:	4313      	orrs	r3, r2
 800d70c:	4916      	ldr	r1, [pc, #88]	; (800d768 <rint+0x100>)
 800d70e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d712:	4622      	mov	r2, r4
 800d714:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d718:	4620      	mov	r0, r4
 800d71a:	4629      	mov	r1, r5
 800d71c:	f7f2 fd66 	bl	80001ec <__adddf3>
 800d720:	e9cd 0100 	strd	r0, r1, [sp]
 800d724:	4622      	mov	r2, r4
 800d726:	462b      	mov	r3, r5
 800d728:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d72c:	f7f2 fd5c 	bl	80001e8 <__aeabi_dsub>
 800d730:	e7d2      	b.n	800d6d8 <rint+0x70>
 800d732:	2e33      	cmp	r6, #51	; 0x33
 800d734:	dd07      	ble.n	800d746 <rint+0xde>
 800d736:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d73a:	d1cd      	bne.n	800d6d8 <rint+0x70>
 800d73c:	ee10 2a10 	vmov	r2, s0
 800d740:	f7f2 fd54 	bl	80001ec <__adddf3>
 800d744:	e7c8      	b.n	800d6d8 <rint+0x70>
 800d746:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800d74a:	f04f 32ff 	mov.w	r2, #4294967295
 800d74e:	40f2      	lsrs	r2, r6
 800d750:	4210      	tst	r0, r2
 800d752:	d0c1      	beq.n	800d6d8 <rint+0x70>
 800d754:	0852      	lsrs	r2, r2, #1
 800d756:	4210      	tst	r0, r2
 800d758:	bf1f      	itttt	ne
 800d75a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d75e:	ea20 0202 	bicne.w	r2, r0, r2
 800d762:	4134      	asrne	r4, r6
 800d764:	4314      	orrne	r4, r2
 800d766:	e7d1      	b.n	800d70c <rint+0xa4>
 800d768:	08012b50 	.word	0x08012b50
 800d76c:	000fffff 	.word	0x000fffff

0800d770 <scalbn>:
 800d770:	b570      	push	{r4, r5, r6, lr}
 800d772:	ec55 4b10 	vmov	r4, r5, d0
 800d776:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d77a:	4606      	mov	r6, r0
 800d77c:	462b      	mov	r3, r5
 800d77e:	b9aa      	cbnz	r2, 800d7ac <scalbn+0x3c>
 800d780:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d784:	4323      	orrs	r3, r4
 800d786:	d03b      	beq.n	800d800 <scalbn+0x90>
 800d788:	4b31      	ldr	r3, [pc, #196]	; (800d850 <scalbn+0xe0>)
 800d78a:	4629      	mov	r1, r5
 800d78c:	2200      	movs	r2, #0
 800d78e:	ee10 0a10 	vmov	r0, s0
 800d792:	f7f2 fee1 	bl	8000558 <__aeabi_dmul>
 800d796:	4b2f      	ldr	r3, [pc, #188]	; (800d854 <scalbn+0xe4>)
 800d798:	429e      	cmp	r6, r3
 800d79a:	4604      	mov	r4, r0
 800d79c:	460d      	mov	r5, r1
 800d79e:	da12      	bge.n	800d7c6 <scalbn+0x56>
 800d7a0:	a327      	add	r3, pc, #156	; (adr r3, 800d840 <scalbn+0xd0>)
 800d7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a6:	f7f2 fed7 	bl	8000558 <__aeabi_dmul>
 800d7aa:	e009      	b.n	800d7c0 <scalbn+0x50>
 800d7ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d7b0:	428a      	cmp	r2, r1
 800d7b2:	d10c      	bne.n	800d7ce <scalbn+0x5e>
 800d7b4:	ee10 2a10 	vmov	r2, s0
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	f7f2 fd16 	bl	80001ec <__adddf3>
 800d7c0:	4604      	mov	r4, r0
 800d7c2:	460d      	mov	r5, r1
 800d7c4:	e01c      	b.n	800d800 <scalbn+0x90>
 800d7c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	3a36      	subs	r2, #54	; 0x36
 800d7ce:	4432      	add	r2, r6
 800d7d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d7d4:	428a      	cmp	r2, r1
 800d7d6:	dd0b      	ble.n	800d7f0 <scalbn+0x80>
 800d7d8:	ec45 4b11 	vmov	d1, r4, r5
 800d7dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d848 <scalbn+0xd8>
 800d7e0:	f000 f83c 	bl	800d85c <copysign>
 800d7e4:	a318      	add	r3, pc, #96	; (adr r3, 800d848 <scalbn+0xd8>)
 800d7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ea:	ec51 0b10 	vmov	r0, r1, d0
 800d7ee:	e7da      	b.n	800d7a6 <scalbn+0x36>
 800d7f0:	2a00      	cmp	r2, #0
 800d7f2:	dd08      	ble.n	800d806 <scalbn+0x96>
 800d7f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d7f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d7fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d800:	ec45 4b10 	vmov	d0, r4, r5
 800d804:	bd70      	pop	{r4, r5, r6, pc}
 800d806:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d80a:	da0d      	bge.n	800d828 <scalbn+0xb8>
 800d80c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d810:	429e      	cmp	r6, r3
 800d812:	ec45 4b11 	vmov	d1, r4, r5
 800d816:	dce1      	bgt.n	800d7dc <scalbn+0x6c>
 800d818:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d840 <scalbn+0xd0>
 800d81c:	f000 f81e 	bl	800d85c <copysign>
 800d820:	a307      	add	r3, pc, #28	; (adr r3, 800d840 <scalbn+0xd0>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	e7e0      	b.n	800d7ea <scalbn+0x7a>
 800d828:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d82c:	3236      	adds	r2, #54	; 0x36
 800d82e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d832:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d836:	4620      	mov	r0, r4
 800d838:	4629      	mov	r1, r5
 800d83a:	2200      	movs	r2, #0
 800d83c:	4b06      	ldr	r3, [pc, #24]	; (800d858 <scalbn+0xe8>)
 800d83e:	e7b2      	b.n	800d7a6 <scalbn+0x36>
 800d840:	c2f8f359 	.word	0xc2f8f359
 800d844:	01a56e1f 	.word	0x01a56e1f
 800d848:	8800759c 	.word	0x8800759c
 800d84c:	7e37e43c 	.word	0x7e37e43c
 800d850:	43500000 	.word	0x43500000
 800d854:	ffff3cb0 	.word	0xffff3cb0
 800d858:	3c900000 	.word	0x3c900000

0800d85c <copysign>:
 800d85c:	ec51 0b10 	vmov	r0, r1, d0
 800d860:	ee11 0a90 	vmov	r0, s3
 800d864:	ee10 2a10 	vmov	r2, s0
 800d868:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d86c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d870:	ea41 0300 	orr.w	r3, r1, r0
 800d874:	ec43 2b10 	vmov	d0, r2, r3
 800d878:	4770      	bx	lr
	...

0800d87c <_init>:
 800d87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87e:	bf00      	nop
 800d880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d882:	bc08      	pop	{r3}
 800d884:	469e      	mov	lr, r3
 800d886:	4770      	bx	lr

0800d888 <_fini>:
 800d888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88a:	bf00      	nop
 800d88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d88e:	bc08      	pop	{r3}
 800d890:	469e      	mov	lr, r3
 800d892:	4770      	bx	lr
