
DisplaySTM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f99c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005648  0800fb30  0800fb30  0001fb30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015178  08015178  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08015178  08015178  00025178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015180  08015180  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015180  08015180  00025180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015184  08015184  00025184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08015188  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009870  2000007c  08015204  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200098ec  08015204  000398ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000b3490  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006bea  00000000  00000000  000e353c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000034b0  00000000  00000000  000ea128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003160  00000000  00000000  000ed5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028944  00000000  00000000  000f0738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025c4c  00000000  00000000  0011907c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec485  00000000  00000000  0013ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0022b14d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e698  00000000  00000000  0022b1c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb14 	.word	0x0800fb14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800fb14 	.word	0x0800fb14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b972 	b.w	8000e44 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9e08      	ldr	r6, [sp, #32]
 8000b7e:	4604      	mov	r4, r0
 8000b80:	4688      	mov	r8, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d14b      	bne.n	8000c1e <__udivmoddi4+0xa6>
 8000b86:	428a      	cmp	r2, r1
 8000b88:	4615      	mov	r5, r2
 8000b8a:	d967      	bls.n	8000c5c <__udivmoddi4+0xe4>
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	b14a      	cbz	r2, 8000ba6 <__udivmoddi4+0x2e>
 8000b92:	f1c2 0720 	rsb	r7, r2, #32
 8000b96:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b9e:	4095      	lsls	r5, r2
 8000ba0:	ea47 0803 	orr.w	r8, r7, r3
 8000ba4:	4094      	lsls	r4, r2
 8000ba6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000baa:	0c23      	lsrs	r3, r4, #16
 8000bac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bb0:	fa1f fc85 	uxth.w	ip, r5
 8000bb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x60>
 8000bc4:	18eb      	adds	r3, r5, r3
 8000bc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bca:	f080 811b 	bcs.w	8000e04 <__udivmoddi4+0x28c>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 8118 	bls.w	8000e04 <__udivmoddi4+0x28c>
 8000bd4:	3f02      	subs	r7, #2
 8000bd6:	442b      	add	r3, r5
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x8c>
 8000bf0:	192c      	adds	r4, r5, r4
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	f080 8107 	bcs.w	8000e08 <__udivmoddi4+0x290>
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	f240 8104 	bls.w	8000e08 <__udivmoddi4+0x290>
 8000c00:	3802      	subs	r0, #2
 8000c02:	442c      	add	r4, r5
 8000c04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c08:	eba4 040c 	sub.w	r4, r4, ip
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	b11e      	cbz	r6, 8000c18 <__udivmoddi4+0xa0>
 8000c10:	40d4      	lsrs	r4, r2
 8000c12:	2300      	movs	r3, #0
 8000c14:	e9c6 4300 	strd	r4, r3, [r6]
 8000c18:	4639      	mov	r1, r7
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d909      	bls.n	8000c36 <__udivmoddi4+0xbe>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f000 80eb 	beq.w	8000dfe <__udivmoddi4+0x286>
 8000c28:	2700      	movs	r7, #0
 8000c2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c2e:	4638      	mov	r0, r7
 8000c30:	4639      	mov	r1, r7
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	fab3 f783 	clz	r7, r3
 8000c3a:	2f00      	cmp	r7, #0
 8000c3c:	d147      	bne.n	8000cce <__udivmoddi4+0x156>
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xd0>
 8000c42:	4282      	cmp	r2, r0
 8000c44:	f200 80fa 	bhi.w	8000e3c <__udivmoddi4+0x2c4>
 8000c48:	1a84      	subs	r4, r0, r2
 8000c4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	4698      	mov	r8, r3
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d0e0      	beq.n	8000c18 <__udivmoddi4+0xa0>
 8000c56:	e9c6 4800 	strd	r4, r8, [r6]
 8000c5a:	e7dd      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000c5c:	b902      	cbnz	r2, 8000c60 <__udivmoddi4+0xe8>
 8000c5e:	deff      	udf	#255	; 0xff
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f040 808f 	bne.w	8000d88 <__udivmoddi4+0x210>
 8000c6a:	1b49      	subs	r1, r1, r5
 8000c6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c70:	fa1f f885 	uxth.w	r8, r5
 8000c74:	2701      	movs	r7, #1
 8000c76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c7a:	0c23      	lsrs	r3, r4, #16
 8000c7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c84:	fb08 f10c 	mul.w	r1, r8, ip
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0x124>
 8000c8c:	18eb      	adds	r3, r5, r3
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x122>
 8000c94:	4299      	cmp	r1, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2bc>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x14c>
 8000cb4:	192c      	adds	r4, r5, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x14a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80b6 	bhi.w	8000e2e <__udivmoddi4+0x2b6>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e79f      	b.n	8000c0e <__udivmoddi4+0x96>
 8000cce:	f1c7 0c20 	rsb	ip, r7, #32
 8000cd2:	40bb      	lsls	r3, r7
 8000cd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cdc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ce0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ce4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cec:	4325      	orrs	r5, r4
 8000cee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cf2:	0c2c      	lsrs	r4, r5, #16
 8000cf4:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf8:	fa1f fa8e 	uxth.w	sl, lr
 8000cfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d00:	fb09 f40a 	mul.w	r4, r9, sl
 8000d04:	429c      	cmp	r4, r3
 8000d06:	fa02 f207 	lsl.w	r2, r2, r7
 8000d0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b0>
 8000d10:	eb1e 0303 	adds.w	r3, lr, r3
 8000d14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d18:	f080 8087 	bcs.w	8000e2a <__udivmoddi4+0x2b2>
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	f240 8084 	bls.w	8000e2a <__udivmoddi4+0x2b2>
 8000d22:	f1a9 0902 	sub.w	r9, r9, #2
 8000d26:	4473      	add	r3, lr
 8000d28:	1b1b      	subs	r3, r3, r4
 8000d2a:	b2ad      	uxth	r5, r5
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d3c:	45a2      	cmp	sl, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1da>
 8000d40:	eb1e 0404 	adds.w	r4, lr, r4
 8000d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d48:	d26b      	bcs.n	8000e22 <__udivmoddi4+0x2aa>
 8000d4a:	45a2      	cmp	sl, r4
 8000d4c:	d969      	bls.n	8000e22 <__udivmoddi4+0x2aa>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	4474      	add	r4, lr
 8000d52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d56:	fba0 8902 	umull	r8, r9, r0, r2
 8000d5a:	eba4 040a 	sub.w	r4, r4, sl
 8000d5e:	454c      	cmp	r4, r9
 8000d60:	46c2      	mov	sl, r8
 8000d62:	464b      	mov	r3, r9
 8000d64:	d354      	bcc.n	8000e10 <__udivmoddi4+0x298>
 8000d66:	d051      	beq.n	8000e0c <__udivmoddi4+0x294>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d069      	beq.n	8000e40 <__udivmoddi4+0x2c8>
 8000d6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d70:	eb64 0403 	sbc.w	r4, r4, r3
 8000d74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d78:	40fd      	lsrs	r5, r7
 8000d7a:	40fc      	lsrs	r4, r7
 8000d7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d80:	e9c6 5400 	strd	r5, r4, [r6]
 8000d84:	2700      	movs	r7, #0
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000d88:	f1c2 0320 	rsb	r3, r2, #32
 8000d8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d90:	4095      	lsls	r5, r2
 8000d92:	fa01 f002 	lsl.w	r0, r1, r2
 8000d96:	fa21 f303 	lsr.w	r3, r1, r3
 8000d9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d9e:	4338      	orrs	r0, r7
 8000da0:	0c01      	lsrs	r1, r0, #16
 8000da2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000da6:	fa1f f885 	uxth.w	r8, r5
 8000daa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db2:	fb07 f308 	mul.w	r3, r7, r8
 8000db6:	428b      	cmp	r3, r1
 8000db8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x256>
 8000dbe:	1869      	adds	r1, r5, r1
 8000dc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dc4:	d22f      	bcs.n	8000e26 <__udivmoddi4+0x2ae>
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d92d      	bls.n	8000e26 <__udivmoddi4+0x2ae>
 8000dca:	3f02      	subs	r7, #2
 8000dcc:	4429      	add	r1, r5
 8000dce:	1acb      	subs	r3, r1, r3
 8000dd0:	b281      	uxth	r1, r0
 8000dd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dde:	fb00 f308 	mul.w	r3, r0, r8
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x27e>
 8000de6:	1869      	adds	r1, r5, r1
 8000de8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dec:	d217      	bcs.n	8000e1e <__udivmoddi4+0x2a6>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d915      	bls.n	8000e1e <__udivmoddi4+0x2a6>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4429      	add	r1, r5
 8000df6:	1ac9      	subs	r1, r1, r3
 8000df8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dfc:	e73b      	b.n	8000c76 <__udivmoddi4+0xfe>
 8000dfe:	4637      	mov	r7, r6
 8000e00:	4630      	mov	r0, r6
 8000e02:	e709      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000e04:	4607      	mov	r7, r0
 8000e06:	e6e7      	b.n	8000bd8 <__udivmoddi4+0x60>
 8000e08:	4618      	mov	r0, r3
 8000e0a:	e6fb      	b.n	8000c04 <__udivmoddi4+0x8c>
 8000e0c:	4541      	cmp	r1, r8
 8000e0e:	d2ab      	bcs.n	8000d68 <__udivmoddi4+0x1f0>
 8000e10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e14:	eb69 020e 	sbc.w	r2, r9, lr
 8000e18:	3801      	subs	r0, #1
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	e7a4      	b.n	8000d68 <__udivmoddi4+0x1f0>
 8000e1e:	4660      	mov	r0, ip
 8000e20:	e7e9      	b.n	8000df6 <__udivmoddi4+0x27e>
 8000e22:	4618      	mov	r0, r3
 8000e24:	e795      	b.n	8000d52 <__udivmoddi4+0x1da>
 8000e26:	4667      	mov	r7, ip
 8000e28:	e7d1      	b.n	8000dce <__udivmoddi4+0x256>
 8000e2a:	4681      	mov	r9, r0
 8000e2c:	e77c      	b.n	8000d28 <__udivmoddi4+0x1b0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	442c      	add	r4, r5
 8000e32:	e747      	b.n	8000cc4 <__udivmoddi4+0x14c>
 8000e34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e38:	442b      	add	r3, r5
 8000e3a:	e72f      	b.n	8000c9c <__udivmoddi4+0x124>
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	e708      	b.n	8000c52 <__udivmoddi4+0xda>
 8000e40:	4637      	mov	r7, r6
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0xa0>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <Crc32>:
// A function that calculates the CRC-32 based on the table above is
// given below for documentation purposes. An equivalent implementation
// of this function that's actually used in the kernel can be found
//in sys/libkern.h, where it can be inlined.
uint_least32_t Crc32(const unsigned char *buf, size_t len)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
    uint_least32_t crc = 0xFFFFFFFF;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	60fb      	str	r3, [r7, #12]
    while (len--)
 8000e58:	e00e      	b.n	8000e78 <Crc32+0x30>
        crc = (crc >> 8) ^ Crc32Table[(crc ^ *buf++) & 0xFF];
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	0a1a      	lsrs	r2, r3, #8
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1c59      	adds	r1, r3, #1
 8000e62:	6079      	str	r1, [r7, #4]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	4619      	mov	r1, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	404b      	eors	r3, r1
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4909      	ldr	r1, [pc, #36]	; (8000e94 <Crc32+0x4c>)
 8000e70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e74:	4053      	eors	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
    while (len--)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	1e5a      	subs	r2, r3, #1
 8000e7c:	603a      	str	r2, [r7, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1eb      	bne.n	8000e5a <Crc32+0x12>
    return crc ^ 0xFFFFFFFF;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43db      	mvns	r3, r3
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0800fd28 	.word	0x0800fd28

08000e98 <CRC32_Put>:

/*
 * Функция, кладет байт в буфер CRC
 */
void CRC32_Put(buffer_t *crc_buf, uint8_t byte)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
	if(crc_buf->tail < 1200)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f8b3 3960 	ldrh.w	r3, [r3, #2400]	; 0x960
 8000eaa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000eae:	d20b      	bcs.n	8000ec8 <CRC32_Put+0x30>
		crc_buf->buf[crc_buf->tail++] = byte;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f8b3 3960 	ldrh.w	r3, [r3, #2400]	; 0x960
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	b291      	uxth	r1, r2
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	f8a2 1960 	strh.w	r1, [r2, #2400]	; 0x960
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	78fa      	ldrb	r2, [r7, #3]
 8000ec6:	545a      	strb	r2, [r3, r1]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <NTC_getTemp>:
    518, 504, 491, 479, 466, 454, 443, 432,
    421, 410, 400, 389, 380, 370, 361, 352,
    343, 334, 326, 318, 310, 302, 295, 288,
    281, 274, 267, 261, 254 };

int8_t NTC_getTemp(uint16_t ADCresult){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
	if(ADCresult > 4074) return -55;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	f640 72ea 	movw	r2, #4074	; 0xfea
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d902      	bls.n	8000eee <NTC_getTemp+0x1a>
 8000ee8:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8000eec:	e022      	b.n	8000f34 <NTC_getTemp+0x60>
	if(ADCresult < 254) return 125;
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	2bfd      	cmp	r3, #253	; 0xfd
 8000ef2:	d801      	bhi.n	8000ef8 <NTC_getTemp+0x24>
 8000ef4:	237d      	movs	r3, #125	; 0x7d
 8000ef6:	e01d      	b.n	8000f34 <NTC_getTemp+0x60>

	for(uint8_t i = 0; i < 173; i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e016      	b.n	8000f2c <NTC_getTemp+0x58>
		if(ADCresult < ADC_table[i] && ADCresult >= ADC_table[i+1]){
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <NTC_getTemp+0x6c>)
 8000f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d20c      	bcs.n	8000f26 <NTC_getTemp+0x52>
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <NTC_getTemp+0x6c>)
 8000f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d304      	bcc.n	8000f26 <NTC_getTemp+0x52>
			return TEMPERATURE_UNDER + TEMPERATURE_TABLE_STEP * i;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	3b37      	subs	r3, #55	; 0x37
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	e006      	b.n	8000f34 <NTC_getTemp+0x60>
	for(uint8_t i = 0; i < 173; i++){
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2bac      	cmp	r3, #172	; 0xac
 8000f30:	d9e5      	bls.n	8000efe <NTC_getTemp+0x2a>
		}
	}

	return 0;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	08010128 	.word	0x08010128

08000f44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f56:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f58:	4a3f      	ldr	r2, [pc, #252]	; (8001058 <MX_ADC1_Init+0x114>)
 8000f5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f64:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f70:	4b38      	ldr	r3, [pc, #224]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f86:	4a35      	ldr	r2, [pc, #212]	; (800105c <MX_ADC1_Init+0x118>)
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8a:	4b32      	ldr	r3, [pc, #200]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000f90:	4b30      	ldr	r3, [pc, #192]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f92:	2205      	movs	r2, #5
 8000f94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <MX_ADC1_Init+0x110>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <MX_ADC1_Init+0x110>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa4:	482b      	ldr	r0, [pc, #172]	; (8001054 <MX_ADC1_Init+0x110>)
 8000fa6:	f004 fe07 	bl	8005bb8 <HAL_ADC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fb0:	f004 f906 	bl	80051c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4823      	ldr	r0, [pc, #140]	; (8001054 <MX_ADC1_Init+0x110>)
 8000fc6:	f005 f88b 	bl	80060e0 <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fd0:	f004 f8f6 	bl	80051c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481c      	ldr	r0, [pc, #112]	; (8001054 <MX_ADC1_Init+0x110>)
 8000fe2:	f005 f87d 	bl	80060e0 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fec:	f004 f8e8 	bl	80051c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4814      	ldr	r0, [pc, #80]	; (8001054 <MX_ADC1_Init+0x110>)
 8001002:	f005 f86d 	bl	80060e0 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 800100c:	f004 f8d8 	bl	80051c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001010:	2302      	movs	r3, #2
 8001012:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001014:	2304      	movs	r3, #4
 8001016:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001018:	2306      	movs	r3, #6
 800101a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_ADC1_Init+0x110>)
 8001022:	f005 f85d 	bl	80060e0 <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 800102c:	f004 f8c8 	bl	80051c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001030:	2303      	movs	r3, #3
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001034:	2305      	movs	r3, #5
 8001036:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_ADC1_Init+0x110>)
 800103e:	f005 f84f 	bl	80060e0 <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001048:	f004 f8ba 	bl	80051c0 <Error_Handler>
  }

}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20006a88 	.word	0x20006a88
 8001058:	40012000 	.word	0x40012000
 800105c:	0f000001 	.word	0x0f000001

08001060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a33      	ldr	r2, [pc, #204]	; (800114c <HAL_ADC_MspInit+0xec>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d15f      	bne.n	8001142 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b32      	ldr	r3, [pc, #200]	; (8001150 <HAL_ADC_MspInit+0xf0>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a31      	ldr	r2, [pc, #196]	; (8001150 <HAL_ADC_MspInit+0xf0>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <HAL_ADC_MspInit+0xf0>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_ADC_MspInit+0xf0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <HAL_ADC_MspInit+0xf0>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <HAL_ADC_MspInit+0xf0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = STM32_ADC_NTC_1_Pin|STM32_ADC_5V_Pin|STM32_ADC_3_3V_Pin|STM32_ADC_12V_Pin;
 80010ba:	230f      	movs	r3, #15
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010be:	2303      	movs	r3, #3
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4821      	ldr	r0, [pc, #132]	; (8001154 <HAL_ADC_MspInit+0xf4>)
 80010ce:	f005 ff93 	bl	8006ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <HAL_ADC_MspInit+0xfc>)
 80010d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 80010ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 80010f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 80010fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001100:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 8001104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001108:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001116:	4810      	ldr	r0, [pc, #64]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 8001118:	f005 fb6e 	bl	80067f8 <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001122:	f004 f84d 	bl	80051c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 800112a:	639a      	str	r2, [r3, #56]	; 0x38
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_ADC_MspInit+0xf8>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	2012      	movs	r0, #18
 8001138:	f005 fb34 	bl	80067a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800113c:	2012      	movs	r0, #18
 800113e:	f005 fb4d 	bl	80067dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40012000 	.word	0x40012000
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000
 8001158:	20006a28 	.word	0x20006a28
 800115c:	40026410 	.word	0x40026410

08001160 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_DMA_Init+0x68>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <MX_DMA_Init+0x68>)
 8001170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_DMA_Init+0x68>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_DMA_Init+0x68>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <MX_DMA_Init+0x68>)
 800118c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <MX_DMA_Init+0x68>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2105      	movs	r1, #5
 80011a2:	200c      	movs	r0, #12
 80011a4:	f005 fafe 	bl	80067a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011a8:	200c      	movs	r0, #12
 80011aa:	f005 fb17 	bl	80067dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2105      	movs	r1, #5
 80011b2:	2038      	movs	r0, #56	; 0x38
 80011b4:	f005 faf6 	bl	80067a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011b8:	2038      	movs	r0, #56	; 0x38
 80011ba:	f005 fb0f 	bl	80067dc <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80011dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <vApplicationGetIdleTaskMemory+0x30>)
 80011e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2240      	movs	r2, #64	; 0x40
 80011e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200010b8 	.word	0x200010b8
 80011fc:	2000110c 	.word	0x2000110c

08001200 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b0b0      	sub	sp, #192	; 0xc0
 8001204:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myCursorQueue */
  osMessageQDef(myCursorQueue, 5, uint8_t);
 8001206:	4b47      	ldr	r3, [pc, #284]	; (8001324 <MX_FREERTOS_Init+0x124>)
 8001208:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800120c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800120e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myCursorQueueHandle = osMessageCreate(osMessageQ(myCursorQueue), NULL);
 8001212:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f00a fbe9 	bl	800b9f0 <osMessageCreate>
 800121e:	4602      	mov	r2, r0
 8001220:	4b41      	ldr	r3, [pc, #260]	; (8001328 <MX_FREERTOS_Init+0x128>)
 8001222:	601a      	str	r2, [r3, #0]

  /* definition and creation of myDispStatQueue */
  osMessageQDef(myDispStatQueue, 4, uint8_t);
 8001224:	4b41      	ldr	r3, [pc, #260]	; (800132c <MX_FREERTOS_Init+0x12c>)
 8001226:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800122a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myDispStatQueueHandle = osMessageCreate(osMessageQ(myDispStatQueue), NULL);
 8001230:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f00a fbda 	bl	800b9f0 <osMessageCreate>
 800123c:	4602      	mov	r2, r0
 800123e:	4b3c      	ldr	r3, [pc, #240]	; (8001330 <MX_FREERTOS_Init+0x130>)
 8001240:	601a      	str	r2, [r3, #0]

  /* definition and creation of myDisplayStat */
  osMessageQStaticDef(myDisplayStat, 4, uint8_t, myDisplayStatBuffer, &myDisplayStatControlBlock);
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <MX_FREERTOS_Init+0x134>)
 8001244:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800124a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myDisplayStatHandle = osMessageCreate(osMessageQ(myDisplayStat), NULL);
 800124e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f00a fbcb 	bl	800b9f0 <osMessageCreate>
 800125a:	4602      	mov	r2, r0
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <MX_FREERTOS_Init+0x138>)
 800125e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001260:	4b36      	ldr	r3, [pc, #216]	; (800133c <MX_FREERTOS_Init+0x13c>)
 8001262:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001266:	461d      	mov	r5, r3
 8001268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001274:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f00a fb58 	bl	800b930 <osThreadCreate>
 8001280:	4602      	mov	r2, r0
 8001282:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <MX_FREERTOS_Init+0x140>)
 8001284:	601a      	str	r2, [r3, #0]

  /* definition and creation of myDisplayTask */
  osThreadDef(myDisplayTask, StartDisplayTask, osPriorityNormal, 0, 2800);
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <MX_FREERTOS_Init+0x144>)
 8001288:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800128c:	461d      	mov	r5, r3
 800128e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001292:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myDisplayTaskHandle = osThreadCreate(osThread(myDisplayTask), NULL);
 800129a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00a fb45 	bl	800b930 <osThreadCreate>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_FREERTOS_Init+0x148>)
 80012aa:	601a      	str	r2, [r3, #0]

  /* definition and creation of myDataTask */
  osThreadDef(myDataTask, StartDataTask, osPriorityNormal, 0, 800);
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_FREERTOS_Init+0x14c>)
 80012ae:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80012b2:	461d      	mov	r5, r3
 80012b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myDataTaskHandle = osThreadCreate(osThread(myDataTask), NULL);
 80012c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f00a fb32 	bl	800b930 <osThreadCreate>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <MX_FREERTOS_Init+0x150>)
 80012d0:	601a      	str	r2, [r3, #0]

  /* definition and creation of myControlTask */
  osThreadDef(myControlTask, StartControlTask, osPriorityNormal, 0, 400);
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_FREERTOS_Init+0x154>)
 80012d4:	f107 0420 	add.w	r4, r7, #32
 80012d8:	461d      	mov	r5, r3
 80012da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myControlTaskHandle = osThreadCreate(osThread(myControlTask), NULL);
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00a fb1f 	bl	800b930 <osThreadCreate>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_FREERTOS_Init+0x158>)
 80012f6:	601a      	str	r2, [r3, #0]

  /* definition and creation of myLEDsTask */
  osThreadDef(myLEDsTask, StartLEDsTask, osPriorityIdle, 0, 128);
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_FREERTOS_Init+0x15c>)
 80012fa:	1d3c      	adds	r4, r7, #4
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLEDsTaskHandle = osThreadCreate(osThread(myLEDsTask), NULL);
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f00a fb0e 	bl	800b930 <osThreadCreate>
 8001314:	4602      	mov	r2, r0
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_FREERTOS_Init+0x160>)
 8001318:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800131a:	bf00      	nop
 800131c:	37c0      	adds	r7, #192	; 0xc0
 800131e:	46bd      	mov	sp, r7
 8001320:	bdb0      	pop	{r4, r5, r7, pc}
 8001322:	bf00      	nop
 8001324:	0800fb30 	.word	0x0800fb30
 8001328:	20006b44 	.word	0x20006b44
 800132c:	0800fb40 	.word	0x0800fb40
 8001330:	20006ad0 	.word	0x20006ad0
 8001334:	0800fb50 	.word	0x0800fb50
 8001338:	200095f4 	.word	0x200095f4
 800133c:	0800fb6c 	.word	0x0800fb6c
 8001340:	20006b40 	.word	0x20006b40
 8001344:	0800fb98 	.word	0x0800fb98
 8001348:	20006b30 	.word	0x20006b30
 800134c:	0800fbc0 	.word	0x0800fbc0
 8001350:	20006adc 	.word	0x20006adc
 8001354:	0800fbec 	.word	0x0800fbec
 8001358:	20006b28 	.word	0x20006b28
 800135c:	0800fc14 	.word	0x0800fc14
 8001360:	20006b2c 	.word	0x20006b2c

08001364 <StartDefaultTask>:
 *				   ЗАПУСКАЕТ ПЕРЕФЕР�?Ю						*
 *				   											*
 ************************************************************/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

/*------------------------- ЗАПУСКАЕМ ПЕРЕФЕР�?Ю ---------------------------*/
	HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart_buf, UartBufSize);	// ЗАПУСК UART В РЕЖ�?МЕ DMA
 800136c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001370:	4938      	ldr	r1, [pc, #224]	; (8001454 <StartDefaultTask+0xf0>)
 8001372:	4839      	ldr	r0, [pc, #228]	; (8001458 <StartDefaultTask+0xf4>)
 8001374:	f007 fc16 	bl	8008ba4 <HAL_UART_Receive_DMA>
	HAL_IWDG_Init(&hiwdg);											// ЗАПУСК WATHDOG
 8001378:	4838      	ldr	r0, [pc, #224]	; (800145c <StartDefaultTask+0xf8>)
 800137a:	f006 f95b 	bl	8007634 <HAL_IWDG_Init>
	HAL_TIM_Base_Start_IT(&htim7);									// ЗАПУСК ТАЙМЕРА UP_TIME
 800137e:	4838      	ldr	r0, [pc, #224]	; (8001460 <StartDefaultTask+0xfc>)
 8001380:	f007 f8a5 	bl	80084ce <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start_IT(&htim14);									// ЗАПУСК ТАЙМЕРА UP_TIME

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_val, 5);				// ЗАПУСК АЦП В РЕЖ�?МЕ DMA
 8001384:	2205      	movs	r2, #5
 8001386:	4937      	ldr	r1, [pc, #220]	; (8001464 <StartDefaultTask+0x100>)
 8001388:	4837      	ldr	r0, [pc, #220]	; (8001468 <StartDefaultTask+0x104>)
 800138a:	f004 fd99 	bl	8005ec0 <HAL_ADC_Start_DMA>

	datastring[ctrl_string_1].number = ctrl_string_1;
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <StartDefaultTask+0x108>)
 8001390:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001394:	332f      	adds	r3, #47	; 0x2f
 8001396:	2291      	movs	r2, #145	; 0x91
 8001398:	701a      	strb	r2, [r3, #0]
	datastring[ctrl_string_2].number = ctrl_string_2;
 800139a:	4b34      	ldr	r3, [pc, #208]	; (800146c <StartDefaultTask+0x108>)
 800139c:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 80013a0:	3332      	adds	r3, #50	; 0x32
 80013a2:	2292      	movs	r2, #146	; 0x92
 80013a4:	701a      	strb	r2, [r3, #0]
	datastring[ctrl_string_3].number = ctrl_string_3;
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <StartDefaultTask+0x108>)
 80013a8:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 80013ac:	3335      	adds	r3, #53	; 0x35
 80013ae:	2293      	movs	r2, #147	; 0x93
 80013b0:	701a      	strb	r2, [r3, #0]
	datastring[ctrl_string_4].number = ctrl_string_4;
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <StartDefaultTask+0x108>)
 80013b4:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 80013b8:	3338      	adds	r3, #56	; 0x38
 80013ba:	2294      	movs	r2, #148	; 0x94
 80013bc:	701a      	strb	r2, [r3, #0]
	datastring[ctrl_string_5].number = ctrl_string_5;
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <StartDefaultTask+0x108>)
 80013c0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80013c4:	333b      	adds	r3, #59	; 0x3b
 80013c6:	2295      	movs	r2, #149	; 0x95
 80013c8:	701a      	strb	r2, [r3, #0]
	datastring[ctrl_string_6].number = ctrl_string_6;
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <StartDefaultTask+0x108>)
 80013cc:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 80013d0:	333e      	adds	r3, #62	; 0x3e
 80013d2:	2296      	movs	r2, #150	; 0x96
 80013d4:	701a      	strb	r2, [r3, #0]
	datastring[ctrl_string_7].number = ctrl_string_7;
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <StartDefaultTask+0x108>)
 80013d8:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 80013dc:	3301      	adds	r3, #1
 80013de:	2297      	movs	r2, #151	; 0x97
 80013e0:	701a      	strb	r2, [r3, #0]
	datastring[ctrl_string_8].number = ctrl_string_8;
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <StartDefaultTask+0x108>)
 80013e4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80013e8:	3304      	adds	r3, #4
 80013ea:	2298      	movs	r2, #152	; 0x98
 80013ec:	701a      	strb	r2, [r3, #0]
	datastring[ctrl_string_9].number = ctrl_string_9;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <StartDefaultTask+0x108>)
 80013f0:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 80013f4:	3307      	adds	r3, #7
 80013f6:	2299      	movs	r2, #153	; 0x99
 80013f8:	701a      	strb	r2, [r3, #0]
	datastring[ctrl_string_10].number = ctrl_string_10;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <StartDefaultTask+0x108>)
 80013fc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001400:	330a      	adds	r3, #10
 8001402:	229a      	movs	r2, #154	; 0x9a
 8001404:	701a      	strb	r2, [r3, #0]

	PutString(&datastring[ctrl_string_9], VERS, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	4919      	ldr	r1, [pc, #100]	; (8001470 <StartDefaultTask+0x10c>)
 800140a:	481a      	ldr	r0, [pc, #104]	; (8001474 <StartDefaultTask+0x110>)
 800140c:	f002 fe74 	bl	80040f8 <PutString>

	datastring[serv_string_1].number = serv_string_1;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <StartDefaultTask+0x108>)
 8001412:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8001416:	330d      	adds	r3, #13
 8001418:	229b      	movs	r2, #155	; 0x9b
 800141a:	701a      	strb	r2, [r3, #0]
	datastring[serv_string_2].number = serv_string_2;
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <StartDefaultTask+0x108>)
 800141e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001422:	3310      	adds	r3, #16
 8001424:	229c      	movs	r2, #156	; 0x9c
 8001426:	701a      	strb	r2, [r3, #0]

	if(!HSE_status){
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <StartDefaultTask+0x114>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d105      	bne.n	800143c <StartDefaultTask+0xd8>
		HAL_GPIO_WritePin(SYM_LED_B_GPIO_Port, SYM_LED_B_Pin, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <StartDefaultTask+0x118>)
 8001438:	f005 ff90 	bl	800735c <HAL_GPIO_WritePin>
	}
	osDelay(500);
 800143c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001440:	f00a fac2 	bl	800b9c8 <osDelay>
	HAL_TIM_Base_Start_IT(&htim13);									// ЗАПУСК ТАЙМЕРА WDG_TIME
 8001444:	480e      	ldr	r0, [pc, #56]	; (8001480 <StartDefaultTask+0x11c>)
 8001446:	f007 f842 	bl	80084ce <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f00a fabc 	bl	800b9c8 <osDelay>
 8001450:	e7fb      	b.n	800144a <StartDefaultTask+0xe6>
 8001452:	bf00      	nop
 8001454:	20000098 	.word	0x20000098
 8001458:	200098a8 	.word	0x200098a8
 800145c:	2000964c 	.word	0x2000964c
 8001460:	200097c8 	.word	0x200097c8
 8001464:	20006b34 	.word	0x20006b34
 8001468:	20006a88 	.word	0x20006a88
 800146c:	20006b48 	.word	0x20006b48
 8001470:	0800fc30 	.word	0x0800fc30
 8001474:	20009353 	.word	0x20009353
 8001478:	20000001 	.word	0x20000001
 800147c:	40020400 	.word	0x40020400
 8001480:	20009788 	.word	0x20009788

08001484 <StartDisplayTask>:
 *				   	ВЫВОД�?Т СТРОК�? НА Д�?СПЛЕЙ				*
 *				   											*
 ************************************************************/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 800148a:	af02      	add	r7, sp, #8
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	6018      	str	r0, [r3, #0]

/************************** ПЕРЕМЕННЫЕ ЗАДАЧ�? ****************************/

/*-----------------------  ОСНОВНЫЕ ПЕРЕМЕННЫЕ ------------------------- */
	static u8g2_t u8g2;											// TypeDef_библиотеки_u8g2_для_рисования_на_дисплей
	uint16_t cursor = 0;										// Положение_окошка_дисплея
 8001490:	2300      	movs	r3, #0
 8001492:	f8a7 32a2 	strh.w	r3, [r7, #674]	; 0x2a2
	string_t *rdy[string_amount];								// Массив_указателей_на_готовые_к_выводу_строки
//	uint8_t disp_stat = 1;										// Статус_дисплея. Определяется_приянтым_от_компа_значением
	uint8_t show_pointer = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
	uint8_t string_num[3] = {'\0'};
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	2100      	movs	r1, #0
 80014a2:	460a      	mov	r2, r1
 80014a4:	801a      	strh	r2, [r3, #0]
 80014a6:	460a      	mov	r2, r1
 80014a8:	709a      	strb	r2, [r3, #2]
/*----------------------------- СЧЕТЧ�?К�? ------------------------------- */
	uint8_t rdy_count = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae
	uint8_t show_count = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 32ad 	strb.w	r3, [r7, #685]	; 0x2ad
	uint32_t displayOFF_del = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
	uint8_t chanel_num[2] = {'\0'};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	801a      	strh	r2, [r3, #0]

/*----------------------- ФУНКЦ�?�? �?Н�?ЦАЛ�?ЗАЦ�?�? --------------------------*/
	DisplayInit(&u8g2);											// �?Н�?Ц�?АЛ�?ЗАЦ�?Я Д�?СПЛЕЯ
 80014c4:	48b9      	ldr	r0, [pc, #740]	; (80017ac <StartDisplayTask+0x328>)
 80014c6:	f003 fa59 	bl	800497c <DisplayInit>
	PowerON(&u8g2);
 80014ca:	48b8      	ldr	r0, [pc, #736]	; (80017ac <StartDisplayTask+0x328>)
 80014cc:	f001 ffbc 	bl	8003448 <PowerON>

/***************************** ТЕЛО ЗАДАЧ�? *******************************/
	for(;;){

		WDG_TackArr[0] = 1;
 80014d0:	4bb7      	ldr	r3, [pc, #732]	; (80017b0 <StartDisplayTask+0x32c>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
		// УСЛОВ�?Е ОПРЕДЕЛЯЮЩЕЕ, ГОТОВЫ Л�? ДАННЫЕ ДЛЯ ВЫВОДА
		// ЕСЛ�? НЕ ГОТОВЫ, ВЫВОД�?Т ОКНО ЗАГРУЗК�?,
		// �?НАЧЕ ВЫПОЛНЯЕТ ВЫВОД ДАННЫХ НА Д�?СПЛЕЙ
		if(!(data_ready_flag && uart_hlf_flag) && display_stat && !service_mode){
 80014d6:	4bb7      	ldr	r3, [pc, #732]	; (80017b4 <StartDisplayTask+0x330>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <StartDisplayTask+0x62>
 80014de:	4bb6      	ldr	r3, [pc, #728]	; (80017b8 <StartDisplayTask+0x334>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10b      	bne.n	80014fe <StartDisplayTask+0x7a>
 80014e6:	4bb5      	ldr	r3, [pc, #724]	; (80017bc <StartDisplayTask+0x338>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <StartDisplayTask+0x7a>
 80014ee:	4bb4      	ldr	r3, [pc, #720]	; (80017c0 <StartDisplayTask+0x33c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d103      	bne.n	80014fe <StartDisplayTask+0x7a>
			display_stat = 3;
 80014f6:	4bb1      	ldr	r3, [pc, #708]	; (80017bc <StartDisplayTask+0x338>)
 80014f8:	2203      	movs	r2, #3
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e1b4      	b.n	8001868 <StartDisplayTask+0x3e4>
		}
		else if (display_stat){
 80014fe:	4baf      	ldr	r3, [pc, #700]	; (80017bc <StartDisplayTask+0x338>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 81b0 	beq.w	8001868 <StartDisplayTask+0x3e4>

			display_stat = (display_stat == 0) ? 0 : 1;
 8001508:	4bac      	ldr	r3, [pc, #688]	; (80017bc <StartDisplayTask+0x338>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf14      	ite	ne
 8001510:	2301      	movne	r3, #1
 8001512:	2300      	moveq	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	4ba8      	ldr	r3, [pc, #672]	; (80017bc <StartDisplayTask+0x338>)
 800151a:	701a      	strb	r2, [r3, #0]

/*----------------------- ОТБ�?РАЕМ НУЖНЫЕ СТРОК�? -------------------------*/

			// ПРОСМАТР�?ЕВАЕМ ВЕСЬ МАСС�?В СТРОК В ПО�?СКАХ ГОТОВЫХ СТРОК
			// ЕСЛ�? СТРОКА ГОТОВА, В МАСС�?В УКАЗАТЕЛЕЙ ЗАП�?СЫВАЕМ АДРЕСС ГОТОВОЙ СТРОК�?
			rdy_count = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae
			for(uint8_t i = 1; i < string_amount; i++){
 8001522:	2301      	movs	r3, #1
 8001524:	f887 32ac 	strb.w	r3, [r7, #684]	; 0x2ac
 8001528:	e025      	b.n	8001576 <StartDisplayTask+0xf2>
				if(datastring[i].status){
 800152a:	f897 22ac 	ldrb.w	r2, [r7, #684]	; 0x2ac
 800152e:	49a5      	ldr	r1, [pc, #660]	; (80017c4 <StartDisplayTask+0x340>)
 8001530:	4613      	mov	r3, r2
 8001532:	015b      	lsls	r3, r3, #5
 8001534:	4413      	add	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	440b      	add	r3, r1
 800153c:	333d      	adds	r3, #61	; 0x3d
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <StartDisplayTask+0xe8>
					rdy[rdy_count] = &datastring[i];
 8001544:	f897 22ac 	ldrb.w	r2, [r7, #684]	; 0x2ac
 8001548:	f897 12ae 	ldrb.w	r1, [r7, #686]	; 0x2ae
 800154c:	4613      	mov	r3, r2
 800154e:	015b      	lsls	r3, r3, #5
 8001550:	4413      	add	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	4a9b      	ldr	r2, [pc, #620]	; (80017c4 <StartDisplayTask+0x340>)
 8001558:	441a      	add	r2, r3
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					rdy_count++;
 8001562:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 8001566:	3301      	adds	r3, #1
 8001568:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae
			for(uint8_t i = 1; i < string_amount; i++){
 800156c:	f897 32ac 	ldrb.w	r3, [r7, #684]	; 0x2ac
 8001570:	3301      	adds	r3, #1
 8001572:	f887 32ac 	strb.w	r3, [r7, #684]	; 0x2ac
 8001576:	f897 32ac 	ldrb.w	r3, [r7, #684]	; 0x2ac
 800157a:	2ba2      	cmp	r3, #162	; 0xa2
 800157c:	d9d5      	bls.n	800152a <StartDisplayTask+0xa6>
			}

/*-------------------ОПРЕДЕЛЯЕМ ПОЛОЖЕН�?Е ОКНА(КУРСОРА) ------------------*/

			// ПР�?Н�?МАЕМ ЗНАЧЕН�?Е КУРСОРА �?З ЗАДАЧ�? StartControlTask
			xQueueReceive(myCursorQueueHandle, &cursor, 10);
 800157e:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <StartDisplayTask+0x344>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f207 21a2 	addw	r1, r7, #674	; 0x2a2
 8001586:	220a      	movs	r2, #10
 8001588:	4618      	mov	r0, r3
 800158a:	f00a fd3f 	bl	800c00c <xQueueReceive>

			// ПРОВЕРЯЕМ, ЧТО ОКНО НЕ ВЫХОД�?Т ЗА КОНЕЦ ВЫВОД�?МЫХ СТРОК(т.к_количество_строк_может_меняться)
			// ЕСЛ�? ВЫХОД�?Т, ТО ПР�?Н�?МАЕМ МАКС�?МАЛЬНОЕ �? ОТПРАВЛЯЕМ ЗНАЧЕН�?Е ЗАДАЧЕ StartControlTask
			if(cursor > rdy_count - 1 && cursor < 160){
 800158e:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	; 0x2a2
 8001592:	461a      	mov	r2, r3
 8001594:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 8001598:	3b01      	subs	r3, #1
 800159a:	429a      	cmp	r2, r3
 800159c:	dd10      	ble.n	80015c0 <StartDisplayTask+0x13c>
 800159e:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	; 0x2a2
 80015a2:	2b9f      	cmp	r3, #159	; 0x9f
 80015a4:	d80c      	bhi.n	80015c0 <StartDisplayTask+0x13c>
				cursor = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8a7 32a2 	strh.w	r3, [r7, #674]	; 0x2a2
				xQueueSendToBack(myCursorQueueHandle, &cursor, portMAX_DELAY);
 80015ac:	4b86      	ldr	r3, [pc, #536]	; (80017c8 <StartDisplayTask+0x344>)
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	f207 21a2 	addw	r1, r7, #674	; 0x2a2
 80015b4:	2300      	movs	r3, #0
 80015b6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ba:	f00a fc2d 	bl	800be18 <xQueueGenericSend>
 80015be:	e013      	b.n	80015e8 <StartDisplayTask+0x164>
			}
			else if(cursor > 160) {
 80015c0:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	; 0x2a2
 80015c4:	2ba0      	cmp	r3, #160	; 0xa0
 80015c6:	d90f      	bls.n	80015e8 <StartDisplayTask+0x164>
				cursor = rdy_count-1;
 80015c8:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	3b01      	subs	r3, #1
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f8a7 32a2 	strh.w	r3, [r7, #674]	; 0x2a2
				xQueueSendToBack(myCursorQueueHandle, &cursor, portMAX_DELAY);
 80015d6:	4b7c      	ldr	r3, [pc, #496]	; (80017c8 <StartDisplayTask+0x344>)
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	f207 21a2 	addw	r1, r7, #674	; 0x2a2
 80015de:	2300      	movs	r3, #0
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	f00a fc18 	bl	800be18 <xQueueGenericSend>
			// ПР�?Н�?МАЕМ СТАТУС Д�?СПЛЕЯ �?З ЗАДАЧ�? StartControlTask
//			taskENTER_CRITICAL();
//			xQueueReceive(myDispStatQueueHandle, &display_stat, 100);
//			taskEXIT_CRITICAL();

			u8g2_ClearBuffer(&u8g2);										// ОЧ�?ЩАЕМ БУФЕР Д�?СПЛЕЯ
 80015e8:	4870      	ldr	r0, [pc, #448]	; (80017ac <StartDisplayTask+0x328>)
 80015ea:	f008 fb47 	bl	8009c7c <u8g2_ClearBuffer>

			u8g2_SetFont(&u8g2, u8g2_font_unifont_t_cyrillic);				// УСТАНАВЛ�?ВАЕМ К�?Р�?Л�?ЧЕСК�?Й ШР�?ФТ
 80015ee:	4977      	ldr	r1, [pc, #476]	; (80017cc <StartDisplayTask+0x348>)
 80015f0:	486e      	ldr	r0, [pc, #440]	; (80017ac <StartDisplayTask+0x328>)
 80015f2:	f009 f9e3 	bl	800a9bc <u8g2_SetFont>

			u8g2_SetDrawColor(&u8g2, 1);
 80015f6:	2101      	movs	r1, #1
 80015f8:	486c      	ldr	r0, [pc, #432]	; (80017ac <StartDisplayTask+0x328>)
 80015fa:	f009 faeb 	bl	800abd4 <u8g2_SetDrawColor>

			show_count = 4;
 80015fe:	2304      	movs	r3, #4
 8001600:	f887 32ad 	strb.w	r3, [r7, #685]	; 0x2ad
			show_pointer = cursor;
 8001604:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	; 0x2a2
 8001608:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af

			while(show_count){
 800160c:	e0ea      	b.n	80017e4 <StartDisplayTask+0x360>

				if(service_mode){
 800160e:	4b6c      	ldr	r3, [pc, #432]	; (80017c0 <StartDisplayTask+0x33c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01d      	beq.n	8001652 <StartDisplayTask+0x1ce>
					u8g2_DrawUTF8(&u8g2, 0, 15 + 15 * (4 - show_count), (char *) itoa(rdy[show_pointer]->number,(char*) &string_num, 10));
 8001616:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 800161a:	f1c3 0305 	rsb	r3, r3, #5
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	b2dc      	uxtb	r4, r3
 8001628:	f897 22af 	ldrb.w	r2, [r7, #687]	; 0x2af
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001638:	4618      	mov	r0, r3
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	220a      	movs	r2, #10
 8001640:	4619      	mov	r1, r3
 8001642:	f00c fa37 	bl	800dab4 <itoa>
 8001646:	4603      	mov	r3, r0
 8001648:	4622      	mov	r2, r4
 800164a:	2100      	movs	r1, #0
 800164c:	4857      	ldr	r0, [pc, #348]	; (80017ac <StartDisplayTask+0x328>)
 800164e:	f009 f913 	bl	800a878 <u8g2_DrawUTF8>
				}

				u8g2_DrawUTF8(&u8g2, service_mode * (9 * strlen((char*) &string_num) + 3), 15+ 15 * (4 - show_count),(char *) rdy[show_pointer]->buf);
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fdba 	bl	80001d0 <strlen>
 800165c:	4602      	mov	r2, r0
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	3303      	adds	r3, #3
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <StartDisplayTask+0x33c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	fb12 f303 	smulbb	r3, r2, r3
 8001670:	b2d9      	uxtb	r1, r3
 8001672:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 8001676:	f1c3 0305 	rsb	r3, r3, #5
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	b2d8      	uxtb	r0, r3
 8001684:	f897 22af 	ldrb.w	r2, [r7, #687]	; 0x2af
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001690:	4602      	mov	r2, r0
 8001692:	4846      	ldr	r0, [pc, #280]	; (80017ac <StartDisplayTask+0x328>)
 8001694:	f009 f8f0 	bl	800a878 <u8g2_DrawUTF8>

				// ВВОД�?М В БУФЕР Д�?СПЛЕЯ ЗНАК�? С�?МВОЛОВ ГРАДУСА СТРОК�? В МЕСТА, НА КОТОРЫХ ОН�? РАСПОЛОЖЕНЫ
				for(uint8_t j = 0; j < degree_sym_amount; j++){
 8001698:	2300      	movs	r3, #0
 800169a:	f887 32ab 	strb.w	r3, [r7, #683]	; 0x2ab
 800169e:	e075      	b.n	800178c <StartDisplayTask+0x308>
					if(rdy[show_pointer]->degreeSym[j] != '\0'){
 80016a0:	f897 22af 	ldrb.w	r2, [r7, #687]	; 0x2af
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016ac:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 80016b0:	4413      	add	r3, r2
 80016b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d063      	beq.n	8001782 <StartDisplayTask+0x2fe>
						DrawSym(&u8g2, rdy[show_pointer]->degreeSym[j] * 7 + 7 + service_mode * (9 * strlen((char*) &string_num) + 3), 15 + 15 * (4 - show_count), 176);
 80016ba:	f897 22af 	ldrb.w	r2, [r7, #687]	; 0x2af
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016c6:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 80016ca:	4413      	add	r3, r2
 80016cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	00d2      	lsls	r2, r2, #3
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	b2dc      	uxtb	r4, r3
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fd75 	bl	80001d0 <strlen>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	3303      	adds	r3, #3
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <StartDisplayTask+0x33c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	fb12 f303 	smulbb	r3, r2, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4423      	add	r3, r4
 80016fe:	b2d9      	uxtb	r1, r3
 8001700:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 8001704:	f1c3 0305 	rsb	r3, r3, #5
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	b2da      	uxtb	r2, r3
 8001712:	23b0      	movs	r3, #176	; 0xb0
 8001714:	4825      	ldr	r0, [pc, #148]	; (80017ac <StartDisplayTask+0x328>)
 8001716:	f003 fc51 	bl	8004fbc <DrawSym>

						u8g2_SetFont(&u8g2, u8g2_font_unifont_t_cyrillic);
 800171a:	492c      	ldr	r1, [pc, #176]	; (80017cc <StartDisplayTask+0x348>)
 800171c:	4823      	ldr	r0, [pc, #140]	; (80017ac <StartDisplayTask+0x328>)
 800171e:	f009 f94d 	bl	800a9bc <u8g2_SetFont>
						u8g2_DrawUTF8(&u8g2, rdy[show_pointer]->degreeSym[j] * 7 + 17 + service_mode * (9 * strlen((char*) &string_num) + 3), 15 + 15 * (4 - show_count), "C");
 8001722:	f897 22af 	ldrb.w	r2, [r7, #687]	; 0x2af
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800172e:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 8001732:	4413      	add	r3, r2
 8001734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001738:	461a      	mov	r2, r3
 800173a:	00d2      	lsls	r2, r2, #3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b2dc      	uxtb	r4, r3
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fd43 	bl	80001d0 <strlen>
 800174a:	4602      	mov	r2, r0
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	3303      	adds	r3, #3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <StartDisplayTask+0x33c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	fb12 f303 	smulbb	r3, r2, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4423      	add	r3, r4
 8001762:	b2db      	uxtb	r3, r3
 8001764:	3311      	adds	r3, #17
 8001766:	b2d9      	uxtb	r1, r3
 8001768:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 800176c:	f1c3 0305 	rsb	r3, r3, #5
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <StartDisplayTask+0x34c>)
 800177c:	480b      	ldr	r0, [pc, #44]	; (80017ac <StartDisplayTask+0x328>)
 800177e:	f009 f87b 	bl	800a878 <u8g2_DrawUTF8>
				for(uint8_t j = 0; j < degree_sym_amount; j++){
 8001782:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 8001786:	3301      	adds	r3, #1
 8001788:	f887 32ab 	strb.w	r3, [r7, #683]	; 0x2ab
 800178c:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 8001790:	2b03      	cmp	r3, #3
 8001792:	d985      	bls.n	80016a0 <StartDisplayTask+0x21c>
					}
				}


				show_pointer = (show_pointer <= rdy_count - 2) ? show_pointer + 1 : 0;
 8001794:	f897 22af 	ldrb.w	r2, [r7, #687]	; 0x2af
 8001798:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 800179c:	3b02      	subs	r3, #2
 800179e:	429a      	cmp	r2, r3
 80017a0:	dc18      	bgt.n	80017d4 <StartDisplayTask+0x350>
 80017a2:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 80017a6:	3301      	adds	r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	e014      	b.n	80017d6 <StartDisplayTask+0x352>
 80017ac:	2000120c 	.word	0x2000120c
 80017b0:	2000109c 	.word	0x2000109c
 80017b4:	20001099 	.word	0x20001099
 80017b8:	20001098 	.word	0x20001098
 80017bc:	20000000 	.word	0x20000000
 80017c0:	200010b4 	.word	0x200010b4
 80017c4:	20006b48 	.word	0x20006b48
 80017c8:	20006b44 	.word	0x20006b44
 80017cc:	0801257c 	.word	0x0801257c
 80017d0:	0800fc48 	.word	0x0800fc48
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
				show_count--;
 80017da:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 80017de:	3b01      	subs	r3, #1
 80017e0:	f887 32ad 	strb.w	r3, [r7, #685]	; 0x2ad
			while(show_count){
 80017e4:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f47f af10 	bne.w	800160e <StartDisplayTask+0x18a>
			}

			if(UTC_show_flag){
 80017ee:	4b52      	ldr	r3, [pc, #328]	; (8001938 <StartDisplayTask+0x4b4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d038      	beq.n	8001868 <StartDisplayTask+0x3e4>

				itoa(rdy[cursor]->chanel_num,(char *) &chanel_num, 10);
 80017f6:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	; 0x2a2
 80017fa:	461a      	mov	r2, r3
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001808:	4618      	mov	r0, r3
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	220a      	movs	r2, #10
 8001810:	4619      	mov	r1, r3
 8001812:	f00c f94f 	bl	800dab4 <itoa>

				u8g2_SetFontMode(&u8g2, 1);
 8001816:	2101      	movs	r1, #1
 8001818:	4848      	ldr	r0, [pc, #288]	; (800193c <StartDisplayTask+0x4b8>)
 800181a:	f008 ff6f 	bl	800a6fc <u8g2_SetFontMode>
				u8g2_DrawBox(&u8g2, 0, 0, 254, 18);
 800181e:	2312      	movs	r3, #18
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	23fe      	movs	r3, #254	; 0xfe
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	4844      	ldr	r0, [pc, #272]	; (800193c <StartDisplayTask+0x4b8>)
 800182a:	f008 f9f0 	bl	8009c0e <u8g2_DrawBox>
				u8g2_SetDrawColor(&u8g2, 2);
 800182e:	2102      	movs	r1, #2
 8001830:	4842      	ldr	r0, [pc, #264]	; (800193c <StartDisplayTask+0x4b8>)
 8001832:	f009 f9cf 	bl	800abd4 <u8g2_SetDrawColor>
				u8g2_DrawUTF8(&u8g2, 0, 15,"Канал");
 8001836:	4b42      	ldr	r3, [pc, #264]	; (8001940 <StartDisplayTask+0x4bc>)
 8001838:	220f      	movs	r2, #15
 800183a:	2100      	movs	r1, #0
 800183c:	483f      	ldr	r0, [pc, #252]	; (800193c <StartDisplayTask+0x4b8>)
 800183e:	f009 f81b 	bl	800a878 <u8g2_DrawUTF8>
				u8g2_DrawUTF8(&u8g2, 0 + 48, 15, (char *) &chanel_num);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	220f      	movs	r2, #15
 8001848:	2130      	movs	r1, #48	; 0x30
 800184a:	483c      	ldr	r0, [pc, #240]	; (800193c <StartDisplayTask+0x4b8>)
 800184c:	f009 f814 	bl	800a878 <u8g2_DrawUTF8>
				u8g2_DrawUTF8(&u8g2, 64, 15,"UTC");
 8001850:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <StartDisplayTask+0x4c0>)
 8001852:	220f      	movs	r2, #15
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	4839      	ldr	r0, [pc, #228]	; (800193c <StartDisplayTask+0x4b8>)
 8001858:	f009 f80e 	bl	800a878 <u8g2_DrawUTF8>
				u8g2_DrawUTF8(&u8g2, 64 + 30, 15,(char *) &UTC);
 800185c:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <StartDisplayTask+0x4c4>)
 800185e:	220f      	movs	r2, #15
 8001860:	215e      	movs	r1, #94	; 0x5e
 8001862:	4836      	ldr	r0, [pc, #216]	; (800193c <StartDisplayTask+0x4b8>)
 8001864:	f009 f808 	bl	800a878 <u8g2_DrawUTF8>
//			 ВЫБ�?РАЕМ, ЧТО ДЕЛАТЬ С ВВЕДЕННЫМ�? ДАННЫМ�?, ОСНОВЫВАЯСЬ НА СТАТУСЕ Д�?СПЛЕЯ
//			 0 - НА Д�?СПЛЕЙ Н�?ЧЕГО НЕ ВЫВОД�?ТСЯ
//			 1 - Д�?СПЛЕЙ РАБОТАЕТ В НОРМАЛЬНОМ РЕЖ�?МЕ, �? ЗАСЫПАЕТ ПОСЛЕ UP_TIME(РЕДКО)
//			 2 - Д�?СПЛЕЙ РАБОТАЕТ В РЕЖ�?МЕ СНА �? ЗАСЫПАЕТ ПОСЛЕ UP_TIME_small(ЧАСТО)

		switch (display_stat){
 8001868:	4b38      	ldr	r3, [pc, #224]	; (800194c <StartDisplayTask+0x4c8>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d85f      	bhi.n	8001930 <StartDisplayTask+0x4ac>
 8001870:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <StartDisplayTask+0x3f4>)
 8001872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001876:	bf00      	nop
 8001878:	08001889 	.word	0x08001889
 800187c:	080018d3 	.word	0x080018d3
 8001880:	080018f3 	.word	0x080018f3
 8001884:	08001911 	.word	0x08001911
		case 0:
			displayOFF_del = HAL_GetTick();
 8001888:	f004 f968 	bl	8005b5c <HAL_GetTick>
 800188c:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4

			while(HAL_GetTick() - displayOFF_del < PowerOFF_delay - 10 || displayOFF_del > HAL_GetTick()){
 8001890:	e005      	b.n	800189e <StartDisplayTask+0x41a>
				u8g2_ClearBuffer(&u8g2);
 8001892:	482a      	ldr	r0, [pc, #168]	; (800193c <StartDisplayTask+0x4b8>)
 8001894:	f008 f9f2 	bl	8009c7c <u8g2_ClearBuffer>
				OFF_Window(&u8g2);
 8001898:	4828      	ldr	r0, [pc, #160]	; (800193c <StartDisplayTask+0x4b8>)
 800189a:	f003 fb53 	bl	8004f44 <OFF_Window>
			while(HAL_GetTick() - displayOFF_del < PowerOFF_delay - 10 || displayOFF_del > HAL_GetTick()){
 800189e:	f004 f95d 	bl	8005b5c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f247 5225 	movw	r2, #29989	; 0x7525
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d9ef      	bls.n	8001892 <StartDisplayTask+0x40e>
 80018b2:	f004 f953 	bl	8005b5c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80018bc:	4293      	cmp	r3, r2
 80018be:	d8e8      	bhi.n	8001892 <StartDisplayTask+0x40e>
			}
			u8g2_ClearDisplay(&u8g2);
 80018c0:	481e      	ldr	r0, [pc, #120]	; (800193c <StartDisplayTask+0x4b8>)
 80018c2:	f008 fab6 	bl	8009e32 <u8g2_ClearDisplay>
			vTaskDelete(myDisplayTaskHandle);
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <StartDisplayTask+0x4cc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00a ff10 	bl	800c6f0 <vTaskDelete>
			break;
 80018d0:	e02e      	b.n	8001930 <StartDisplayTask+0x4ac>
		case 1:
			if(uptime_tick - uptime < UP_TIME){
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <StartDisplayTask+0x4d0>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <StartDisplayTask+0x4d4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4a1f      	ldr	r2, [pc, #124]	; (800195c <StartDisplayTask+0x4d8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d803      	bhi.n	80018ea <StartDisplayTask+0x466>
				u8g2_SendBuffer(&u8g2);
 80018e2:	4816      	ldr	r0, [pc, #88]	; (800193c <StartDisplayTask+0x4b8>)
 80018e4:	f008 fa3d 	bl	8009d62 <u8g2_SendBuffer>
			}
			else{
				u8g2_ClearDisplay(&u8g2);
			}
			break;
 80018e8:	e022      	b.n	8001930 <StartDisplayTask+0x4ac>
				u8g2_ClearDisplay(&u8g2);
 80018ea:	4814      	ldr	r0, [pc, #80]	; (800193c <StartDisplayTask+0x4b8>)
 80018ec:	f008 faa1 	bl	8009e32 <u8g2_ClearDisplay>
			break;
 80018f0:	e01e      	b.n	8001930 <StartDisplayTask+0x4ac>
		case 2:
			if(uptime_tick - uptime < UP_TIME_small){
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <StartDisplayTask+0x4d0>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <StartDisplayTask+0x4d4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2bef      	cmp	r3, #239	; 0xef
 80018fe:	d803      	bhi.n	8001908 <StartDisplayTask+0x484>
				u8g2_SendBuffer(&u8g2);
 8001900:	480e      	ldr	r0, [pc, #56]	; (800193c <StartDisplayTask+0x4b8>)
 8001902:	f008 fa2e 	bl	8009d62 <u8g2_SendBuffer>
			}
			else{
				u8g2_ClearDisplay(&u8g2);
			}
			break;
 8001906:	e013      	b.n	8001930 <StartDisplayTask+0x4ac>
				u8g2_ClearDisplay(&u8g2);
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <StartDisplayTask+0x4b8>)
 800190a:	f008 fa92 	bl	8009e32 <u8g2_ClearDisplay>
			break;
 800190e:	e00f      	b.n	8001930 <StartDisplayTask+0x4ac>
		case 3:
			u8g2_ClearBuffer(&u8g2);
 8001910:	480a      	ldr	r0, [pc, #40]	; (800193c <StartDisplayTask+0x4b8>)
 8001912:	f008 f9b3 	bl	8009c7c <u8g2_ClearBuffer>
			LoadWindow(&u8g2, logo_width, logo_height,(uint8_t *) &logo_bits);
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <StartDisplayTask+0x4dc>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b299      	uxth	r1, r3
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <StartDisplayTask+0x4e0>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <StartDisplayTask+0x4e4>)
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <StartDisplayTask+0x4b8>)
 8001926:	f003 fabb 	bl	8004ea0 <LoadWindow>
			u8g2_SendBuffer(&u8g2);
 800192a:	4804      	ldr	r0, [pc, #16]	; (800193c <StartDisplayTask+0x4b8>)
 800192c:	f008 fa19 	bl	8009d62 <u8g2_SendBuffer>
		}

		// ПЕРЕВОД�?М ЗАДАЧУ В РЕЖ�?М ОЖ�?ДАН�?Я (мс)
		osDelay(10);
 8001930:	200a      	movs	r0, #10
 8001932:	f00a f849 	bl	800b9c8 <osDelay>
		WDG_TackArr[0] = 1;
 8001936:	e5cb      	b.n	80014d0 <StartDisplayTask+0x4c>
 8001938:	200010b3 	.word	0x200010b3
 800193c:	2000120c 	.word	0x2000120c
 8001940:	0800fc4c 	.word	0x0800fc4c
 8001944:	0800fc58 	.word	0x0800fc58
 8001948:	200010a0 	.word	0x200010a0
 800194c:	20000000 	.word	0x20000000
 8001950:	20006b30 	.word	0x20006b30
 8001954:	20001294 	.word	0x20001294
 8001958:	20001298 	.word	0x20001298
 800195c:	0001517f 	.word	0x0001517f
 8001960:	08010292 	.word	0x08010292
 8001964:	08010293 	.word	0x08010293
 8001968:	08010294 	.word	0x08010294

0800196c <StartDataTask>:
 *				ПРОВЕРЯЕТ ПАКЕТ НА ЦЕЛОСТНОСТЬ				*
 *															*
*************************************************************/
/* USER CODE END Header_StartDataTask */
void StartDataTask(void const * argument)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	f6ad 1dac 	subw	sp, sp, #2476	; 0x9ac
 8001972:	af02      	add	r7, sp, #8
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDataTask */

/************************** ПЕРЕМЕННЫЕ ЗАДАЧ�? ****************************/

		/*- - - - - - - -  ОСНОВНЫЕ ПЕРЕМЕННЫЕ - - - - - - - - - */
	uint16_t stringnum = 0;										// ХРАН�?Т НОМЕР ТЕКУЩЕЙ СТРОК�?
 8001978:	2300      	movs	r3, #0
 800197a:	f8a7 3982 	strh.w	r3, [r7, #2434]	; 0x982
	buffer_t crc32_buf;											// БУФЕР, В КОТОРЫЙ ЗАП�?СЫВАЮТСЯ ДАННЫЕ ДЛЯ РАСЧЕТА СRC32
	char strnumhex[2];											// С�?МВОЛЬНЫЙ БУФЕР, ХРАНЯЩ�?Й НОМЕР СТРОК�? в hex

		/*- - - - - - - - - - - СЧЕТЧ�?К�?  - - - - - - - - - - - -*/
	uint16_t counter = 0;										// СЧЕТЧ�?К Ц�?КЛ�?ЧЕСКОГО БУФЕРА (АТАВ�?ЗМ)
 800197e:	2300      	movs	r3, #0
 8001980:	f8a7 399e 	strh.w	r3, [r7, #2462]	; 0x99e
	uint16_t pointer = 0;										// УКАЗАТЕЛЬ НА С�?МВОЛ БУФЕРА uart_buf
 8001984:	f107 0316 	add.w	r3, r7, #22
 8001988:	2200      	movs	r2, #0
 800198a:	801a      	strh	r2, [r3, #0]
	uint8_t celsium_count = 0;									// СЧЕТЧ�?К ДЛЯ ЗАПОЛНЕН�?Я ЗНАКОВ ГРАДУСА ЦЕЛЬС�?Я
 800198c:	2300      	movs	r3, #0
 800198e:	f887 399d 	strb.w	r3, [r7, #2461]	; 0x99d
	uint8_t string_count = 0;									// СЧЕТЧ�?К ДЛЯ ЗАПОЛНЕН�?Я СТРОК
 8001992:	2300      	movs	r3, #0
 8001994:	f887 399c 	strb.w	r3, [r7, #2460]	; 0x99c
	uint32_t restart_val = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
	uint8_t UTC_count = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
	uint16_t UTC_pointer = 0;
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	801a      	strh	r2, [r3, #0]
	uint16_t chanel_pointer = 0;
 80019ac:	f107 0312 	add.w	r3, r7, #18
 80019b0:	2200      	movs	r2, #0
 80019b2:	801a      	strh	r2, [r3, #0]
	uint8_t chanel_val = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996

	uint8_t last_transmit_str_count = 0;
 80019ba:	f107 0311 	add.w	r3, r7, #17
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
	uint32_t last_transmit = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
	uint8_t last_transmit_char[7] = {'\0'};
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	461a      	mov	r2, r3
 80019ce:	2300      	movs	r3, #0
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	f8c2 3003 	str.w	r3, [r2, #3]
	uint32_t mother_restart_last = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c

	osDelay(500);
 80019dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019e0:	f009 fff2 	bl	800b9c8 <osDelay>
/***************************** ТЕЛО ЗАДАЧ�? *******************************/
	for(;;){

		WDG_TackArr[1] = 1;
 80019e4:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <StartDataTask+0x254>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	705a      	strb	r2, [r3, #1]
		// ЕСЛ�? RX НЕ В ПРОСТОЕ, ТО ЖДЕМ ОПРЕДЕЛЕННОЕ ВРЕМЯ
		// �? НАЧ�?НАЕМ ПО�?СК СТАРТОВОЙ КОМБ�?НАЦ�?�?
		// УСЛОВ�?Е ПОМАГАЕТ ПАРС�?ТЬ НОВЫЙ ПАКЕТ ОД�?Н РАЗ
		if(!(USART3->SR & USART_SR_IDLE)){
 80019ea:	4b76      	ldr	r3, [pc, #472]	; (8001bc4 <StartDataTask+0x258>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 827a 	bne.w	8001eec <StartDataTask+0x580>
			restart_val = HAL_GetTick();
 80019f8:	f004 f8b0 	bl	8005b5c <HAL_GetTick>
 80019fc:	f8c7 0998 	str.w	r0, [r7, #2456]	; 0x998

			HAL_GPIO_WritePin(STM32_BUTTON_LED_POWER_GPIO_Port, STM32_BUTTON_LED_POWER_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a06:	4870      	ldr	r0, [pc, #448]	; (8001bc8 <StartDataTask+0x25c>)
 8001a08:	f005 fca8 	bl	800735c <HAL_GPIO_WritePin>

			osDelay(pack_DELAY);
 8001a0c:	2096      	movs	r0, #150	; 0x96
 8001a0e:	f009 ffdb 	bl	800b9c8 <osDelay>

			counter = UartBufSize;
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	f8a7 399e 	strh.w	r3, [r7, #2462]	; 0x99e

			// ТЕЛО ПАРСЕРА:
			// ПРОБЕГАЕТ ВЕСЬ БУФЕР В ПО�?СКАХ СТАРТОВОЙ КОМБ�?НАЦ�?�?
			// ПОСЛЕ ТОГО, КАК НАЙДЕТ, ОБРАБАТЫВАЕТ ПАКЕТ �? ВЫХОД�?Т �?З ТЕЛА Ц�?КЛА
			while(counter){
 8001a1a:	e20c      	b.n	8001e36 <StartDataTask+0x4ca>

				// ЕСЛ�? НАЙДЕНА СТАРТОВАЯ КОМБ�?НАЦ�?Я, ТО НАЧ�?НАЕМ ПАРС�?ТЬ
				if(FindString((uint8_t *)&uart_buf, UartBufSize, &pointer,"PDS", 3)){
 8001a1c:	f107 0216 	add.w	r2, r7, #22
 8001a20:	2303      	movs	r3, #3
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	4b69      	ldr	r3, [pc, #420]	; (8001bcc <StartDataTask+0x260>)
 8001a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a2a:	4869      	ldr	r0, [pc, #420]	; (8001bd0 <StartDataTask+0x264>)
 8001a2c:	f002 fa8a 	bl	8003f44 <FindString>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 81f2 	beq.w	8001e1c <StartDataTask+0x4b0>

					last_transmit = uptime_tick;
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <StartDataTask+0x268>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990

					// ПРОПУСКАЕМ С�?МВОЛ ';'
					PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 1);
 8001a40:	f107 0216 	add.w	r2, r7, #22
 8001a44:	2301      	movs	r3, #1
 8001a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4a:	4861      	ldr	r0, [pc, #388]	; (8001bd0 <StartDataTask+0x264>)
 8001a4c:	f002 fb80 	bl	8004150 <PassSym>

					// РАСЧ�?ТЫВАЕМ CRC32, ЕСЛ�? CRC СОШЕЛСЯ, ПРОДОЛЖАЕМ ПАРС�?ТЬ
					// �?НАЧЕ ОСТАНАВЛ�?ВАЕМ ПАРС�?НГ: ФУНКЦ�?Я ЗАП�?СЫВАЕТ �? ОШ�?БК�? CRC
					if(CRC32_Status((uint8_t *)&uart_buf, UartBufSize, pointer, &crc32_buf)){}
 8001a50:	f107 0316 	add.w	r3, r7, #22
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5e:	485c      	ldr	r0, [pc, #368]	; (8001bd0 <StartDataTask+0x264>)
 8001a60:	f002 f9b2 	bl	8003dc8 <CRC32_Status>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 81eb 	beq.w	8001e42 <StartDataTask+0x4d6>
					else break;

					// Ц�?КЛ ПАРС�?Т string_pack_amount СТРОК ПО ОТДЕЛЬНОСТ�?
					for(uint8_t i = 0; i < string_pack_amount; i++){
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 398b 	strb.w	r3, [r7, #2443]	; 0x98b
 8001a72:	e1b3      	b.n	8001ddc <StartDataTask+0x470>

						// ЕСЛ�? ВМЕСТО НОМЕРА СТРОК�? НАЙДЕНА КОМ�?НАЦ�?Я CRC - ПАКЕТ ОКОНЧЕН, ВЫХОД�?М �?З ПАРС�?НГА
						if(FindString((uint8_t *)&uart_buf, UartBufSize, &pointer, "CRC", 3)){
 8001a74:	f107 0216 	add.w	r2, r7, #22
 8001a78:	2303      	movs	r3, #3
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <StartDataTask+0x26c>)
 8001a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a82:	4853      	ldr	r0, [pc, #332]	; (8001bd0 <StartDataTask+0x264>)
 8001a84:	f002 fa5e 	bl	8003f44 <FindString>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 81ac 	bne.w	8001de8 <StartDataTask+0x47c>
							break;
						}

						if(uart_buf[pointer] == (uint8_t)';'){
 8001a90:	f107 0316 	add.w	r3, r7, #22
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b4d      	ldr	r3, [pc, #308]	; (8001bd0 <StartDataTask+0x264>)
 8001a9a:	5c9b      	ldrb	r3, [r3, r2]
 8001a9c:	2b3b      	cmp	r3, #59	; 0x3b
 8001a9e:	f000 81a5 	beq.w	8001dec <StartDataTask+0x480>
							break;
						}

						string_count = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 399c 	strb.w	r3, [r7, #2460]	; 0x99c
						celsium_count = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 399d 	strb.w	r3, [r7, #2461]	; 0x99d

						// НОМЕР СТРОК�? ВСЕГДА СОСТО�?Т �?З ДВУХ С�?МВОЛОВ
						// ПАРС�?М ПЕРВЫЙ С�?МВОЛ �? ПЕРЕХОД�?М К СЛЕДУЮЩЕМУ
						strnumhex[0] = uart_buf[pointer];
 8001aae:	f107 0316 	add.w	r3, r7, #22
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <StartDataTask+0x264>)
 8001ab8:	5c9a      	ldrb	r2, [r3, r2]
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	701a      	strb	r2, [r3, #0]
						PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 1);
 8001ac0:	f107 0216 	add.w	r2, r7, #22
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aca:	4841      	ldr	r0, [pc, #260]	; (8001bd0 <StartDataTask+0x264>)
 8001acc:	f002 fb40 	bl	8004150 <PassSym>

						// ПАРС�?М ВТОРОЙ С�?МВОЛ �? ПРОПУСКАЕМ 2 С�?МВОЛА: ЭТОТ �? ';'
						strnumhex[1] = uart_buf[pointer];
 8001ad0:	f107 0316 	add.w	r3, r7, #22
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <StartDataTask+0x264>)
 8001ada:	5c9a      	ldrb	r2, [r3, r2]
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	705a      	strb	r2, [r3, #1]
						PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 2);
 8001ae2:	f107 0216 	add.w	r2, r7, #22
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aec:	4838      	ldr	r0, [pc, #224]	; (8001bd0 <StartDataTask+0x264>)
 8001aee:	f002 fb2f 	bl	8004150 <PassSym>

						// ПЕРЕВОД�?М СТРОКУ НОМЕРА: (char, hex) -> (int, dec)
						stringnum = HexToDec((char *) &strnumhex,2);
 8001af2:	f107 0318 	add.w	r3, r7, #24
 8001af6:	2102      	movs	r1, #2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fb7d 	bl	80041f8 <HexToDec>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f8a7 3982 	strh.w	r3, [r7, #2434]	; 0x982
						datastring[stringnum].number = stringnum;
 8001b04:	f8b7 2982 	ldrh.w	r2, [r7, #2434]	; 0x982
 8001b08:	f8b7 3982 	ldrh.w	r3, [r7, #2434]	; 0x982
 8001b0c:	b2d8      	uxtb	r0, r3
 8001b0e:	4933      	ldr	r1, [pc, #204]	; (8001bdc <StartDataTask+0x270>)
 8001b10:	4613      	mov	r3, r2
 8001b12:	015b      	lsls	r3, r3, #5
 8001b14:	4413      	add	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	333c      	adds	r3, #60	; 0x3c
 8001b1e:	4602      	mov	r2, r0
 8001b20:	701a      	strb	r2, [r3, #0]

						// ПАРС�?М СОДЕРЖ�?МОЕ СТРОК�?:
						// ПОКА НЕ НАЙДЕМ ЗНАК ';' �?Л�? СТРОКА НЕ ЗАКОНЧ�?ТСЯ
						// КЛАДЕМ КАЖДЫЙ С�?МВОЛ СОДЕРЖ�?МОГО БУФЕРА НАЧ�?НАЯ С pointer
						// В БУФЕР СТРОК�? НАЧ�?НАЯ С string_count (0)
						while((uart_buf[pointer] != (uint8_t)';') && (string_count < string_size)){
 8001b22:	e11c      	b.n	8001d5e <StartDataTask+0x3f2>

							// ЕСЛ�? НАЙДЕНА КОМБ�?НАЦ�?Я DEL, ЗНАЧ�?Т СТРОКУ НУЖНО УДАЛ�?ТЬ (СТАТУС СТРОК�? = 0)
							// �? ПАРС�?НГ СОДЕРЖ�?МОГО СТРОК�? ПРЕКРАЩАЕТСЯ
							// �?НАЧЕ СТАТУС СТРОК�? = 1
							if(FindString((uint8_t *)&uart_buf, UartBufSize, &pointer, "DEL", 3) && !string_count){
 8001b24:	f107 0216 	add.w	r2, r7, #22
 8001b28:	2303      	movs	r3, #3
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <StartDataTask+0x274>)
 8001b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b32:	4827      	ldr	r0, [pc, #156]	; (8001bd0 <StartDataTask+0x264>)
 8001b34:	f002 fa06 	bl	8003f44 <FindString>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d010      	beq.n	8001b60 <StartDataTask+0x1f4>
 8001b3e:	f897 399c 	ldrb.w	r3, [r7, #2460]	; 0x99c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <StartDataTask+0x1f4>
								datastring[stringnum].status = 0;
 8001b46:	f8b7 2982 	ldrh.w	r2, [r7, #2434]	; 0x982
 8001b4a:	4924      	ldr	r1, [pc, #144]	; (8001bdc <StartDataTask+0x270>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	015b      	lsls	r3, r3, #5
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	333d      	adds	r3, #61	; 0x3d
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
								break;
 8001b5e:	e10b      	b.n	8001d78 <StartDataTask+0x40c>
							}
							else if(!string_count) datastring[stringnum].status = 1;
 8001b60:	f897 399c 	ldrb.w	r3, [r7, #2460]	; 0x99c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10b      	bne.n	8001b80 <StartDataTask+0x214>
 8001b68:	f8b7 2982 	ldrh.w	r2, [r7, #2434]	; 0x982
 8001b6c:	491b      	ldr	r1, [pc, #108]	; (8001bdc <StartDataTask+0x270>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	015b      	lsls	r3, r3, #5
 8001b72:	4413      	add	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	333d      	adds	r3, #61	; 0x3d
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]

							UTC_pointer = pointer;
 8001b80:	f107 0316 	add.w	r3, r7, #22
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	801a      	strh	r2, [r3, #0]

							if(FindString((uint8_t *)&uart_buf, UartBufSize, &UTC_pointer, "UTC", 3)){
 8001b8c:	f107 0214 	add.w	r2, r7, #20
 8001b90:	2303      	movs	r3, #3
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <StartDataTask+0x278>)
 8001b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <StartDataTask+0x264>)
 8001b9c:	f002 f9d2 	bl	8003f44 <FindString>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d03b      	beq.n	8001c1e <StartDataTask+0x2b2>

								PassSym((uint8_t *)&uart_buf, UartBufSize, &UTC_pointer, 1);
 8001ba6:	f107 0214 	add.w	r2, r7, #20
 8001baa:	2301      	movs	r3, #1
 8001bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb0:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <StartDataTask+0x264>)
 8001bb2:	f002 facd 	bl	8004150 <PassSym>
								UTC_count = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997

								while(UTC_count < 19){
 8001bbc:	e02b      	b.n	8001c16 <StartDataTask+0x2aa>
 8001bbe:	bf00      	nop
 8001bc0:	2000109c 	.word	0x2000109c
 8001bc4:	40004800 	.word	0x40004800
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	0800fc5c 	.word	0x0800fc5c
 8001bd0:	20000098 	.word	0x20000098
 8001bd4:	20001294 	.word	0x20001294
 8001bd8:	0800fc60 	.word	0x0800fc60
 8001bdc:	20006b48 	.word	0x20006b48
 8001be0:	0800fc64 	.word	0x0800fc64
 8001be4:	0800fc58 	.word	0x0800fc58
									UTC[UTC_count] = uart_buf[UTC_pointer];
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8001bf4:	4ac8      	ldr	r2, [pc, #800]	; (8001f18 <StartDataTask+0x5ac>)
 8001bf6:	5c51      	ldrb	r1, [r2, r1]
 8001bf8:	4ac8      	ldr	r2, [pc, #800]	; (8001f1c <StartDataTask+0x5b0>)
 8001bfa:	54d1      	strb	r1, [r2, r3]
									UTC_pointer++;
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	801a      	strh	r2, [r3, #0]
									UTC_count++;
 8001c0c:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8001c10:	3301      	adds	r3, #1
 8001c12:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
								while(UTC_count < 19){
 8001c16:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d9e4      	bls.n	8001be8 <StartDataTask+0x27c>
								}
							}

							chanel_pointer = pointer;
 8001c1e:	f107 0316 	add.w	r3, r7, #22
 8001c22:	881a      	ldrh	r2, [r3, #0]
 8001c24:	f107 0312 	add.w	r3, r7, #18
 8001c28:	801a      	strh	r2, [r3, #0]

							if(FindString((uint8_t *)&uart_buf, UartBufSize, &chanel_pointer,"Канал", 6)){
 8001c2a:	f107 0212 	add.w	r2, r7, #18
 8001c2e:	2306      	movs	r3, #6
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	4bbb      	ldr	r3, [pc, #748]	; (8001f20 <StartDataTask+0x5b4>)
 8001c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c38:	48b7      	ldr	r0, [pc, #732]	; (8001f18 <StartDataTask+0x5ac>)
 8001c3a:	f002 f983 	bl	8003f44 <FindString>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d010      	beq.n	8001c66 <StartDataTask+0x2fa>
								PassSym((uint8_t *)&uart_buf, UartBufSize, &chanel_pointer, 5);
 8001c44:	f107 0212 	add.w	r2, r7, #18
 8001c48:	2305      	movs	r3, #5
 8001c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c4e:	48b2      	ldr	r0, [pc, #712]	; (8001f18 <StartDataTask+0x5ac>)
 8001c50:	f002 fa7e 	bl	8004150 <PassSym>
								chanel_val = uart_buf[chanel_pointer] - 48;
 8001c54:	f107 0312 	add.w	r3, r7, #18
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4bae      	ldr	r3, [pc, #696]	; (8001f18 <StartDataTask+0x5ac>)
 8001c5e:	5c9b      	ldrb	r3, [r3, r2]
 8001c60:	3b30      	subs	r3, #48	; 0x30
 8001c62:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
							}
							// ЕСЛ�? НАЙДЕНА КОМБ�?НАЦ�?Я "*C" ВМЕСТО НЕЕ КЛАДЕМ В СТРОКУ ' '
							// �? ЗАП�?СЫВАЕМ ПОЛОЖЕН�?Е ЗНАКА ГРАДУСА (string_count)
							if(FindString((uint8_t *)&uart_buf,UartBufSize,&pointer,"*C",2)){
 8001c66:	f107 0216 	add.w	r2, r7, #22
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	4bad      	ldr	r3, [pc, #692]	; (8001f24 <StartDataTask+0x5b8>)
 8001c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c74:	48a8      	ldr	r0, [pc, #672]	; (8001f18 <StartDataTask+0x5ac>)
 8001c76:	f002 f965 	bl	8003f44 <FindString>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d04d      	beq.n	8001d1c <StartDataTask+0x3b0>
								datastring[stringnum].buf[string_count] = (uint8_t)' ';
 8001c80:	f8b7 2982 	ldrh.w	r2, [r7, #2434]	; 0x982
 8001c84:	f897 199c 	ldrb.w	r1, [r7, #2460]	; 0x99c
 8001c88:	48a7      	ldr	r0, [pc, #668]	; (8001f28 <StartDataTask+0x5bc>)
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	015b      	lsls	r3, r3, #5
 8001c8e:	4413      	add	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	4403      	add	r3, r0
 8001c96:	440b      	add	r3, r1
 8001c98:	2220      	movs	r2, #32
 8001c9a:	701a      	strb	r2, [r3, #0]
								datastring[stringnum].degreeSym[celsium_count] = string_count;
 8001c9c:	f8b7 2982 	ldrh.w	r2, [r7, #2434]	; 0x982
 8001ca0:	f897 199d 	ldrb.w	r1, [r7, #2461]	; 0x99d
 8001ca4:	48a0      	ldr	r0, [pc, #640]	; (8001f28 <StartDataTask+0x5bc>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	015b      	lsls	r3, r3, #5
 8001caa:	4413      	add	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	4403      	add	r3, r0
 8001cb2:	440b      	add	r3, r1
 8001cb4:	333e      	adds	r3, #62	; 0x3e
 8001cb6:	f897 299c 	ldrb.w	r2, [r7, #2460]	; 0x99c
 8001cba:	701a      	strb	r2, [r3, #0]
								string_count++;
 8001cbc:	f897 399c 	ldrb.w	r3, [r7, #2460]	; 0x99c
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f887 399c 	strb.w	r3, [r7, #2460]	; 0x99c
								datastring[stringnum].buf[string_count] = (uint8_t)' ';
 8001cc6:	f8b7 2982 	ldrh.w	r2, [r7, #2434]	; 0x982
 8001cca:	f897 199c 	ldrb.w	r1, [r7, #2460]	; 0x99c
 8001cce:	4896      	ldr	r0, [pc, #600]	; (8001f28 <StartDataTask+0x5bc>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	015b      	lsls	r3, r3, #5
 8001cd4:	4413      	add	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	4403      	add	r3, r0
 8001cdc:	440b      	add	r3, r1
 8001cde:	2220      	movs	r2, #32
 8001ce0:	701a      	strb	r2, [r3, #0]
								string_count++;
 8001ce2:	f897 399c 	ldrb.w	r3, [r7, #2460]	; 0x99c
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f887 399c 	strb.w	r3, [r7, #2460]	; 0x99c
								datastring[stringnum].buf[string_count] = (uint8_t)' ';
 8001cec:	f8b7 2982 	ldrh.w	r2, [r7, #2434]	; 0x982
 8001cf0:	f897 199c 	ldrb.w	r1, [r7, #2460]	; 0x99c
 8001cf4:	488c      	ldr	r0, [pc, #560]	; (8001f28 <StartDataTask+0x5bc>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	015b      	lsls	r3, r3, #5
 8001cfa:	4413      	add	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	4403      	add	r3, r0
 8001d02:	440b      	add	r3, r1
 8001d04:	2220      	movs	r2, #32
 8001d06:	701a      	strb	r2, [r3, #0]
								string_count++;
 8001d08:	f897 399c 	ldrb.w	r3, [r7, #2460]	; 0x99c
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f887 399c 	strb.w	r3, [r7, #2460]	; 0x99c
								celsium_count++;
 8001d12:	f897 399d 	ldrb.w	r3, [r7, #2461]	; 0x99d
 8001d16:	3301      	adds	r3, #1
 8001d18:	f887 399d 	strb.w	r3, [r7, #2461]	; 0x99d
							}

							// ЕСЛ�? Н�? ОДНА �?З КОМБ�?НАЦ�?Й НЕ БЫЛА НАЙДЕНА
							// ПРОСТО КЛАДЕМ С�?МВОЛ БУФЕРА В СТРОКУ
							datastring[stringnum].buf[string_count] = uart_buf[pointer];
 8001d1c:	f107 0316 	add.w	r3, r7, #22
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f8b7 2982 	ldrh.w	r2, [r7, #2434]	; 0x982
 8001d28:	f897 199c 	ldrb.w	r1, [r7, #2460]	; 0x99c
 8001d2c:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <StartDataTask+0x5ac>)
 8001d2e:	5c1c      	ldrb	r4, [r3, r0]
 8001d30:	487d      	ldr	r0, [pc, #500]	; (8001f28 <StartDataTask+0x5bc>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	015b      	lsls	r3, r3, #5
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4403      	add	r3, r0
 8001d3e:	440b      	add	r3, r1
 8001d40:	4622      	mov	r2, r4
 8001d42:	701a      	strb	r2, [r3, #0]
							PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 1);
 8001d44:	f107 0216 	add.w	r2, r7, #22
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d4e:	4872      	ldr	r0, [pc, #456]	; (8001f18 <StartDataTask+0x5ac>)
 8001d50:	f002 f9fe 	bl	8004150 <PassSym>
							string_count++;
 8001d54:	f897 399c 	ldrb.w	r3, [r7, #2460]	; 0x99c
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f887 399c 	strb.w	r3, [r7, #2460]	; 0x99c
						while((uart_buf[pointer] != (uint8_t)';') && (string_count < string_size)){
 8001d5e:	f107 0316 	add.w	r3, r7, #22
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b6c      	ldr	r3, [pc, #432]	; (8001f18 <StartDataTask+0x5ac>)
 8001d68:	5c9b      	ldrb	r3, [r3, r2]
 8001d6a:	2b3b      	cmp	r3, #59	; 0x3b
 8001d6c:	d004      	beq.n	8001d78 <StartDataTask+0x40c>
 8001d6e:	f897 399c 	ldrb.w	r3, [r7, #2460]	; 0x99c
 8001d72:	2b3b      	cmp	r3, #59	; 0x3b
 8001d74:	f67f aed6 	bls.w	8001b24 <StartDataTask+0x1b8>
						}

						datastring[stringnum].chanel_num = chanel_val;
 8001d78:	f8b7 2982 	ldrh.w	r2, [r7, #2434]	; 0x982
 8001d7c:	496a      	ldr	r1, [pc, #424]	; (8001f28 <StartDataTask+0x5bc>)
 8001d7e:	4613      	mov	r3, r2
 8001d80:	015b      	lsls	r3, r3, #5
 8001d82:	4413      	add	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	3342      	adds	r3, #66	; 0x42
 8001d8c:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 8001d90:	701a      	strb	r2, [r3, #0]

						// КОГДА СТРОКА УЖЕ ЗАПОЛНЕНА ДАННЫМ�?,
						// ОЧ�?ЩАЕМ ОСТАВШ�?ЕСЯ ЭЛЕМЕНТЫ В БУФЕРЕ СТРОК�?
						while(string_count < string_size){
 8001d92:	e012      	b.n	8001dba <StartDataTask+0x44e>
							datastring[stringnum].buf[string_count] = '\0';
 8001d94:	f8b7 2982 	ldrh.w	r2, [r7, #2434]	; 0x982
 8001d98:	f897 199c 	ldrb.w	r1, [r7, #2460]	; 0x99c
 8001d9c:	4862      	ldr	r0, [pc, #392]	; (8001f28 <StartDataTask+0x5bc>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	015b      	lsls	r3, r3, #5
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	4403      	add	r3, r0
 8001daa:	440b      	add	r3, r1
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
							string_count++;
 8001db0:	f897 399c 	ldrb.w	r3, [r7, #2460]	; 0x99c
 8001db4:	3301      	adds	r3, #1
 8001db6:	f887 399c 	strb.w	r3, [r7, #2460]	; 0x99c
						while(string_count < string_size){
 8001dba:	f897 399c 	ldrb.w	r3, [r7, #2460]	; 0x99c
 8001dbe:	2b3b      	cmp	r3, #59	; 0x3b
 8001dc0:	d9e8      	bls.n	8001d94 <StartDataTask+0x428>
						}
						// ПРОПУСКАЕМ ';'
						PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 1);
 8001dc2:	f107 0216 	add.w	r2, r7, #22
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dcc:	4852      	ldr	r0, [pc, #328]	; (8001f18 <StartDataTask+0x5ac>)
 8001dce:	f002 f9bf 	bl	8004150 <PassSym>
					for(uint8_t i = 0; i < string_pack_amount; i++){
 8001dd2:	f897 398b 	ldrb.w	r3, [r7, #2443]	; 0x98b
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f887 398b 	strb.w	r3, [r7, #2443]	; 0x98b
 8001ddc:	f897 398b 	ldrb.w	r3, [r7, #2443]	; 0x98b
 8001de0:	2b27      	cmp	r3, #39	; 0x27
 8001de2:	f67f ae47 	bls.w	8001a74 <StartDataTask+0x108>
 8001de6:	e002      	b.n	8001dee <StartDataTask+0x482>
							break;
 8001de8:	bf00      	nop
 8001dea:	e000      	b.n	8001dee <StartDataTask+0x482>
							break;
 8001dec:	bf00      	nop
					}

					// СТАВ�?М ФЛАГ ГОТОВНОСТ�? ДАННЫХ, ДЛЯ ВЫХОДА �?З ЗАГРУЗОЧНОГО ОКНА
					// �? ВЫХОД�?М �?З ПАРСЕРА ПАКЕТА
					data_ready_flag = 1;
 8001dee:	4b4f      	ldr	r3, [pc, #316]	; (8001f2c <StartDataTask+0x5c0>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]

					for(uint16_t i = 0; i < UartBufSize; i++){
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8a7 3988 	strh.w	r3, [r7, #2440]	; 0x988
 8001dfa:	e009      	b.n	8001e10 <StartDataTask+0x4a4>
						uart_buf[i] = '\0';
 8001dfc:	f8b7 3988 	ldrh.w	r3, [r7, #2440]	; 0x988
 8001e00:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <StartDataTask+0x5ac>)
 8001e02:	2100      	movs	r1, #0
 8001e04:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < UartBufSize; i++){
 8001e06:	f8b7 3988 	ldrh.w	r3, [r7, #2440]	; 0x988
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f8a7 3988 	strh.w	r3, [r7, #2440]	; 0x988
 8001e10:	f8b7 3988 	ldrh.w	r3, [r7, #2440]	; 0x988
 8001e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e18:	d3f0      	bcc.n	8001dfc <StartDataTask+0x490>
					}
					break;
 8001e1a:	e013      	b.n	8001e44 <StartDataTask+0x4d8>
				}

				// ЕСЛ�? PSD НЕ НАЙДЕН, ПРОПУСКАЕМ С�?МВОЛ ЗА С�?МВОЛОМ ПОКА БУФЕР НЕ КОНЧ�?ТСЯ
				PassSym((uint8_t *)&uart_buf, UartBufSize, &pointer, 1);
 8001e1c:	f107 0216 	add.w	r2, r7, #22
 8001e20:	2301      	movs	r3, #1
 8001e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e26:	483c      	ldr	r0, [pc, #240]	; (8001f18 <StartDataTask+0x5ac>)
 8001e28:	f002 f992 	bl	8004150 <PassSym>
				counter--;
 8001e2c:	f8b7 399e 	ldrh.w	r3, [r7, #2462]	; 0x99e
 8001e30:	3b01      	subs	r3, #1
 8001e32:	f8a7 399e 	strh.w	r3, [r7, #2462]	; 0x99e
			while(counter){
 8001e36:	f8b7 399e 	ldrh.w	r3, [r7, #2462]	; 0x99e
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f47f adee 	bne.w	8001a1c <StartDataTask+0xb0>
 8001e40:	e000      	b.n	8001e44 <StartDataTask+0x4d8>
					else break;
 8001e42:	bf00      	nop
			}

			for(uint8_t i = 0; i < 7; i++){
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
 8001e4a:	e00a      	b.n	8001e62 <StartDataTask+0x4f6>
				last_transmit_char[i] = '\0';
 8001e4c:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8001e50:	f107 0208 	add.w	r2, r7, #8
 8001e54:	2100      	movs	r1, #0
 8001e56:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < 7; i++){
 8001e58:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
 8001e62:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d9f0      	bls.n	8001e4c <StartDataTask+0x4e0>
			}

			itoa(uptime_tick - last_transmit, (char*)&last_transmit_char, 10);
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <StartDataTask+0x5c4>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	220a      	movs	r2, #10
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f00b fe19 	bl	800dab4 <itoa>

			for(uint8_t i = 0; i < string_size; i++){
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3986 	strb.w	r3, [r7, #2438]	; 0x986
 8001e88:	e00d      	b.n	8001ea6 <StartDataTask+0x53a>
				datastring[ctrl_string_7].buf[i] = '\0';
 8001e8a:	f897 3986 	ldrb.w	r3, [r7, #2438]	; 0x986
 8001e8e:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <StartDataTask+0x5bc>)
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8001e96:	3305      	adds	r3, #5
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < string_size; i++){
 8001e9c:	f897 3986 	ldrb.w	r3, [r7, #2438]	; 0x986
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f887 3986 	strb.w	r3, [r7, #2438]	; 0x986
 8001ea6:	f897 3986 	ldrb.w	r3, [r7, #2438]	; 0x986
 8001eaa:	2b3b      	cmp	r3, #59	; 0x3b
 8001eac:	d9ed      	bls.n	8001e8a <StartDataTask+0x51e>
			}

			last_transmit_str_count = 0;
 8001eae:	f107 0311 	add.w	r3, r7, #17
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]

			PutString(&datastring[ctrl_string_7], "Last connection - ", &last_transmit_str_count);
 8001eb6:	f107 0311 	add.w	r3, r7, #17
 8001eba:	461a      	mov	r2, r3
 8001ebc:	491d      	ldr	r1, [pc, #116]	; (8001f34 <StartDataTask+0x5c8>)
 8001ebe:	481e      	ldr	r0, [pc, #120]	; (8001f38 <StartDataTask+0x5cc>)
 8001ec0:	f002 f91a 	bl	80040f8 <PutString>

			last_transmit_str_count = 18;
 8001ec4:	f107 0311 	add.w	r3, r7, #17
 8001ec8:	2212      	movs	r2, #18
 8001eca:	701a      	strb	r2, [r3, #0]
			PutString(&datastring[ctrl_string_7], (const char*) last_transmit_char, &last_transmit_str_count);
 8001ecc:	f107 0211 	add.w	r2, r7, #17
 8001ed0:	f107 0308 	add.w	r3, r7, #8
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4818      	ldr	r0, [pc, #96]	; (8001f38 <StartDataTask+0x5cc>)
 8001ed8:	f002 f90e 	bl	80040f8 <PutString>


			if(!counter){
 8001edc:	f8b7 399e 	ldrh.w	r3, [r7, #2462]	; 0x99e
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <StartDataTask+0x580>
				// ВЫВОД�?М ОШ�?БКУ, ЧТО СТАРТОВАЯ КОМБ�?НАЦ�?Я НЕ БЫЛА НАЙДЕНА
				PutERROR((string_t *)&datastring,"PACK_NOT_FOUND");
 8001ee4:	4915      	ldr	r1, [pc, #84]	; (8001f3c <StartDataTask+0x5d0>)
 8001ee6:	4810      	ldr	r0, [pc, #64]	; (8001f28 <StartDataTask+0x5bc>)
 8001ee8:	f001 fcb0 	bl	800384c <PutERROR>
			}
		}

		// ЕСЛ�? ДАННЫЕ НЕ ОБНОВЛЯЮТСЯ КАКОЕ ТО ВРЕМЯ,
		// ПЕРЕЗАПУСКАЕМ UART, ДЛЯ �?ЗБЕЖАН�?Я ВОЗМОЖНЫХ ОШ�?БОК
		if(HAL_GetTick() - restart_val > restart_time || restart_val > HAL_GetTick()){
 8001eec:	f003 fe36 	bl	8005b5c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f240 2226 	movw	r2, #550	; 0x226
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d806      	bhi.n	8001f0e <StartDataTask+0x5a2>
 8001f00:	f003 fe2c 	bl	8005b5c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d930      	bls.n	8001f70 <StartDataTask+0x604>
			for(uint16_t i = 0; i < UartBufSize; i++){
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8a7 3984 	strh.w	r3, [r7, #2436]	; 0x984
 8001f14:	e01e      	b.n	8001f54 <StartDataTask+0x5e8>
 8001f16:	bf00      	nop
 8001f18:	20000098 	.word	0x20000098
 8001f1c:	200010a0 	.word	0x200010a0
 8001f20:	0800fc4c 	.word	0x0800fc4c
 8001f24:	0800fc68 	.word	0x0800fc68
 8001f28:	20006b48 	.word	0x20006b48
 8001f2c:	20001099 	.word	0x20001099
 8001f30:	20001294 	.word	0x20001294
 8001f34:	0800fc6c 	.word	0x0800fc6c
 8001f38:	200092cd 	.word	0x200092cd
 8001f3c:	0800fc80 	.word	0x0800fc80
				uart_buf[i] = '\0';
 8001f40:	f8b7 3984 	ldrh.w	r3, [r7, #2436]	; 0x984
 8001f44:	4a30      	ldr	r2, [pc, #192]	; (8002008 <StartDataTask+0x69c>)
 8001f46:	2100      	movs	r1, #0
 8001f48:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i = 0; i < UartBufSize; i++){
 8001f4a:	f8b7 3984 	ldrh.w	r3, [r7, #2436]	; 0x984
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f8a7 3984 	strh.w	r3, [r7, #2436]	; 0x984
 8001f54:	f8b7 3984 	ldrh.w	r3, [r7, #2436]	; 0x984
 8001f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5c:	d3f0      	bcc.n	8001f40 <StartDataTask+0x5d4>
			}
			HAL_UART_DMAStop(&huart3);
 8001f5e:	482b      	ldr	r0, [pc, #172]	; (800200c <StartDataTask+0x6a0>)
 8001f60:	f006 fea0 	bl	8008ca4 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart_buf, UartBufSize);
 8001f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f68:	4927      	ldr	r1, [pc, #156]	; (8002008 <StartDataTask+0x69c>)
 8001f6a:	4828      	ldr	r0, [pc, #160]	; (800200c <StartDataTask+0x6a0>)
 8001f6c:	f006 fe1a 	bl	8008ba4 <HAL_UART_Receive_DMA>
		}

		if(uptime_tick - last_transmit > mother_wdgtime && uptime_tick - mother_restart_last > mother_wdgtime){
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <StartDataTask+0x6a4>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001f7e:	d938      	bls.n	8001ff2 <StartDataTask+0x686>
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <StartDataTask+0x6a4>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001f8e:	d930      	bls.n	8001ff2 <StartDataTask+0x686>
			HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_RESET);
 8001f90:	2200      	movs	r2, #0
 8001f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f96:	481f      	ldr	r0, [pc, #124]	; (8002014 <StartDataTask+0x6a8>)
 8001f98:	f005 f9e0 	bl	800735c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SYM_LED_G_GPIO_Port, SYM_LED_G_Pin, GPIO_PIN_SET);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa2:	481d      	ldr	r0, [pc, #116]	; (8002018 <StartDataTask+0x6ac>)
 8001fa4:	f005 f9da 	bl	800735c <HAL_GPIO_WritePin>
			mother_restart_last = uptime_tick;
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <StartDataTask+0x6a4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
			while(uptime_tick - mother_restart_last >10000){
 8001fb0:	e006      	b.n	8001fc0 <StartDataTask+0x654>
				osDelay(1000);
 8001fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fb6:	f009 fd07 	bl	800b9c8 <osDelay>
				WDG_TackArr[1] = 1;
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <StartDataTask+0x6b0>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	705a      	strb	r2, [r3, #1]
			while(uptime_tick - mother_restart_last >10000){
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <StartDataTask+0x6a4>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f242 7210 	movw	r2, #10000	; 0x2710
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d8ef      	bhi.n	8001fb2 <StartDataTask+0x646>
			}

			HAL_GPIO_WritePin(SYM_LED_G_GPIO_Port, SYM_LED_G_Pin, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd8:	480f      	ldr	r0, [pc, #60]	; (8002018 <StartDataTask+0x6ac>)
 8001fda:	f005 f9bf 	bl	800735c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fe4:	480b      	ldr	r0, [pc, #44]	; (8002014 <StartDataTask+0x6a8>)
 8001fe6:	f005 f9b9 	bl	800735c <HAL_GPIO_WritePin>
			mother_restart_last = uptime_tick;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <StartDataTask+0x6a4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c

		// ОБНАВЛЯЕМ WATHDOG


//		if(!HAL_GPIO_ReadPin(STM32_BUTTON_POWER_GPIO_Port, STM32_BUTTON_POWER_Pin)){
			HAL_GPIO_WritePin(STM32_BUTTON_LED_POWER_GPIO_Port, STM32_BUTTON_LED_POWER_Pin, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff8:	4806      	ldr	r0, [pc, #24]	; (8002014 <StartDataTask+0x6a8>)
 8001ffa:	f005 f9af 	bl	800735c <HAL_GPIO_WritePin>
//		}
		// ПЕРЕВОД�?М ЗАДАЧУ В РЕЖ�?М ОЖ�?ДАН�?Я. ВРЕМЯ МАЛО, ЧТОБ НЕ ПРОПУСТЬ ПАКЕТ
		osDelay(10);
 8001ffe:	200a      	movs	r0, #10
 8002000:	f009 fce2 	bl	800b9c8 <osDelay>
		WDG_TackArr[1] = 1;
 8002004:	e4ee      	b.n	80019e4 <StartDataTask+0x78>
 8002006:	bf00      	nop
 8002008:	20000098 	.word	0x20000098
 800200c:	200098a8 	.word	0x200098a8
 8002010:	20001294 	.word	0x20001294
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40020400 	.word	0x40020400
 800201c:	2000109c 	.word	0x2000109c

08002020 <StartControlTask>:
 *				  �? СОСТАВЛЕН�?Я СТРОК НА ОТПРАВКУ		   *
 *														   *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void const * argument)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 8002026:	af00      	add	r7, sp, #0
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartControlTask */

/************************** ПЕРЕМЕННЫЕ ЗАДАЧ�? ****************************/

/*-------------------- ШАБЛОНЫ ДЛЯ ЗАПОЛНЕН�?Я СТРОК ---------------------*/
	const uint8_t ctrl_template[] = "R?R?R?R?DC?";				// ШАБЛОН ДЛЯ СТРОК�? С ДАННЫМ�? O РЕЛЕ �? DC
 800202c:	4ae6      	ldr	r2, [pc, #920]	; (80023c8 <StartControlTask+0x3a8>)
 800202e:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8002032:	ca07      	ldmia	r2, {r0, r1, r2}
 8002034:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const uint8_t but_template[] = 	"B?B?B?PB?";				// ШАБЛОН ДЛЯ СТРОК�? С ДАННЫМ�? СОСТОЯН�? КНОПОК
 8002038:	4ae4      	ldr	r2, [pc, #912]	; (80023cc <StartControlTask+0x3ac>)
 800203a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800203e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002040:	c303      	stmia	r3!, {r0, r1}
 8002042:	801a      	strh	r2, [r3, #0]

/*-------------------------- ПЕРЕМЕННЫЕ CRC32 ---------------------------*/
	uint16_t crc_count = 0;										// СЧЕТЧ�?К ДЛЯ ОПРЕДЕЛЕН�?Я РАЗМЕРА CRC32
 8002044:	2300      	movs	r3, #0
 8002046:	f8a7 3346 	strh.w	r3, [r7, #838]	; 0x346
	uint8_t crc_hex_buf[10];									// С�?МВОЛЬНЫЙ БУФЕР, ХРАНЯЩ�?Й ЗАП�?СЬ CRC32 В hex
	int32_t crc32;												// ХРАН�?Т РАСЧ�?ТАНОЕ ЗНАЯЕН�?Е CRC32

/*------------------------- ПЕРЕМЕННЫЕ RELE/DC --------------------------*/
	ctrl_status active;											// ПЕРЕМЕННАЯ СТРУКТУРЫ СТРОК РЕЛЕ/DC
	uint16_t RELE_PINS[] = {STM32_OUT_REL_1_Pin, 				// МАСС�?В, ХРАНЯЩ�?Й НОМЕРА П�?НОВ РЕЛЕ
 800204a:	4ae1      	ldr	r2, [pc, #900]	; (80023d0 <StartControlTask+0x3b0>)
 800204c:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8002050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002054:	e883 0003 	stmia.w	r3, {r0, r1}
							STM32_OUT_REL_2_Pin, 					//
							STM32_OUT_REL_3_Pin, 					//
							STM32_OUT_REL_4_Pin};					//
	GPIO_TypeDef *RELE_PORTS[] = {STM32_OUT_REL_1_GPIO_Port, 	// МАСС�?В, ХРАНЯЩ�?Й НОМЕРА ПОРТОВ РЕЛЕ
 8002058:	4bde      	ldr	r3, [pc, #888]	; (80023d4 <StartControlTask+0x3b4>)
 800205a:	f507 7433 	add.w	r4, r7, #716	; 0x2cc
 800205e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								STM32_OUT_REL_2_GPIO_Port, 			//
								STM32_OUT_REL_3_GPIO_Port, 			//
								STM32_OUT_REL_4_GPIO_Port};			//
	uint8_t RB_count = 0;										// РЕЛЕ/DC СЧЕТЧ�?К
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345

/*--------------------------- ФЛАГ�? СОСТОЯН�?Я ---------------------------*/
	uint8_t switch_off = 0;										// ФЛАГ ВЫКЛЮЧЕН�?Я П�?ТАН�?Я
 800206a:	2300      	movs	r3, #0
 800206c:	f887 32cb 	strb.w	r3, [r7, #715]	; 0x2cb
	uint8_t flash_on = 0;										// ФЛАГ ЗАП�?С�? В ФЛЭШ
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3344 	strb.w	r3, [r7, #836]	; 0x344

/*--------------------------- ВСЕ ДЛЯ КНОПОК ----------------------------*/
	uint8_t but_buf[4];											// БУФЕР ХРАН�?Т СОСТОЯН�?Е 4-Ч КНОПОК
																	// (0, 1 - ПРОКРУТКА; 2 - ФЛЭШ; 3 - ВЫКЛЮЧЕН�?Е)
	uint8_t cursor = 0;											// ПОЛОЖЕН�?Е КУРСОРА
 8002076:	2300      	movs	r3, #0
 8002078:	f887 32c3 	strb.w	r3, [r7, #707]	; 0x2c3
	uint8_t butmem = 0;											// ПЕРЕМЕННАЯ ЗАПОМ�?НАЕТ СОСТОЯН�?Е КНОПОК
 800207c:	2300      	movs	r3, #0
 800207e:	f887 32c2 	strb.w	r3, [r7, #706]	; 0x2c2
	uint8_t power_butmem = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 32c1 	strb.w	r3, [r7, #705]	; 0x2c1
	uint32_t butthold = 0;										// ПЕРЕМЕННАЯ ДЛЯ ОТСЧЕТА ВРЕМЕН�? НАЖАТ�?Я КНОПК�?
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
	uint32_t power_butthold = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8

/*----------------------- БУФЕР НА ОТПРАВКУ UART ------------------------*/
	uint8_t sendBuf[ctrl_string_amnt*string_size] = {'\0'};		// ОТПРАВЛЯЕМЫЙ ПО UART БУФЕР
 8002094:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002098:	4618      	mov	r0, r3
 800209a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800209e:	461a      	mov	r2, r3
 80020a0:	2100      	movs	r1, #0
 80020a2:	f00b fd14 	bl	800dace <memset>
	uint16_t sB_pointer = 0;									// УКАЗАТЕЛЬ БУФЕРА
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342
	uint8_t sB_counter = 0;										// СЧЕТЧ�?К БУФЕРА
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3341 	strb.w	r3, [r7, #833]	; 0x341
	uint32_t transmit_timer = 0;								// СОХРАНЯЕТ ВРЕМЯ ПОСЛЕДНЕЙ ОТПРАВК�?
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
	uint32_t flash_transmit_timer = 0;								// СОХРАНЯЕТ ВРЕМЯ ПОСЛЕДНЕЙ ОТПРАВК�?
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338

/*--------------------------- ПЕРЕМЕННЫЕ АЦП ---------------------------*/
	uint8_t ADC_char[4];										// БУФЕР ДЛЯ ПЕРЕВОДА ЗНАЧЕН�?Я АЦП В СТРОКУ
	uint16_t ADC_statistics[5][5] = {'\0'};						// Статистика для усреднения
 80020be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c2:	4618      	mov	r0, r3
 80020c4:	2332      	movs	r3, #50	; 0x32
 80020c6:	461a      	mov	r2, r3
 80020c8:	2100      	movs	r1, #0
 80020ca:	f00b fd00 	bl	800dace <memset>
	uint32_t ADC_stat_time = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	uint8_t ADC_summ_count = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
	uint16_t ADC_mid = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
	uint16_t ADC_real = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8a7 3316 	strh.w	r3, [r7, #790]	; 0x316

	char up_time_char[10];
	uint8_t adc_count = 0;			 							// СЧЕТЧ�?К АЦП
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
	uint8_t adc_str_count = 0;									// СЧЕТЧ�?К СТРОК АЦП
 80020ec:	2300      	movs	r3, #0
 80020ee:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
	uint8_t opt_buf[6] = {0};
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	809a      	strh	r2, [r3, #4]

	uint32_t service_hold = 0;
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
	uint8_t service_mem = 0;
 8002104:	f107 030f 	add.w	r3, r7, #15
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
	uint8_t service_mem2 = 0;
 800210c:	f107 030e 	add.w	r3, r7, #14
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

	uint8_t con1_mem = 0;
 8002114:	f107 030d 	add.w	r3, r7, #13
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
	uint8_t con2_mem = 0;
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
/*-------------------------- ФУНКЦ�?�? ЗАПУСКА ----------------------------*/
//	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_val,5);			// ЗАПУСК АЦП В РЕЖ�?МЕ DMA



	osDelay(500);
 8002124:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002128:	f009 fc4e 	bl	800b9c8 <osDelay>
/***************************** ТЕЛО ЗАДАЧ�? *******************************/
	for(;;){

		WDG_TackArr[2] = 1;
 800212c:	4baa      	ldr	r3, [pc, #680]	; (80023d8 <StartControlTask+0x3b8>)
 800212e:	2201      	movs	r2, #1
 8002130:	709a      	strb	r2, [r3, #2]

/*--------------------- ОБРАБАТЫВАЕМ НАЖАТ�?Я КНОПОК ---------------------*/

		// ПР�?Н�?МАЕМ ЗНАЧЕН�?Е КУРСОР �?З ЗАДАЧ�? StartDisplayTask
		xQueueReceive(myCursorQueueHandle,&cursor, 10);
 8002132:	4baa      	ldr	r3, [pc, #680]	; (80023dc <StartControlTask+0x3bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f207 21c3 	addw	r1, r7, #707	; 0x2c3
 800213a:	220a      	movs	r2, #10
 800213c:	4618      	mov	r0, r3
 800213e:	f009 ff65 	bl	800c00c <xQueueReceive>

		// ОБРАБАТЫВАЕМ КНОПК�? ПРОКРУТК�? Д�?СПЛЕЯ
		ScrollingButtonHandler(&cursor, &butthold, &butmem);
 8002142:	f207 22c2 	addw	r2, r7, #706	; 0x2c2
 8002146:	f507 712f 	add.w	r1, r7, #700	; 0x2bc
 800214a:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
 800214e:	4618      	mov	r0, r3
 8002150:	f001 fbfc 	bl	800394c <ScrollingButtonHandler>

		// ОТПРАВЛЯЕМ ОБНОВЛЕННОЕ ЗНАЧЕН�?Е КУРСОРА ОБРАТНО В ЗАДАЧУ StartDisplayTask
		xQueueSendToBack(myCursorQueueHandle, &cursor, 10);
 8002154:	4ba1      	ldr	r3, [pc, #644]	; (80023dc <StartControlTask+0x3bc>)
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	f207 21c3 	addw	r1, r7, #707	; 0x2c3
 800215c:	2300      	movs	r3, #0
 800215e:	220a      	movs	r2, #10
 8002160:	f009 fe5a 	bl	800be18 <xQueueGenericSend>

		// ОБРАБАТЫВАЕМ КНОПКУ ОТКЛЮЧЕН�?Я П�?ТАН�?Я
		PowerButtonHandler(&power_butthold, &power_butmem, &switch_off, OFF_delay - 1000);
 8002164:	f207 22cb 	addw	r2, r7, #715	; 0x2cb
 8002168:	f207 21c1 	addw	r1, r7, #705	; 0x2c1
 800216c:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8002170:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002174:	f001 fba2 	bl	80038bc <PowerButtonHandler>

		ServiceModeButtonHandler(&service_mem, &service_mem2, &service_hold, service_but_delay);
 8002178:	f107 0210 	add.w	r2, r7, #16
 800217c:	f107 010e 	add.w	r1, r7, #14
 8002180:	f107 000f 	add.w	r0, r7, #15
 8002184:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002188:	f001 fcd2 	bl	8003b30 <ServiceModeButtonHandler>

		ConnHandler(&con1_mem,&con2_mem);
 800218c:	f107 020c 	add.w	r2, r7, #12
 8002190:	f107 030d 	add.w	r3, r7, #13
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f001 fd8a 	bl	8003cb0 <ConnHandler>

		if(ADC_summ_count < 5 && (HAL_GetTick() - ADC_stat_time > 50 || ADC_stat_time > HAL_GetTick())){
 800219c:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d836      	bhi.n	8002212 <StartControlTask+0x1f2>
 80021a4:	f003 fcda 	bl	8005b5c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b32      	cmp	r3, #50	; 0x32
 80021b2:	d806      	bhi.n	80021c2 <StartControlTask+0x1a2>
 80021b4:	f003 fcd2 	bl	8005b5c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80021be:	4293      	cmp	r3, r2
 80021c0:	d927      	bls.n	8002212 <StartControlTask+0x1f2>
			for(uint8_t i = 0; i < 5; i++){
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3330 	strb.w	r3, [r7, #816]	; 0x330
 80021c8:	e016      	b.n	80021f8 <StartControlTask+0x1d8>
				ADC_statistics[i][ADC_summ_count] = ADC_val[i];
 80021ca:	f897 3330 	ldrb.w	r3, [r7, #816]	; 0x330
 80021ce:	f897 2330 	ldrb.w	r2, [r7, #816]	; 0x330
 80021d2:	f897 0333 	ldrb.w	r0, [r7, #819]	; 0x333
 80021d6:	4982      	ldr	r1, [pc, #520]	; (80023e0 <StartControlTask+0x3c0>)
 80021d8:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 80021dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	4403      	add	r3, r0
 80021e8:	4622      	mov	r2, r4
 80021ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(uint8_t i = 0; i < 5; i++){
 80021ee:	f897 3330 	ldrb.w	r3, [r7, #816]	; 0x330
 80021f2:	3301      	adds	r3, #1
 80021f4:	f887 3330 	strb.w	r3, [r7, #816]	; 0x330
 80021f8:	f897 3330 	ldrb.w	r3, [r7, #816]	; 0x330
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d9e4      	bls.n	80021ca <StartControlTask+0x1aa>
			}
			ADC_summ_count++;
 8002200:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8002204:	3301      	adds	r3, #1
 8002206:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
			ADC_stat_time = HAL_GetTick();
 800220a:	f003 fca7 	bl	8005b5c <HAL_GetTick>
 800220e:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
		}
/*----------- ЗАП�?СЫВАЕМ СОСТОЯН�?Е КНОПОК В МАСС�?В СОСТОЯН�?Я -----------*/
		if(butmem & STM32_BUTTON_3_Pin){
 8002212:	f897 32c2 	ldrb.w	r3, [r7, #706]	; 0x2c2
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <StartControlTask+0x214>
			flash_on = 1;
 800221e:	2301      	movs	r3, #1
 8002220:	f887 3344 	strb.w	r3, [r7, #836]	; 0x344
			flash_transmit_timer = HAL_GetTick();
 8002224:	f003 fc9a 	bl	8005b5c <HAL_GetTick>
 8002228:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
			UTC_show_flag = 1;
 800222c:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <StartControlTask+0x3c4>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e002      	b.n	800223a <StartControlTask+0x21a>
		}
		else UTC_show_flag = 0;
 8002234:	4b6b      	ldr	r3, [pc, #428]	; (80023e4 <StartControlTask+0x3c4>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]

		but_buf[0] = (butmem & STM32_BUTTON_1_Pin) >> 1;			    // КНОПКА ПРОКУРТК�? ВН�?З
 800223a:	f897 32c2 	ldrb.w	r3, [r7, #706]	; 0x2c2
 800223e:	105b      	asrs	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f887 32c4 	strb.w	r3, [r7, #708]	; 0x2c4
		but_buf[1] = butmem & STM32_BUTTON_2_Pin;						// КНОПКА ПРОКРУТК�? ВВЕРХ
 800224c:	f897 32c2 	ldrb.w	r3, [r7, #706]	; 0x2c2
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f887 32c5 	strb.w	r3, [r7, #709]	; 0x2c5
		but_buf[2] = flash_on;											// КНОПКА ЗАП�?С�? ВО ФЛЭШ
 800225a:	f897 3344 	ldrb.w	r3, [r7, #836]	; 0x344
 800225e:	f887 32c6 	strb.w	r3, [r7, #710]	; 0x2c6
		but_buf[3] = switch_off;										// КНОПКА ВЫКЛЮЧЕН�?Я
 8002262:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8002266:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7

		opt_buf[0] = HAL_GPIO_ReadPin(STM32_R_24_NO_GPIO_Port,STM32_R_24_NO_Pin);
 800226a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800226e:	485e      	ldr	r0, [pc, #376]	; (80023e8 <StartControlTask+0x3c8>)
 8002270:	f005 f85c 	bl	800732c <HAL_GPIO_ReadPin>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	701a      	strb	r2, [r3, #0]
		opt_buf[1] = HAL_GPIO_ReadPin(STM32_R_24_NC_GPIO_Port,STM32_R_24_NC_Pin);
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	485a      	ldr	r0, [pc, #360]	; (80023ec <StartControlTask+0x3cc>)
 8002282:	f005 f853 	bl	800732c <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	705a      	strb	r2, [r3, #1]
		opt_buf[2] = HAL_GPIO_ReadPin(INPUT_OUTSIDE_1_GPIO_Port,INPUT_OUTSIDE_1_Pin);
 8002290:	2102      	movs	r1, #2
 8002292:	4857      	ldr	r0, [pc, #348]	; (80023f0 <StartControlTask+0x3d0>)
 8002294:	f005 f84a 	bl	800732c <HAL_GPIO_ReadPin>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	709a      	strb	r2, [r3, #2]
		opt_buf[3] = HAL_GPIO_ReadPin(INPUT_OUTSIDE_2_GPIO_Port,INPUT_OUTSIDE_2_Pin);
 80022a2:	2101      	movs	r1, #1
 80022a4:	4852      	ldr	r0, [pc, #328]	; (80023f0 <StartControlTask+0x3d0>)
 80022a6:	f005 f841 	bl	800732c <HAL_GPIO_ReadPin>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	70da      	strb	r2, [r3, #3]
		opt_buf[4] = HAL_GPIO_ReadPin(STM32_Conn_1_GPIO_Port,STM32_Conn_1_Pin);
 80022b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022b8:	484d      	ldr	r0, [pc, #308]	; (80023f0 <StartControlTask+0x3d0>)
 80022ba:	f005 f837 	bl	800732c <HAL_GPIO_ReadPin>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	711a      	strb	r2, [r3, #4]
		opt_buf[5] = HAL_GPIO_ReadPin(STM32_Conn_2_GPIO_Port,STM32_Conn_2_Pin);
 80022c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022cc:	4848      	ldr	r0, [pc, #288]	; (80023f0 <StartControlTask+0x3d0>)
 80022ce:	f005 f82d 	bl	800732c <HAL_GPIO_ReadPin>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	715a      	strb	r2, [r3, #5]
//		I2C_Read(&hi2c1, 0x50, &i2c_r, 1);

//		HAL_I2C_Mem_Write(&hi2c1, 0x50<<1,0x5, 1,(uint8_t*) &uptime_tick, 1, 300);


		osDelay(10);
 80022dc:	200a      	movs	r0, #10
 80022de:	f009 fb73 	bl	800b9c8 <osDelay>

/*--------------- ОБРАБОТАВАЕМ и ВЫВОД�?М С�?ГНАЛЫ НА П�?НЫ ---------------*/

		// ПАРС�?М СЛУЖЕБНЫЕ СТРОК�?
		ServiceStringPars((string_t *) &datastring, &active);
 80022e2:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4842      	ldr	r0, [pc, #264]	; (80023f4 <StartControlTask+0x3d4>)
 80022ea:	f002 fae5 	bl	80048b8 <ServiceStringPars>

		// МАСС�?В ЗАДАЕТ СОСТОЯН�?Е РЕЛЕ, ВЗА�?В�?СОСТ�? ОТ ПОЛУЧЕННЫХ ДАННЫХ
		for(uint8_t i = 0; i < 4; i++){
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 332f 	strb.w	r3, [r7, #815]	; 0x32f
 80022f4:	e036      	b.n	8002364 <StartControlTask+0x344>
			if(active.RELE[i])
 80022f6:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 80022fa:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80022fe:	4413      	add	r3, r2
 8002300:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d014      	beq.n	8002332 <StartControlTask+0x312>
				HAL_GPIO_WritePin(RELE_PORTS[i], RELE_PINS[i], GPIO_PIN_SET);
 8002308:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002312:	4413      	add	r3, r2
 8002314:	f853 0c7c 	ldr.w	r0, [r3, #-124]
 8002318:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002322:	4413      	add	r3, r2
 8002324:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 8002328:	2201      	movs	r2, #1
 800232a:	4619      	mov	r1, r3
 800232c:	f005 f816 	bl	800735c <HAL_GPIO_WritePin>
 8002330:	e013      	b.n	800235a <StartControlTask+0x33a>
			else
				HAL_GPIO_WritePin(RELE_PORTS[i], RELE_PINS[i], GPIO_PIN_RESET);
 8002332:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800233c:	4413      	add	r3, r2
 800233e:	f853 0c7c 	ldr.w	r0, [r3, #-124]
 8002342:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800234c:	4413      	add	r3, r2
 800234e:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 8002352:	2200      	movs	r2, #0
 8002354:	4619      	mov	r1, r3
 8002356:	f005 f801 	bl	800735c <HAL_GPIO_WritePin>
		for(uint8_t i = 0; i < 4; i++){
 800235a:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 800235e:	3301      	adds	r3, #1
 8002360:	f887 332f 	strb.w	r3, [r7, #815]	; 0x32f
 8002364:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 8002368:	2b03      	cmp	r3, #3
 800236a:	d9c4      	bls.n	80022f6 <StartControlTask+0x2d6>
		// СОСТОЯН�?Е Д�?СПЛЕЯ ОТПРАВЛЯЕТСЯ В ЗАДАЧУ StartDisplayTask
//		xQueueSendToBack(myDispStatQueueHandle, &active.DISP, portMAX_DELAY);



		if(HAL_GetTick() - transmit_timer > transmit_time || transmit_timer > HAL_GetTick()){
 800236c:	f003 fbf6 	bl	8005b5c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800237c:	d807      	bhi.n	800238e <StartControlTask+0x36e>
 800237e:	f003 fbed 	bl	8005b5c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8002388:	4293      	cmp	r3, r2
 800238a:	f240 8601 	bls.w	8002f90 <StartControlTask+0xf70>
/*------------------------- СОСТАВЛЯЕМ СТРОК�? --------------------------*/

			// ПРОБЕГАЕМ ВСЕ СТРОК�? КНОТРОЛЯ (Ц�?КЛ ТУТ Л�?ШН�?Й, НО ПУСТЬ ПОКА БУДЕТ)
			for(uint8_t i = start_ctrl_string; i < start_serv_string; i++){
 800238e:	2391      	movs	r3, #145	; 0x91
 8002390:	f887 332e 	strb.w	r3, [r7, #814]	; 0x32e
 8002394:	f000 bc97 	b.w	8002cc6 <StartControlTask+0xca6>
				switch (i){
 8002398:	f897 332e 	ldrb.w	r3, [r7, #814]	; 0x32e
 800239c:	3b92      	subs	r3, #146	; 0x92
 800239e:	2b06      	cmp	r3, #6
 80023a0:	f200 848c 	bhi.w	8002cbc <StartControlTask+0xc9c>
 80023a4:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <StartControlTask+0x38c>)
 80023a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023aa:	bf00      	nop
 80023ac:	080023f9 	.word	0x080023f9
 80023b0:	08002579 	.word	0x08002579
 80023b4:	080026f9 	.word	0x080026f9
 80023b8:	080029cd 	.word	0x080029cd
 80023bc:	08002a99 	.word	0x08002a99
 80023c0:	08002cbd 	.word	0x08002cbd
 80023c4:	08002bb9 	.word	0x08002bb9
 80023c8:	0800fc90 	.word	0x0800fc90
 80023cc:	0800fc9c 	.word	0x0800fc9c
 80023d0:	0800fca8 	.word	0x0800fca8
 80023d4:	0800fcb0 	.word	0x0800fcb0
 80023d8:	2000109c 	.word	0x2000109c
 80023dc:	20006b44 	.word	0x20006b44
 80023e0:	20006b34 	.word	0x20006b34
 80023e4:	200010b3 	.word	0x200010b3
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40021000 	.word	0x40021000
 80023f4:	20006b48 	.word	0x20006b48

			/*- - - - - - - -  Строка_№2_(РЕЛЕ/DC) - - - - - - - -*/
				case ctrl_string_2:
					for(uint8_t j = 0; j < string_size; j++){
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 332d 	strb.w	r3, [r7, #813]	; 0x32d
 80023fe:	e012      	b.n	8002426 <StartControlTask+0x406>
						datastring[i].buf[j] = '\0';
 8002400:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002404:	f897 132d 	ldrb.w	r1, [r7, #813]	; 0x32d
 8002408:	48ea      	ldr	r0, [pc, #936]	; (80027b4 <StartControlTask+0x794>)
 800240a:	4613      	mov	r3, r2
 800240c:	015b      	lsls	r3, r3, #5
 800240e:	4413      	add	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	4403      	add	r3, r0
 8002416:	440b      	add	r3, r1
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
					for(uint8_t j = 0; j < string_size; j++){
 800241c:	f897 332d 	ldrb.w	r3, [r7, #813]	; 0x32d
 8002420:	3301      	adds	r3, #1
 8002422:	f887 332d 	strb.w	r3, [r7, #813]	; 0x32d
 8002426:	f897 332d 	ldrb.w	r3, [r7, #813]	; 0x32d
 800242a:	2b3b      	cmp	r3, #59	; 0x3b
 800242c:	d9e8      	bls.n	8002400 <StartControlTask+0x3e0>
					}

					RB_count = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345

					// ЗАПОЛНЯЕМ СТРОКУ, �?СПОЛЬЗУЯ ШАБЛОН
					for(uint8_t j = 0; j < strlen((const char *)&ctrl_template);j++){
 8002434:	2300      	movs	r3, #0
 8002436:	f887 332c 	strb.w	r3, [r7, #812]	; 0x32c
 800243a:	e091      	b.n	8002560 <StartControlTask+0x540>

						// ЕСЛ�? С�?МВОЛ ШАБЛОНА 'R', ЗАП�?СЫВАЕМ СОСТОЯН�?Е РЕЛЕ(RB_COUNT ПО СЧЕТУ)
						if(ctrl_template[j] == (uint8_t)'R'){
 800243c:	f897 332c 	ldrb.w	r3, [r7, #812]	; 0x32c
 8002440:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002444:	4413      	add	r3, r2
 8002446:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800244a:	2b52      	cmp	r3, #82	; 0x52
 800244c:	d131      	bne.n	80024b2 <StartControlTask+0x492>
							datastring[i].buf[j] = ctrl_template[j];
 800244e:	f897 332c 	ldrb.w	r3, [r7, #812]	; 0x32c
 8002452:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002456:	f897 132c 	ldrb.w	r1, [r7, #812]	; 0x32c
 800245a:	f507 7052 	add.w	r0, r7, #840	; 0x348
 800245e:	4403      	add	r3, r0
 8002460:	f813 4c44 	ldrb.w	r4, [r3, #-68]
 8002464:	48d3      	ldr	r0, [pc, #844]	; (80027b4 <StartControlTask+0x794>)
 8002466:	4613      	mov	r3, r2
 8002468:	015b      	lsls	r3, r3, #5
 800246a:	4413      	add	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	4403      	add	r3, r0
 8002472:	440b      	add	r3, r1
 8002474:	4622      	mov	r2, r4
 8002476:	701a      	strb	r2, [r3, #0]
							datastring[i].buf[j+1] = active.RELE[RB_count] + 48; 	// + 48 - ПЕРЕВОД�?Т С�?МВОЛ �?З INT В CHAR
 8002478:	f897 3345 	ldrb.w	r3, [r7, #837]	; 0x345
 800247c:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002480:	4413      	add	r3, r2
 8002482:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 8002486:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 800248a:	f897 132c 	ldrb.w	r1, [r7, #812]	; 0x32c
 800248e:	3101      	adds	r1, #1
 8002490:	3330      	adds	r3, #48	; 0x30
 8002492:	b2dc      	uxtb	r4, r3
 8002494:	48c7      	ldr	r0, [pc, #796]	; (80027b4 <StartControlTask+0x794>)
 8002496:	4613      	mov	r3, r2
 8002498:	015b      	lsls	r3, r3, #5
 800249a:	4413      	add	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	4403      	add	r3, r0
 80024a2:	440b      	add	r3, r1
 80024a4:	4622      	mov	r2, r4
 80024a6:	701a      	strb	r2, [r3, #0]
							RB_count++;
 80024a8:	f897 3345 	ldrb.w	r3, [r7, #837]	; 0x345
 80024ac:	3301      	adds	r3, #1
 80024ae:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345
						}

						// ЕСЛ�? НАХОД�?М КОМБ�?НАЦ�?Ю "DC", ЗАП�?СЫВАЕМ СОСТОЯН�?Е DC
						if(ctrl_template[j] == (uint8_t)'D' && ctrl_template[j+1] == (uint8_t)'C'){
 80024b2:	f897 332c 	ldrb.w	r3, [r7, #812]	; 0x32c
 80024b6:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80024ba:	4413      	add	r3, r2
 80024bc:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80024c0:	2b44      	cmp	r3, #68	; 0x44
 80024c2:	d148      	bne.n	8002556 <StartControlTask+0x536>
 80024c4:	f897 332c 	ldrb.w	r3, [r7, #812]	; 0x32c
 80024c8:	3301      	adds	r3, #1
 80024ca:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80024ce:	4413      	add	r3, r2
 80024d0:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80024d4:	2b43      	cmp	r3, #67	; 0x43
 80024d6:	d13e      	bne.n	8002556 <StartControlTask+0x536>
							datastring[i].buf[j] = ctrl_template[j];
 80024d8:	f897 332c 	ldrb.w	r3, [r7, #812]	; 0x32c
 80024dc:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 80024e0:	f897 132c 	ldrb.w	r1, [r7, #812]	; 0x32c
 80024e4:	f507 7052 	add.w	r0, r7, #840	; 0x348
 80024e8:	4403      	add	r3, r0
 80024ea:	f813 4c44 	ldrb.w	r4, [r3, #-68]
 80024ee:	48b1      	ldr	r0, [pc, #708]	; (80027b4 <StartControlTask+0x794>)
 80024f0:	4613      	mov	r3, r2
 80024f2:	015b      	lsls	r3, r3, #5
 80024f4:	4413      	add	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	4403      	add	r3, r0
 80024fc:	440b      	add	r3, r1
 80024fe:	4622      	mov	r2, r4
 8002500:	701a      	strb	r2, [r3, #0]
							datastring[i].buf[j+1] = ctrl_template[j+1];
 8002502:	f897 332c 	ldrb.w	r3, [r7, #812]	; 0x32c
 8002506:	3301      	adds	r3, #1
 8002508:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 800250c:	f897 132c 	ldrb.w	r1, [r7, #812]	; 0x32c
 8002510:	3101      	adds	r1, #1
 8002512:	f507 7052 	add.w	r0, r7, #840	; 0x348
 8002516:	4403      	add	r3, r0
 8002518:	f813 4c44 	ldrb.w	r4, [r3, #-68]
 800251c:	48a5      	ldr	r0, [pc, #660]	; (80027b4 <StartControlTask+0x794>)
 800251e:	4613      	mov	r3, r2
 8002520:	015b      	lsls	r3, r3, #5
 8002522:	4413      	add	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	4403      	add	r3, r0
 800252a:	440b      	add	r3, r1
 800252c:	4622      	mov	r2, r4
 800252e:	701a      	strb	r2, [r3, #0]
							datastring[i].buf[j+2] = active.DC + 48;				// + 48 - ПЕРЕВОД�?Т С�?МВОЛ �?З INT В CHAR
 8002530:	f897 32e8 	ldrb.w	r3, [r7, #744]	; 0x2e8
 8002534:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002538:	f897 132c 	ldrb.w	r1, [r7, #812]	; 0x32c
 800253c:	3102      	adds	r1, #2
 800253e:	3330      	adds	r3, #48	; 0x30
 8002540:	b2dc      	uxtb	r4, r3
 8002542:	489c      	ldr	r0, [pc, #624]	; (80027b4 <StartControlTask+0x794>)
 8002544:	4613      	mov	r3, r2
 8002546:	015b      	lsls	r3, r3, #5
 8002548:	4413      	add	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	4403      	add	r3, r0
 8002550:	440b      	add	r3, r1
 8002552:	4622      	mov	r2, r4
 8002554:	701a      	strb	r2, [r3, #0]
					for(uint8_t j = 0; j < strlen((const char *)&ctrl_template);j++){
 8002556:	f897 332c 	ldrb.w	r3, [r7, #812]	; 0x32c
 800255a:	3301      	adds	r3, #1
 800255c:	f887 332c 	strb.w	r3, [r7, #812]	; 0x32c
 8002560:	f897 432c 	ldrb.w	r4, [r7, #812]	; 0x32c
 8002564:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd fe31 	bl	80001d0 <strlen>
 800256e:	4603      	mov	r3, r0
 8002570:	429c      	cmp	r4, r3
 8002572:	f4ff af63 	bcc.w	800243c <StartControlTask+0x41c>
						}
					}
					break;
 8002576:	e3a1      	b.n	8002cbc <StartControlTask+0xc9c>

			/*- - - - - - - - -  Строка_№3_(КНОПК�?) - - - - - - - -*/
				case ctrl_string_3:
					for(uint8_t j = 0; j < string_size; j++){
 8002578:	2300      	movs	r3, #0
 800257a:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
 800257e:	e012      	b.n	80025a6 <StartControlTask+0x586>
						datastring[i].buf[j] = '\0';
 8002580:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002584:	f897 132b 	ldrb.w	r1, [r7, #811]	; 0x32b
 8002588:	488a      	ldr	r0, [pc, #552]	; (80027b4 <StartControlTask+0x794>)
 800258a:	4613      	mov	r3, r2
 800258c:	015b      	lsls	r3, r3, #5
 800258e:	4413      	add	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	4403      	add	r3, r0
 8002596:	440b      	add	r3, r1
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
					for(uint8_t j = 0; j < string_size; j++){
 800259c:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 80025a0:	3301      	adds	r3, #1
 80025a2:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
 80025a6:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 80025aa:	2b3b      	cmp	r3, #59	; 0x3b
 80025ac:	d9e8      	bls.n	8002580 <StartControlTask+0x560>
					}

					RB_count = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345

					// ЗАПОЛНЯЕМ СТРОКУ, �?СПОЛЬЗУЯ ШАБЛОН
					for(uint8_t j = 0; j < strlen((const char *)&but_template);j++){
 80025b4:	2300      	movs	r3, #0
 80025b6:	f887 332a 	strb.w	r3, [r7, #810]	; 0x32a
 80025ba:	e091      	b.n	80026e0 <StartControlTask+0x6c0>

						// ЕСЛ�? С�?МВОЛ ШАБЛОНА 'B', ЗАП�?СЫВАЕМ СОСТОЯН�?Е КНОПКО ПРОКУРУТК�? �? ФЛЭШ
						if(but_template[j] == (uint8_t)'B'){
 80025bc:	f897 332a 	ldrb.w	r3, [r7, #810]	; 0x32a
 80025c0:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80025c4:	4413      	add	r3, r2
 80025c6:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80025ca:	2b42      	cmp	r3, #66	; 0x42
 80025cc:	d131      	bne.n	8002632 <StartControlTask+0x612>
							datastring[i].buf[j] = but_template[j];
 80025ce:	f897 332a 	ldrb.w	r3, [r7, #810]	; 0x32a
 80025d2:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 80025d6:	f897 132a 	ldrb.w	r1, [r7, #810]	; 0x32a
 80025da:	f507 7052 	add.w	r0, r7, #840	; 0x348
 80025de:	4403      	add	r3, r0
 80025e0:	f813 4c50 	ldrb.w	r4, [r3, #-80]
 80025e4:	4873      	ldr	r0, [pc, #460]	; (80027b4 <StartControlTask+0x794>)
 80025e6:	4613      	mov	r3, r2
 80025e8:	015b      	lsls	r3, r3, #5
 80025ea:	4413      	add	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	4403      	add	r3, r0
 80025f2:	440b      	add	r3, r1
 80025f4:	4622      	mov	r2, r4
 80025f6:	701a      	strb	r2, [r3, #0]
							datastring[i].buf[j+1] = but_buf[RB_count] + 48;		// + 48 - ПЕРЕВОД�?Т С�?МВОЛ �?З INT В CHAR
 80025f8:	f897 3345 	ldrb.w	r3, [r7, #837]	; 0x345
 80025fc:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002600:	4413      	add	r3, r2
 8002602:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8002606:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 800260a:	f897 132a 	ldrb.w	r1, [r7, #810]	; 0x32a
 800260e:	3101      	adds	r1, #1
 8002610:	3330      	adds	r3, #48	; 0x30
 8002612:	b2dc      	uxtb	r4, r3
 8002614:	4867      	ldr	r0, [pc, #412]	; (80027b4 <StartControlTask+0x794>)
 8002616:	4613      	mov	r3, r2
 8002618:	015b      	lsls	r3, r3, #5
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	4403      	add	r3, r0
 8002622:	440b      	add	r3, r1
 8002624:	4622      	mov	r2, r4
 8002626:	701a      	strb	r2, [r3, #0]
							RB_count++;
 8002628:	f897 3345 	ldrb.w	r3, [r7, #837]	; 0x345
 800262c:	3301      	adds	r3, #1
 800262e:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345
						}
						// ЕСЛ�? НАХОД�?М КОМБ�?НАЦ�?Ю "PB", ЗАП�?СЫВАЕМ СОСТОЯН�?Е КНОПК�? ВЫКЛЮЧЕН�?Я
						if(but_template[j] == (uint8_t)'P' && but_template[j+1] == (uint8_t)'B'){
 8002632:	f897 332a 	ldrb.w	r3, [r7, #810]	; 0x32a
 8002636:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800263a:	4413      	add	r3, r2
 800263c:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8002640:	2b50      	cmp	r3, #80	; 0x50
 8002642:	d148      	bne.n	80026d6 <StartControlTask+0x6b6>
 8002644:	f897 332a 	ldrb.w	r3, [r7, #810]	; 0x32a
 8002648:	3301      	adds	r3, #1
 800264a:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800264e:	4413      	add	r3, r2
 8002650:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8002654:	2b42      	cmp	r3, #66	; 0x42
 8002656:	d13e      	bne.n	80026d6 <StartControlTask+0x6b6>
							datastring[i].buf[j] = but_template[j];
 8002658:	f897 332a 	ldrb.w	r3, [r7, #810]	; 0x32a
 800265c:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002660:	f897 132a 	ldrb.w	r1, [r7, #810]	; 0x32a
 8002664:	f507 7052 	add.w	r0, r7, #840	; 0x348
 8002668:	4403      	add	r3, r0
 800266a:	f813 4c50 	ldrb.w	r4, [r3, #-80]
 800266e:	4851      	ldr	r0, [pc, #324]	; (80027b4 <StartControlTask+0x794>)
 8002670:	4613      	mov	r3, r2
 8002672:	015b      	lsls	r3, r3, #5
 8002674:	4413      	add	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	4403      	add	r3, r0
 800267c:	440b      	add	r3, r1
 800267e:	4622      	mov	r2, r4
 8002680:	701a      	strb	r2, [r3, #0]
							datastring[i].buf[j+1] = but_template[j+1];
 8002682:	f897 332a 	ldrb.w	r3, [r7, #810]	; 0x32a
 8002686:	3301      	adds	r3, #1
 8002688:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 800268c:	f897 132a 	ldrb.w	r1, [r7, #810]	; 0x32a
 8002690:	3101      	adds	r1, #1
 8002692:	f507 7052 	add.w	r0, r7, #840	; 0x348
 8002696:	4403      	add	r3, r0
 8002698:	f813 4c50 	ldrb.w	r4, [r3, #-80]
 800269c:	4845      	ldr	r0, [pc, #276]	; (80027b4 <StartControlTask+0x794>)
 800269e:	4613      	mov	r3, r2
 80026a0:	015b      	lsls	r3, r3, #5
 80026a2:	4413      	add	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	4403      	add	r3, r0
 80026aa:	440b      	add	r3, r1
 80026ac:	4622      	mov	r2, r4
 80026ae:	701a      	strb	r2, [r3, #0]
							datastring[i].buf[j+2] = but_buf[3] + 48;		// + 48 - ПЕРЕВОД�?Т С�?МВОЛ �?З INT В CHAR
 80026b0:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 80026b4:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 80026b8:	f897 132a 	ldrb.w	r1, [r7, #810]	; 0x32a
 80026bc:	3102      	adds	r1, #2
 80026be:	3330      	adds	r3, #48	; 0x30
 80026c0:	b2dc      	uxtb	r4, r3
 80026c2:	483c      	ldr	r0, [pc, #240]	; (80027b4 <StartControlTask+0x794>)
 80026c4:	4613      	mov	r3, r2
 80026c6:	015b      	lsls	r3, r3, #5
 80026c8:	4413      	add	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	4403      	add	r3, r0
 80026d0:	440b      	add	r3, r1
 80026d2:	4622      	mov	r2, r4
 80026d4:	701a      	strb	r2, [r3, #0]
					for(uint8_t j = 0; j < strlen((const char *)&but_template);j++){
 80026d6:	f897 332a 	ldrb.w	r3, [r7, #810]	; 0x32a
 80026da:	3301      	adds	r3, #1
 80026dc:	f887 332a 	strb.w	r3, [r7, #810]	; 0x32a
 80026e0:	f897 432a 	ldrb.w	r4, [r7, #810]	; 0x32a
 80026e4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd fd71 	bl	80001d0 <strlen>
 80026ee:	4603      	mov	r3, r0
 80026f0:	429c      	cmp	r4, r3
 80026f2:	f4ff af63 	bcc.w	80025bc <StartControlTask+0x59c>
	//						RB_count++;
						}
					}
					break;
 80026f6:	e2e1      	b.n	8002cbc <StartControlTask+0xc9c>

			/*- - - - - - - - Строка_№4_(ТЕМПЕРАТУРА) - - - - - - -*/
				case ctrl_string_4:
					for(uint8_t j = 0; j < string_size; j++){
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3329 	strb.w	r3, [r7, #809]	; 0x329
 80026fe:	e012      	b.n	8002726 <StartControlTask+0x706>
						datastring[i].buf[j] = '\0';
 8002700:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002704:	f897 1329 	ldrb.w	r1, [r7, #809]	; 0x329
 8002708:	482a      	ldr	r0, [pc, #168]	; (80027b4 <StartControlTask+0x794>)
 800270a:	4613      	mov	r3, r2
 800270c:	015b      	lsls	r3, r3, #5
 800270e:	4413      	add	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	4403      	add	r3, r0
 8002716:	440b      	add	r3, r1
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
					for(uint8_t j = 0; j < string_size; j++){
 800271c:	f897 3329 	ldrb.w	r3, [r7, #809]	; 0x329
 8002720:	3301      	adds	r3, #1
 8002722:	f887 3329 	strb.w	r3, [r7, #809]	; 0x329
 8002726:	f897 3329 	ldrb.w	r3, [r7, #809]	; 0x329
 800272a:	2b3b      	cmp	r3, #59	; 0x3b
 800272c:	d9e8      	bls.n	8002700 <StartControlTask+0x6e0>
					}
					adc_count = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
					adc_str_count = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

					// СЧ�?ТЫВАЕМ ПОКА ЧТО ДВА КАНАЛА АЦП
					while(adc_count < 5){
 800273a:	e141      	b.n	80029c0 <StartControlTask+0x9a0>
						// ЗАП�?СЫВАЕМ ЗНАК ТЕМПЕРАТУРЫ

						// ЕСЛ�? ОПРАШ�?ВАЕМ ДАТЧ�?К ТЕМПЕРАТУРЫ STM, СЧ�?ТАЕМ ЕГО ПО СПЕЦ�?АЛЬНОЙ
						// �? ПЕРЕВОД�?М В СТРОКУ
						// �?НАЧЕ ПРОСТО ВЫВОД�?М ЗНАЧЕН�?Е ТЕМПЕРАТУРЫ
						switch (adc_count){
 800273c:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 8002740:	2b04      	cmp	r3, #4
 8002742:	f200 810d 	bhi.w	8002960 <StartControlTask+0x940>
 8002746:	a201      	add	r2, pc, #4	; (adr r2, 800274c <StartControlTask+0x72c>)
 8002748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274c:	08002761 	.word	0x08002761
 8002750:	080027b9 	.word	0x080027b9
 8002754:	0800281b 	.word	0x0800281b
 8002758:	08002885 	.word	0x08002885
 800275c:	080028ef 	.word	0x080028ef
						case 0:
							datastring[i].buf[adc_str_count] = (uint8_t)'T';
 8002760:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002764:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 8002768:	4812      	ldr	r0, [pc, #72]	; (80027b4 <StartControlTask+0x794>)
 800276a:	4613      	mov	r3, r2
 800276c:	015b      	lsls	r3, r3, #5
 800276e:	4413      	add	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	4403      	add	r3, r0
 8002776:	440b      	add	r3, r1
 8002778:	2254      	movs	r2, #84	; 0x54
 800277a:	701a      	strb	r2, [r3, #0]
							adc_str_count++;
 800277c:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 8002780:	3301      	adds	r3, #1
 8002782:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

							ADC_mid = ADC_Mean(ADC_statistics[0], 5);
 8002786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800278a:	2105      	movs	r1, #5
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fd57 	bl	8003240 <ADC_Mean>
 8002792:	4603      	mov	r3, r0
 8002794:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
							itoa(TemperatureGetData(ADC_mid),(char *)&ADC_char, 10);
 8002798:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 800279c:	4618      	mov	r0, r3
 800279e:	f001 f821 	bl	80037e4 <TemperatureGetData>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027aa:	220a      	movs	r2, #10
 80027ac:	4619      	mov	r1, r3
 80027ae:	f00b f981 	bl	800dab4 <itoa>
							break;
 80027b2:	e0d5      	b.n	8002960 <StartControlTask+0x940>
 80027b4:	20006b48 	.word	0x20006b48

						case 1:
							datastring[i].buf[adc_str_count] = (uint8_t)'T';
 80027b8:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 80027bc:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 80027c0:	48e7      	ldr	r0, [pc, #924]	; (8002b60 <StartControlTask+0xb40>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	015b      	lsls	r3, r3, #5
 80027c6:	4413      	add	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	4403      	add	r3, r0
 80027ce:	440b      	add	r3, r1
 80027d0:	2254      	movs	r2, #84	; 0x54
 80027d2:	701a      	strb	r2, [r3, #0]
							adc_str_count++;
 80027d4:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 80027d8:	3301      	adds	r3, #1
 80027da:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

							ADC_mid = ADC_Mean(ADC_statistics[adc_count], 5);
 80027de:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 80027e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	440b      	add	r3, r1
 80027f0:	2105      	movs	r1, #5
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fd24 	bl	8003240 <ADC_Mean>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

							itoa(NTC_getTemp(ADC_mid),(char *)&ADC_char, 10);
 80027fe:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fb66 	bl	8000ed4 <NTC_getTemp>
 8002808:	4603      	mov	r3, r0
 800280a:	4618      	mov	r0, r3
 800280c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002810:	220a      	movs	r2, #10
 8002812:	4619      	mov	r1, r3
 8002814:	f00b f94e 	bl	800dab4 <itoa>
							break;
 8002818:	e0a2      	b.n	8002960 <StartControlTask+0x940>

						case 2:
							datastring[i].buf[adc_str_count] = (uint8_t)'U';
 800281a:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 800281e:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 8002822:	48cf      	ldr	r0, [pc, #828]	; (8002b60 <StartControlTask+0xb40>)
 8002824:	4613      	mov	r3, r2
 8002826:	015b      	lsls	r3, r3, #5
 8002828:	4413      	add	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	4403      	add	r3, r0
 8002830:	440b      	add	r3, r1
 8002832:	2255      	movs	r2, #85	; 0x55
 8002834:	701a      	strb	r2, [r3, #0]
							adc_str_count++;
 8002836:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 800283a:	3301      	adds	r3, #1
 800283c:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

							ADC_mid = ADC_Mean(ADC_statistics[adc_count], 5);
 8002840:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 8002844:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	440b      	add	r3, r1
 8002852:	2105      	movs	r1, #5
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fcf3 	bl	8003240 <ADC_Mean>
 800285a:	4603      	mov	r3, r0
 800285c:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
							ADC_real = ADC_to_Volt(ADC_mid) * 2;
 8002860:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fd11 	bl	800328c <ADC_to_Volt>
 800286a:	4603      	mov	r3, r0
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	f8a7 3316 	strh.w	r3, [r7, #790]	; 0x316
							itoa(ADC_real,(char *)&ADC_char, 10);
 8002872:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 8002876:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800287a:	220a      	movs	r2, #10
 800287c:	4618      	mov	r0, r3
 800287e:	f00b f919 	bl	800dab4 <itoa>
							break;
 8002882:	e06d      	b.n	8002960 <StartControlTask+0x940>

						case 3:
							datastring[i].buf[adc_str_count] = (uint8_t)'U';
 8002884:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002888:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 800288c:	48b4      	ldr	r0, [pc, #720]	; (8002b60 <StartControlTask+0xb40>)
 800288e:	4613      	mov	r3, r2
 8002890:	015b      	lsls	r3, r3, #5
 8002892:	4413      	add	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	4403      	add	r3, r0
 800289a:	440b      	add	r3, r1
 800289c:	2255      	movs	r2, #85	; 0x55
 800289e:	701a      	strb	r2, [r3, #0]
							adc_str_count++;
 80028a0:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 80028a4:	3301      	adds	r3, #1
 80028a6:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

							ADC_mid = ADC_Mean(ADC_statistics[adc_count], 5);
 80028aa:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 80028ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	440b      	add	r3, r1
 80028bc:	2105      	movs	r1, #5
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fcbe 	bl	8003240 <ADC_Mean>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
							ADC_real = ADC_to_Volt(ADC_mid) * 2;
 80028ca:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fcdc 	bl	800328c <ADC_to_Volt>
 80028d4:	4603      	mov	r3, r0
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	f8a7 3316 	strh.w	r3, [r7, #790]	; 0x316
							itoa(ADC_real,(char *)&ADC_char, 10);
 80028dc:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 80028e0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80028e4:	220a      	movs	r2, #10
 80028e6:	4618      	mov	r0, r3
 80028e8:	f00b f8e4 	bl	800dab4 <itoa>
							break;
 80028ec:	e038      	b.n	8002960 <StartControlTask+0x940>

						case 4:
							datastring[i].buf[adc_str_count] = (uint8_t)'U';
 80028ee:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 80028f2:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 80028f6:	489a      	ldr	r0, [pc, #616]	; (8002b60 <StartControlTask+0xb40>)
 80028f8:	4613      	mov	r3, r2
 80028fa:	015b      	lsls	r3, r3, #5
 80028fc:	4413      	add	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	4403      	add	r3, r0
 8002904:	440b      	add	r3, r1
 8002906:	2255      	movs	r2, #85	; 0x55
 8002908:	701a      	strb	r2, [r3, #0]
							adc_str_count++;
 800290a:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 800290e:	3301      	adds	r3, #1
 8002910:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

							ADC_mid = ADC_Mean(ADC_statistics[adc_count], 5);
 8002914:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 8002918:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	440b      	add	r3, r1
 8002926:	2105      	movs	r1, #5
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fc89 	bl	8003240 <ADC_Mean>
 800292e:	4603      	mov	r3, r0
 8002930:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
							ADC_real = ADC_to_Volt(ADC_mid) * 11;
 8002934:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fca7 	bl	800328c <ADC_to_Volt>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	441a      	add	r2, r3
 8002946:	0052      	lsls	r2, r2, #1
 8002948:	4413      	add	r3, r2
 800294a:	f8a7 3316 	strh.w	r3, [r7, #790]	; 0x316
							itoa(ADC_real,(char *)&ADC_char, 10);
 800294e:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 8002952:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002956:	220a      	movs	r2, #10
 8002958:	4618      	mov	r0, r3
 800295a:	f00b f8ab 	bl	800dab4 <itoa>
							break;
 800295e:	bf00      	nop
						}


						// ЗАП�?СЫВАЕМ СТРОКУ ЗНАЧЕН�?Я АЦП/ТЕМПЕРАТУРЫ В СТРОКУ
						for(uint8_t j = 0; j < strlen((const char*)&ADC_char); j++){
 8002960:	2300      	movs	r3, #0
 8002962:	f887 3328 	strb.w	r3, [r7, #808]	; 0x328
 8002966:	e01c      	b.n	80029a2 <StartControlTask+0x982>
							datastring[i].buf[adc_str_count] = ADC_char[j];
 8002968:	f897 3328 	ldrb.w	r3, [r7, #808]	; 0x328
 800296c:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002970:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 8002974:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002978:	5cc4      	ldrb	r4, [r0, r3]
 800297a:	4879      	ldr	r0, [pc, #484]	; (8002b60 <StartControlTask+0xb40>)
 800297c:	4613      	mov	r3, r2
 800297e:	015b      	lsls	r3, r3, #5
 8002980:	4413      	add	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	4403      	add	r3, r0
 8002988:	440b      	add	r3, r1
 800298a:	4622      	mov	r2, r4
 800298c:	701a      	strb	r2, [r3, #0]
							adc_str_count++;
 800298e:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 8002992:	3301      	adds	r3, #1
 8002994:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
						for(uint8_t j = 0; j < strlen((const char*)&ADC_char); j++){
 8002998:	f897 3328 	ldrb.w	r3, [r7, #808]	; 0x328
 800299c:	3301      	adds	r3, #1
 800299e:	f887 3328 	strb.w	r3, [r7, #808]	; 0x328
 80029a2:	f897 4328 	ldrb.w	r4, [r7, #808]	; 0x328
 80029a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fc10 	bl	80001d0 <strlen>
 80029b0:	4603      	mov	r3, r0
 80029b2:	429c      	cmp	r4, r3
 80029b4:	d3d8      	bcc.n	8002968 <StartControlTask+0x948>
						}
						adc_count++;
 80029b6:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 80029ba:	3301      	adds	r3, #1
 80029bc:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
					while(adc_count < 5){
 80029c0:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	f67f aeb9 	bls.w	800273c <StartControlTask+0x71c>
					}
					break;
 80029ca:	e177      	b.n	8002cbc <StartControlTask+0xc9c>

				/*- - - - - - - - - Строка_№5_(ОПТОПАРЫ) - - - - - - - -*/
					case ctrl_string_5:
						for(uint8_t j = 0; j < string_size; j++){
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3327 	strb.w	r3, [r7, #807]	; 0x327
 80029d2:	e012      	b.n	80029fa <StartControlTask+0x9da>
							datastring[i].buf[j] = '\0';
 80029d4:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 80029d8:	f897 1327 	ldrb.w	r1, [r7, #807]	; 0x327
 80029dc:	4860      	ldr	r0, [pc, #384]	; (8002b60 <StartControlTask+0xb40>)
 80029de:	4613      	mov	r3, r2
 80029e0:	015b      	lsls	r3, r3, #5
 80029e2:	4413      	add	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	4403      	add	r3, r0
 80029ea:	440b      	add	r3, r1
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
						for(uint8_t j = 0; j < string_size; j++){
 80029f0:	f897 3327 	ldrb.w	r3, [r7, #807]	; 0x327
 80029f4:	3301      	adds	r3, #1
 80029f6:	f887 3327 	strb.w	r3, [r7, #807]	; 0x327
 80029fa:	f897 3327 	ldrb.w	r3, [r7, #807]	; 0x327
 80029fe:	2b3b      	cmp	r3, #59	; 0x3b
 8002a00:	d9e8      	bls.n	80029d4 <StartControlTask+0x9b4>
						}
						datastring[i].number = i;
 8002a02:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002a06:	4956      	ldr	r1, [pc, #344]	; (8002b60 <StartControlTask+0xb40>)
 8002a08:	4613      	mov	r3, r2
 8002a0a:	015b      	lsls	r3, r3, #5
 8002a0c:	4413      	add	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	333c      	adds	r3, #60	; 0x3c
 8002a16:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002a1a:	701a      	strb	r2, [r3, #0]
						adc_count = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
						adc_str_count = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

						while(adc_str_count < 6){
 8002a28:	e031      	b.n	8002a8e <StartControlTask+0xa6e>
							datastring[i].buf[adc_count] = (uint8_t)'O';
 8002a2a:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002a2e:	f897 1332 	ldrb.w	r1, [r7, #818]	; 0x332
 8002a32:	484b      	ldr	r0, [pc, #300]	; (8002b60 <StartControlTask+0xb40>)
 8002a34:	4613      	mov	r3, r2
 8002a36:	015b      	lsls	r3, r3, #5
 8002a38:	4413      	add	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	4403      	add	r3, r0
 8002a40:	440b      	add	r3, r1
 8002a42:	224f      	movs	r2, #79	; 0x4f
 8002a44:	701a      	strb	r2, [r3, #0]
							adc_count++;
 8002a46:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
							datastring[i].buf[adc_count] = opt_buf[adc_str_count] + 48;
 8002a50:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 8002a54:	f107 0214 	add.w	r2, r7, #20
 8002a58:	5cd3      	ldrb	r3, [r2, r3]
 8002a5a:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002a5e:	f897 1332 	ldrb.w	r1, [r7, #818]	; 0x332
 8002a62:	3330      	adds	r3, #48	; 0x30
 8002a64:	b2dc      	uxtb	r4, r3
 8002a66:	483e      	ldr	r0, [pc, #248]	; (8002b60 <StartControlTask+0xb40>)
 8002a68:	4613      	mov	r3, r2
 8002a6a:	015b      	lsls	r3, r3, #5
 8002a6c:	4413      	add	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	4403      	add	r3, r0
 8002a74:	440b      	add	r3, r1
 8002a76:	4622      	mov	r2, r4
 8002a78:	701a      	strb	r2, [r3, #0]
							adc_count++;
 8002a7a:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
							adc_str_count++;
 8002a84:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
						while(adc_str_count < 6){
 8002a8e:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d9c9      	bls.n	8002a2a <StartControlTask+0xa0a>
						}
						break;
 8002a96:	e111      	b.n	8002cbc <StartControlTask+0xc9c>
				/*- - - - - - - - - Строка_№6_(UP_time) - - - - - - - -*/
					case ctrl_string_6:
						for(uint8_t j = 0; j < string_size; j++){
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3326 	strb.w	r3, [r7, #806]	; 0x326
 8002a9e:	e012      	b.n	8002ac6 <StartControlTask+0xaa6>
							datastring[i].buf[j] = '\0';
 8002aa0:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002aa4:	f897 1326 	ldrb.w	r1, [r7, #806]	; 0x326
 8002aa8:	482d      	ldr	r0, [pc, #180]	; (8002b60 <StartControlTask+0xb40>)
 8002aaa:	4613      	mov	r3, r2
 8002aac:	015b      	lsls	r3, r3, #5
 8002aae:	4413      	add	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	4403      	add	r3, r0
 8002ab6:	440b      	add	r3, r1
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
						for(uint8_t j = 0; j < string_size; j++){
 8002abc:	f897 3326 	ldrb.w	r3, [r7, #806]	; 0x326
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f887 3326 	strb.w	r3, [r7, #806]	; 0x326
 8002ac6:	f897 3326 	ldrb.w	r3, [r7, #806]	; 0x326
 8002aca:	2b3b      	cmp	r3, #59	; 0x3b
 8002acc:	d9e8      	bls.n	8002aa0 <StartControlTask+0xa80>
						}
						adc_count = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
						datastring[i].buf[adc_count] = (uint8_t)'U';
 8002ad4:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002ad8:	f897 1332 	ldrb.w	r1, [r7, #818]	; 0x332
 8002adc:	4820      	ldr	r0, [pc, #128]	; (8002b60 <StartControlTask+0xb40>)
 8002ade:	4613      	mov	r3, r2
 8002ae0:	015b      	lsls	r3, r3, #5
 8002ae2:	4413      	add	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4403      	add	r3, r0
 8002aea:	440b      	add	r3, r1
 8002aec:	2255      	movs	r2, #85	; 0x55
 8002aee:	701a      	strb	r2, [r3, #0]
						adc_count++;
 8002af0:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 8002af4:	3301      	adds	r3, #1
 8002af6:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
						datastring[i].buf[adc_count] = (uint8_t)'P';
 8002afa:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002afe:	f897 1332 	ldrb.w	r1, [r7, #818]	; 0x332
 8002b02:	4817      	ldr	r0, [pc, #92]	; (8002b60 <StartControlTask+0xb40>)
 8002b04:	4613      	mov	r3, r2
 8002b06:	015b      	lsls	r3, r3, #5
 8002b08:	4413      	add	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	4403      	add	r3, r0
 8002b10:	440b      	add	r3, r1
 8002b12:	2250      	movs	r2, #80	; 0x50
 8002b14:	701a      	strb	r2, [r3, #0]
						adc_count++;
 8002b16:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
						datastring[i].buf[adc_count] = (uint8_t)'T';
 8002b20:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002b24:	f897 1332 	ldrb.w	r1, [r7, #818]	; 0x332
 8002b28:	480d      	ldr	r0, [pc, #52]	; (8002b60 <StartControlTask+0xb40>)
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	015b      	lsls	r3, r3, #5
 8002b2e:	4413      	add	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	4403      	add	r3, r0
 8002b36:	440b      	add	r3, r1
 8002b38:	2254      	movs	r2, #84	; 0x54
 8002b3a:	701a      	strb	r2, [r3, #0]
						adc_count++;
 8002b3c:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 8002b40:	3301      	adds	r3, #1
 8002b42:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332

						itoa(uptime_tick,up_time_char,10);
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <StartControlTask+0xb44>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	220a      	movs	r2, #10
 8002b52:	4619      	mov	r1, r3
 8002b54:	f00a ffae 	bl	800dab4 <itoa>

						for(uint8_t j = 0; j < strlen(up_time_char); j++){
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 3325 	strb.w	r3, [r7, #805]	; 0x325
 8002b5e:	e020      	b.n	8002ba2 <StartControlTask+0xb82>
 8002b60:	20006b48 	.word	0x20006b48
 8002b64:	20001294 	.word	0x20001294
							datastring[i].buf[adc_count] = up_time_char[j];
 8002b68:	f897 3325 	ldrb.w	r3, [r7, #805]	; 0x325
 8002b6c:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002b70:	f897 1332 	ldrb.w	r1, [r7, #818]	; 0x332
 8002b74:	f107 001c 	add.w	r0, r7, #28
 8002b78:	5cc4      	ldrb	r4, [r0, r3]
 8002b7a:	48e7      	ldr	r0, [pc, #924]	; (8002f18 <StartControlTask+0xef8>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	015b      	lsls	r3, r3, #5
 8002b80:	4413      	add	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	4403      	add	r3, r0
 8002b88:	440b      	add	r3, r1
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	701a      	strb	r2, [r3, #0]
							adc_count++;
 8002b8e:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 8002b92:	3301      	adds	r3, #1
 8002b94:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
						for(uint8_t j = 0; j < strlen(up_time_char); j++){
 8002b98:	f897 3325 	ldrb.w	r3, [r7, #805]	; 0x325
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f887 3325 	strb.w	r3, [r7, #805]	; 0x325
 8002ba2:	f897 4325 	ldrb.w	r4, [r7, #805]	; 0x325
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fb10 	bl	80001d0 <strlen>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	429c      	cmp	r4, r3
 8002bb4:	d3d8      	bcc.n	8002b68 <StartControlTask+0xb48>
						}
						break;
 8002bb6:	e081      	b.n	8002cbc <StartControlTask+0xc9c>
					/*- - - - - - - - - Строка_№8_(ADC) - - - - - - - -*/
					case ctrl_string_8:
						for(uint8_t j = 0; j < string_size; j++){
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 3324 	strb.w	r3, [r7, #804]	; 0x324
 8002bbe:	e012      	b.n	8002be6 <StartControlTask+0xbc6>
							datastring[i].buf[j] = '\0';
 8002bc0:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002bc4:	f897 1324 	ldrb.w	r1, [r7, #804]	; 0x324
 8002bc8:	48d3      	ldr	r0, [pc, #844]	; (8002f18 <StartControlTask+0xef8>)
 8002bca:	4613      	mov	r3, r2
 8002bcc:	015b      	lsls	r3, r3, #5
 8002bce:	4413      	add	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4403      	add	r3, r0
 8002bd6:	440b      	add	r3, r1
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
						for(uint8_t j = 0; j < string_size; j++){
 8002bdc:	f897 3324 	ldrb.w	r3, [r7, #804]	; 0x324
 8002be0:	3301      	adds	r3, #1
 8002be2:	f887 3324 	strb.w	r3, [r7, #804]	; 0x324
 8002be6:	f897 3324 	ldrb.w	r3, [r7, #804]	; 0x324
 8002bea:	2b3b      	cmp	r3, #59	; 0x3b
 8002bec:	d9e8      	bls.n	8002bc0 <StartControlTask+0xba0>
						}
						adc_count = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
						adc_str_count = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

						while(adc_count < 5){
 8002bfa:	e05a      	b.n	8002cb2 <StartControlTask+0xc92>
							datastring[i].buf[adc_str_count] = 'A';
 8002bfc:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002c00:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 8002c04:	48c4      	ldr	r0, [pc, #784]	; (8002f18 <StartControlTask+0xef8>)
 8002c06:	4613      	mov	r3, r2
 8002c08:	015b      	lsls	r3, r3, #5
 8002c0a:	4413      	add	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	4403      	add	r3, r0
 8002c12:	440b      	add	r3, r1
 8002c14:	2241      	movs	r2, #65	; 0x41
 8002c16:	701a      	strb	r2, [r3, #0]
							adc_str_count++;
 8002c18:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

							ADC_mid = ADC_Mean(ADC_statistics[adc_count], 5);
 8002c22:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 8002c26:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	440b      	add	r3, r1
 8002c34:	2105      	movs	r1, #5
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fb02 	bl	8003240 <ADC_Mean>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

							itoa(ADC_mid,(char *)&ADC_char, 10);
 8002c42:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 8002c46:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002c4a:	220a      	movs	r2, #10
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f00a ff31 	bl	800dab4 <itoa>

							// ЗАП�?СЫВАЕМ СТРОКУ ЗНАЧЕН�?Я АЦП/ТЕМПЕРАТУРЫ В СТРОКУ
							for(uint8_t j = 0; j < strlen((const char*)&ADC_char); j++){
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 3323 	strb.w	r3, [r7, #803]	; 0x323
 8002c58:	e01c      	b.n	8002c94 <StartControlTask+0xc74>
								datastring[i].buf[adc_str_count] = ADC_char[j];
 8002c5a:	f897 3323 	ldrb.w	r3, [r7, #803]	; 0x323
 8002c5e:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 8002c62:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 8002c66:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002c6a:	5cc4      	ldrb	r4, [r0, r3]
 8002c6c:	48aa      	ldr	r0, [pc, #680]	; (8002f18 <StartControlTask+0xef8>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	015b      	lsls	r3, r3, #5
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	4403      	add	r3, r0
 8002c7a:	440b      	add	r3, r1
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	701a      	strb	r2, [r3, #0]
								adc_str_count++;
 8002c80:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 8002c84:	3301      	adds	r3, #1
 8002c86:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
							for(uint8_t j = 0; j < strlen((const char*)&ADC_char); j++){
 8002c8a:	f897 3323 	ldrb.w	r3, [r7, #803]	; 0x323
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f887 3323 	strb.w	r3, [r7, #803]	; 0x323
 8002c94:	f897 4323 	ldrb.w	r4, [r7, #803]	; 0x323
 8002c98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fa97 	bl	80001d0 <strlen>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	429c      	cmp	r4, r3
 8002ca6:	d3d8      	bcc.n	8002c5a <StartControlTask+0xc3a>
							}

							adc_count++;
 8002ca8:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 8002cac:	3301      	adds	r3, #1
 8002cae:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
						while(adc_count < 5){
 8002cb2:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d9a0      	bls.n	8002bfc <StartControlTask+0xbdc>
						}
						break;
 8002cba:	bf00      	nop
			for(uint8_t i = start_ctrl_string; i < start_serv_string; i++){
 8002cbc:	f897 332e 	ldrb.w	r3, [r7, #814]	; 0x32e
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f887 332e 	strb.w	r3, [r7, #814]	; 0x32e
 8002cc6:	f897 332e 	ldrb.w	r3, [r7, #814]	; 0x32e
 8002cca:	2b9a      	cmp	r3, #154	; 0x9a
 8002ccc:	f67f ab64 	bls.w	8002398 <StartControlTask+0x378>
				}
			}

	/*-------------------- СОБ�?РАЕМ МАСС�?В ДЛЯ ОТПРАВК�? ----------------------*/

			for(uint32_t i = 0; i < ctrl_string_amnt*string_size; i++){
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8002cd6:	e00b      	b.n	8002cf0 <StartControlTask+0xcd0>
				sendBuf[i] = '\0';
 8002cd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002cdc:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002ce0:	4413      	add	r3, r2
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
			for(uint32_t i = 0; i < ctrl_string_amnt*string_size; i++){
 8002ce6:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002cea:	3301      	adds	r3, #1
 8002cec:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8002cf0:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002cf4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002cf8:	d3ee      	bcc.n	8002cd8 <StartControlTask+0xcb8>
			}

			sB_pointer = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342

			// ВНАЧАЛЕ БЛОК КОДА ПЕРЕД Ц�?КЛОМ ЗАП�?СЫВАЕТ СТАРОТОВУЮ КОМБ�?НАЦ�?Ю В ОТПРАВЛЯЕМЫЙ БУФЕР
			sendBuf[sB_pointer] = 'P';
 8002d00:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d08:	2150      	movs	r1, #80	; 0x50
 8002d0a:	54d1      	strb	r1, [r2, r3]
			sB_pointer++;
 8002d0c:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d10:	3301      	adds	r3, #1
 8002d12:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342
			sendBuf[sB_pointer] = 'S';
 8002d16:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d1e:	2153      	movs	r1, #83	; 0x53
 8002d20:	54d1      	strb	r1, [r2, r3]
			sB_pointer++;
 8002d22:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d26:	3301      	adds	r3, #1
 8002d28:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342
			sendBuf[sB_pointer] = 'D';
 8002d2c:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d34:	2144      	movs	r1, #68	; 0x44
 8002d36:	54d1      	strb	r1, [r2, r3]
			sB_pointer++;
 8002d38:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342
			sendBuf[sB_pointer] = ';';
 8002d42:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d46:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d4a:	213b      	movs	r1, #59	; 0x3b
 8002d4c:	54d1      	strb	r1, [r2, r3]
			sB_pointer++;
 8002d4e:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d52:	3301      	adds	r3, #1
 8002d54:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342

			crc_count = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8a7 3346 	strh.w	r3, [r7, #838]	; 0x346

			// Ц�?КЛЫ ЗАП�?СЫВАЕТ КАЖДУЮ СТРОКУ КОНТРОЛЯ В МАСС�?В �? ПР�?СВАЕВАЕТ СТРОКЕ НОВЫЙ НОМЕР
			for(uint8_t i = start_ctrl_string; i < start_serv_string; i++){
 8002d5e:	2391      	movs	r3, #145	; 0x91
 8002d60:	f887 331b 	strb.w	r3, [r7, #795]	; 0x31b
 8002d64:	e07b      	b.n	8002e5e <StartControlTask+0xe3e>
				sB_counter = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 3341 	strb.w	r3, [r7, #833]	; 0x341

				// ЗАП�?СЫВАЕМ НОМЕР, Т.К СОСТО�?Т �?З 2-Х Ц�?ФР, А В МОЕМ СЛУЧАЕ
				// �?СПОЛЬЗУЮТСЯ ОДНОЗНАЧНЫЕ Ч�?СЛА, ЗАП�?СЫВАЕМ ПЕРВЫМ 0
				sendBuf[sB_pointer] = '0';
 8002d6c:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d74:	2130      	movs	r1, #48	; 0x30
 8002d76:	54d1      	strb	r1, [r2, r3]

				// ЭТОТ СЧЕТЧ�?К ОТСЧ�?ТЫВАЕТ КОЛ�?ЧЕСТВО С�?МВОЛОВ ДЛЯ РАСЧЕТА CRC
				crc_count++;
 8002d78:	f8b7 3346 	ldrh.w	r3, [r7, #838]	; 0x346
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f8a7 3346 	strh.w	r3, [r7, #838]	; 0x346

				sB_pointer++;
 8002d82:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d86:	3301      	adds	r3, #1
 8002d88:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342

				// ЗАП�?СЫВАЕМ НОМЕР СТРОК�?, НАЧ�?НАЕТСЯ С 1 �? ДО 4
				sendBuf[sB_pointer] = (i - start_ctrl_string + 1) + 48; 		// + 48 - ПЕРЕВОД�?Т �?З INT В CHAR
 8002d8c:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002d90:	f897 231b 	ldrb.w	r2, [r7, #795]	; 0x31b
 8002d94:	3a60      	subs	r2, #96	; 0x60
 8002d96:	b2d1      	uxtb	r1, r2
 8002d98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d9c:	54d1      	strb	r1, [r2, r3]
				crc_count++;
 8002d9e:	f8b7 3346 	ldrh.w	r3, [r7, #838]	; 0x346
 8002da2:	3301      	adds	r3, #1
 8002da4:	f8a7 3346 	strh.w	r3, [r7, #838]	; 0x346
				sB_pointer++;
 8002da8:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002dac:	3301      	adds	r3, #1
 8002dae:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342

				// ПОСЛЕ НОМЕРА СТРОК�? ЗАП�?ШЕМ ';'
				sendBuf[sB_pointer] = ';';
 8002db2:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002db6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dba:	213b      	movs	r1, #59	; 0x3b
 8002dbc:	54d1      	strb	r1, [r2, r3]
				crc_count++;
 8002dbe:	f8b7 3346 	ldrh.w	r3, [r7, #838]	; 0x346
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f8a7 3346 	strh.w	r3, [r7, #838]	; 0x346
				sB_pointer++;
 8002dc8:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342

				// В ДАННОМ Ц�?КЛЕ ЗАП�?СЫВАЕТСЯ СОДЕРЖ�?МОЕ СТРОК�?, ПОКА СТРОКА НЕ ЗАКОНЧ�?ТСЯ
				while(datastring[i].buf[sB_counter] != '\0'){
 8002dd2:	e020      	b.n	8002e16 <StartControlTask+0xdf6>
					sendBuf[sB_pointer] = datastring[i].buf[sB_counter];
 8002dd4:	f897 231b 	ldrb.w	r2, [r7, #795]	; 0x31b
 8002dd8:	f897 0341 	ldrb.w	r0, [r7, #833]	; 0x341
 8002ddc:	f8b7 1342 	ldrh.w	r1, [r7, #834]	; 0x342
 8002de0:	4c4d      	ldr	r4, [pc, #308]	; (8002f18 <StartControlTask+0xef8>)
 8002de2:	4613      	mov	r3, r2
 8002de4:	015b      	lsls	r3, r3, #5
 8002de6:	4413      	add	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	4423      	add	r3, r4
 8002dee:	4403      	add	r3, r0
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002df6:	545a      	strb	r2, [r3, r1]
					crc_count++;
 8002df8:	f8b7 3346 	ldrh.w	r3, [r7, #838]	; 0x346
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f8a7 3346 	strh.w	r3, [r7, #838]	; 0x346
					sB_counter++;
 8002e02:	f897 3341 	ldrb.w	r3, [r7, #833]	; 0x341
 8002e06:	3301      	adds	r3, #1
 8002e08:	f887 3341 	strb.w	r3, [r7, #833]	; 0x341
					sB_pointer++;
 8002e0c:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002e10:	3301      	adds	r3, #1
 8002e12:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342
				while(datastring[i].buf[sB_counter] != '\0'){
 8002e16:	f897 231b 	ldrb.w	r2, [r7, #795]	; 0x31b
 8002e1a:	f897 1341 	ldrb.w	r1, [r7, #833]	; 0x341
 8002e1e:	483e      	ldr	r0, [pc, #248]	; (8002f18 <StartControlTask+0xef8>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	015b      	lsls	r3, r3, #5
 8002e24:	4413      	add	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	4403      	add	r3, r0
 8002e2c:	440b      	add	r3, r1
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1cf      	bne.n	8002dd4 <StartControlTask+0xdb4>
				}

				// ОТДЕЛЯЕМ СТРКОУ ЗНАКОМ ';'
				sendBuf[sB_pointer] = ';';
 8002e34:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002e38:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e3c:	213b      	movs	r1, #59	; 0x3b
 8002e3e:	54d1      	strb	r1, [r2, r3]
				crc_count++;
 8002e40:	f8b7 3346 	ldrh.w	r3, [r7, #838]	; 0x346
 8002e44:	3301      	adds	r3, #1
 8002e46:	f8a7 3346 	strh.w	r3, [r7, #838]	; 0x346
				sB_pointer++;
 8002e4a:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342
			for(uint8_t i = start_ctrl_string; i < start_serv_string; i++){
 8002e54:	f897 331b 	ldrb.w	r3, [r7, #795]	; 0x31b
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f887 331b 	strb.w	r3, [r7, #795]	; 0x31b
 8002e5e:	f897 331b 	ldrb.w	r3, [r7, #795]	; 0x31b
 8002e62:	2b9a      	cmp	r3, #154	; 0x9a
 8002e64:	f67f af7f 	bls.w	8002d66 <StartControlTask+0xd46>
			}

			// КОГДА ВСЕ СТРОК�? ПЕРЕП�?САНЫ, ПОСЛЕ Н�?Х ЗАП�?СЫВАЕМ СТРОКУ "CRC"
			sendBuf[sB_pointer] = 'C';
 8002e68:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002e6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e70:	2143      	movs	r1, #67	; 0x43
 8002e72:	54d1      	strb	r1, [r2, r3]
			sB_pointer++;
 8002e74:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342
			sendBuf[sB_pointer] = 'R';
 8002e7e:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002e82:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e86:	2152      	movs	r1, #82	; 0x52
 8002e88:	54d1      	strb	r1, [r2, r3]
			sB_pointer++;
 8002e8a:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342
			sendBuf[sB_pointer] = 'C';
 8002e94:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002e98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e9c:	2143      	movs	r1, #67	; 0x43
 8002e9e:	54d1      	strb	r1, [r2, r3]
			sB_pointer++;
 8002ea0:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342
			sendBuf[sB_pointer] = ';';
 8002eaa:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002eae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002eb2:	213b      	movs	r1, #59	; 0x3b
 8002eb4:	54d1      	strb	r1, [r2, r3]
			sB_pointer++;
 8002eb6:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342

			// РАСЧ�?ТЫВАЕМ CRC32
			// *примечание_ДЛЯ РАСЧЕТА CRC32 В ДАННОМ СЛУЧАЕ НЕ �?СПОЛЬЗУЕТСЯ ОТДЕЛЬНЫЙ БУФЕР
			// 	ДАННЫЕ БЕРУТСЯ �?З ОТПРАВЛЯЕМОГО БУФЕРА, НО НЕ СНАЧАЛА, А ПРОПУСКАЯ 4 С�?МВОЛА "PSD;"
			//	�? ЗАКАНЧ�?ВАЯ ДО "СRC", Т.К �?СПОЛЬЗУЕТСЯ СЧЕТЧ�?К С�?МВОЛОВ crc_count
			crc32 = Crc32((const unsigned char *) &sendBuf + 4, crc_count);
 8002ec0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	f8b7 2346 	ldrh.w	r2, [r7, #838]	; 0x346
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd ffbb 	bl	8000e48 <Crc32>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310

			// ПЕРЕВОД�?М ЗНАЧЕН�?Е СRC32 В СТРОКУ (В HEX)
			itoa(crc32, (char *) &crc_hex_buf, 16);
 8002ed8:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8002edc:	2210      	movs	r2, #16
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f8d7 0310 	ldr.w	r0, [r7, #784]	; 0x310
 8002ee4:	f00a fde6 	bl	800dab4 <itoa>

			// ЗАП�?СЫВАЕМ ПОС�?МВОЛЬНО СТРОКОВОЕ ЗНАЧЕН�?Е CRC32
			for(uint8_t i = 0; i < 8; i++){
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 331a 	strb.w	r3, [r7, #794]	; 0x31a
 8002eee:	e030      	b.n	8002f52 <StartControlTask+0xf32>

				// Т.К itoa ПЕРЕВОД�?Т В HEX �?СПОЛЬЗУЯ МАЛЕНЬК�?Е БУКВЫ, МЕНЯЕМ �?Х НА БОЛЬШ�?Е. см_ФУНКУЮ BigLatter()
				if(8 - strlen((char*)&crc_hex_buf) > i){
 8002ef0:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd f96b 	bl	80001d0 <strlen>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f1c3 0208 	rsb	r2, r3, #8
 8002f00:	f897 331a 	ldrb.w	r3, [r7, #794]	; 0x31a
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d909      	bls.n	8002f1c <StartControlTask+0xefc>
					sendBuf[sB_pointer] = '0';
 8002f08:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002f0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f10:	2130      	movs	r1, #48	; 0x30
 8002f12:	54d1      	strb	r1, [r2, r3]
 8002f14:	e013      	b.n	8002f3e <StartControlTask+0xf1e>
 8002f16:	bf00      	nop
 8002f18:	20006b48 	.word	0x20006b48
				}
				else{
					sendBuf[sB_pointer] = BigLatter(crc_hex_buf[i]);
 8002f1c:	f897 331a 	ldrb.w	r3, [r7, #794]	; 0x31a
 8002f20:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002f24:	4413      	add	r3, r2
 8002f26:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8002f2a:	f8b7 4342 	ldrh.w	r4, [r7, #834]	; 0x342
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fc2c 	bl	800378c <BigLatter>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002f3c:	551a      	strb	r2, [r3, r4]
				}
				sB_pointer++;
 8002f3e:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002f42:	3301      	adds	r3, #1
 8002f44:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342
			for(uint8_t i = 0; i < 8; i++){
 8002f48:	f897 331a 	ldrb.w	r3, [r7, #794]	; 0x31a
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f887 331a 	strb.w	r3, [r7, #794]	; 0x31a
 8002f52:	f897 331a 	ldrb.w	r3, [r7, #794]	; 0x31a
 8002f56:	2b07      	cmp	r3, #7
 8002f58:	d9ca      	bls.n	8002ef0 <StartControlTask+0xed0>
			}

			// ЗАВЕРШАЕМ ПАКЕТ ';'
			sendBuf[sB_pointer] = ';';
 8002f5a:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002f5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f62:	213b      	movs	r1, #59	; 0x3b
 8002f64:	54d1      	strb	r1, [r2, r3]
			sB_pointer++;
 8002f66:	f8b7 3342 	ldrh.w	r3, [r7, #834]	; 0x342
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f8a7 3342 	strh.w	r3, [r7, #834]	; 0x342

			// ОТПРАВЛЯЕМ ПАКЕТ

			transmit_timer = HAL_GetTick();
 8002f70:	f002 fdf4 	bl	8005b5c <HAL_GetTick>
 8002f74:	f8c7 033c 	str.w	r0, [r7, #828]	; 0x33c
			HAL_UART_Transmit(&huart3,(uint8_t *) &sendBuf, sB_pointer, 0xFFFF); // ОТПРАВЛЯЕМ МАСС�?В
 8002f78:	f8b7 2342 	ldrh.w	r2, [r7, #834]	; 0x342
 8002f7c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f84:	4819      	ldr	r0, [pc, #100]	; (8002fec <StartControlTask+0xfcc>)
 8002f86:	f005 fd74 	bl	8008a72 <HAL_UART_Transmit>
			ADC_summ_count = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
		}

		if(HAL_GetTick() - flash_transmit_timer > transmit_time * 3 ||  flash_transmit_timer > HAL_GetTick()){
 8002f90:	f002 fde4 	bl	8005b5c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d806      	bhi.n	8002fb2 <StartControlTask+0xf92>
 8002fa4:	f002 fdda 	bl	8005b5c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d902      	bls.n	8002fb8 <StartControlTask+0xf98>
			flash_on = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f887 3344 	strb.w	r3, [r7, #836]	; 0x344

		}

/*------------ ОБРАБАТЫВАЕМ КНОПК�? ВЫКЛЮЧЕН�?Я �? ЗАП�?С�? FLASH --------------*/
		if(but_buf[3] && (HAL_GetTick() - power_butthold > OFF_delay || power_butthold > power_butthold)){
 8002fb8:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00f      	beq.n	8002fe0 <StartControlTask+0xfc0>
 8002fc0:	f002 fdcc 	bl	8005b5c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d905      	bls.n	8002fe0 <StartControlTask+0xfc0>
			PowerOFF(&active.DISP);												// КНОПКА ВЫКЛЮЧЕН�?Я
 8002fd4:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002fd8:	3305      	adds	r3, #5
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 faac 	bl	8003538 <PowerOFF>
		}

		osDelay(50);
 8002fe0:	2032      	movs	r0, #50	; 0x32
 8002fe2:	f008 fcf1 	bl	800b9c8 <osDelay>
		WDG_TackArr[2] = 1;
 8002fe6:	f7ff b8a1 	b.w	800212c <StartControlTask+0x10c>
 8002fea:	bf00      	nop
 8002fec:	200098a8 	.word	0x200098a8

08002ff0 <StartLEDsTask>:
 *				 	  ЗАДАЧА СВЕТОД�?ОДОВ		  		   *
 *														   *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* USER CODE END Header_StartLEDsTask */
void StartLEDsTask(void const * argument)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b0a8      	sub	sp, #160	; 0xa0
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDsTask */
	RGB_status RGB[3];											// RGB НА Л�?ЦЕВОЙ ПАНЕЛ�?

	// УСТАНАВЛ�?ВАЕМ П�?НЫ �? ПОРТЫ СВЕТОД�?ОДОВ
	//    *�?СПОЛЬЗУЕТСЯ НЕ const, ЧТО НЕ ЕСТЬ ХОРОШО, НО ПРОБЛЕМ БЫТЬ НЕ ДОЛЖНО
	RGB[0].RED.LED_port = RED_232_GPIO_Port;
 8002ff8:	4b61      	ldr	r3, [pc, #388]	; (8003180 <StartLEDsTask+0x190>)
 8002ffa:	60fb      	str	r3, [r7, #12]
	RGB[0].RED.LED_pin = RED_232_Pin;
 8002ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003000:	823b      	strh	r3, [r7, #16]
	RGB[0].GREEN.LED_port = GREEN_232_GPIO_Port;
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <StartLEDsTask+0x190>)
 8003004:	61fb      	str	r3, [r7, #28]
	RGB[0].GREEN.LED_pin = GREEN_232_Pin;
 8003006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800300a:	843b      	strh	r3, [r7, #32]
	RGB[0].BLUE.LED_port = BLUE_232_GPIO_Port;
 800300c:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <StartLEDsTask+0x190>)
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RGB[0].BLUE.LED_pin = BLUE_232_Pin;
 8003010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003014:	863b      	strh	r3, [r7, #48]	; 0x30

	RGB[1].RED.LED_port = RED_422_GPIO_Port;
 8003016:	4b5b      	ldr	r3, [pc, #364]	; (8003184 <StartLEDsTask+0x194>)
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
	RGB[1].RED.LED_pin = RED_422_Pin;
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	RGB[1].GREEN.LED_port = GREEN_422_GPIO_Port;
 8003020:	4b58      	ldr	r3, [pc, #352]	; (8003184 <StartLEDsTask+0x194>)
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
	RGB[1].GREEN.LED_pin = GREEN_422_Pin;
 8003024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003028:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	RGB[1].BLUE.LED_port = BLUE_422_GPIO_Port;
 800302c:	4b56      	ldr	r3, [pc, #344]	; (8003188 <StartLEDsTask+0x198>)
 800302e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RGB[1].BLUE.LED_pin = BLUE_422_Pin;
 8003030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003034:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

	RGB[2].RED.LED_port = RED_485_GPIO_Port;
 8003038:	4b51      	ldr	r3, [pc, #324]	; (8003180 <StartLEDsTask+0x190>)
 800303a:	66fb      	str	r3, [r7, #108]	; 0x6c
	RGB[2].RED.LED_pin = RED_485_Pin;
 800303c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003040:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	RGB[2].GREEN.LED_port = GREEN_485_GPIO_Port;
 8003044:	4b51      	ldr	r3, [pc, #324]	; (800318c <StartLEDsTask+0x19c>)
 8003046:	67fb      	str	r3, [r7, #124]	; 0x7c
	RGB[2].GREEN.LED_pin = GREEN_485_Pin;
 8003048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	RGB[2].BLUE.LED_port = BLUE_485_GPIO_Port;
 8003050:	4b4e      	ldr	r3, [pc, #312]	; (800318c <StartLEDsTask+0x19c>)
 8003052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RGB[2].BLUE.LED_pin = BLUE_485_Pin;
 8003056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800305a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

	// УКАЗАТЕЛЬ НА ОТДЕЛЬНЫЙ СВЕТОД�?ОД С ЕГО ДАННЫМ�? (РЕЖ�?МОМ М�?ГАН�?Я, П�?НОМ)
	led_status *oneLED;

	// ЗАДЕРЖКА ПР�? ВКЛЮЧЕН�?�? ПОКА �?Н�?Ц�?АЛ�?З�?РУЕТСЯ Д�?СПЛЕЙ
	osDelay(500);
 800305e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003062:	f008 fcb1 	bl	800b9c8 <osDelay>

	for(;;)
	{
		WDG_TackArr[3] = 1;
 8003066:	4b4a      	ldr	r3, [pc, #296]	; (8003190 <StartLEDsTask+0x1a0>)
 8003068:	2201      	movs	r2, #1
 800306a:	70da      	strb	r2, [r3, #3]

		// ПАРС�?М СТРОКУ СВЕТОД�?ОДОВ
		LEDStringPars((string_t *)&datastring,(RGB_status *) &RGB);
 800306c:	f107 0308 	add.w	r3, r7, #8
 8003070:	4619      	mov	r1, r3
 8003072:	4848      	ldr	r0, [pc, #288]	; (8003194 <StartLEDsTask+0x1a4>)
 8003074:	f001 fbc2 	bl	80047fc <LEDStringPars>



		// ОБРАБАТЫВАЕМ КАЖДЫЙ RGB (3)
		for(uint8_t i = 0; i < 3; i++){
 8003078:	2300      	movs	r3, #0
 800307a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800307e:	e077      	b.n	8003170 <StartLEDsTask+0x180>

			// ОБРАБАТЫВАЕМ КАЖДЫЙ СВЕТОД�?ОД В RGB
			for(uint8_t j = 0; j < 3; j++){
 8003080:	2300      	movs	r3, #0
 8003082:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8003086:	e06a      	b.n	800315e <StartLEDsTask+0x16e>

				// ВЫБ�?РАЕМ СВЕТОД�?ОД УКАЗЫВАЯ НА НУЖНЫЙ
				switch (j){
 8003088:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800308c:	2b01      	cmp	r3, #1
 800308e:	d00f      	beq.n	80030b0 <StartLEDsTask+0xc0>
 8003090:	2b02      	cmp	r3, #2
 8003092:	d01a      	beq.n	80030ca <StartLEDsTask+0xda>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d125      	bne.n	80030e4 <StartLEDsTask+0xf4>
				case 0: oneLED = &RGB[i].RED;   break;
 8003098:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 800309c:	f107 0108 	add.w	r1, r7, #8
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	440b      	add	r3, r1
 80030aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030ae:	e019      	b.n	80030e4 <StartLEDsTask+0xf4>
				case 1: oneLED = &RGB[i].BLUE;  break;
 80030b0:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80030b4:	f107 0108 	add.w	r1, r7, #8
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	3320      	adds	r3, #32
 80030c2:	440b      	add	r3, r1
 80030c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030c8:	e00c      	b.n	80030e4 <StartLEDsTask+0xf4>
				case 2: oneLED = &RGB[i].GREEN; break;
 80030ca:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80030ce:	f107 0108 	add.w	r1, r7, #8
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	3310      	adds	r3, #16
 80030dc:	440b      	add	r3, r1
 80030de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030e2:	bf00      	nop
				}

				// УСТАНАВЛ�?ВАЕМ РЕЖ�?М М�?ГАН�?Я СВЕТОД�?ОДОМ
				//    *�?СПОЛЬЗУЕТ uint32_t ДЛЯ ХРАНЕН�?Я ПЕРЕМЕННОЙ ВРЕМЕН�? ДЛЯ КАЖДОГО СВЕТОД�?ОДА
				//     МОЖЕТ БЫТЬ ОПТ�?М�?З�?РОВАНО ПО ПАМЯТ�? ДЛЯ КАЖДОГО РЕЖ�?МА, ЧТО С�?ЛЬНО УМЕНЬШ�?Т ПАМЯТЬ
				switch (oneLED->LED_status)
 80030e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	3b30      	subs	r3, #48	; 0x30
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d831      	bhi.n	8003154 <StartLEDsTask+0x164>
 80030f0:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <StartLEDsTask+0x108>)
 80030f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f6:	bf00      	nop
 80030f8:	0800310d 	.word	0x0800310d
 80030fc:	0800311b 	.word	0x0800311b
 8003100:	08003129 	.word	0x08003129
 8003104:	08003137 	.word	0x08003137
 8003108:	08003145 	.word	0x08003145
				{
				case (uint8_t)'0': LED_control(oneLED,0,1); 	break;
 800310c:	2201      	movs	r2, #1
 800310e:	2100      	movs	r1, #0
 8003110:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003114:	f000 ff4c 	bl	8003fb0 <LED_control>
 8003118:	e01c      	b.n	8003154 <StartLEDsTask+0x164>
				case (uint8_t)'1': LED_control(oneLED,1,0); 	break;
 800311a:	2200      	movs	r2, #0
 800311c:	2101      	movs	r1, #1
 800311e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003122:	f000 ff45 	bl	8003fb0 <LED_control>
 8003126:	e015      	b.n	8003154 <StartLEDsTask+0x164>
				case (uint8_t)'2': LED_control(oneLED,50,100);  break;
 8003128:	2264      	movs	r2, #100	; 0x64
 800312a:	2132      	movs	r1, #50	; 0x32
 800312c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003130:	f000 ff3e 	bl	8003fb0 <LED_control>
 8003134:	e00e      	b.n	8003154 <StartLEDsTask+0x164>
				case (uint8_t)'3': LED_control(oneLED,200,200); break;
 8003136:	22c8      	movs	r2, #200	; 0xc8
 8003138:	21c8      	movs	r1, #200	; 0xc8
 800313a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800313e:	f000 ff37 	bl	8003fb0 <LED_control>
 8003142:	e007      	b.n	8003154 <StartLEDsTask+0x164>
				case (uint8_t)'4': LED_control(oneLED,50,500);  break;
 8003144:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003148:	2132      	movs	r1, #50	; 0x32
 800314a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800314e:	f000 ff2f 	bl	8003fb0 <LED_control>
 8003152:	bf00      	nop
			for(uint8_t j = 0; j < 3; j++){
 8003154:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8003158:	3301      	adds	r3, #1
 800315a:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 800315e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8003162:	2b02      	cmp	r3, #2
 8003164:	d990      	bls.n	8003088 <StartLEDsTask+0x98>
		for(uint8_t i = 0; i < 3; i++){
 8003166:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800316a:	3301      	adds	r3, #1
 800316c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8003170:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8003174:	2b02      	cmp	r3, #2
 8003176:	d983      	bls.n	8003080 <StartLEDsTask+0x90>
				}
			}
		}

		osDelay(10);
 8003178:	200a      	movs	r0, #10
 800317a:	f008 fc25 	bl	800b9c8 <osDelay>
		WDG_TackArr[3] = 1;
 800317e:	e772      	b.n	8003066 <StartLEDsTask+0x76>
 8003180:	40020c00 	.word	0x40020c00
 8003184:	40020800 	.word	0x40020800
 8003188:	40020000 	.word	0x40020000
 800318c:	40020400 	.word	0x40020400
 8003190:	2000109c 	.word	0x2000109c
 8003194:	20006b48 	.word	0x20006b48

08003198 <UPTIME_IRQHandler>:
/* USER CODE BEGIN Application */

/*
 * ОБРАБОТЧ�?К ПРЕРЫВАН�?Й ТАЙМЕРА UPTIME
 */
void UPTIME_IRQHandler(){
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
	uptime_tick++;
 800319c:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <UPTIME_IRQHandler+0x18>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	4a03      	ldr	r2, [pc, #12]	; (80031b0 <UPTIME_IRQHandler+0x18>)
 80031a4:	6013      	str	r3, [r2, #0]
}
 80031a6:	bf00      	nop
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	20001294 	.word	0x20001294

080031b4 <WDG_tim13_Handler>:

void WDG_tim13_Handler(){
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0


	if(WDG_TackArr[0] && WDG_TackArr[1] && WDG_TackArr[2] && WDG_TackArr[3]){
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <WDG_tim13_Handler+0x80>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d021      	beq.n	8003204 <WDG_tim13_Handler+0x50>
 80031c0:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <WDG_tim13_Handler+0x80>)
 80031c2:	785b      	ldrb	r3, [r3, #1]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01d      	beq.n	8003204 <WDG_tim13_Handler+0x50>
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <WDG_tim13_Handler+0x80>)
 80031ca:	789b      	ldrb	r3, [r3, #2]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d019      	beq.n	8003204 <WDG_tim13_Handler+0x50>
 80031d0:	4b18      	ldr	r3, [pc, #96]	; (8003234 <WDG_tim13_Handler+0x80>)
 80031d2:	78db      	ldrb	r3, [r3, #3]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <WDG_tim13_Handler+0x50>
		HAL_GPIO_WritePin(SYM_LED_G_GPIO_Port, SYM_LED_G_Pin, GPIO_PIN_SET);
 80031d8:	2201      	movs	r2, #1
 80031da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031de:	4816      	ldr	r0, [pc, #88]	; (8003238 <WDG_tim13_Handler+0x84>)
 80031e0:	f004 f8bc 	bl	800735c <HAL_GPIO_WritePin>
		WDG_TackArr[0] = 0;
 80031e4:	4b13      	ldr	r3, [pc, #76]	; (8003234 <WDG_tim13_Handler+0x80>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
		WDG_TackArr[1] = 0;
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <WDG_tim13_Handler+0x80>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	705a      	strb	r2, [r3, #1]
		WDG_TackArr[2] = 0;
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <WDG_tim13_Handler+0x80>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	709a      	strb	r2, [r3, #2]
		WDG_TackArr[3] = 0;
 80031f6:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <WDG_tim13_Handler+0x80>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	70da      	strb	r2, [r3, #3]
		HAL_IWDG_Refresh(&hiwdg);
 80031fc:	480f      	ldr	r0, [pc, #60]	; (800323c <WDG_tim13_Handler+0x88>)
 80031fe:	f004 fa52 	bl	80076a6 <HAL_IWDG_Refresh>
 8003202:	e005      	b.n	8003210 <WDG_tim13_Handler+0x5c>
	}
	else HAL_GPIO_WritePin(SYM_LED_B_GPIO_Port, SYM_LED_B_Pin, GPIO_PIN_SET);
 8003204:	2201      	movs	r2, #1
 8003206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800320a:	480b      	ldr	r0, [pc, #44]	; (8003238 <WDG_tim13_Handler+0x84>)
 800320c:	f004 f8a6 	bl	800735c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003210:	2001      	movs	r0, #1
 8003212:	f002 fcaf 	bl	8005b74 <HAL_Delay>
	HAL_GPIO_WritePin(SYM_LED_G_GPIO_Port, SYM_LED_G_Pin, GPIO_PIN_RESET);
 8003216:	2200      	movs	r2, #0
 8003218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800321c:	4806      	ldr	r0, [pc, #24]	; (8003238 <WDG_tim13_Handler+0x84>)
 800321e:	f004 f89d 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SYM_LED_B_GPIO_Port, SYM_LED_B_Pin, GPIO_PIN_RESET);
 8003222:	2200      	movs	r2, #0
 8003224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003228:	4803      	ldr	r0, [pc, #12]	; (8003238 <WDG_tim13_Handler+0x84>)
 800322a:	f004 f897 	bl	800735c <HAL_GPIO_WritePin>
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	2000109c 	.word	0x2000109c
 8003238:	40020400 	.word	0x40020400
 800323c:	2000964c 	.word	0x2000964c

08003240 <ADC_Mean>:
	}

	return data;
}

uint16_t ADC_Mean(uint16_t* ADC_arr, uint8_t len){
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	70fb      	strb	r3, [r7, #3]
	uint16_t ADC_mean = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++){
 8003250:	2300      	movs	r3, #0
 8003252:	737b      	strb	r3, [r7, #13]
 8003254:	e00a      	b.n	800326c <ADC_Mean+0x2c>
		ADC_mean += ADC_arr[i];
 8003256:	7b7b      	ldrb	r3, [r7, #13]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	4413      	add	r3, r2
 8003264:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++){
 8003266:	7b7b      	ldrb	r3, [r7, #13]
 8003268:	3301      	adds	r3, #1
 800326a:	737b      	strb	r3, [r7, #13]
 800326c:	7b7a      	ldrb	r2, [r7, #13]
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	429a      	cmp	r2, r3
 8003272:	d3f0      	bcc.n	8003256 <ADC_Mean+0x16>
	}

	return ADC_mean/len;
 8003274:	89fa      	ldrh	r2, [r7, #14]
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	fb92 f3f3 	sdiv	r3, r2, r3
 800327c:	b29b      	uxth	r3, r3
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <ADC_to_Volt>:


uint16_t ADC_to_Volt(uint16_t adc_val){
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	80fb      	strh	r3, [r7, #6]
	return (adc_val*330)/4095;
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	4a06      	ldr	r2, [pc, #24]	; (80032bc <ADC_to_Volt+0x30>)
 80032a2:	fb82 1203 	smull	r1, r2, r2, r3
 80032a6:	441a      	add	r2, r3
 80032a8:	12d2      	asrs	r2, r2, #11
 80032aa:	17db      	asrs	r3, r3, #31
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	b29b      	uxth	r3, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	80080081 	.word	0x80080081

080032c0 <ADC_Read12vHandler>:

void ADC_Read12vHandler(){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032c6:	f3ef 8211 	mrs	r2, BASEPRI
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	60ba      	str	r2, [r7, #8]
 80032dc:	607b      	str	r3, [r7, #4]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032de:	68bb      	ldr	r3, [r7, #8]

	// ПРОВЕРЯЕМ УСЛОВ�?Е, ЧТО П�?ТАН�?Е 12 В
	// ЕСЛ�? ДА, ТО ПРОДОЛЖАЕМ
	// ЕСЛ�? НЕТ, ТО ВКЛЮЧАЕМ ЗУМЕРЫ В Ц�?КЛЕ

	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR ();
 80032e0:	60fb      	str	r3, [r7, #12]

	if(ADC_val[4] < Low12vThreshold || ADC_val[4] > High12vThreshold){
 80032e2:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <ADC_Read12vHandler+0xd4>)
 80032e4:	891b      	ldrh	r3, [r3, #8]
 80032e6:	f240 525b 	movw	r2, #1371	; 0x55b
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d904      	bls.n	80032f8 <ADC_Read12vHandler+0x38>
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <ADC_Read12vHandler+0xd4>)
 80032f0:	891b      	ldrh	r3, [r3, #8]
 80032f2:	f5b3 6fb3 	cmp.w	r3, #1432	; 0x598
 80032f6:	d905      	bls.n	8003304 <ADC_Read12vHandler+0x44>
		ADC_reset_count++;
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <ADC_Read12vHandler+0xd8>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <ADC_Read12vHandler+0xd8>)
 8003302:	701a      	strb	r2, [r3, #0]

	}

	if(ADC_reset_count > ADC_12v_reset_val){
 8003304:	4b24      	ldr	r3, [pc, #144]	; (8003398 <ADC_Read12vHandler+0xd8>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d934      	bls.n	8003376 <ADC_Read12vHandler+0xb6>
		HAL_GPIO_TogglePin(SYM_LED_G_GPIO_Port, SYM_LED_G_Pin);
 800330c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003310:	4822      	ldr	r0, [pc, #136]	; (800339c <ADC_Read12vHandler+0xdc>)
 8003312:	f004 f83c 	bl	800738e <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(STM32_Relay_mmn_GPIO_Port, STM32_Relay_mmn_Pin, GPIO_PIN_RESET);
 8003316:	2200      	movs	r2, #0
 8003318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800331c:	4820      	ldr	r0, [pc, #128]	; (80033a0 <ADC_Read12vHandler+0xe0>)
 800331e:	f004 f81d 	bl	800735c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_RESET);
 8003322:	2200      	movs	r2, #0
 8003324:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003328:	481d      	ldr	r0, [pc, #116]	; (80033a0 <ADC_Read12vHandler+0xe0>)
 800332a:	f004 f817 	bl	800735c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STM32_RS_DC_DC_GPIO_Port, STM32_RS_DC_DC_Pin, GPIO_PIN_RESET);
 800332e:	2200      	movs	r2, #0
 8003330:	2102      	movs	r1, #2
 8003332:	481c      	ldr	r0, [pc, #112]	; (80033a4 <ADC_Read12vHandler+0xe4>)
 8003334:	f004 f812 	bl	800735c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8003338:	2201      	movs	r2, #1
 800333a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800333e:	4818      	ldr	r0, [pc, #96]	; (80033a0 <ADC_Read12vHandler+0xe0>)
 8003340:	f004 f80c 	bl	800735c <HAL_GPIO_WritePin>

		ADC_reset_count = 0;
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <ADC_Read12vHandler+0xd8>)
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]

		while(ADC_reset_count < ADC_12v_reset_val){
 800334a:	e010      	b.n	800336e <ADC_Read12vHandler+0xae>
			if(ADC_val[4] > Low12vThreshold || ADC_val[4] < High12vThreshold){
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <ADC_Read12vHandler+0xd4>)
 800334e:	891b      	ldrh	r3, [r3, #8]
 8003350:	f240 525c 	movw	r2, #1372	; 0x55c
 8003354:	4293      	cmp	r3, r2
 8003356:	d804      	bhi.n	8003362 <ADC_Read12vHandler+0xa2>
 8003358:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <ADC_Read12vHandler+0xd4>)
 800335a:	891b      	ldrh	r3, [r3, #8]
 800335c:	f5b3 6fb3 	cmp.w	r3, #1432	; 0x598
 8003360:	d205      	bcs.n	800336e <ADC_Read12vHandler+0xae>
				ADC_reset_count++;
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <ADC_Read12vHandler+0xd8>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <ADC_Read12vHandler+0xd8>)
 800336c:	701a      	strb	r2, [r3, #0]
		while(ADC_reset_count < ADC_12v_reset_val){
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <ADC_Read12vHandler+0xd8>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d9ea      	bls.n	800334c <ADC_Read12vHandler+0x8c>
			}
		}
	}

	HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003376:	2200      	movs	r2, #0
 8003378:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800337c:	4808      	ldr	r0, [pc, #32]	; (80033a0 <ADC_Read12vHandler+0xe0>)
 800337e:	f003 ffed 	bl	800735c <HAL_GPIO_WritePin>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f383 8811 	msr	BASEPRI, r3
	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20006b34 	.word	0x20006b34
 8003398:	2000109a 	.word	0x2000109a
 800339c:	40020400 	.word	0x40020400
 80033a0:	40020c00 	.word	0x40020c00
 80033a4:	40020800 	.word	0x40020800

080033a8 <HAL_ADC_LevelOutOfWindowCallback>:
/*
 * ОБРАБОТЧ�?К ПРЕРЫВАН�?Й ANALOG WATHDOG
 * ПР�? ОТЛАДКЕ ПЛАТЫ БУДЕТ ПЕРЕП�?САНО, Т.К
 * В ДАННОМ ВАР�?АНТЕ ЗАТРУДНЕНО ОТКЛЮЧЕН�?Е Д�?СПЛЕЯ
 */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	__asm volatile
 80033b0:	f3ef 8211 	mrs	r2, BASEPRI
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	613a      	str	r2, [r7, #16]
 80033c6:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 80033c8:	693b      	ldr	r3, [r7, #16]
	// ЕСЛ�? НЕТ, ТО ВКЛЮЧАЕМ ЗУМЕРЫ В Ц�?КЛЕ
	// П�?ТАН�?Е РАСЧ�?ТАНО �?З СХЕМЫ : 				12V/(5.1К + 5.1К + 1К)*1К = 0,29464V
	// ПЕРЕВОД�?М В ЗНАЧЕН�?Е 12 РАЗРЯДНОГО АЦП		0,29464*4095/3.3 = 1329,545
	// БЕРЕМ +-90 (+-0,8V НА ВХОД)
	// Ц�?КЛ ЗАЩ�?ЩЕН ФУНКЦ�?ЯМ�? FREERTOS
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR ();
 80033ca:	617b      	str	r3, [r7, #20]

	while(ADC_val[4] < Low12vThreshold || ADC_val[4] > High12vThreshold){
 80033cc:	e019      	b.n	8003402 <HAL_ADC_LevelOutOfWindowCallback+0x5a>
		HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 80033ce:	2201      	movs	r2, #1
 80033d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033d4:	4818      	ldr	r0, [pc, #96]	; (8003438 <HAL_ADC_LevelOutOfWindowCallback+0x90>)
 80033d6:	f003 ffc1 	bl	800735c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(STM32_Relay_mmn_GPIO_Port, STM32_Relay_mmn_Pin, GPIO_PIN_RESET);
 80033da:	2200      	movs	r2, #0
 80033dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033e0:	4815      	ldr	r0, [pc, #84]	; (8003438 <HAL_ADC_LevelOutOfWindowCallback+0x90>)
 80033e2:	f003 ffbb 	bl	800735c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_RESET);
 80033e6:	2200      	movs	r2, #0
 80033e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033ec:	4812      	ldr	r0, [pc, #72]	; (8003438 <HAL_ADC_LevelOutOfWindowCallback+0x90>)
 80033ee:	f003 ffb5 	bl	800735c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STM32_RS_DC_DC_GPIO_Port, STM32_RS_DC_DC_Pin, GPIO_PIN_RESET);
 80033f2:	2200      	movs	r2, #0
 80033f4:	2102      	movs	r1, #2
 80033f6:	4811      	ldr	r0, [pc, #68]	; (800343c <HAL_ADC_LevelOutOfWindowCallback+0x94>)
 80033f8:	f003 ffb0 	bl	800735c <HAL_GPIO_WritePin>

		// ОБНОВЛЯЕМ WATHDOG
		HAL_IWDG_Refresh(&hiwdg);
 80033fc:	4810      	ldr	r0, [pc, #64]	; (8003440 <HAL_ADC_LevelOutOfWindowCallback+0x98>)
 80033fe:	f004 f952 	bl	80076a6 <HAL_IWDG_Refresh>
	while(ADC_val[4] < Low12vThreshold || ADC_val[4] > High12vThreshold){
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <HAL_ADC_LevelOutOfWindowCallback+0x9c>)
 8003404:	891b      	ldrh	r3, [r3, #8]
 8003406:	f240 525b 	movw	r2, #1371	; 0x55b
 800340a:	4293      	cmp	r3, r2
 800340c:	d9df      	bls.n	80033ce <HAL_ADC_LevelOutOfWindowCallback+0x26>
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_ADC_LevelOutOfWindowCallback+0x9c>)
 8003410:	891b      	ldrh	r3, [r3, #8]
 8003412:	f5b3 6fb3 	cmp.w	r3, #1432	; 0x598
 8003416:	d8da      	bhi.n	80033ce <HAL_ADC_LevelOutOfWindowCallback+0x26>
	}
	HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003418:	2200      	movs	r2, #0
 800341a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800341e:	4806      	ldr	r0, [pc, #24]	; (8003438 <HAL_ADC_LevelOutOfWindowCallback+0x90>)
 8003420:	f003 ff9c 	bl	800735c <HAL_GPIO_WritePin>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f383 8811 	msr	BASEPRI, r3
	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40020c00 	.word	0x40020c00
 800343c:	40020800 	.word	0x40020800
 8003440:	2000964c 	.word	0x2000964c
 8003444:	20006b34 	.word	0x20006b34

08003448 <PowerON>:
/*
 * ФУНКЦ�?Я ОТКЛЮЧЕН�?Я С�?СТЕМЫ
 * ОТКЛЮЧАЕТ
 */

void PowerON(u8g2_t* u8g2){
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
//
//	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);


	// ЗАЖ�?ГАЕМ С�?Н�?Й ЦВЕТ RGB ПР�? СТАРТЕ
	HAL_GPIO_WritePin(BLUE_232_GPIO_Port, BLUE_232_Pin, GPIO_PIN_SET);
 8003450:	2201      	movs	r2, #1
 8003452:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003456:	4834      	ldr	r0, [pc, #208]	; (8003528 <PowerON+0xe0>)
 8003458:	f003 ff80 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_422_GPIO_Port, BLUE_422_Pin, GPIO_PIN_SET);
 800345c:	2201      	movs	r2, #1
 800345e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003462:	4832      	ldr	r0, [pc, #200]	; (800352c <PowerON+0xe4>)
 8003464:	f003 ff7a 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_485_GPIO_Port, BLUE_485_Pin, GPIO_PIN_SET);
 8003468:	2201      	movs	r2, #1
 800346a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800346e:	4830      	ldr	r0, [pc, #192]	; (8003530 <PowerON+0xe8>)
 8003470:	f003 ff74 	bl	800735c <HAL_GPIO_WritePin>

	// ВКЛЮЧАЕМ РЕЛЕ
	HAL_GPIO_WritePin(STM32_Relay_mmn_GPIO_Port, STM32_Relay_mmn_Pin, GPIO_PIN_SET);
 8003474:	2201      	movs	r2, #1
 8003476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800347a:	482b      	ldr	r0, [pc, #172]	; (8003528 <PowerON+0xe0>)
 800347c:	f003 ff6e 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_SET);
 8003480:	2201      	movs	r2, #1
 8003482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003486:	4828      	ldr	r0, [pc, #160]	; (8003528 <PowerON+0xe0>)
 8003488:	f003 ff68 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STM32_RS_DC_DC_GPIO_Port, STM32_RS_DC_DC_Pin, GPIO_PIN_SET);
 800348c:	2201      	movs	r2, #1
 800348e:	2102      	movs	r1, #2
 8003490:	4828      	ldr	r0, [pc, #160]	; (8003534 <PowerON+0xec>)
 8003492:	f003 ff63 	bl	800735c <HAL_GPIO_WritePin>

	// ВКЛЮЧАЕМ ЗУМЕРЫ
	for(uint8_t i = 0; i < 4; i++){
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	e014      	b.n	80034c6 <PowerON+0x7e>
		HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 800349c:	2201      	movs	r2, #1
 800349e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034a2:	4821      	ldr	r0, [pc, #132]	; (8003528 <PowerON+0xe0>)
 80034a4:	f003 ff5a 	bl	800735c <HAL_GPIO_WritePin>
		osDelay(30);
 80034a8:	201e      	movs	r0, #30
 80034aa:	f008 fa8d 	bl	800b9c8 <osDelay>
		HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 80034ae:	2200      	movs	r2, #0
 80034b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034b4:	481c      	ldr	r0, [pc, #112]	; (8003528 <PowerON+0xe0>)
 80034b6:	f003 ff51 	bl	800735c <HAL_GPIO_WritePin>
		osDelay(30);
 80034ba:	201e      	movs	r0, #30
 80034bc:	f008 fa84 	bl	800b9c8 <osDelay>
	for(uint8_t i = 0; i < 4; i++){
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	3301      	adds	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d9e7      	bls.n	800349c <PowerON+0x54>
	}

	// ЗАЖ�?ГАЕМ Д�?СПЛЕЙ
	u8g2_DrawBox(u8g2, 0, 0, 254, 64);
 80034cc:	2340      	movs	r3, #64	; 0x40
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	23fe      	movs	r3, #254	; 0xfe
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f006 fb99 	bl	8009c0e <u8g2_DrawBox>
	u8g2_SendBuffer(u8g2);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f006 fc40 	bl	8009d62 <u8g2_SendBuffer>

	// ЖДЕМ
	HAL_Delay(start_pause);
 80034e2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80034e6:	f002 fb45 	bl	8005b74 <HAL_Delay>

	// ТУШ�?М Д�?СПЛЕЙ
	u8g2_ClearDisplay(u8g2);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f006 fca1 	bl	8009e32 <u8g2_ClearDisplay>

	// ТУШ�?М СВЕТОД�?ОДЫ
	HAL_GPIO_WritePin(BLUE_232_GPIO_Port, BLUE_232_Pin, GPIO_PIN_RESET);
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034f6:	480c      	ldr	r0, [pc, #48]	; (8003528 <PowerON+0xe0>)
 80034f8:	f003 ff30 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_422_GPIO_Port, BLUE_422_Pin, GPIO_PIN_RESET);
 80034fc:	2200      	movs	r2, #0
 80034fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003502:	480a      	ldr	r0, [pc, #40]	; (800352c <PowerON+0xe4>)
 8003504:	f003 ff2a 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_485_GPIO_Port, BLUE_485_Pin, GPIO_PIN_RESET);
 8003508:	2200      	movs	r2, #0
 800350a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800350e:	4808      	ldr	r0, [pc, #32]	; (8003530 <PowerON+0xe8>)
 8003510:	f003 ff24 	bl	800735c <HAL_GPIO_WritePin>

	// ВЫКЛЮЧАЕМ ЗУМЕРЫ
	HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003514:	2200      	movs	r2, #0
 8003516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800351a:	4803      	ldr	r0, [pc, #12]	; (8003528 <PowerON+0xe0>)
 800351c:	f003 ff1e 	bl	800735c <HAL_GPIO_WritePin>
}
 8003520:	bf00      	nop
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40020c00 	.word	0x40020c00
 800352c:	40020000 	.word	0x40020000
 8003530:	40020400 	.word	0x40020400
 8003534:	40020800 	.word	0x40020800

08003538 <PowerOFF>:

void PowerOFF(){
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0

	uint32_t last_time = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < 4; i++){
 8003542:	2300      	movs	r3, #0
 8003544:	71fb      	strb	r3, [r7, #7]
 8003546:	e014      	b.n	8003572 <PowerOFF+0x3a>
		HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8003548:	2201      	movs	r2, #1
 800354a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800354e:	4829      	ldr	r0, [pc, #164]	; (80035f4 <PowerOFF+0xbc>)
 8003550:	f003 ff04 	bl	800735c <HAL_GPIO_WritePin>
		osDelay(30);
 8003554:	201e      	movs	r0, #30
 8003556:	f008 fa37 	bl	800b9c8 <osDelay>
		HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 800355a:	2200      	movs	r2, #0
 800355c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003560:	4824      	ldr	r0, [pc, #144]	; (80035f4 <PowerOFF+0xbc>)
 8003562:	f003 fefb 	bl	800735c <HAL_GPIO_WritePin>
		osDelay(30);
 8003566:	201e      	movs	r0, #30
 8003568:	f008 fa2e 	bl	800b9c8 <osDelay>
	for(uint8_t i = 0; i < 4; i++){
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	3301      	adds	r3, #1
 8003570:	71fb      	strb	r3, [r7, #7]
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d9e7      	bls.n	8003548 <PowerOFF+0x10>
	}

	display_stat = 0;
 8003578:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <PowerOFF+0xc0>)
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]


	while(HAL_GetTick()-last_time < PowerOFF_delay || last_time > HAL_GetTick()){
 800357e:	e006      	b.n	800358e <PowerOFF+0x56>
		HAL_IWDG_Refresh(&hiwdg);
 8003580:	481e      	ldr	r0, [pc, #120]	; (80035fc <PowerOFF+0xc4>)
 8003582:	f004 f890 	bl	80076a6 <HAL_IWDG_Refresh>
		osDelay(500);
 8003586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800358a:	f008 fa1d 	bl	800b9c8 <osDelay>
	while(HAL_GetTick()-last_time < PowerOFF_delay || last_time > HAL_GetTick()){
 800358e:	f002 fae5 	bl	8005b5c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f247 522f 	movw	r2, #29999	; 0x752f
 800359c:	4293      	cmp	r3, r2
 800359e:	d9ef      	bls.n	8003580 <PowerOFF+0x48>
 80035a0:	f002 fadc 	bl	8005b5c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d8e9      	bhi.n	8003580 <PowerOFF+0x48>
	}

//	vTaskDelete(myDisplayTaskHandle);

	vTaskDelete(myDataTaskHandle);
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <PowerOFF+0xc8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f009 f89d 	bl	800c6f0 <vTaskDelete>
	vTaskDelete(myLEDsTaskHandle);
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <PowerOFF+0xcc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f009 f898 	bl	800c6f0 <vTaskDelete>

	HAL_GPIO_WritePin(STM32_RS_DC_DC_GPIO_Port, STM32_RS_DC_DC_Pin, GPIO_PIN_RESET);
 80035c0:	2200      	movs	r2, #0
 80035c2:	2102      	movs	r1, #2
 80035c4:	4810      	ldr	r0, [pc, #64]	; (8003608 <PowerOFF+0xd0>)
 80035c6:	f003 fec9 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STM32_Relay_mother_GPIO_Port, STM32_Relay_mother_Pin, GPIO_PIN_RESET);
 80035ca:	2200      	movs	r2, #0
 80035cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035d0:	4808      	ldr	r0, [pc, #32]	; (80035f4 <PowerOFF+0xbc>)
 80035d2:	f003 fec3 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STM32_Relay_mmn_GPIO_Port, STM32_Relay_mmn_Pin, GPIO_PIN_RESET);
 80035d6:	2200      	movs	r2, #0
 80035d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035dc:	4805      	ldr	r0, [pc, #20]	; (80035f4 <PowerOFF+0xbc>)
 80035de:	f003 febd 	bl	800735c <HAL_GPIO_WritePin>

	LEDs_OFF();
 80035e2:	f000 fd39 	bl	8004058 <LEDs_OFF>

	SleepMode();
 80035e6:	f000 f813 	bl	8003610 <SleepMode>

}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40020c00 	.word	0x40020c00
 80035f8:	20000000 	.word	0x20000000
 80035fc:	2000964c 	.word	0x2000964c
 8003600:	20006adc 	.word	0x20006adc
 8003604:	20006b2c 	.word	0x20006b2c
 8003608:	40020800 	.word	0x40020800
 800360c:	00000000 	.word	0x00000000

08003610 <SleepMode>:

void SleepMode(){
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
	uint8_t switch_off = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	717b      	strb	r3, [r7, #5]
	uint8_t power_butmem = 0;									// ПЕРЕМЕННАЯ ДЛЯ ОТСЧЕТА ВРЕМЕН�? НАЖАТ�?Я КНОПК�?
 800361a:	2300      	movs	r3, #0
 800361c:	713b      	strb	r3, [r7, #4]
	uint32_t power_butthold = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	603b      	str	r3, [r7, #0]
	uint16_t PWM_val = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	82fb      	strh	r3, [r7, #22]
//	uint8_t direct = 1;
	double angl = 0;
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	f04f 0400 	mov.w	r4, #0
 800362e:	e9c7 3402 	strd	r3, r4, [r7, #8]

	while(1){
		HAL_IWDG_Refresh(&hiwdg);
 8003632:	4851      	ldr	r0, [pc, #324]	; (8003778 <SleepMode+0x168>)
 8003634:	f004 f837 	bl	80076a6 <HAL_IWDG_Refresh>

		for(uint16_t i = 0; i < 3000; i++){
 8003638:	2300      	movs	r3, #0
 800363a:	80fb      	strh	r3, [r7, #6]
 800363c:	e055      	b.n	80036ea <SleepMode+0xda>
			if(i < PWM_val){
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	8afb      	ldrh	r3, [r7, #22]
 8003642:	429a      	cmp	r2, r3
 8003644:	d227      	bcs.n	8003696 <SleepMode+0x86>
				HAL_GPIO_WritePin(STM32_BUTTON_LED_1_GPIO_Port, STM32_BUTTON_LED_1_Pin, GPIO_PIN_SET);
 8003646:	2201      	movs	r2, #1
 8003648:	2120      	movs	r1, #32
 800364a:	484c      	ldr	r0, [pc, #304]	; (800377c <SleepMode+0x16c>)
 800364c:	f003 fe86 	bl	800735c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(STM32_BUTTON_LED_2_GPIO_Port, STM32_BUTTON_LED_2_Pin, GPIO_PIN_SET);
 8003650:	2201      	movs	r2, #1
 8003652:	2110      	movs	r1, #16
 8003654:	4849      	ldr	r0, [pc, #292]	; (800377c <SleepMode+0x16c>)
 8003656:	f003 fe81 	bl	800735c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(STM32_BUTTON_LED_1_GPIO_Port, STM32_BUTTON_LED_3_Pin, GPIO_PIN_SET);
 800365a:	2201      	movs	r2, #1
 800365c:	2140      	movs	r1, #64	; 0x40
 800365e:	4847      	ldr	r0, [pc, #284]	; (800377c <SleepMode+0x16c>)
 8003660:	f003 fe7c 	bl	800735c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(STM32_BUTTON_LED_POWER_GPIO_Port, STM32_BUTTON_LED_POWER_Pin, GPIO_PIN_SET);
 8003664:	2201      	movs	r2, #1
 8003666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800366a:	4844      	ldr	r0, [pc, #272]	; (800377c <SleepMode+0x16c>)
 800366c:	f003 fe76 	bl	800735c <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(BLUE_422_GPIO_Port, BLUE_422_Pin, GPIO_PIN_SET);
 8003670:	2201      	movs	r2, #1
 8003672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003676:	4842      	ldr	r0, [pc, #264]	; (8003780 <SleepMode+0x170>)
 8003678:	f003 fe70 	bl	800735c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BLUE_485_GPIO_Port, BLUE_485_Pin, GPIO_PIN_SET);
 800367c:	2201      	movs	r2, #1
 800367e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003682:	4840      	ldr	r0, [pc, #256]	; (8003784 <SleepMode+0x174>)
 8003684:	f003 fe6a 	bl	800735c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BLUE_232_GPIO_Port, BLUE_232_Pin, GPIO_PIN_SET);
 8003688:	2201      	movs	r2, #1
 800368a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800368e:	483b      	ldr	r0, [pc, #236]	; (800377c <SleepMode+0x16c>)
 8003690:	f003 fe64 	bl	800735c <HAL_GPIO_WritePin>
 8003694:	e026      	b.n	80036e4 <SleepMode+0xd4>
			}
			else{
				HAL_GPIO_WritePin(STM32_BUTTON_LED_1_GPIO_Port, STM32_BUTTON_LED_1_Pin, GPIO_PIN_RESET);
 8003696:	2200      	movs	r2, #0
 8003698:	2120      	movs	r1, #32
 800369a:	4838      	ldr	r0, [pc, #224]	; (800377c <SleepMode+0x16c>)
 800369c:	f003 fe5e 	bl	800735c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(STM32_BUTTON_LED_2_GPIO_Port, STM32_BUTTON_LED_2_Pin, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2110      	movs	r1, #16
 80036a4:	4835      	ldr	r0, [pc, #212]	; (800377c <SleepMode+0x16c>)
 80036a6:	f003 fe59 	bl	800735c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(STM32_BUTTON_LED_1_GPIO_Port, STM32_BUTTON_LED_3_Pin, GPIO_PIN_RESET);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2140      	movs	r1, #64	; 0x40
 80036ae:	4833      	ldr	r0, [pc, #204]	; (800377c <SleepMode+0x16c>)
 80036b0:	f003 fe54 	bl	800735c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(STM32_BUTTON_LED_POWER_GPIO_Port, STM32_BUTTON_LED_POWER_Pin, GPIO_PIN_RESET);
 80036b4:	2200      	movs	r2, #0
 80036b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036ba:	4830      	ldr	r0, [pc, #192]	; (800377c <SleepMode+0x16c>)
 80036bc:	f003 fe4e 	bl	800735c <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(BLUE_422_GPIO_Port, BLUE_422_Pin, GPIO_PIN_RESET);
 80036c0:	2200      	movs	r2, #0
 80036c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036c6:	482e      	ldr	r0, [pc, #184]	; (8003780 <SleepMode+0x170>)
 80036c8:	f003 fe48 	bl	800735c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BLUE_485_GPIO_Port, BLUE_485_Pin, GPIO_PIN_RESET);
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036d2:	482c      	ldr	r0, [pc, #176]	; (8003784 <SleepMode+0x174>)
 80036d4:	f003 fe42 	bl	800735c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BLUE_232_GPIO_Port, BLUE_232_Pin, GPIO_PIN_RESET);
 80036d8:	2200      	movs	r2, #0
 80036da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036de:	4827      	ldr	r0, [pc, #156]	; (800377c <SleepMode+0x16c>)
 80036e0:	f003 fe3c 	bl	800735c <HAL_GPIO_WritePin>
		for(uint16_t i = 0; i < 3000; i++){
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	3301      	adds	r3, #1
 80036e8:	80fb      	strh	r3, [r7, #6]
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d9a4      	bls.n	800363e <SleepMode+0x2e>
			}
		}


		angl = (angl > 3.141) ? 0 : angl + 0.004;
 80036f4:	a31c      	add	r3, pc, #112	; (adr r3, 8003768 <SleepMode+0x158>)
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036fe:	f7fd f9bb 	bl	8000a78 <__aeabi_dcmpgt>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d004      	beq.n	8003712 <SleepMode+0x102>
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	f04f 0400 	mov.w	r4, #0
 8003710:	e008      	b.n	8003724 <SleepMode+0x114>
 8003712:	a317      	add	r3, pc, #92	; (adr r3, 8003770 <SleepMode+0x160>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800371c:	f7fc fd66 	bl	80001ec <__adddf3>
 8003720:	4603      	mov	r3, r0
 8003722:	460c      	mov	r4, r1
 8003724:	e9c7 3402 	strd	r3, r4, [r7, #8]
		PWM_val = (sin(angl)) * 1000;
 8003728:	ed97 0b02 	vldr	d0, [r7, #8]
 800372c:	f00a fa18 	bl	800db60 <sin>
 8003730:	ec51 0b10 	vmov	r0, r1, d0
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	4b13      	ldr	r3, [pc, #76]	; (8003788 <SleepMode+0x178>)
 800373a:	f7fc ff0d 	bl	8000558 <__aeabi_dmul>
 800373e:	4603      	mov	r3, r0
 8003740:	460c      	mov	r4, r1
 8003742:	4618      	mov	r0, r3
 8003744:	4621      	mov	r1, r4
 8003746:	f7fd f9df 	bl	8000b08 <__aeabi_d2uiz>
 800374a:	4603      	mov	r3, r0
 800374c:	82fb      	strh	r3, [r7, #22]


		PowerButtonHandler(&power_butthold, &power_butmem, &switch_off, 500);
 800374e:	1d7a      	adds	r2, r7, #5
 8003750:	1d39      	adds	r1, r7, #4
 8003752:	4638      	mov	r0, r7
 8003754:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003758:	f000 f8b0 	bl	80038bc <PowerButtonHandler>

		while(switch_off){
 800375c:	bf00      	nop
 800375e:	797b      	ldrb	r3, [r7, #5]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1fc      	bne.n	800375e <SleepMode+0x14e>
		HAL_IWDG_Refresh(&hiwdg);
 8003764:	e765      	b.n	8003632 <SleepMode+0x22>
 8003766:	bf00      	nop
 8003768:	9ba5e354 	.word	0x9ba5e354
 800376c:	400920c4 	.word	0x400920c4
 8003770:	d2f1a9fc 	.word	0xd2f1a9fc
 8003774:	3f70624d 	.word	0x3f70624d
 8003778:	2000964c 	.word	0x2000964c
 800377c:	40020c00 	.word	0x40020c00
 8003780:	40020000 	.word	0x40020000
 8003784:	40020400 	.word	0x40020400
 8003788:	408f4000 	.word	0x408f4000

0800378c <BigLatter>:
}
/*
 * ФУНКЦ�?Я ПЕРЕВОД�?Т МАЛЕНЬК�?Е БУКВЫ ШЕСТНАДЦАТ�?Р�?ЧНОГО НАБОРА
 * В БОЛЬШ�?Е. ЕСЛ�? НА ВХОД ПР�?ШЛА Ц�?ФРА, ТО ВОЗВРАЩАЕТСЯ С�?МВОЛ Ц�?ФРЫ
 */
char BigLatter(char smalllatter){
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
	switch(smalllatter){
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	3b61      	subs	r3, #97	; 0x61
 800379a:	2b05      	cmp	r3, #5
 800379c:	d81a      	bhi.n	80037d4 <BigLatter+0x48>
 800379e:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <BigLatter+0x18>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037bd 	.word	0x080037bd
 80037a8:	080037c1 	.word	0x080037c1
 80037ac:	080037c5 	.word	0x080037c5
 80037b0:	080037c9 	.word	0x080037c9
 80037b4:	080037cd 	.word	0x080037cd
 80037b8:	080037d1 	.word	0x080037d1
	case 'a': return 'A';
 80037bc:	2341      	movs	r3, #65	; 0x41
 80037be:	e00a      	b.n	80037d6 <BigLatter+0x4a>
	case 'b': return 'B';
 80037c0:	2342      	movs	r3, #66	; 0x42
 80037c2:	e008      	b.n	80037d6 <BigLatter+0x4a>
	case 'c': return 'C';
 80037c4:	2343      	movs	r3, #67	; 0x43
 80037c6:	e006      	b.n	80037d6 <BigLatter+0x4a>
	case 'd': return 'D';
 80037c8:	2344      	movs	r3, #68	; 0x44
 80037ca:	e004      	b.n	80037d6 <BigLatter+0x4a>
	case 'e': return 'E';
 80037cc:	2345      	movs	r3, #69	; 0x45
 80037ce:	e002      	b.n	80037d6 <BigLatter+0x4a>
	case 'f': return 'F';
 80037d0:	2346      	movs	r3, #70	; 0x46
 80037d2:	e000      	b.n	80037d6 <BigLatter+0x4a>
	default: return smalllatter;
 80037d4:	79fb      	ldrb	r3, [r7, #7]
	}
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop

080037e4 <TemperatureGetData>:
/*
 * ФУНКЦ�?Я РАСЧЕТА ТЕМПЕРАТУРЫ ВСТРОЕНОГО ДАТЧ�?КА STM.
 * ПР�?Н�?МАЕТ ДАННЫЕ АЦП С ТЕМПЕРЕАТУРНОГО КАНАЛА
 * ВОЗВРАЩАЕТ ТЕМПЕРАТУРУ В ГРАДУСАХ ЦЕЛЬС�?Я
 */
uint8_t TemperatureGetData(uint16_t ADCResult){
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	80fb      	strh	r3, [r7, #6]
	int32_t temperature; /* will contain the temperature in degrees Celsius */

	temperature = (((int32_t) ADCResult * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR );
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	4a11      	ldr	r2, [pc, #68]	; (8003840 <TemperatureGetData+0x5c>)
 80037fa:	fb82 1203 	smull	r1, r2, r2, r3
 80037fe:	11d2      	asrs	r2, r2, #7
 8003800:	17db      	asrs	r3, r3, #31
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <TemperatureGetData+0x60>)
 8003806:	8812      	ldrh	r2, [r2, #0]
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
	temperature = temperature * (int32_t)(110 - 30);
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	60fb      	str	r3, [r7, #12]
	temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <TemperatureGetData+0x64>)
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <TemperatureGetData+0x60>)
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	fb92 f3f3 	sdiv	r3, r2, r3
 800382a:	60fb      	str	r3, [r7, #12]

    return (uint8_t) temperature + 25;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	3319      	adds	r3, #25
 8003832:	b2db      	uxtb	r3, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	634c0635 	.word	0x634c0635
 8003844:	1fff7a2c 	.word	0x1fff7a2c
 8003848:	1fff7a2e 	.word	0x1fff7a2e

0800384c <PutERROR>:

/*
 * КЛАДЕТ ТЕКСТ ОШ�?БК�? В 1-Ю СТРОКУ КОНТРОЛЬНЫХ СТРОК
 */
void PutERROR(string_t *error_string, const char *error_tekst){
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]

	error_string[start_ctrl_string].number = start_ctrl_string;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 800385c:	3333      	adds	r3, #51	; 0x33
 800385e:	2291      	movs	r2, #145	; 0x91
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	// Ч�?СТ�?М СТРОКУ
	for(uint8_t i = 0; i < string_size; i++){
 8003864:	2300      	movs	r3, #0
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e009      	b.n	800387e <PutERROR+0x32>
		error_string[start_ctrl_string].buf[i] = '\0';
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 8003870:	3333      	adds	r3, #51	; 0x33
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	2100      	movs	r1, #0
 8003876:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < string_size; i++){
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	3301      	adds	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b3b      	cmp	r3, #59	; 0x3b
 8003882:	d9f2      	bls.n	800386a <PutERROR+0x1e>
	}

	// ЗАПОЛНЯЕМ СТРОКУ
	for(uint8_t i = 0; i < strlen(error_tekst); i++){
 8003884:	2300      	movs	r3, #0
 8003886:	73bb      	strb	r3, [r7, #14]
 8003888:	e00c      	b.n	80038a4 <PutERROR+0x58>
		error_string[start_ctrl_string].buf[i] = error_tekst[i];
 800388a:	7bbb      	ldrb	r3, [r7, #14]
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	18d1      	adds	r1, r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 8003896:	3333      	adds	r3, #51	; 0x33
 8003898:	7bba      	ldrb	r2, [r7, #14]
 800389a:	7809      	ldrb	r1, [r1, #0]
 800389c:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < strlen(error_tekst); i++){
 800389e:	7bbb      	ldrb	r3, [r7, #14]
 80038a0:	3301      	adds	r3, #1
 80038a2:	73bb      	strb	r3, [r7, #14]
 80038a4:	7bbc      	ldrb	r4, [r7, #14]
 80038a6:	6838      	ldr	r0, [r7, #0]
 80038a8:	f7fc fc92 	bl	80001d0 <strlen>
 80038ac:	4603      	mov	r3, r0
 80038ae:	429c      	cmp	r4, r3
 80038b0:	d3eb      	bcc.n	800388a <PutERROR+0x3e>
	}
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}
	...

080038bc <PowerButtonHandler>:

void PowerButtonHandler(uint32_t *butthold,uint8_t *butmem, uint8_t *switch_off, uint16_t off_delay){
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	807b      	strh	r3, [r7, #2]

	// ЕСЛ�? КНОПКА НАЖАТА
	if(HAL_GPIO_ReadPin(STM32_BUTTON_POWER_GPIO_Port, STM32_BUTTON_POWER_Pin)){
 80038ca:	2101      	movs	r1, #1
 80038cc:	481d      	ldr	r0, [pc, #116]	; (8003944 <PowerButtonHandler+0x88>)
 80038ce:	f003 fd2d 	bl	800732c <HAL_GPIO_ReadPin>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d02b      	beq.n	8003930 <PowerButtonHandler+0x74>

		HAL_GPIO_WritePin(STM32_BUTTON_LED_POWER_GPIO_Port, STM32_BUTTON_LED_POWER_Pin, GPIO_PIN_RESET);
 80038d8:	2200      	movs	r2, #0
 80038da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038de:	481a      	ldr	r0, [pc, #104]	; (8003948 <PowerButtonHandler+0x8c>)
 80038e0:	f003 fd3c 	bl	800735c <HAL_GPIO_WritePin>

		// ЕСЛ�? КНОПКА ДО ЭТОГО НЕ БЫЛА НАЖАТА
		if(!(*butmem &  STM32_BUTTON_POWER_Pin)){
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d113      	bne.n	8003918 <PowerButtonHandler+0x5c>

			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 80038f0:	2201      	movs	r2, #1
 80038f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038f6:	4814      	ldr	r0, [pc, #80]	; (8003948 <PowerButtonHandler+0x8c>)
 80038f8:	f003 fd30 	bl	800735c <HAL_GPIO_WritePin>
			osDelay(Button_Zummer);
 80038fc:	200a      	movs	r0, #10
 80038fe:	f008 f863 	bl	800b9c8 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003902:	2200      	movs	r2, #0
 8003904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003908:	480f      	ldr	r0, [pc, #60]	; (8003948 <PowerButtonHandler+0x8c>)
 800390a:	f003 fd27 	bl	800735c <HAL_GPIO_WritePin>

			// НАЧ�?НАЕТ ОТСЧЕТ ВРЕМЕН�?
			*butthold = HAL_GetTick();
 800390e:	f002 f925 	bl	8005b5c <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]
		}
		// ЕСЛ�? ПРОШЛО ОПРЕДЕЛЕННОЕ ВРЕМЯ �? КНОПКА ВСЕ ЕЩЕ НАЖАТА, ТО ПОДН�?МАЕМ ФЛАГ
		if((HAL_GetTick() - *butthold) > off_delay){
 8003918:	f002 f920 	bl	8005b5c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1ad2      	subs	r2, r2, r3
 8003924:	887b      	ldrh	r3, [r7, #2]
 8003926:	429a      	cmp	r2, r3
 8003928:	d902      	bls.n	8003930 <PowerButtonHandler+0x74>

			*switch_off = 1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]

		}
	}

	*butmem = STM32_BUTTON_POWER_GPIO_Port->IDR;		// ПАМЯТЬ КНОПК�?
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <PowerButtonHandler+0x88>)
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	701a      	strb	r2, [r3, #0]
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40020800 	.word	0x40020800
 8003948:	40020c00 	.word	0x40020c00

0800394c <ScrollingButtonHandler>:


/*
 * ФУНКЦ�?Я ОБРАБОТК�? КНОПОК
 */
void ScrollingButtonHandler(uint8_t *cursor, uint32_t *butthold,uint8_t *butmem){
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

	// ЕСЛ�? КНОПКА НАЖАТА �? (НЕ БЫЛА ЕЩЕ НАЖАТА, �?Л�? ПРОШЛО МНОГО ВРЕМЕН�?)
	// УСЛОВ�?Е РАБОТАЕТ НА ОД�?НОЧНЫЕ НАЖАТ�?Я, НО ЕСЛ�? ПРОШЛО ОПРЕДЕЛЕННОЕ ВРЕМЯ,
	// ПАМЯТЬ НАЖАТ�?Я КНОПК�? НЕ УЧ�?ТЫВАЕТСЯ
	if(HAL_GPIO_ReadPin(STM32_BUTTON_1_GPIO_Port, STM32_BUTTON_1_Pin)){
 8003958:	2102      	movs	r1, #2
 800395a:	4872      	ldr	r0, [pc, #456]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 800395c:	f003 fce6 	bl	800732c <HAL_GPIO_ReadPin>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d042      	beq.n	80039ec <ScrollingButtonHandler+0xa0>

		HAL_GPIO_WritePin(STM32_BUTTON_LED_1_GPIO_Port, STM32_BUTTON_LED_1_Pin, GPIO_PIN_RESET);
 8003966:	2200      	movs	r2, #0
 8003968:	2120      	movs	r1, #32
 800396a:	486e      	ldr	r0, [pc, #440]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 800396c:	f003 fcf6 	bl	800735c <HAL_GPIO_WritePin>

		if(!(*butmem & STM32_BUTTON_1_Pin) || (HAL_GetTick() - *butthold > scroll_delay)){
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <ScrollingButtonHandler+0x42>
 800397c:	f002 f8ee 	bl	8005b5c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800398c:	d933      	bls.n	80039f6 <ScrollingButtonHandler+0xaa>

			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 800398e:	2201      	movs	r2, #1
 8003990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003994:	4863      	ldr	r0, [pc, #396]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003996:	f003 fce1 	bl	800735c <HAL_GPIO_WritePin>
			osDelay(Button_Zummer);
 800399a:	200a      	movs	r0, #10
 800399c:	f008 f814 	bl	800b9c8 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 80039a0:	2200      	movs	r2, #0
 80039a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039a6:	485f      	ldr	r0, [pc, #380]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 80039a8:	f003 fcd8 	bl	800735c <HAL_GPIO_WritePin>

			*cursor = (*cursor < (160 - 4)) ? *cursor + 1 : *cursor;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b9b      	cmp	r3, #155	; 0x9b
 80039b2:	d804      	bhi.n	80039be <ScrollingButtonHandler+0x72>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	e001      	b.n	80039c2 <ScrollingButtonHandler+0x76>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	7013      	strb	r3, [r2, #0]
			osDelay(1000/scroll_speed);
 80039c6:	2042      	movs	r0, #66	; 0x42
 80039c8:	f007 fffe 	bl	800b9c8 <osDelay>
			uptime = uptime_tick;
 80039cc:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <ScrollingButtonHandler+0x1dc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a56      	ldr	r2, [pc, #344]	; (8003b2c <ScrollingButtonHandler+0x1e0>)
 80039d2:	6013      	str	r3, [r2, #0]
			if(!(*butmem & STM32_BUTTON_1_Pin))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <ScrollingButtonHandler+0xaa>
				*butthold = HAL_GetTick();
 80039e0:	f002 f8bc 	bl	8005b5c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e004      	b.n	80039f6 <ScrollingButtonHandler+0xaa>
		}
	}
	else {
		HAL_GPIO_WritePin(STM32_BUTTON_LED_1_GPIO_Port, STM32_BUTTON_LED_1_Pin, GPIO_PIN_SET);
 80039ec:	2201      	movs	r2, #1
 80039ee:	2120      	movs	r1, #32
 80039f0:	484c      	ldr	r0, [pc, #304]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 80039f2:	f003 fcb3 	bl	800735c <HAL_GPIO_WritePin>
	}

	// 2 АНАЛОГ�?ЧНО
	if(HAL_GPIO_ReadPin(STM32_BUTTON_2_GPIO_Port, STM32_BUTTON_2_Pin)){
 80039f6:	2101      	movs	r1, #1
 80039f8:	484a      	ldr	r0, [pc, #296]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 80039fa:	f003 fc97 	bl	800732c <HAL_GPIO_ReadPin>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d041      	beq.n	8003a88 <ScrollingButtonHandler+0x13c>

		HAL_GPIO_WritePin(STM32_BUTTON_LED_2_GPIO_Port, STM32_BUTTON_LED_2_Pin, GPIO_PIN_RESET);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2110      	movs	r1, #16
 8003a08:	4846      	ldr	r0, [pc, #280]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003a0a:	f003 fca7 	bl	800735c <HAL_GPIO_WritePin>

		if(!(*butmem & STM32_BUTTON_2_Pin) || ((HAL_GetTick() - *butthold) > scroll_delay)){
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <ScrollingButtonHandler+0xe0>
 8003a1a:	f002 f89f 	bl	8005b5c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003a2a:	d932      	bls.n	8003a92 <ScrollingButtonHandler+0x146>

			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a32:	483c      	ldr	r0, [pc, #240]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003a34:	f003 fc92 	bl	800735c <HAL_GPIO_WritePin>
			osDelay(Button_Zummer);
 8003a38:	200a      	movs	r0, #10
 8003a3a:	f007 ffc5 	bl	800b9c8 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a44:	4837      	ldr	r0, [pc, #220]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003a46:	f003 fc89 	bl	800735c <HAL_GPIO_WritePin>

			*cursor = (*cursor > 0) ? *cursor - 1 : 170;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <ScrollingButtonHandler+0x110>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	e000      	b.n	8003a5e <ScrollingButtonHandler+0x112>
 8003a5c:	22aa      	movs	r2, #170	; 0xaa
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	701a      	strb	r2, [r3, #0]
			osDelay(1000/scroll_speed);
 8003a62:	2042      	movs	r0, #66	; 0x42
 8003a64:	f007 ffb0 	bl	800b9c8 <osDelay>
			uptime = uptime_tick;
 8003a68:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <ScrollingButtonHandler+0x1dc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a2f      	ldr	r2, [pc, #188]	; (8003b2c <ScrollingButtonHandler+0x1e0>)
 8003a6e:	6013      	str	r3, [r2, #0]

			if(!(*butmem & STM32_BUTTON_2_Pin))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <ScrollingButtonHandler+0x146>
				*butthold = HAL_GetTick();
 8003a7c:	f002 f86e 	bl	8005b5c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e004      	b.n	8003a92 <ScrollingButtonHandler+0x146>
			}

	}
	else HAL_GPIO_WritePin(STM32_BUTTON_LED_2_GPIO_Port, STM32_BUTTON_LED_2_Pin, GPIO_PIN_SET);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	2110      	movs	r1, #16
 8003a8c:	4825      	ldr	r0, [pc, #148]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003a8e:	f003 fc65 	bl	800735c <HAL_GPIO_WritePin>

	//3
	if(HAL_GPIO_ReadPin(STM32_BUTTON_3_GPIO_Port, STM32_BUTTON_3_Pin)){
 8003a92:	2104      	movs	r1, #4
 8003a94:	4823      	ldr	r0, [pc, #140]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003a96:	f003 fc49 	bl	800732c <HAL_GPIO_ReadPin>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d032      	beq.n	8003b06 <ScrollingButtonHandler+0x1ba>

			HAL_GPIO_WritePin(STM32_BUTTON_LED_3_GPIO_Port, STM32_BUTTON_LED_3_Pin, GPIO_PIN_RESET);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2140      	movs	r1, #64	; 0x40
 8003aa4:	481f      	ldr	r0, [pc, #124]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003aa6:	f003 fc59 	bl	800735c <HAL_GPIO_WritePin>

			if(!(*butmem & STM32_BUTTON_3_Pin) || ((HAL_GetTick() - *butthold) > scroll_delay)){
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <ScrollingButtonHandler+0x17c>
 8003ab6:	f002 f851 	bl	8005b5c <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003ac6:	d923      	bls.n	8003b10 <ScrollingButtonHandler+0x1c4>

				HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ace:	4815      	ldr	r0, [pc, #84]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003ad0:	f003 fc44 	bl	800735c <HAL_GPIO_WritePin>
				osDelay(Button_Zummer);
 8003ad4:	200a      	movs	r0, #10
 8003ad6:	f007 ff77 	bl	800b9c8 <osDelay>
				HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003ada:	2200      	movs	r2, #0
 8003adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ae0:	4810      	ldr	r0, [pc, #64]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003ae2:	f003 fc3b 	bl	800735c <HAL_GPIO_WritePin>

				uptime = uptime_tick;
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <ScrollingButtonHandler+0x1dc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a10      	ldr	r2, [pc, #64]	; (8003b2c <ScrollingButtonHandler+0x1e0>)
 8003aec:	6013      	str	r3, [r2, #0]
				if(!(*butmem & STM32_BUTTON_3_Pin))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <ScrollingButtonHandler+0x1c4>
					*butthold = HAL_GetTick();
 8003afa:	f002 f82f 	bl	8005b5c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e004      	b.n	8003b10 <ScrollingButtonHandler+0x1c4>
				}

		}
		else HAL_GPIO_WritePin(STM32_BUTTON_LED_3_GPIO_Port, STM32_BUTTON_LED_3_Pin, GPIO_PIN_SET);
 8003b06:	2201      	movs	r2, #1
 8003b08:	2140      	movs	r1, #64	; 0x40
 8003b0a:	4806      	ldr	r0, [pc, #24]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003b0c:	f003 fc26 	bl	800735c <HAL_GPIO_WritePin>


	*butmem = STM32_BUTTON_LED_1_GPIO_Port->IDR;						 // т.к_порт_кнопок_один
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <ScrollingButtonHandler+0x1d8>)
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	701a      	strb	r2, [r3, #0]
}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40020c00 	.word	0x40020c00
 8003b28:	20001294 	.word	0x20001294
 8003b2c:	20001298 	.word	0x20001298

08003b30 <ServiceModeButtonHandler>:


void ServiceModeButtonHandler(uint8_t *mem, uint8_t *mem2, uint32_t *hold, uint16_t service_delay){
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	807b      	strh	r3, [r7, #2]

	if(HAL_GPIO_ReadPin(STM32_BUTTON_1_GPIO_Port, STM32_BUTTON_1_Pin)
 8003b3e:	2102      	movs	r1, #2
 8003b40:	4858      	ldr	r0, [pc, #352]	; (8003ca4 <ServiceModeButtonHandler+0x174>)
 8003b42:	f003 fbf3 	bl	800732c <HAL_GPIO_ReadPin>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 809c 	beq.w	8003c86 <ServiceModeButtonHandler+0x156>
			&& HAL_GPIO_ReadPin(STM32_BUTTON_2_GPIO_Port, STM32_BUTTON_2_Pin)){
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4854      	ldr	r0, [pc, #336]	; (8003ca4 <ServiceModeButtonHandler+0x174>)
 8003b52:	f003 fbeb 	bl	800732c <HAL_GPIO_ReadPin>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8094 	beq.w	8003c86 <ServiceModeButtonHandler+0x156>

		// ЕСЛ�? КНОПКА ДО ЭТОГО НЕ БЫЛА НАЖАТА
		if(!((*mem & STM32_BUTTON_1_Pin) && (*mem & STM32_BUTTON_2_Pin))){
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <ServiceModeButtonHandler+0x46>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <ServiceModeButtonHandler+0x50>

			// НАЧ�?НАЕТ ОТСЧЕТ ВРЕМЕН�?
			*hold = HAL_GetTick();
 8003b76:	f001 fff1 	bl	8005b5c <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	601a      	str	r2, [r3, #0]
		}
		// ЕСЛ�? ПРОШЛО ОПРЕДЕЛЕННОЕ ВРЕМЯ �? КНОПКА ВСЕ ЕЩЕ НАЖАТА, ТО ПОДН�?МАЕМ ФЛАГ
		if(((HAL_GetTick() - *hold) > service_delay) && *mem2 == 0){
 8003b80:	f001 ffec 	bl	8005b5c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d97d      	bls.n	8003c8e <ServiceModeButtonHandler+0x15e>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d179      	bne.n	8003c8e <ServiceModeButtonHandler+0x15e>
			*mem2 = 1;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ba6:	483f      	ldr	r0, [pc, #252]	; (8003ca4 <ServiceModeButtonHandler+0x174>)
 8003ba8:	f003 fbd8 	bl	800735c <HAL_GPIO_WritePin>
			osDelay(200);
 8003bac:	20c8      	movs	r0, #200	; 0xc8
 8003bae:	f007 ff0b 	bl	800b9c8 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bb8:	483a      	ldr	r0, [pc, #232]	; (8003ca4 <ServiceModeButtonHandler+0x174>)
 8003bba:	f003 fbcf 	bl	800735c <HAL_GPIO_WritePin>

			service_mode = (service_mode == 0) ? 1 : 0;
 8003bbe:	4b3a      	ldr	r3, [pc, #232]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003bd0:	701a      	strb	r2, [r3, #0]

			datastring[0].status = service_mode;
 8003bd2:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	4b35      	ldr	r3, [pc, #212]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

			datastring[serv_string_1].status = service_mode;
 8003bdc:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	4b32      	ldr	r3, [pc, #200]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003be2:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8003be6:	330e      	adds	r3, #14
 8003be8:	701a      	strb	r2, [r3, #0]
			datastring[serv_string_2].status = service_mode;
 8003bea:	4b2f      	ldr	r3, [pc, #188]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003bf0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003bf4:	3311      	adds	r3, #17
 8003bf6:	701a      	strb	r2, [r3, #0]
			datastring[ctrl_string_1].status = service_mode;
 8003bf8:	4b2b      	ldr	r3, [pc, #172]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003bfa:	781a      	ldrb	r2, [r3, #0]
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003bfe:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003c02:	3330      	adds	r3, #48	; 0x30
 8003c04:	701a      	strb	r2, [r3, #0]
			datastring[ctrl_string_2].status = service_mode;
 8003c06:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	4b28      	ldr	r3, [pc, #160]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003c0c:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 8003c10:	3333      	adds	r3, #51	; 0x33
 8003c12:	701a      	strb	r2, [r3, #0]
			datastring[ctrl_string_3].status = service_mode;
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	4b24      	ldr	r3, [pc, #144]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003c1a:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8003c1e:	3336      	adds	r3, #54	; 0x36
 8003c20:	701a      	strb	r2, [r3, #0]
			datastring[ctrl_string_4].status = service_mode;
 8003c22:	4b21      	ldr	r3, [pc, #132]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	4b21      	ldr	r3, [pc, #132]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003c28:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 8003c2c:	3339      	adds	r3, #57	; 0x39
 8003c2e:	701a      	strb	r2, [r3, #0]
			datastring[ctrl_string_5].status = service_mode;
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003c32:	781a      	ldrb	r2, [r3, #0]
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003c36:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003c3a:	333c      	adds	r3, #60	; 0x3c
 8003c3c:	701a      	strb	r2, [r3, #0]
			datastring[ctrl_string_6].status = service_mode;
 8003c3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003c40:	781a      	ldrb	r2, [r3, #0]
 8003c42:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003c44:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8003c48:	333f      	adds	r3, #63	; 0x3f
 8003c4a:	701a      	strb	r2, [r3, #0]
			datastring[ctrl_string_7].status = service_mode;
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	4b16      	ldr	r3, [pc, #88]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003c52:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 8003c56:	3302      	adds	r3, #2
 8003c58:	701a      	strb	r2, [r3, #0]
			datastring[ctrl_string_8].status = service_mode;
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003c60:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003c64:	3305      	adds	r3, #5
 8003c66:	701a      	strb	r2, [r3, #0]
			datastring[ctrl_string_9].status = service_mode;
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003c6e:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 8003c72:	3308      	adds	r3, #8
 8003c74:	701a      	strb	r2, [r3, #0]
			datastring[ctrl_string_10].status = service_mode;
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <ServiceModeButtonHandler+0x178>)
 8003c78:	781a      	ldrb	r2, [r3, #0]
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <ServiceModeButtonHandler+0x17c>)
 8003c7c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c80:	330b      	adds	r3, #11
 8003c82:	701a      	strb	r2, [r3, #0]
		if(((HAL_GetTick() - *hold) > service_delay) && *mem2 == 0){
 8003c84:	e003      	b.n	8003c8e <ServiceModeButtonHandler+0x15e>
		}
	}
	else{
		*mem2 = 0;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	e000      	b.n	8003c90 <ServiceModeButtonHandler+0x160>
		if(((HAL_GetTick() - *hold) > service_delay) && *mem2 == 0){
 8003c8e:	bf00      	nop
	}

	*mem = STM32_BUTTON_LED_1_GPIO_Port->IDR; //ошибка
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <ServiceModeButtonHandler+0x174>)
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	701a      	strb	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40020c00 	.word	0x40020c00
 8003ca8:	200010b4 	.word	0x200010b4
 8003cac:	20006b48 	.word	0x20006b48

08003cb0 <ConnHandler>:

void ConnHandler(uint8_t *mem1, uint8_t *mem2){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]

	if(HAL_GPIO_ReadPin(STM32_Conn_1_GPIO_Port, STM32_Conn_1_Pin)){
 8003cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cbe:	4840      	ldr	r0, [pc, #256]	; (8003dc0 <ConnHandler+0x110>)
 8003cc0:	f003 fb34 	bl	800732c <HAL_GPIO_ReadPin>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d012      	beq.n	8003cf0 <ConnHandler+0x40>

		if(!(*mem1)){
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10e      	bne.n	8003cf0 <ConnHandler+0x40>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cd8:	483a      	ldr	r0, [pc, #232]	; (8003dc4 <ConnHandler+0x114>)
 8003cda:	f003 fb3f 	bl	800735c <HAL_GPIO_WritePin>
			osDelay(Button_Zummer);
 8003cde:	200a      	movs	r0, #10
 8003ce0:	f007 fe72 	bl	800b9c8 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cea:	4836      	ldr	r0, [pc, #216]	; (8003dc4 <ConnHandler+0x114>)
 8003cec:	f003 fb36 	bl	800735c <HAL_GPIO_WritePin>
		}
	}

	if(!HAL_GPIO_ReadPin(STM32_Conn_1_GPIO_Port, STM32_Conn_1_Pin)){
 8003cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cf4:	4832      	ldr	r0, [pc, #200]	; (8003dc0 <ConnHandler+0x110>)
 8003cf6:	f003 fb19 	bl	800732c <HAL_GPIO_ReadPin>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d112      	bne.n	8003d26 <ConnHandler+0x76>

		if(*mem1){
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00e      	beq.n	8003d26 <ConnHandler+0x76>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d0e:	482d      	ldr	r0, [pc, #180]	; (8003dc4 <ConnHandler+0x114>)
 8003d10:	f003 fb24 	bl	800735c <HAL_GPIO_WritePin>
			osDelay(Button_Zummer);
 8003d14:	200a      	movs	r0, #10
 8003d16:	f007 fe57 	bl	800b9c8 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d20:	4828      	ldr	r0, [pc, #160]	; (8003dc4 <ConnHandler+0x114>)
 8003d22:	f003 fb1b 	bl	800735c <HAL_GPIO_WritePin>
		}
	}



	if(HAL_GPIO_ReadPin(STM32_Conn_2_GPIO_Port, STM32_Conn_2_Pin)){
 8003d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d2a:	4825      	ldr	r0, [pc, #148]	; (8003dc0 <ConnHandler+0x110>)
 8003d2c:	f003 fafe 	bl	800732c <HAL_GPIO_ReadPin>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d012      	beq.n	8003d5c <ConnHandler+0xac>

		if(!(*mem2)){
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10e      	bne.n	8003d5c <ConnHandler+0xac>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d44:	481f      	ldr	r0, [pc, #124]	; (8003dc4 <ConnHandler+0x114>)
 8003d46:	f003 fb09 	bl	800735c <HAL_GPIO_WritePin>
			osDelay(Button_Zummer);
 8003d4a:	200a      	movs	r0, #10
 8003d4c:	f007 fe3c 	bl	800b9c8 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003d50:	2200      	movs	r2, #0
 8003d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d56:	481b      	ldr	r0, [pc, #108]	; (8003dc4 <ConnHandler+0x114>)
 8003d58:	f003 fb00 	bl	800735c <HAL_GPIO_WritePin>
		}
	}

	if(!HAL_GPIO_ReadPin(STM32_Conn_2_GPIO_Port, STM32_Conn_2_Pin)){
 8003d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d60:	4817      	ldr	r0, [pc, #92]	; (8003dc0 <ConnHandler+0x110>)
 8003d62:	f003 fae3 	bl	800732c <HAL_GPIO_ReadPin>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d112      	bne.n	8003d92 <ConnHandler+0xe2>

		if(*mem2){
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <ConnHandler+0xe2>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_SET);
 8003d74:	2201      	movs	r2, #1
 8003d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d7a:	4812      	ldr	r0, [pc, #72]	; (8003dc4 <ConnHandler+0x114>)
 8003d7c:	f003 faee 	bl	800735c <HAL_GPIO_WritePin>
			osDelay(Button_Zummer);
 8003d80:	200a      	movs	r0, #10
 8003d82:	f007 fe21 	bl	800b9c8 <osDelay>
			HAL_GPIO_WritePin(STM32_ZUMMER_GPIO_Port, STM32_ZUMMER_Pin, GPIO_PIN_RESET);
 8003d86:	2200      	movs	r2, #0
 8003d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d8c:	480d      	ldr	r0, [pc, #52]	; (8003dc4 <ConnHandler+0x114>)
 8003d8e:	f003 fae5 	bl	800735c <HAL_GPIO_WritePin>
		}
	}

	*mem1 = HAL_GPIO_ReadPin(STM32_Conn_1_GPIO_Port, STM32_Conn_1_Pin);		// ПАМЯТЬ КНОПК�?
 8003d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d96:	480a      	ldr	r0, [pc, #40]	; (8003dc0 <ConnHandler+0x110>)
 8003d98:	f003 fac8 	bl	800732c <HAL_GPIO_ReadPin>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	701a      	strb	r2, [r3, #0]
	*mem2 = HAL_GPIO_ReadPin(STM32_Conn_2_GPIO_Port, STM32_Conn_2_Pin);
 8003da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003da8:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <ConnHandler+0x110>)
 8003daa:	f003 fabf 	bl	800732c <HAL_GPIO_ReadPin>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	701a      	strb	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40020c00 	.word	0x40020c00

08003dc8 <CRC32_Status>:
 * ФУНКЦ�?Я РАСЧЕТ CRC32. КЛАДЕТ ВСЕ С�?МВОЛЫ ПОСЛЕ "PSD;"
 * �? ДО "CRC" В МАСС�?В crc32_buf, ПОСЛЕ ЧЕГО СЧ�?ТАЕТ КОНТРОЛЬНУЮ СУММУ.
 * ВОЗВРАЩАЕТ 1 ЕСЛ�? КОНТРОЛЬНЫЕ СУММЫ СОШЛ�?СЬ
 * ВОЗВРАЩАЕТ 0 ЕСЛ�? СУММА НЕ СОШЛАСЬ �?Л�? ПАКЕТ ПОВРЕЖДЕН
 */
uint8_t CRC32_Status(uint8_t *buf, size_t buf_size, uint16_t pointer, buffer_t *crc32_buf){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08e      	sub	sp, #56	; 0x38
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	80fb      	strh	r3, [r7, #6]

	uint8_t crc_in_buf[8];												// С�?МВОЛЬНЫЙ БУФЕР ВХОДНОГО ЗНАЧЕН�?Я CRC32
	uint8_t crc_string_count = 0;										// СЧЕТЧ�?К
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t crc_in = 0;												// ВХОДНОЕ ЗНАЧЕН�?Е CRC32
 8003dde:	2300      	movs	r3, #0
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t crc_out = 0;												// РАСЧ�?ТАНОЕ ЗНАЧЕН�?Е СRC32
 8003de2:	2300      	movs	r3, #0
 8003de4:	623b      	str	r3, [r7, #32]
	uint16_t crc_pointer = pointer;										// УКАЗАТЕЛЬ ДЛЯ НАБОРА МАСС�?ВА CRC32
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	82fb      	strh	r3, [r7, #22]

	uint16_t crc_count = string_pack_amount * string_size;				// МАКС�?МАЛЬНОЕ КОЛ�?ЧЕСТВО С�?МВОЛОВ В ПАКЕТЕ
 8003dea:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8003dee:	84fb      	strh	r3, [r7, #38]	; 0x26

	// ОБНУЛЯЕМ ХВОСТ БУФЕРА
	crc32_buf->tail = 0;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8a3 2960 	strh.w	r2, [r3, #2400]	; 0x960

	// ПОКА БУФЕР НЕ ЗАКОНЧ�?ТСЯ
	while(crc_count){
 8003df8:	e082      	b.n	8003f00 <CRC32_Status+0x138>

		// ЕСЛ�? НАЙДЕНА СТАРТОВАЯ КОМБ�?НАЦ�?Я, ЗНАЧ�?Т ЧТО-ТО НЕ ТАК
		if(FindString((uint8_t *)buf, buf_size, &crc_pointer, "PDS", 3)){
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f107 0216 	add.w	r2, r7, #22
 8003e00:	2303      	movs	r3, #3
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <CRC32_Status+0x15c>)
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	f000 f89c 	bl	8003f44 <FindString>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <CRC32_Status+0x4e>
			//место_для_вашей_ошибки
			return 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e082      	b.n	8003f1c <CRC32_Status+0x154>
		}

		// ЕСЛ�? НАЙДЕН "CRC", ЗНАЧ�?Т МАСС�?В НАБРАН. ПР�?СТУПАЕМ К РАСЧЕТУ
		if(FindString((uint8_t *)buf, buf_size, &crc_pointer, "CRC", 3)){
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f107 0216 	add.w	r2, r7, #22
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <CRC32_Status+0x160>)
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	f000 f88e 	bl	8003f44 <FindString>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d05c      	beq.n	8003ee8 <CRC32_Status+0x120>

			// ПРОПУСКАЕМ ';'
			PassSym((uint8_t *)&buf, buf_size, &crc_pointer, 1);
 8003e2e:	f107 0216 	add.w	r2, r7, #22
 8003e32:	f107 000c 	add.w	r0, r7, #12
 8003e36:	2301      	movs	r3, #1
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	f000 f989 	bl	8004150 <PassSym>

			// РАСЧ�?ТЫВАЕМ CRC32 �?З МАСС�?ВА
			crc_out = Crc32((const unsigned char*)crc32_buf, crc32_buf->tail);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f8b3 3960 	ldrh.w	r3, [r3, #2400]	; 0x960
 8003e44:	4619      	mov	r1, r3
 8003e46:	6838      	ldr	r0, [r7, #0]
 8003e48:	f7fc fffe 	bl	8000e48 <Crc32>
 8003e4c:	6238      	str	r0, [r7, #32]
			crc_in = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28

			if(FindString(buf, buf_size, &crc_pointer, "NAN", 3)){
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f107 0216 	add.w	r2, r7, #22
 8003e58:	2303      	movs	r3, #3
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	4b33      	ldr	r3, [pc, #204]	; (8003f2c <CRC32_Status+0x164>)
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	f000 f870 	bl	8003f44 <FindString>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d024      	beq.n	8003eb4 <CRC32_Status+0xec>
				PutERROR((string_t *)&datastring,"CRC_NAN");
 8003e6a:	4931      	ldr	r1, [pc, #196]	; (8003f30 <CRC32_Status+0x168>)
 8003e6c:	4831      	ldr	r0, [pc, #196]	; (8003f34 <CRC32_Status+0x16c>)
 8003e6e:	f7ff fced 	bl	800384c <PutERROR>
				return 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e052      	b.n	8003f1c <CRC32_Status+0x154>
			}

			// ПАРС�?М ЗНАЧЕН�?Е CRC32 �?З ПАКЕТА
			while(buf[crc_pointer] != (uint8_t)';' && (crc_string_count < 8)){
				crc_in_buf[crc_string_count] = buf[crc_pointer];
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8afa      	ldrh	r2, [r7, #22]
 8003e7a:	441a      	add	r2, r3
 8003e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003e86:	440b      	add	r3, r1
 8003e88:	f803 2c18 	strb.w	r2, [r3, #-24]

				// ПЕРЕВОД�?М ПОЛУЧЕНУЮ СТРОКУ В DEC
				crc_in = HexToDec((char *)&crc_in_buf,8);
 8003e8c:	f107 0318 	add.w	r3, r7, #24
 8003e90:	2108      	movs	r1, #8
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f9b0 	bl	80041f8 <HexToDec>
 8003e98:	62b8      	str	r0, [r7, #40]	; 0x28

				// ВЫВОЖУ СRC В 0-Ю СТРКОУ ДЛЯ ОТЛАДК�?
//				datastring[ctrl_string_8].buf[crc_string_count] = buf[crc_pointer];
//				datastring[ctrl_string_8].number = ctrl_string_8;

				PassSym((uint8_t *)&buf, buf_size, &crc_pointer, 1);
 8003e9a:	f107 0216 	add.w	r2, r7, #22
 8003e9e:	f107 000c 	add.w	r0, r7, #12
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	f000 f953 	bl	8004150 <PassSym>
				crc_string_count++;
 8003eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while(buf[crc_pointer] != (uint8_t)';' && (crc_string_count < 8)){
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8afa      	ldrh	r2, [r7, #22]
 8003eb8:	4413      	add	r3, r2
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b3b      	cmp	r3, #59	; 0x3b
 8003ebe:	d003      	beq.n	8003ec8 <CRC32_Status+0x100>
 8003ec0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ec4:	2b07      	cmp	r3, #7
 8003ec6:	d9d6      	bls.n	8003e76 <CRC32_Status+0xae>
			}

			// СРАВН�?ВАЕМ ЗНАЧЕН�?Я, ВЫВОД�?М СООТВЕТСТВУЮЩЕЕ СОСТОЯН�?Е CRC
			if(crc_in == crc_out){
 8003ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d105      	bne.n	8003edc <CRC32_Status+0x114>
				PutERROR((string_t *)&datastring,"CRC_OK");
 8003ed0:	4919      	ldr	r1, [pc, #100]	; (8003f38 <CRC32_Status+0x170>)
 8003ed2:	4818      	ldr	r0, [pc, #96]	; (8003f34 <CRC32_Status+0x16c>)
 8003ed4:	f7ff fcba 	bl	800384c <PutERROR>

				return 1;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e01f      	b.n	8003f1c <CRC32_Status+0x154>
			}
			else{
				PutERROR((string_t *)&datastring,"CRC_ERROR");
 8003edc:	4917      	ldr	r1, [pc, #92]	; (8003f3c <CRC32_Status+0x174>)
 8003ede:	4815      	ldr	r0, [pc, #84]	; (8003f34 <CRC32_Status+0x16c>)
 8003ee0:	f7ff fcb4 	bl	800384c <PutERROR>
				return 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e019      	b.n	8003f1c <CRC32_Status+0x154>
			}
			break;
		}
		PassSymCRC((uint8_t *)buf, buf_size, &crc_pointer, 1, crc32_buf);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f107 0216 	add.w	r2, r7, #22
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	f000 f951 	bl	800419c <PassSymCRC>
		crc_count--;
 8003efa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003efc:	3b01      	subs	r3, #1
 8003efe:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(crc_count){
 8003f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f47f af79 	bne.w	8003dfa <CRC32_Status+0x32>
	}

	// ЕСЛ�? БУФЕР ЗАКНОЧ�?ЛСЯ �? CRC НЕ БЫЛ НАЙДЕН
	if(!crc_count){
 8003f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <CRC32_Status+0x152>
		PutERROR((string_t *)&datastring,"CRC NOT FOUND");
 8003f0e:	490c      	ldr	r1, [pc, #48]	; (8003f40 <CRC32_Status+0x178>)
 8003f10:	4808      	ldr	r0, [pc, #32]	; (8003f34 <CRC32_Status+0x16c>)
 8003f12:	f7ff fc9b 	bl	800384c <PutERROR>
		return 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e000      	b.n	8003f1c <CRC32_Status+0x154>
	}
	return 0;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3730      	adds	r7, #48	; 0x30
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	0800fc5c 	.word	0x0800fc5c
 8003f28:	0800fc60 	.word	0x0800fc60
 8003f2c:	0800fcc0 	.word	0x0800fcc0
 8003f30:	0800fcc4 	.word	0x0800fcc4
 8003f34:	20006b48 	.word	0x20006b48
 8003f38:	0800fccc 	.word	0x0800fccc
 8003f3c:	0800fcd4 	.word	0x0800fcd4
 8003f40:	0800fce0 	.word	0x0800fce0

08003f44 <FindString>:
/* ФУНКЦ�?Я ПО�?СКА ПОДСТРОК�?(ПОСЛЕДОВАТЛЬНОСТ�? С�?МВОЛОВ) В �?СХОДНОМ МАСС�?ВЕ
 * ЕСЛ�? ПОСЛЕДОВАТЕЛЬНОСТЬ ОБНАРУЖЕНА ВОЗВРАЩАЕТ 1 �? ЗНАЧЕН�?Е �?НДЕКС pointer НА СЛЕДУЮЩ�?Й
 * С�?МВОЛ ПОСЛЕ �?СКОМОЙ СТРОК�?.
 * ЕСЛ�? ПОСЛЕДОВАТЕЛЬНОСТЬ НЕ ОБНАРУЖЕНА, ТО ВОЗРАЩАЕТ 0 �? НЕ МЕНЯЕТ pointer
 */
uint8_t FindString(uint8_t *buf,size_t buf_size,uint16_t *pointer,const char *str,size_t str_size){
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
	uint8_t count = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]
	uint16_t p = *pointer;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	82bb      	strh	r3, [r7, #20]
	while(count < str_size){
 8003f5c:	e01a      	b.n	8003f94 <FindString+0x50>
		if(buf[p] == (uint8_t)str[count]){
 8003f5e:	8abb      	ldrh	r3, [r7, #20]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	440b      	add	r3, r1
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d10e      	bne.n	8003f90 <FindString+0x4c>
			p = (p < buf_size - 1) ? p + 1 : 0;
 8003f72:	8aba      	ldrh	r2, [r7, #20]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d203      	bcs.n	8003f84 <FindString+0x40>
 8003f7c:	8abb      	ldrh	r3, [r7, #20]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	e000      	b.n	8003f86 <FindString+0x42>
 8003f84:	2300      	movs	r3, #0
 8003f86:	82bb      	strh	r3, [r7, #20]
			count++;
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	75fb      	strb	r3, [r7, #23]
 8003f8e:	e001      	b.n	8003f94 <FindString+0x50>
		}
		else return 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e007      	b.n	8003fa4 <FindString+0x60>
	while(count < str_size){
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	6a3a      	ldr	r2, [r7, #32]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d8e0      	bhi.n	8003f5e <FindString+0x1a>
	}

	*pointer = p;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8aba      	ldrh	r2, [r7, #20]
 8003fa0:	801a      	strh	r2, [r3, #0]
	return 1;
 8003fa2:	2301      	movs	r3, #1
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LED_control>:
/*
 *  ФУНКЦ�?Я М�?ГАЕТ СВЕТОД�?ОДАМ ОП�?САНЫМ СТРУКТУРОЙ led_status
 *  ON_time ЗАДАЕТ ВРЕМЯ, КОТОРОЕ СВЕТОД�?ОД ВКЛЮЧЕН
 *  OFF_time ЗАДАЕТ ВРЕМЯ, КОТОРОЕ СВЕТОД�?Д ВЫКЛЮЧЕН
 */
void LED_control(led_status *oneLED, uint16_t ON_time, uint16_t OFF_time){
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	803b      	strh	r3, [r7, #0]

	if(OFF_time == 0 && ON_time != 0){
 8003fc0:	883b      	ldrh	r3, [r7, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <LED_control+0x2e>
 8003fc6:	887b      	ldrh	r3, [r7, #2]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <LED_control+0x2e>
		HAL_GPIO_WritePin(oneLED->LED_port, oneLED->LED_pin, GPIO_PIN_SET);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6858      	ldr	r0, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	891b      	ldrh	r3, [r3, #8]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f003 f9c0 	bl	800735c <HAL_GPIO_WritePin>
		return;
 8003fdc:	e039      	b.n	8004052 <LED_control+0xa2>
	}

	if(ON_time == 0 && OFF_time != 0){
 8003fde:	887b      	ldrh	r3, [r7, #2]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <LED_control+0x4c>
 8003fe4:	883b      	ldrh	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <LED_control+0x4c>
		HAL_GPIO_WritePin(oneLED->LED_port, oneLED->LED_pin, GPIO_PIN_RESET);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6858      	ldr	r0, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	891b      	ldrh	r3, [r3, #8]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f003 f9b1 	bl	800735c <HAL_GPIO_WritePin>
		return;
 8003ffa:	e02a      	b.n	8004052 <LED_control+0xa2>
	}


	if(HAL_GetTick() - oneLED->timer < ON_time){
 8003ffc:	f001 fdae 	bl	8005b5c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	1ad2      	subs	r2, r2, r3
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	429a      	cmp	r2, r3
 800400c:	d208      	bcs.n	8004020 <LED_control+0x70>
		HAL_GPIO_WritePin(oneLED->LED_port, oneLED->LED_pin, GPIO_PIN_SET);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6858      	ldr	r0, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	891b      	ldrh	r3, [r3, #8]
 8004016:	2201      	movs	r2, #1
 8004018:	4619      	mov	r1, r3
 800401a:	f003 f99f 	bl	800735c <HAL_GPIO_WritePin>
 800401e:	e018      	b.n	8004052 <LED_control+0xa2>
	}
	else if(HAL_GetTick() - oneLED->timer < ON_time + OFF_time){
 8004020:	f001 fd9c 	bl	8005b5c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	8879      	ldrh	r1, [r7, #2]
 800402e:	883a      	ldrh	r2, [r7, #0]
 8004030:	440a      	add	r2, r1
 8004032:	4293      	cmp	r3, r2
 8004034:	d208      	bcs.n	8004048 <LED_control+0x98>

		HAL_GPIO_WritePin(oneLED->LED_port, oneLED->LED_pin, GPIO_PIN_RESET);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6858      	ldr	r0, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	891b      	ldrh	r3, [r3, #8]
 800403e:	2200      	movs	r2, #0
 8004040:	4619      	mov	r1, r3
 8004042:	f003 f98b 	bl	800735c <HAL_GPIO_WritePin>
 8004046:	e004      	b.n	8004052 <LED_control+0xa2>
	}
	else oneLED->timer = HAL_GetTick();
 8004048:	f001 fd88 	bl	8005b5c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
}
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <LEDs_OFF>:

void LEDs_OFF(){
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_232_GPIO_Port, RED_232_Pin, GPIO_PIN_RESET);
 800405c:	2200      	movs	r2, #0
 800405e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004062:	4821      	ldr	r0, [pc, #132]	; (80040e8 <LEDs_OFF+0x90>)
 8004064:	f003 f97a 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_232_GPIO_Port, GREEN_232_Pin, GPIO_PIN_RESET);
 8004068:	2200      	movs	r2, #0
 800406a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800406e:	481e      	ldr	r0, [pc, #120]	; (80040e8 <LEDs_OFF+0x90>)
 8004070:	f003 f974 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_232_GPIO_Port, BLUE_232_Pin, GPIO_PIN_RESET);
 8004074:	2200      	movs	r2, #0
 8004076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800407a:	481b      	ldr	r0, [pc, #108]	; (80040e8 <LEDs_OFF+0x90>)
 800407c:	f003 f96e 	bl	800735c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_485_GPIO_Port, RED_485_Pin, GPIO_PIN_RESET);
 8004080:	2200      	movs	r2, #0
 8004082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004086:	4818      	ldr	r0, [pc, #96]	; (80040e8 <LEDs_OFF+0x90>)
 8004088:	f003 f968 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_485_GPIO_Port, GREEN_485_Pin, GPIO_PIN_RESET);
 800408c:	2200      	movs	r2, #0
 800408e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004092:	4816      	ldr	r0, [pc, #88]	; (80040ec <LEDs_OFF+0x94>)
 8004094:	f003 f962 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_485_GPIO_Port, BLUE_485_Pin, GPIO_PIN_RESET);
 8004098:	2200      	movs	r2, #0
 800409a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800409e:	4813      	ldr	r0, [pc, #76]	; (80040ec <LEDs_OFF+0x94>)
 80040a0:	f003 f95c 	bl	800735c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_422_GPIO_Port, RED_422_Pin, GPIO_PIN_RESET);
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	; 0x80
 80040a8:	4811      	ldr	r0, [pc, #68]	; (80040f0 <LEDs_OFF+0x98>)
 80040aa:	f003 f957 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_422_GPIO_Port, GREEN_422_Pin, GPIO_PIN_RESET);
 80040ae:	2200      	movs	r2, #0
 80040b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040b4:	480e      	ldr	r0, [pc, #56]	; (80040f0 <LEDs_OFF+0x98>)
 80040b6:	f003 f951 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_422_GPIO_Port, BLUE_422_Pin, GPIO_PIN_RESET);
 80040ba:	2200      	movs	r2, #0
 80040bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040c0:	480c      	ldr	r0, [pc, #48]	; (80040f4 <LEDs_OFF+0x9c>)
 80040c2:	f003 f94b 	bl	800735c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STM32_BUTTON_LED_1_GPIO_Port, STM32_BUTTON_LED_1_Pin, GPIO_PIN_RESET);
 80040c6:	2200      	movs	r2, #0
 80040c8:	2120      	movs	r1, #32
 80040ca:	4807      	ldr	r0, [pc, #28]	; (80040e8 <LEDs_OFF+0x90>)
 80040cc:	f003 f946 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STM32_BUTTON_LED_2_GPIO_Port, STM32_BUTTON_LED_2_Pin, GPIO_PIN_RESET);
 80040d0:	2200      	movs	r2, #0
 80040d2:	2110      	movs	r1, #16
 80040d4:	4804      	ldr	r0, [pc, #16]	; (80040e8 <LEDs_OFF+0x90>)
 80040d6:	f003 f941 	bl	800735c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STM32_BUTTON_LED_3_GPIO_Port, STM32_BUTTON_LED_3_Pin, GPIO_PIN_RESET);
 80040da:	2200      	movs	r2, #0
 80040dc:	2140      	movs	r1, #64	; 0x40
 80040de:	4802      	ldr	r0, [pc, #8]	; (80040e8 <LEDs_OFF+0x90>)
 80040e0:	f003 f93c 	bl	800735c <HAL_GPIO_WritePin>
}
 80040e4:	bf00      	nop
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40020c00 	.word	0x40020c00
 80040ec:	40020400 	.word	0x40020400
 80040f0:	40020800 	.word	0x40020800
 80040f4:	40020000 	.word	0x40020000

080040f8 <PutString>:

void PutString(string_t *dtstring, const char* str, uint8_t *pointer){
 80040f8:	b590      	push	{r4, r7, lr}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
	for(uint8_t i = 0; i < strlen(str); i++){
 8004104:	2300      	movs	r3, #0
 8004106:	75fb      	strb	r3, [r7, #23]
 8004108:	e00c      	b.n	8004124 <PutString+0x2c>
		dtstring->buf[i + *pointer] = str[i];
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	441a      	add	r2, r3
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	7809      	ldrb	r1, [r1, #0]
 8004116:	440b      	add	r3, r1
 8004118:	7811      	ldrb	r1, [r2, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < strlen(str); i++){
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	3301      	adds	r3, #1
 8004122:	75fb      	strb	r3, [r7, #23]
 8004124:	7dfc      	ldrb	r4, [r7, #23]
 8004126:	68b8      	ldr	r0, [r7, #8]
 8004128:	f7fc f852 	bl	80001d0 <strlen>
 800412c:	4603      	mov	r3, r0
 800412e:	429c      	cmp	r4, r3
 8004130:	d3eb      	bcc.n	800410a <PutString+0x12>
	}

	*pointer += strlen(str);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	781c      	ldrb	r4, [r3, #0]
 8004136:	68b8      	ldr	r0, [r7, #8]
 8004138:	f7fc f84a 	bl	80001d0 <strlen>
 800413c:	4603      	mov	r3, r0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	4423      	add	r3, r4
 8004142:	b2da      	uxtb	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	701a      	strb	r2, [r3, #0]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}

08004150 <PassSym>:
 * ФУНКЦ�?Я ПРОПУСКАЕТ УКАЗАНОЕ КОЛ�?ЧЕСТВО С�?МВОЛОВ sym_amount
 * C УЧЕТОМ Ц�?КЛ�?ЧНОСТ�? БУФЕРА. ПРОПУЩЕНЫЕ С�?МВОЛЫ НЕ УЧ�?ТЫВАЮТСЯ ПР�? РАСЧЕТЕ CRC32
 * pointer_ - УКАЗАТЕЛЬ НА ТЕКУЩ�?Й ЭЛЕМЕНТ
 * sym_amount - КОЛ�?ЧЕСТВО ПРОПУСКАЕМЫХ С�?МВОЛОВ
 */
void PassSym(uint8_t *buf, size_t buf_size, uint16_t *pointer, uint8_t sym_amount){
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < sym_amount; i++){
 800415e:	2300      	movs	r3, #0
 8004160:	75fb      	strb	r3, [r7, #23]
 8004162:	e011      	b.n	8004188 <PassSym+0x38>
		*pointer = (*pointer < buf_size-1) ? *pointer + 1 : 0;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3b01      	subs	r3, #1
 800416e:	429a      	cmp	r2, r3
 8004170:	d204      	bcs.n	800417c <PassSym+0x2c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	3301      	adds	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	e000      	b.n	800417e <PassSym+0x2e>
 800417c:	2200      	movs	r2, #0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sym_amount; i++){
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	3301      	adds	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
 8004188:	7dfa      	ldrb	r2, [r7, #23]
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	429a      	cmp	r2, r3
 800418e:	d3e9      	bcc.n	8004164 <PassSym+0x14>
	}
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <PassSymCRC>:

/* ФУНКЦ�?Я ПРОПУСКАЕТ УКАЗАНОЕ КОЛ�?ЧЕСТВО С�?МВОЛОВ sym_amount
 * C УЧЕТОМ Ц�?КЛ�?ЧНОСТ�? БУФЕРА. ПРОПУЩЕНЫЕ С�?МВОЛЫ УЧ�?ТЫВАЮТСЯ ПР�? РАСЧЕТЕ CRC32*/
void PassSymCRC(uint8_t *buf,size_t buf_size,uint16_t *pointer, uint8_t sym_amount,buffer_t *crc_buf){
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < sym_amount; i++){
 80041aa:	2300      	movs	r3, #0
 80041ac:	75fb      	strb	r3, [r7, #23]
 80041ae:	e01b      	b.n	80041e8 <PassSymCRC+0x4c>
		CRC32_Put(crc_buf,buf[*pointer]);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	461a      	mov	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	4619      	mov	r1, r3
 80041be:	6a38      	ldr	r0, [r7, #32]
 80041c0:	f7fc fe6a 	bl	8000e98 <CRC32_Put>
		*pointer = (*pointer < buf_size-1) ? *pointer + 1 : 0;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d204      	bcs.n	80041dc <PassSymCRC+0x40>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	3301      	adds	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	e000      	b.n	80041de <PassSymCRC+0x42>
 80041dc:	2200      	movs	r2, #0
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sym_amount; i++){
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
 80041e4:	3301      	adds	r3, #1
 80041e6:	75fb      	strb	r3, [r7, #23]
 80041e8:	7dfa      	ldrb	r2, [r7, #23]
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d3df      	bcc.n	80041b0 <PassSymCRC+0x14>
	}
}
 80041f0:	bf00      	nop
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HexToDec>:

/*
 * ФУНКЦ�?Я ПЕРЕВОД�?Т 16-РАЗРЯДНОЕ Ч�?СЛО, ЗАП�?САННОЕ В МАСС�?ВЕ С�?МВОЛОВ
 * В 10-РАЗРЯДНОЕ �?НТОВОЕ ЗНАЧЕН�?Е.
 */
uint32_t HexToDec(char *hex,uint8_t size){
 80041f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
	uint32_t dec = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < size;i++){
 8004208:	2300      	movs	r3, #0
 800420a:	72fb      	strb	r3, [r7, #11]
 800420c:	e2db      	b.n	80047c6 <HexToDec+0x5ce>
		switch (hex[i]){
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4413      	add	r3, r2
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	3b30      	subs	r3, #48	; 0x30
 8004218:	2b16      	cmp	r3, #22
 800421a:	f200 82d1 	bhi.w	80047c0 <HexToDec+0x5c8>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HexToDec+0x2c>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	080047c1 	.word	0x080047c1
 8004228:	08004491 	.word	0x08004491
 800422c:	080044db 	.word	0x080044db
 8004230:	08004531 	.word	0x08004531
 8004234:	08004589 	.word	0x08004589
 8004238:	08004609 	.word	0x08004609
 800423c:	08004661 	.word	0x08004661
 8004240:	080046b9 	.word	0x080046b9
 8004244:	08004711 	.word	0x08004711
 8004248:	08004769 	.word	0x08004769
 800424c:	080047c1 	.word	0x080047c1
 8004250:	080047c1 	.word	0x080047c1
 8004254:	080047c1 	.word	0x080047c1
 8004258:	080047c1 	.word	0x080047c1
 800425c:	080047c1 	.word	0x080047c1
 8004260:	080047c1 	.word	0x080047c1
 8004264:	080047c1 	.word	0x080047c1
 8004268:	08004281 	.word	0x08004281
 800426c:	080042d9 	.word	0x080042d9
 8004270:	08004331 	.word	0x08004331
 8004274:	08004389 	.word	0x08004389
 8004278:	080043e1 	.word	0x080043e1
 800427c:	08004439 	.word	0x08004439
		case 'A': dec += 10 * pow(16,size-1 - i); break;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	1e5a      	subs	r2, r3, #1
 8004284:	7afb      	ldrb	r3, [r7, #11]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	4618      	mov	r0, r3
 800428a:	f7fc f8fb 	bl	8000484 <__aeabi_i2d>
 800428e:	4603      	mov	r3, r0
 8004290:	460c      	mov	r4, r1
 8004292:	ec44 3b11 	vmov	d1, r3, r4
 8004296:	ed9f 0bd2 	vldr	d0, [pc, #840]	; 80045e0 <HexToDec+0x3e8>
 800429a:	f009 fca9 	bl	800dbf0 <pow>
 800429e:	ec51 0b10 	vmov	r0, r1, d0
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	4bd0      	ldr	r3, [pc, #832]	; (80045e8 <HexToDec+0x3f0>)
 80042a8:	f7fc f956 	bl	8000558 <__aeabi_dmul>
 80042ac:	4603      	mov	r3, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	4625      	mov	r5, r4
 80042b2:	461c      	mov	r4, r3
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7fc f8d5 	bl	8000464 <__aeabi_ui2d>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4620      	mov	r0, r4
 80042c0:	4629      	mov	r1, r5
 80042c2:	f7fb ff93 	bl	80001ec <__adddf3>
 80042c6:	4603      	mov	r3, r0
 80042c8:	460c      	mov	r4, r1
 80042ca:	4618      	mov	r0, r3
 80042cc:	4621      	mov	r1, r4
 80042ce:	f7fc fc1b 	bl	8000b08 <__aeabi_d2uiz>
 80042d2:	4603      	mov	r3, r0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e273      	b.n	80047c0 <HexToDec+0x5c8>
		case 'B': dec += 11 * pow(16,size-1 - i); break;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	1e5a      	subs	r2, r3, #1
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fc f8cf 	bl	8000484 <__aeabi_i2d>
 80042e6:	4603      	mov	r3, r0
 80042e8:	460c      	mov	r4, r1
 80042ea:	ec44 3b11 	vmov	d1, r3, r4
 80042ee:	ed9f 0bbc 	vldr	d0, [pc, #752]	; 80045e0 <HexToDec+0x3e8>
 80042f2:	f009 fc7d 	bl	800dbf0 <pow>
 80042f6:	ec51 0b10 	vmov	r0, r1, d0
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	4bbb      	ldr	r3, [pc, #748]	; (80045ec <HexToDec+0x3f4>)
 8004300:	f7fc f92a 	bl	8000558 <__aeabi_dmul>
 8004304:	4603      	mov	r3, r0
 8004306:	460c      	mov	r4, r1
 8004308:	4625      	mov	r5, r4
 800430a:	461c      	mov	r4, r3
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7fc f8a9 	bl	8000464 <__aeabi_ui2d>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4620      	mov	r0, r4
 8004318:	4629      	mov	r1, r5
 800431a:	f7fb ff67 	bl	80001ec <__adddf3>
 800431e:	4603      	mov	r3, r0
 8004320:	460c      	mov	r4, r1
 8004322:	4618      	mov	r0, r3
 8004324:	4621      	mov	r1, r4
 8004326:	f7fc fbef 	bl	8000b08 <__aeabi_d2uiz>
 800432a:	4603      	mov	r3, r0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e247      	b.n	80047c0 <HexToDec+0x5c8>
		case 'C': dec += 12 * pow(16,size-1 - i); break;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	7afb      	ldrb	r3, [r7, #11]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc f8a3 	bl	8000484 <__aeabi_i2d>
 800433e:	4603      	mov	r3, r0
 8004340:	460c      	mov	r4, r1
 8004342:	ec44 3b11 	vmov	d1, r3, r4
 8004346:	ed9f 0ba6 	vldr	d0, [pc, #664]	; 80045e0 <HexToDec+0x3e8>
 800434a:	f009 fc51 	bl	800dbf0 <pow>
 800434e:	ec51 0b10 	vmov	r0, r1, d0
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	4ba6      	ldr	r3, [pc, #664]	; (80045f0 <HexToDec+0x3f8>)
 8004358:	f7fc f8fe 	bl	8000558 <__aeabi_dmul>
 800435c:	4603      	mov	r3, r0
 800435e:	460c      	mov	r4, r1
 8004360:	4625      	mov	r5, r4
 8004362:	461c      	mov	r4, r3
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7fc f87d 	bl	8000464 <__aeabi_ui2d>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	f7fb ff3b 	bl	80001ec <__adddf3>
 8004376:	4603      	mov	r3, r0
 8004378:	460c      	mov	r4, r1
 800437a:	4618      	mov	r0, r3
 800437c:	4621      	mov	r1, r4
 800437e:	f7fc fbc3 	bl	8000b08 <__aeabi_d2uiz>
 8004382:	4603      	mov	r3, r0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e21b      	b.n	80047c0 <HexToDec+0x5c8>
		case 'D': dec += 13 * pow(16,size-1 - i); break;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	1e5a      	subs	r2, r3, #1
 800438c:	7afb      	ldrb	r3, [r7, #11]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc f877 	bl	8000484 <__aeabi_i2d>
 8004396:	4603      	mov	r3, r0
 8004398:	460c      	mov	r4, r1
 800439a:	ec44 3b11 	vmov	d1, r3, r4
 800439e:	ed9f 0b90 	vldr	d0, [pc, #576]	; 80045e0 <HexToDec+0x3e8>
 80043a2:	f009 fc25 	bl	800dbf0 <pow>
 80043a6:	ec51 0b10 	vmov	r0, r1, d0
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	4b91      	ldr	r3, [pc, #580]	; (80045f4 <HexToDec+0x3fc>)
 80043b0:	f7fc f8d2 	bl	8000558 <__aeabi_dmul>
 80043b4:	4603      	mov	r3, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	4625      	mov	r5, r4
 80043ba:	461c      	mov	r4, r3
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7fc f851 	bl	8000464 <__aeabi_ui2d>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4620      	mov	r0, r4
 80043c8:	4629      	mov	r1, r5
 80043ca:	f7fb ff0f 	bl	80001ec <__adddf3>
 80043ce:	4603      	mov	r3, r0
 80043d0:	460c      	mov	r4, r1
 80043d2:	4618      	mov	r0, r3
 80043d4:	4621      	mov	r1, r4
 80043d6:	f7fc fb97 	bl	8000b08 <__aeabi_d2uiz>
 80043da:	4603      	mov	r3, r0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e1ef      	b.n	80047c0 <HexToDec+0x5c8>
		case 'E': dec += 14 * pow(16,size-1 - i); break;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	7afb      	ldrb	r3, [r7, #11]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fc f84b 	bl	8000484 <__aeabi_i2d>
 80043ee:	4603      	mov	r3, r0
 80043f0:	460c      	mov	r4, r1
 80043f2:	ec44 3b11 	vmov	d1, r3, r4
 80043f6:	ed9f 0b7a 	vldr	d0, [pc, #488]	; 80045e0 <HexToDec+0x3e8>
 80043fa:	f009 fbf9 	bl	800dbf0 <pow>
 80043fe:	ec51 0b10 	vmov	r0, r1, d0
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	4b7c      	ldr	r3, [pc, #496]	; (80045f8 <HexToDec+0x400>)
 8004408:	f7fc f8a6 	bl	8000558 <__aeabi_dmul>
 800440c:	4603      	mov	r3, r0
 800440e:	460c      	mov	r4, r1
 8004410:	4625      	mov	r5, r4
 8004412:	461c      	mov	r4, r3
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7fc f825 	bl	8000464 <__aeabi_ui2d>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f7fb fee3 	bl	80001ec <__adddf3>
 8004426:	4603      	mov	r3, r0
 8004428:	460c      	mov	r4, r1
 800442a:	4618      	mov	r0, r3
 800442c:	4621      	mov	r1, r4
 800442e:	f7fc fb6b 	bl	8000b08 <__aeabi_d2uiz>
 8004432:	4603      	mov	r3, r0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e1c3      	b.n	80047c0 <HexToDec+0x5c8>
		case 'F': dec += 15 * pow(16,size-1 - i); break;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	7afb      	ldrb	r3, [r7, #11]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	4618      	mov	r0, r3
 8004442:	f7fc f81f 	bl	8000484 <__aeabi_i2d>
 8004446:	4603      	mov	r3, r0
 8004448:	460c      	mov	r4, r1
 800444a:	ec44 3b11 	vmov	d1, r3, r4
 800444e:	ed9f 0b64 	vldr	d0, [pc, #400]	; 80045e0 <HexToDec+0x3e8>
 8004452:	f009 fbcd 	bl	800dbf0 <pow>
 8004456:	ec51 0b10 	vmov	r0, r1, d0
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	4b67      	ldr	r3, [pc, #412]	; (80045fc <HexToDec+0x404>)
 8004460:	f7fc f87a 	bl	8000558 <__aeabi_dmul>
 8004464:	4603      	mov	r3, r0
 8004466:	460c      	mov	r4, r1
 8004468:	4625      	mov	r5, r4
 800446a:	461c      	mov	r4, r3
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7fb fff9 	bl	8000464 <__aeabi_ui2d>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4620      	mov	r0, r4
 8004478:	4629      	mov	r1, r5
 800447a:	f7fb feb7 	bl	80001ec <__adddf3>
 800447e:	4603      	mov	r3, r0
 8004480:	460c      	mov	r4, r1
 8004482:	4618      	mov	r0, r3
 8004484:	4621      	mov	r1, r4
 8004486:	f7fc fb3f 	bl	8000b08 <__aeabi_d2uiz>
 800448a:	4603      	mov	r3, r0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e197      	b.n	80047c0 <HexToDec+0x5c8>

		case '1': dec += 1 * pow(16,size-1 - i); break;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	1e5a      	subs	r2, r3, #1
 8004494:	7afb      	ldrb	r3, [r7, #11]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	4618      	mov	r0, r3
 800449a:	f7fb fff3 	bl	8000484 <__aeabi_i2d>
 800449e:	4603      	mov	r3, r0
 80044a0:	460c      	mov	r4, r1
 80044a2:	ec44 3b11 	vmov	d1, r3, r4
 80044a6:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 80045e0 <HexToDec+0x3e8>
 80044aa:	f009 fba1 	bl	800dbf0 <pow>
 80044ae:	ec56 5b10 	vmov	r5, r6, d0
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7fb ffd6 	bl	8000464 <__aeabi_ui2d>
 80044b8:	4603      	mov	r3, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	461a      	mov	r2, r3
 80044be:	4623      	mov	r3, r4
 80044c0:	4628      	mov	r0, r5
 80044c2:	4631      	mov	r1, r6
 80044c4:	f7fb fe92 	bl	80001ec <__adddf3>
 80044c8:	4603      	mov	r3, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	4618      	mov	r0, r3
 80044ce:	4621      	mov	r1, r4
 80044d0:	f7fc fb1a 	bl	8000b08 <__aeabi_d2uiz>
 80044d4:	4603      	mov	r3, r0
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e172      	b.n	80047c0 <HexToDec+0x5c8>
		case '2': dec += 2 * pow(16,size-1 - i); break;
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	1e5a      	subs	r2, r3, #1
 80044de:	7afb      	ldrb	r3, [r7, #11]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fb ffce 	bl	8000484 <__aeabi_i2d>
 80044e8:	4603      	mov	r3, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	ec44 3b11 	vmov	d1, r3, r4
 80044f0:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 80045e0 <HexToDec+0x3e8>
 80044f4:	f009 fb7c 	bl	800dbf0 <pow>
 80044f8:	ec51 0b10 	vmov	r0, r1, d0
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	f7fb fe74 	bl	80001ec <__adddf3>
 8004504:	4603      	mov	r3, r0
 8004506:	460c      	mov	r4, r1
 8004508:	4625      	mov	r5, r4
 800450a:	461c      	mov	r4, r3
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7fb ffa9 	bl	8000464 <__aeabi_ui2d>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4620      	mov	r0, r4
 8004518:	4629      	mov	r1, r5
 800451a:	f7fb fe67 	bl	80001ec <__adddf3>
 800451e:	4603      	mov	r3, r0
 8004520:	460c      	mov	r4, r1
 8004522:	4618      	mov	r0, r3
 8004524:	4621      	mov	r1, r4
 8004526:	f7fc faef 	bl	8000b08 <__aeabi_d2uiz>
 800452a:	4603      	mov	r3, r0
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	e147      	b.n	80047c0 <HexToDec+0x5c8>
		case '3': dec += 3 * pow(16,size-1 - i); break;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	7afb      	ldrb	r3, [r7, #11]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	4618      	mov	r0, r3
 800453a:	f7fb ffa3 	bl	8000484 <__aeabi_i2d>
 800453e:	4603      	mov	r3, r0
 8004540:	460c      	mov	r4, r1
 8004542:	ec44 3b11 	vmov	d1, r3, r4
 8004546:	ed9f 0b26 	vldr	d0, [pc, #152]	; 80045e0 <HexToDec+0x3e8>
 800454a:	f009 fb51 	bl	800dbf0 <pow>
 800454e:	ec51 0b10 	vmov	r0, r1, d0
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <HexToDec+0x408>)
 8004558:	f7fb fffe 	bl	8000558 <__aeabi_dmul>
 800455c:	4603      	mov	r3, r0
 800455e:	460c      	mov	r4, r1
 8004560:	4625      	mov	r5, r4
 8004562:	461c      	mov	r4, r3
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7fb ff7d 	bl	8000464 <__aeabi_ui2d>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4620      	mov	r0, r4
 8004570:	4629      	mov	r1, r5
 8004572:	f7fb fe3b 	bl	80001ec <__adddf3>
 8004576:	4603      	mov	r3, r0
 8004578:	460c      	mov	r4, r1
 800457a:	4618      	mov	r0, r3
 800457c:	4621      	mov	r1, r4
 800457e:	f7fc fac3 	bl	8000b08 <__aeabi_d2uiz>
 8004582:	4603      	mov	r3, r0
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e11b      	b.n	80047c0 <HexToDec+0x5c8>
		case '4': dec += 4 * pow(16,size-1 - i); break;
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	1e5a      	subs	r2, r3, #1
 800458c:	7afb      	ldrb	r3, [r7, #11]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	4618      	mov	r0, r3
 8004592:	f7fb ff77 	bl	8000484 <__aeabi_i2d>
 8004596:	4603      	mov	r3, r0
 8004598:	460c      	mov	r4, r1
 800459a:	ec44 3b11 	vmov	d1, r3, r4
 800459e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80045e0 <HexToDec+0x3e8>
 80045a2:	f009 fb25 	bl	800dbf0 <pow>
 80045a6:	ec51 0b10 	vmov	r0, r1, d0
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <HexToDec+0x40c>)
 80045b0:	f7fb ffd2 	bl	8000558 <__aeabi_dmul>
 80045b4:	4603      	mov	r3, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	4625      	mov	r5, r4
 80045ba:	461c      	mov	r4, r3
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7fb ff51 	bl	8000464 <__aeabi_ui2d>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4620      	mov	r0, r4
 80045c8:	4629      	mov	r1, r5
 80045ca:	f7fb fe0f 	bl	80001ec <__adddf3>
 80045ce:	4603      	mov	r3, r0
 80045d0:	460c      	mov	r4, r1
 80045d2:	4618      	mov	r0, r3
 80045d4:	4621      	mov	r1, r4
 80045d6:	f7fc fa97 	bl	8000b08 <__aeabi_d2uiz>
 80045da:	4603      	mov	r3, r0
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	e0ef      	b.n	80047c0 <HexToDec+0x5c8>
 80045e0:	00000000 	.word	0x00000000
 80045e4:	40300000 	.word	0x40300000
 80045e8:	40240000 	.word	0x40240000
 80045ec:	40260000 	.word	0x40260000
 80045f0:	40280000 	.word	0x40280000
 80045f4:	402a0000 	.word	0x402a0000
 80045f8:	402c0000 	.word	0x402c0000
 80045fc:	402e0000 	.word	0x402e0000
 8004600:	40080000 	.word	0x40080000
 8004604:	40100000 	.word	0x40100000
		case '5': dec += 5 * pow(16,size-1 - i); break;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	7afb      	ldrb	r3, [r7, #11]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	4618      	mov	r0, r3
 8004612:	f7fb ff37 	bl	8000484 <__aeabi_i2d>
 8004616:	4603      	mov	r3, r0
 8004618:	460c      	mov	r4, r1
 800461a:	ec44 3b11 	vmov	d1, r3, r4
 800461e:	ed9f 0b70 	vldr	d0, [pc, #448]	; 80047e0 <HexToDec+0x5e8>
 8004622:	f009 fae5 	bl	800dbf0 <pow>
 8004626:	ec51 0b10 	vmov	r0, r1, d0
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	4b6e      	ldr	r3, [pc, #440]	; (80047e8 <HexToDec+0x5f0>)
 8004630:	f7fb ff92 	bl	8000558 <__aeabi_dmul>
 8004634:	4603      	mov	r3, r0
 8004636:	460c      	mov	r4, r1
 8004638:	4625      	mov	r5, r4
 800463a:	461c      	mov	r4, r3
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7fb ff11 	bl	8000464 <__aeabi_ui2d>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4620      	mov	r0, r4
 8004648:	4629      	mov	r1, r5
 800464a:	f7fb fdcf 	bl	80001ec <__adddf3>
 800464e:	4603      	mov	r3, r0
 8004650:	460c      	mov	r4, r1
 8004652:	4618      	mov	r0, r3
 8004654:	4621      	mov	r1, r4
 8004656:	f7fc fa57 	bl	8000b08 <__aeabi_d2uiz>
 800465a:	4603      	mov	r3, r0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e0af      	b.n	80047c0 <HexToDec+0x5c8>
		case '6': dec += 6 * pow(16,size-1 - i); break;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	1e5a      	subs	r2, r3, #1
 8004664:	7afb      	ldrb	r3, [r7, #11]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	4618      	mov	r0, r3
 800466a:	f7fb ff0b 	bl	8000484 <__aeabi_i2d>
 800466e:	4603      	mov	r3, r0
 8004670:	460c      	mov	r4, r1
 8004672:	ec44 3b11 	vmov	d1, r3, r4
 8004676:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 80047e0 <HexToDec+0x5e8>
 800467a:	f009 fab9 	bl	800dbf0 <pow>
 800467e:	ec51 0b10 	vmov	r0, r1, d0
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	4b59      	ldr	r3, [pc, #356]	; (80047ec <HexToDec+0x5f4>)
 8004688:	f7fb ff66 	bl	8000558 <__aeabi_dmul>
 800468c:	4603      	mov	r3, r0
 800468e:	460c      	mov	r4, r1
 8004690:	4625      	mov	r5, r4
 8004692:	461c      	mov	r4, r3
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7fb fee5 	bl	8000464 <__aeabi_ui2d>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4620      	mov	r0, r4
 80046a0:	4629      	mov	r1, r5
 80046a2:	f7fb fda3 	bl	80001ec <__adddf3>
 80046a6:	4603      	mov	r3, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	4618      	mov	r0, r3
 80046ac:	4621      	mov	r1, r4
 80046ae:	f7fc fa2b 	bl	8000b08 <__aeabi_d2uiz>
 80046b2:	4603      	mov	r3, r0
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e083      	b.n	80047c0 <HexToDec+0x5c8>
		case '7': dec += 7 * pow(16,size-1 - i); break;
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	1e5a      	subs	r2, r3, #1
 80046bc:	7afb      	ldrb	r3, [r7, #11]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fb fedf 	bl	8000484 <__aeabi_i2d>
 80046c6:	4603      	mov	r3, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	ec44 3b11 	vmov	d1, r3, r4
 80046ce:	ed9f 0b44 	vldr	d0, [pc, #272]	; 80047e0 <HexToDec+0x5e8>
 80046d2:	f009 fa8d 	bl	800dbf0 <pow>
 80046d6:	ec51 0b10 	vmov	r0, r1, d0
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	4b44      	ldr	r3, [pc, #272]	; (80047f0 <HexToDec+0x5f8>)
 80046e0:	f7fb ff3a 	bl	8000558 <__aeabi_dmul>
 80046e4:	4603      	mov	r3, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	4625      	mov	r5, r4
 80046ea:	461c      	mov	r4, r3
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7fb feb9 	bl	8000464 <__aeabi_ui2d>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4620      	mov	r0, r4
 80046f8:	4629      	mov	r1, r5
 80046fa:	f7fb fd77 	bl	80001ec <__adddf3>
 80046fe:	4603      	mov	r3, r0
 8004700:	460c      	mov	r4, r1
 8004702:	4618      	mov	r0, r3
 8004704:	4621      	mov	r1, r4
 8004706:	f7fc f9ff 	bl	8000b08 <__aeabi_d2uiz>
 800470a:	4603      	mov	r3, r0
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e057      	b.n	80047c0 <HexToDec+0x5c8>
		case '8': dec += 8 * pow(16,size-1 - i); break;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	1e5a      	subs	r2, r3, #1
 8004714:	7afb      	ldrb	r3, [r7, #11]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	4618      	mov	r0, r3
 800471a:	f7fb feb3 	bl	8000484 <__aeabi_i2d>
 800471e:	4603      	mov	r3, r0
 8004720:	460c      	mov	r4, r1
 8004722:	ec44 3b11 	vmov	d1, r3, r4
 8004726:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80047e0 <HexToDec+0x5e8>
 800472a:	f009 fa61 	bl	800dbf0 <pow>
 800472e:	ec51 0b10 	vmov	r0, r1, d0
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <HexToDec+0x5fc>)
 8004738:	f7fb ff0e 	bl	8000558 <__aeabi_dmul>
 800473c:	4603      	mov	r3, r0
 800473e:	460c      	mov	r4, r1
 8004740:	4625      	mov	r5, r4
 8004742:	461c      	mov	r4, r3
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7fb fe8d 	bl	8000464 <__aeabi_ui2d>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4620      	mov	r0, r4
 8004750:	4629      	mov	r1, r5
 8004752:	f7fb fd4b 	bl	80001ec <__adddf3>
 8004756:	4603      	mov	r3, r0
 8004758:	460c      	mov	r4, r1
 800475a:	4618      	mov	r0, r3
 800475c:	4621      	mov	r1, r4
 800475e:	f7fc f9d3 	bl	8000b08 <__aeabi_d2uiz>
 8004762:	4603      	mov	r3, r0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e02b      	b.n	80047c0 <HexToDec+0x5c8>
		case '9': dec += 9 * pow(16,size-1 - i); break;
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	1e5a      	subs	r2, r3, #1
 800476c:	7afb      	ldrb	r3, [r7, #11]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	4618      	mov	r0, r3
 8004772:	f7fb fe87 	bl	8000484 <__aeabi_i2d>
 8004776:	4603      	mov	r3, r0
 8004778:	460c      	mov	r4, r1
 800477a:	ec44 3b11 	vmov	d1, r3, r4
 800477e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80047e0 <HexToDec+0x5e8>
 8004782:	f009 fa35 	bl	800dbf0 <pow>
 8004786:	ec51 0b10 	vmov	r0, r1, d0
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HexToDec+0x600>)
 8004790:	f7fb fee2 	bl	8000558 <__aeabi_dmul>
 8004794:	4603      	mov	r3, r0
 8004796:	460c      	mov	r4, r1
 8004798:	4625      	mov	r5, r4
 800479a:	461c      	mov	r4, r3
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7fb fe61 	bl	8000464 <__aeabi_ui2d>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4620      	mov	r0, r4
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7fb fd1f 	bl	80001ec <__adddf3>
 80047ae:	4603      	mov	r3, r0
 80047b0:	460c      	mov	r4, r1
 80047b2:	4618      	mov	r0, r3
 80047b4:	4621      	mov	r1, r4
 80047b6:	f7fc f9a7 	bl	8000b08 <__aeabi_d2uiz>
 80047ba:	4603      	mov	r3, r0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	bf00      	nop
	for(uint8_t i = 0; i < size;i++){
 80047c0:	7afb      	ldrb	r3, [r7, #11]
 80047c2:	3301      	adds	r3, #1
 80047c4:	72fb      	strb	r3, [r7, #11]
 80047c6:	7afa      	ldrb	r2, [r7, #11]
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	f4ff ad1f 	bcc.w	800420e <HexToDec+0x16>
		case '0': dec += 0; break;
		}
	}
	return dec;
 80047d0:	68fb      	ldr	r3, [r7, #12]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047da:	bf00      	nop
 80047dc:	f3af 8000 	nop.w
 80047e0:	00000000 	.word	0x00000000
 80047e4:	40300000 	.word	0x40300000
 80047e8:	40140000 	.word	0x40140000
 80047ec:	40180000 	.word	0x40180000
 80047f0:	401c0000 	.word	0x401c0000
 80047f4:	40200000 	.word	0x40200000
 80047f8:	40220000 	.word	0x40220000

080047fc <LEDStringPars>:

/*
 * ФУНКЦ�?Я ПАРС�?НГА СТРОК СВЕТОД�?ОДОВ
 *
 */
void LEDStringPars(string_t *datastring, RGB_status *leds){
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]

	// Т.К. 3 RGB
	for(uint8_t i = 0; i < 3; i++){
 8004806:	2300      	movs	r3, #0
 8004808:	73fb      	strb	r3, [r7, #15]
 800480a:	e04c      	b.n	80048a6 <LEDStringPars+0xaa>
		uint8_t pointer = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	73bb      	strb	r3, [r7, #14]
		while(pointer < 6){
 8004810:	e043      	b.n	800489a <LEDStringPars+0x9e>
			switch(datastring[serv_string_1].buf[pointer]){
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004818:	3311      	adds	r3, #17
 800481a:	7bba      	ldrb	r2, [r7, #14]
 800481c:	5c9b      	ldrb	r3, [r3, r2]
 800481e:	2b47      	cmp	r3, #71	; 0x47
 8004820:	d015      	beq.n	800484e <LEDStringPars+0x52>
 8004822:	2b52      	cmp	r3, #82	; 0x52
 8004824:	d002      	beq.n	800482c <LEDStringPars+0x30>
 8004826:	2b42      	cmp	r3, #66	; 0x42
 8004828:	d022      	beq.n	8004870 <LEDStringPars+0x74>
 800482a:	e033      	b.n	8004894 <LEDStringPars+0x98>
			case (uint8_t)'R': leds[i].RED.LED_status = datastring[serv_string_1].buf[pointer+1]; break;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 5222 	add.w	r2, r3, #10368	; 0x2880
 8004832:	3211      	adds	r2, #17
 8004834:	7bbb      	ldrb	r3, [r7, #14]
 8004836:	1c58      	adds	r0, r3, #1
 8004838:	7bf9      	ldrb	r1, [r7, #15]
 800483a:	460b      	mov	r3, r1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	440b      	add	r3, r1
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	440b      	add	r3, r1
 8004848:	5c12      	ldrb	r2, [r2, r0]
 800484a:	701a      	strb	r2, [r3, #0]
 800484c:	e022      	b.n	8004894 <LEDStringPars+0x98>
			case (uint8_t)'G': leds[i].GREEN.LED_status = datastring[serv_string_1].buf[pointer+1]; break;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f503 5222 	add.w	r2, r3, #10368	; 0x2880
 8004854:	3211      	adds	r2, #17
 8004856:	7bbb      	ldrb	r3, [r7, #14]
 8004858:	1c58      	adds	r0, r3, #1
 800485a:	7bf9      	ldrb	r1, [r7, #15]
 800485c:	460b      	mov	r3, r1
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	440b      	add	r3, r1
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	4619      	mov	r1, r3
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	440b      	add	r3, r1
 800486a:	5c12      	ldrb	r2, [r2, r0]
 800486c:	741a      	strb	r2, [r3, #16]
 800486e:	e011      	b.n	8004894 <LEDStringPars+0x98>
			case (uint8_t)'B': leds[i].BLUE.LED_status = datastring[serv_string_1].buf[pointer+1]; break;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f503 5222 	add.w	r2, r3, #10368	; 0x2880
 8004876:	3211      	adds	r2, #17
 8004878:	7bbb      	ldrb	r3, [r7, #14]
 800487a:	1c58      	adds	r0, r3, #1
 800487c:	7bf9      	ldrb	r1, [r7, #15]
 800487e:	460b      	mov	r3, r1
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	440b      	add	r3, r1
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	440b      	add	r3, r1
 800488c:	5c12      	ldrb	r2, [r2, r0]
 800488e:	f883 2020 	strb.w	r2, [r3, #32]
 8004892:	bf00      	nop
			}
			pointer++;
 8004894:	7bbb      	ldrb	r3, [r7, #14]
 8004896:	3301      	adds	r3, #1
 8004898:	73bb      	strb	r3, [r7, #14]
		while(pointer < 6){
 800489a:	7bbb      	ldrb	r3, [r7, #14]
 800489c:	2b05      	cmp	r3, #5
 800489e:	d9b8      	bls.n	8004812 <LEDStringPars+0x16>
	for(uint8_t i = 0; i < 3; i++){
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	3301      	adds	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d9af      	bls.n	800480c <LEDStringPars+0x10>
		}
	}
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <ServiceStringPars>:

/*
 * ФУНКЦ�?Я СТРОК�?, УПРАВЛЯЮЩ�?Е РЕЛЕ, DC �? ДС�?ПЛЕЕМ
 */
void ServiceStringPars(string_t *datastring, ctrl_status *active){
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
	active->RELE[0] = (datastring[serv_string_2].buf[1] == '1') ? 1 : 0;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80048c8:	3314      	adds	r3, #20
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b31      	cmp	r3, #49	; 0x31
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	701a      	strb	r2, [r3, #0]
	active->RELE[1] = (datastring[serv_string_2].buf[3] == '1') ? 1 : 0;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80048e2:	3314      	adds	r3, #20
 80048e4:	78db      	ldrb	r3, [r3, #3]
 80048e6:	2b31      	cmp	r3, #49	; 0x31
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	705a      	strb	r2, [r3, #1]
	active->RELE[2] = (datastring[serv_string_2].buf[5] == '1') ? 1 : 0;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80048fc:	3314      	adds	r3, #20
 80048fe:	795b      	ldrb	r3, [r3, #5]
 8004900:	2b31      	cmp	r3, #49	; 0x31
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	709a      	strb	r2, [r3, #2]
	active->RELE[3] = (datastring[serv_string_2].buf[7] == '1') ? 1 : 0;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8004916:	3314      	adds	r3, #20
 8004918:	79db      	ldrb	r3, [r3, #7]
 800491a:	2b31      	cmp	r3, #49	; 0x31
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	70da      	strb	r2, [r3, #3]
	active->DC = datastring[serv_string_2].buf[10] - 48;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8004930:	3314      	adds	r3, #20
 8004932:	7a9b      	ldrb	r3, [r3, #10]
 8004934:	3b30      	subs	r3, #48	; 0x30
 8004936:	b2da      	uxtb	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	711a      	strb	r2, [r3, #4]
	active->DISP = datastring[serv_string_2].buf[15] - 48;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8004942:	3314      	adds	r3, #20
 8004944:	7bdb      	ldrb	r3, [r3, #15]
 8004946:	3b30      	subs	r3, #48	; 0x30
 8004948:	b2da      	uxtb	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	715a      	strb	r2, [r3, #5]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_UART_RxHalfCpltCallback>:

/*
 * ОБРАБОТЧ�?К ПРЕРЫВАН�?Й ПОЛОВ�?НЫ ПЕРЕПОЛНЕН�?Я БУФЕРА uatrt_buf
 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	uart_hlf_flag = 1;
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20001098 	.word	0x20001098

0800497c <DisplayInit>:

/*
 * фУНКЦ�?Я �?Н�?Ц�?АЛ�?ЗАЦ�?�? Д�?СПЛЕЯ
 */
void DisplayInit(u8g2_t* u8g2){
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	u8g2_Setup_ssd1322_nhd_256x64_f(u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <DisplayInit+0x30>)
 8004986:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <DisplayInit+0x34>)
 8004988:	490a      	ldr	r1, [pc, #40]	; (80049b4 <DisplayInit+0x38>)
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f005 fa76 	bl	8009e7c <u8g2_Setup_ssd1322_nhd_256x64_f>
	u8g2_InitDisplay(u8g2);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f006 ff0f 	bl	800b7b4 <u8x8_InitDisplay>
	u8g2_ClearDisplay(u8g2);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f005 fa4b 	bl	8009e32 <u8g2_ClearDisplay>
	u8g2_SetPowerSave(u8g2, 0);
 800499c:	2100      	movs	r1, #0
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f006 ff17 	bl	800b7d2 <u8x8_SetPowerSave>
}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	08005005 	.word	0x08005005
 80049b0:	080050f1 	.word	0x080050f1
 80049b4:	08014e34 	.word	0x08014e34

080049b8 <MX_GPIO_Init>:
     PA2   ------> SharedAnalog_PA2
     PA3   ------> SharedAnalog_PA3
     PB5   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08c      	sub	sp, #48	; 0x30
 80049bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049be:	f107 031c 	add.w	r3, r7, #28
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	605a      	str	r2, [r3, #4]
 80049c8:	609a      	str	r2, [r3, #8]
 80049ca:	60da      	str	r2, [r3, #12]
 80049cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	4b9d      	ldr	r3, [pc, #628]	; (8004c48 <MX_GPIO_Init+0x290>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	4a9c      	ldr	r2, [pc, #624]	; (8004c48 <MX_GPIO_Init+0x290>)
 80049d8:	f043 0304 	orr.w	r3, r3, #4
 80049dc:	6313      	str	r3, [r2, #48]	; 0x30
 80049de:	4b9a      	ldr	r3, [pc, #616]	; (8004c48 <MX_GPIO_Init+0x290>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	4b96      	ldr	r3, [pc, #600]	; (8004c48 <MX_GPIO_Init+0x290>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	4a95      	ldr	r2, [pc, #596]	; (8004c48 <MX_GPIO_Init+0x290>)
 80049f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f8:	6313      	str	r3, [r2, #48]	; 0x30
 80049fa:	4b93      	ldr	r3, [pc, #588]	; (8004c48 <MX_GPIO_Init+0x290>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	4b8f      	ldr	r3, [pc, #572]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	4a8e      	ldr	r2, [pc, #568]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6313      	str	r3, [r2, #48]	; 0x30
 8004a16:	4b8c      	ldr	r3, [pc, #560]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	4b88      	ldr	r3, [pc, #544]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	4a87      	ldr	r2, [pc, #540]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	6313      	str	r3, [r2, #48]	; 0x30
 8004a32:	4b85      	ldr	r3, [pc, #532]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	4b81      	ldr	r3, [pc, #516]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	4a80      	ldr	r2, [pc, #512]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a48:	f043 0310 	orr.w	r3, r3, #16
 8004a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4e:	4b7e      	ldr	r3, [pc, #504]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	4b7a      	ldr	r3, [pc, #488]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	4a79      	ldr	r2, [pc, #484]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a64:	f043 0308 	orr.w	r3, r3, #8
 8004a68:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6a:	4b77      	ldr	r3, [pc, #476]	; (8004c48 <MX_GPIO_Init+0x290>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STM32_OUT_DOG_Pin|STM32_RS_DC_DC_Pin|STM32_relay_swith_pin_Pin|STM32_relay_outside_Pin 
 8004a76:	2200      	movs	r2, #0
 8004a78:	f242 319e 	movw	r1, #9118	; 0x239e
 8004a7c:	4873      	ldr	r0, [pc, #460]	; (8004c4c <MX_GPIO_Init+0x294>)
 8004a7e:	f002 fc6d 	bl	800735c <HAL_GPIO_WritePin>
                          |OLED_CS_Pin|RED_422_Pin|SYM_LED_R_Pin|GREEN_422_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RES_Pin|OLED_D_C_Pin|BLUE_422_Pin, GPIO_PIN_RESET);
 8004a82:	2200      	movs	r2, #0
 8004a84:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004a88:	4871      	ldr	r0, [pc, #452]	; (8004c50 <MX_GPIO_Init+0x298>)
 8004a8a:	f002 fc67 	bl	800735c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SYM_LED_G_Pin|BLUE_485_Pin|SYM_LED_B_Pin|GREEN_485_Pin 
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f24f 3110 	movw	r1, #62224	; 0xf310
 8004a94:	486f      	ldr	r0, [pc, #444]	; (8004c54 <MX_GPIO_Init+0x29c>)
 8004a96:	f002 fc61 	bl	800735c <HAL_GPIO_WritePin>
                          |STM32_OUT_REL_3_Pin|STM32_OUT_REL_2_Pin|STM32_OUT_REL_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STM32_BUTTON_LED_POWER_Pin|RED_485_Pin|STM32_ZUMMER_Pin|BLUE_232_Pin 
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8004aa0:	486d      	ldr	r0, [pc, #436]	; (8004c58 <MX_GPIO_Init+0x2a0>)
 8004aa2:	f002 fc5b 	bl	800735c <HAL_GPIO_WritePin>
                          |STM32_Relay_mmn_Pin|GREEN_232_Pin|STM32_Relay_mother_Pin|RED_232_Pin 
                          |STM32_BUTTON_LED_2_Pin|STM32_BUTTON_LED_1_Pin|STM32_BUTTON_LED_3_Pin|STM32_OUT_REL_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STM32_OUT_DOG_Pin|STM32_RS_DC_DC_Pin|STM32_relay_swith_pin_Pin|STM32_relay_outside_Pin;
 8004aa6:	f242 030e 	movw	r3, #8206	; 0x200e
 8004aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aac:	2301      	movs	r3, #1
 8004aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab8:	f107 031c 	add.w	r3, r7, #28
 8004abc:	4619      	mov	r1, r3
 8004abe:	4863      	ldr	r0, [pc, #396]	; (8004c4c <MX_GPIO_Init+0x294>)
 8004ac0:	f002 fa9a 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM32_BUTTON_POWER_Pin;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004acc:	2301      	movs	r3, #1
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(STM32_BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 8004ad0:	f107 031c 	add.w	r3, r7, #28
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	485d      	ldr	r0, [pc, #372]	; (8004c4c <MX_GPIO_Init+0x294>)
 8004ad8:	f002 fa8e 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STM32_ADC_NTC_1_Pin|STM32_ADC_5V_Pin|STM32_ADC_3_3V_Pin|STM32_ADC_12V_Pin;
 8004adc:	230f      	movs	r3, #15
 8004ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae8:	f107 031c 	add.w	r3, r7, #28
 8004aec:	4619      	mov	r1, r3
 8004aee:	4858      	ldr	r0, [pc, #352]	; (8004c50 <MX_GPIO_Init+0x298>)
 8004af0:	f002 fa82 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_D_C_Pin|BLUE_422_Pin;
 8004af4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004afa:	2301      	movs	r3, #1
 8004afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004afe:	2302      	movs	r3, #2
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b02:	2300      	movs	r3, #0
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b06:	f107 031c 	add.w	r3, r7, #28
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4850      	ldr	r0, [pc, #320]	; (8004c50 <MX_GPIO_Init+0x298>)
 8004b0e:	f002 fa73 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|RED_422_Pin|SYM_LED_R_Pin|GREEN_422_Pin;
 8004b12:	f44f 7364 	mov.w	r3, #912	; 0x390
 8004b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b20:	2300      	movs	r3, #0
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b24:	f107 031c 	add.w	r3, r7, #28
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4848      	ldr	r0, [pc, #288]	; (8004c4c <MX_GPIO_Init+0x294>)
 8004b2c:	f002 fa64 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004b30:	2304      	movs	r3, #4
 8004b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b34:	2300      	movs	r3, #0
 8004b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004b3c:	f107 031c 	add.w	r3, r7, #28
 8004b40:	4619      	mov	r1, r3
 8004b42:	4844      	ldr	r0, [pc, #272]	; (8004c54 <MX_GPIO_Init+0x29c>)
 8004b44:	f002 fa58 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = STM32_Conn_1_Pin|STM32_Conn_2_Pin;
 8004b48:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b52:	2301      	movs	r3, #1
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b56:	f107 031c 	add.w	r3, r7, #28
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	483f      	ldr	r0, [pc, #252]	; (8004c5c <MX_GPIO_Init+0x2a4>)
 8004b5e:	f002 fa4b 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SYM_LED_G_Pin|BLUE_485_Pin|SYM_LED_B_Pin|GREEN_485_Pin;
 8004b62:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b70:	2300      	movs	r3, #0
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b74:	f107 031c 	add.w	r3, r7, #28
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4836      	ldr	r0, [pc, #216]	; (8004c54 <MX_GPIO_Init+0x29c>)
 8004b7c:	f002 fa3c 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STM32_BUTTON_LED_POWER_Pin|RED_485_Pin|STM32_ZUMMER_Pin|BLUE_232_Pin 
 8004b80:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004b84:	61fb      	str	r3, [r7, #28]
                          |STM32_Relay_mmn_Pin|GREEN_232_Pin|STM32_Relay_mother_Pin|RED_232_Pin 
                          |STM32_BUTTON_LED_2_Pin|STM32_BUTTON_LED_1_Pin|STM32_BUTTON_LED_3_Pin|STM32_OUT_REL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b86:	2301      	movs	r3, #1
 8004b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b92:	f107 031c 	add.w	r3, r7, #28
 8004b96:	4619      	mov	r1, r3
 8004b98:	482f      	ldr	r0, [pc, #188]	; (8004c58 <MX_GPIO_Init+0x2a0>)
 8004b9a:	f002 fa2d 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM32_R_24_NC_Pin;
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(STM32_R_24_NC_GPIO_Port, &GPIO_InitStruct);
 8004baa:	f107 031c 	add.w	r3, r7, #28
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4826      	ldr	r0, [pc, #152]	; (8004c4c <MX_GPIO_Init+0x294>)
 8004bb2:	f002 fa21 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM32_R_24_NO_Pin;
 8004bb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(STM32_R_24_NO_GPIO_Port, &GPIO_InitStruct);
 8004bc4:	f107 031c 	add.w	r3, r7, #28
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4821      	ldr	r0, [pc, #132]	; (8004c50 <MX_GPIO_Init+0x298>)
 8004bcc:	f002 fa14 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STM32_BUTTON_2_Pin|STM32_BUTTON_1_Pin|STM32_BUTTON_3_Pin;
 8004bd0:	2307      	movs	r3, #7
 8004bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bdc:	f107 031c 	add.w	r3, r7, #28
 8004be0:	4619      	mov	r1, r3
 8004be2:	481d      	ldr	r0, [pc, #116]	; (8004c58 <MX_GPIO_Init+0x2a0>)
 8004be4:	f002 fa08 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = STM32_OUT_REL_3_Pin|STM32_OUT_REL_2_Pin|STM32_OUT_REL_1_Pin;
 8004be8:	f44f 7344 	mov.w	r3, #784	; 0x310
 8004bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bfa:	f107 031c 	add.w	r3, r7, #28
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4814      	ldr	r0, [pc, #80]	; (8004c54 <MX_GPIO_Init+0x29c>)
 8004c02:	f002 f9f9 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM32_I2C_WP_Pin;
 8004c06:	2320      	movs	r3, #32
 8004c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c12:	2300      	movs	r3, #0
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c16:	2306      	movs	r3, #6
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STM32_I2C_WP_GPIO_Port, &GPIO_InitStruct);
 8004c1a:	f107 031c 	add.w	r3, r7, #28
 8004c1e:	4619      	mov	r1, r3
 8004c20:	480c      	ldr	r0, [pc, #48]	; (8004c54 <MX_GPIO_Init+0x29c>)
 8004c22:	f002 f9e9 	bl	8006ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INPUT_OUTSIDE_2_Pin|INPUT_OUTSIDE_1_Pin;
 8004c26:	2303      	movs	r3, #3
 8004c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c32:	f107 031c 	add.w	r3, r7, #28
 8004c36:	4619      	mov	r1, r3
 8004c38:	4808      	ldr	r0, [pc, #32]	; (8004c5c <MX_GPIO_Init+0x2a4>)
 8004c3a:	f002 f9dd 	bl	8006ff8 <HAL_GPIO_Init>

}
 8004c3e:	bf00      	nop
 8004c40:	3730      	adds	r7, #48	; 0x30
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40020800 	.word	0x40020800
 8004c50:	40020000 	.word	0x40020000
 8004c54:	40020400 	.word	0x40020400
 8004c58:	40020c00 	.word	0x40020c00
 8004c5c:	40021000 	.word	0x40021000

08004c60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004c64:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <MX_I2C1_Init+0x50>)
 8004c66:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004c6a:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <MX_I2C1_Init+0x50>)
 8004c6c:	4a12      	ldr	r2, [pc, #72]	; (8004cb8 <MX_I2C1_Init+0x58>)
 8004c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <MX_I2C1_Init+0x50>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c76:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <MX_I2C1_Init+0x50>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <MX_I2C1_Init+0x50>)
 8004c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <MX_I2C1_Init+0x50>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <MX_I2C1_Init+0x50>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <MX_I2C1_Init+0x50>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <MX_I2C1_Init+0x50>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c9c:	4804      	ldr	r0, [pc, #16]	; (8004cb0 <MX_I2C1_Init+0x50>)
 8004c9e:	f002 fb91 	bl	80073c4 <HAL_I2C_Init>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004ca8:	f000 fa8a 	bl	80051c0 <Error_Handler>
  }

}
 8004cac:	bf00      	nop
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200095f8 	.word	0x200095f8
 8004cb4:	40005400 	.word	0x40005400
 8004cb8:	000186a0 	.word	0x000186a0

08004cbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc4:	f107 0314 	add.w	r3, r7, #20
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_I2C_MspInit+0x84>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d12b      	bne.n	8004d36 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <HAL_I2C_MspInit+0x88>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <HAL_I2C_MspInit+0x88>)
 8004ce8:	f043 0302 	orr.w	r3, r3, #2
 8004cec:	6313      	str	r3, [r2, #48]	; 0x30
 8004cee:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <HAL_I2C_MspInit+0x88>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cfa:	23c0      	movs	r3, #192	; 0xc0
 8004cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cfe:	2312      	movs	r3, #18
 8004d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d02:	2301      	movs	r3, #1
 8004d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d06:	2303      	movs	r3, #3
 8004d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d0a:	2304      	movs	r3, #4
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0e:	f107 0314 	add.w	r3, r7, #20
 8004d12:	4619      	mov	r1, r3
 8004d14:	480c      	ldr	r0, [pc, #48]	; (8004d48 <HAL_I2C_MspInit+0x8c>)
 8004d16:	f002 f96f 	bl	8006ff8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_I2C_MspInit+0x88>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	4a08      	ldr	r2, [pc, #32]	; (8004d44 <HAL_I2C_MspInit+0x88>)
 8004d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d28:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_I2C_MspInit+0x88>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004d36:	bf00      	nop
 8004d38:	3728      	adds	r7, #40	; 0x28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40005400 	.word	0x40005400
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40020400 	.word	0x40020400

08004d4c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <MX_IWDG_Init+0x2c>)
 8004d52:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <MX_IWDG_Init+0x30>)
 8004d54:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <MX_IWDG_Init+0x2c>)
 8004d58:	2204      	movs	r2, #4
 8004d5a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <MX_IWDG_Init+0x2c>)
 8004d5e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004d62:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004d64:	4804      	ldr	r0, [pc, #16]	; (8004d78 <MX_IWDG_Init+0x2c>)
 8004d66:	f002 fc65 	bl	8007634 <HAL_IWDG_Init>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8004d70:	f000 fa26 	bl	80051c0 <Error_Handler>
  }

}
 8004d74:	bf00      	nop
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	2000964c 	.word	0x2000964c
 8004d7c:	40003000 	.word	0x40003000

08004d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d84:	f000 feb4 	bl	8005af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d88:	f000 f81e 	bl	8004dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d8c:	f7ff fe14 	bl	80049b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d90:	f7fc f9e6 	bl	8001160 <MX_DMA_Init>
  MX_SPI1_Init();
 8004d94:	f000 fa7a 	bl	800528c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8004d98:	f000 fd9c 	bl	80058d4 <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8004d9c:	f7ff ffd6 	bl	8004d4c <MX_IWDG_Init>
  MX_ADC1_Init();
 8004da0:	f7fc f8d0 	bl	8000f44 <MX_ADC1_Init>
  MX_TIM7_Init();
 8004da4:	f000 fc8a 	bl	80056bc <MX_TIM7_Init>
  MX_SPI3_Init();
 8004da8:	f000 faa8 	bl	80052fc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8004dac:	f000 fd68 	bl	8005880 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004db0:	f7ff ff56 	bl	8004c60 <MX_I2C1_Init>
  MX_TIM14_Init();
 8004db4:	f000 fcdc 	bl	8005770 <MX_TIM14_Init>
  MX_TIM13_Init();
 8004db8:	f000 fcb6 	bl	8005728 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8004dbc:	f7fc fa20 	bl	8001200 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8004dc0:	f006 fdaf 	bl	800b922 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004dc4:	e7fe      	b.n	8004dc4 <main+0x44>
	...

08004dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b094      	sub	sp, #80	; 0x50
 8004dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dce:	f107 0320 	add.w	r3, r7, #32
 8004dd2:	2230      	movs	r2, #48	; 0x30
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f008 fe79 	bl	800dace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ddc:	f107 030c 	add.w	r3, r7, #12
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	4b29      	ldr	r3, [pc, #164]	; (8004e98 <SystemClock_Config+0xd0>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	4a28      	ldr	r2, [pc, #160]	; (8004e98 <SystemClock_Config+0xd0>)
 8004df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfc:	4b26      	ldr	r3, [pc, #152]	; (8004e98 <SystemClock_Config+0xd0>)
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	4b23      	ldr	r3, [pc, #140]	; (8004e9c <SystemClock_Config+0xd4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a22      	ldr	r2, [pc, #136]	; (8004e9c <SystemClock_Config+0xd4>)
 8004e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <SystemClock_Config+0xd4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004e24:	2309      	movs	r3, #9
 8004e26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e32:	2302      	movs	r3, #2
 8004e34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004e40:	23a8      	movs	r3, #168	; 0xa8
 8004e42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e44:	2302      	movs	r3, #2
 8004e46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004e48:	2307      	movs	r3, #7
 8004e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e4c:	f107 0320 	add.w	r3, r7, #32
 8004e50:	4618      	mov	r0, r3
 8004e52:	f002 fc39 	bl	80076c8 <HAL_RCC_OscConfig>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004e5c:	f000 f9b0 	bl	80051c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e60:	230f      	movs	r3, #15
 8004e62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e64:	2302      	movs	r3, #2
 8004e66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004e70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004e78:	f107 030c 	add.w	r3, r7, #12
 8004e7c:	2105      	movs	r1, #5
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f002 fe92 	bl	8007ba8 <HAL_RCC_ClockConfig>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004e8a:	f000 f999 	bl	80051c0 <Error_Handler>
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3750      	adds	r7, #80	; 0x50
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40007000 	.word	0x40007000

08004ea0 <LoadWindow>:

/* USER CODE BEGIN 4 */
uint8_t LoadWindow(u8g2_t *u8g2, uint16_t logo_width, uint16_t logo_height, uint8_t *logo_bits){
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	817b      	strh	r3, [r7, #10]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	813b      	strh	r3, [r7, #8]

	u8g2_DrawXBMP(u8g2, 8, 0, logo_width, logo_height, logo_bits);
 8004eb2:	897b      	ldrh	r3, [r7, #10]
 8004eb4:	b2d9      	uxtb	r1, r3
 8004eb6:	893b      	ldrh	r3, [r7, #8]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	9201      	str	r2, [sp, #4]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2108      	movs	r1, #8
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f004 fe5e 	bl	8009b88 <u8g2_DrawXBMP>
	u8g2_SetFont(u8g2, u8g2_font_cu12_t_cyrillic);
 8004ecc:	4919      	ldr	r1, [pc, #100]	; (8004f34 <LoadWindow+0x94>)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f005 fd74 	bl	800a9bc <u8g2_SetFont>
	u8g2_DrawUTF8(u8g2, 3, 62, "Загрузка");
 8004ed4:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <LoadWindow+0x98>)
 8004ed6:	223e      	movs	r2, #62	; 0x3e
 8004ed8:	2103      	movs	r1, #3
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f005 fccc 	bl	800a878 <u8g2_DrawUTF8>
	u8g2_SendBuffer(u8g2);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f004 ff3e 	bl	8009d62 <u8g2_SendBuffer>

	for(uint8_t i = 0; i < 19; i++){
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]
 8004eea:	e01b      	b.n	8004f24 <LoadWindow+0x84>
		osDelay(100);
 8004eec:	2064      	movs	r0, #100	; 0x64
 8004eee:	f006 fd6b 	bl	800b9c8 <osDelay>
		u8g2_DrawUTF8(u8g2, 64 + i*10, 62, ".");
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	0092      	lsls	r2, r2, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	3340      	adds	r3, #64	; 0x40
 8004f00:	b2d9      	uxtb	r1, r3
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <LoadWindow+0x9c>)
 8004f04:	223e      	movs	r2, #62	; 0x3e
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f005 fcb6 	bl	800a878 <u8g2_DrawUTF8>
		u8g2_SendBuffer(u8g2);
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f004 ff28 	bl	8009d62 <u8g2_SendBuffer>
		if(!display_stat){
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <LoadWindow+0xa0>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <LoadWindow+0x7e>
			i = 19;
 8004f1a:	2313      	movs	r3, #19
 8004f1c:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < 19; i++){
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	3301      	adds	r3, #1
 8004f22:	75fb      	strb	r3, [r7, #23]
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	2b12      	cmp	r3, #18
 8004f28:	d9e0      	bls.n	8004eec <LoadWindow+0x4c>
		}
	}

	return 0;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	08010884 	.word	0x08010884
 8004f38:	0800fcf0 	.word	0x0800fcf0
 8004f3c:	0800fd04 	.word	0x0800fd04
 8004f40:	20000000 	.word	0x20000000

08004f44 <OFF_Window>:

void OFF_Window(u8g2_t *u8g2){
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	u8g2_SetFont(u8g2, u8g2_font_cu12_t_cyrillic);
 8004f4c:	4918      	ldr	r1, [pc, #96]	; (8004fb0 <OFF_Window+0x6c>)
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f005 fd34 	bl	800a9bc <u8g2_SetFont>
	u8g2_DrawUTF8(u8g2, 3, 62, "Выключение");
 8004f54:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <OFF_Window+0x70>)
 8004f56:	223e      	movs	r2, #62	; 0x3e
 8004f58:	2103      	movs	r1, #3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f005 fc8c 	bl	800a878 <u8g2_DrawUTF8>
	u8g2_SendBuffer(u8g2);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f004 fefe 	bl	8009d62 <u8g2_SendBuffer>

	osDelay(700);
 8004f66:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004f6a:	f006 fd2d 	bl	800b9c8 <osDelay>
	for(uint8_t i = 0; i < 3; i++){
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
 8004f72:	e016      	b.n	8004fa2 <OFF_Window+0x5e>
		u8g2_DrawUTF8(u8g2, 90 + i*10, 62, ".");
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	461a      	mov	r2, r3
 8004f78:	0092      	lsls	r2, r2, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	335a      	adds	r3, #90	; 0x5a
 8004f82:	b2d9      	uxtb	r1, r3
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <OFF_Window+0x74>)
 8004f86:	223e      	movs	r2, #62	; 0x3e
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f005 fc75 	bl	800a878 <u8g2_DrawUTF8>
		u8g2_SendBuffer(u8g2);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f004 fee7 	bl	8009d62 <u8g2_SendBuffer>
		osDelay(700);
 8004f94:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004f98:	f006 fd16 	bl	800b9c8 <osDelay>
	for(uint8_t i = 0; i < 3; i++){
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d9e5      	bls.n	8004f74 <OFF_Window+0x30>
	}
}
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	08010884 	.word	0x08010884
 8004fb4:	0800fd08 	.word	0x0800fd08
 8004fb8:	0800fd04 	.word	0x0800fd04

08004fbc <DrawSym>:

void DrawSym(u8g2_t *u8g2, uint8_t x, uint8_t y, uint8_t symcode){
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	70fb      	strb	r3, [r7, #3]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	70bb      	strb	r3, [r7, #2]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	707b      	strb	r3, [r7, #1]
	u8g2_SetFont(u8g2,u8g2_font_ncenR12_tf);
 8004fd6:	4909      	ldr	r1, [pc, #36]	; (8004ffc <DrawSym+0x40>)
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f005 fcef 	bl	800a9bc <u8g2_SetFont>
	u8g2_DrawGlyph(u8g2,x,y,symcode);
 8004fde:	787b      	ldrb	r3, [r7, #1]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	78ba      	ldrb	r2, [r7, #2]
 8004fe4:	78f9      	ldrb	r1, [r7, #3]
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f005 fb98 	bl	800a71c <u8g2_DrawGlyph>
	u8g2_SetFont(u8g2, u8g2_font_unifont_t_cyrillic);
 8004fec:	4904      	ldr	r1, [pc, #16]	; (8005000 <DrawSym+0x44>)
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f005 fce4 	bl	800a9bc <u8g2_SetFont>
}
 8004ff4:	bf00      	nop
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	08013f88 	.word	0x08013f88
 8005000:	0801257c 	.word	0x0801257c

08005004 <u8x8_stm32_gpio_and_delay>:


uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
    U8X8_UNUSED void *arg_ptr)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	72fb      	strb	r3, [r7, #11]
 8005012:	4613      	mov	r3, r2
 8005014:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 8005016:	7afb      	ldrb	r3, [r7, #11]
 8005018:	3b28      	subs	r3, #40	; 0x28
 800501a:	2b23      	cmp	r3, #35	; 0x23
 800501c:	d861      	bhi.n	80050e2 <u8x8_stm32_gpio_and_delay+0xde>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <u8x8_stm32_gpio_and_delay+0x20>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	080050b5 	.word	0x080050b5
 8005028:	080050bd 	.word	0x080050bd
 800502c:	080050e3 	.word	0x080050e3
 8005030:	080050e3 	.word	0x080050e3
 8005034:	080050e3 	.word	0x080050e3
 8005038:	080050e3 	.word	0x080050e3
 800503c:	080050e3 	.word	0x080050e3
 8005040:	080050e3 	.word	0x080050e3
 8005044:	080050e3 	.word	0x080050e3
 8005048:	080050e3 	.word	0x080050e3
 800504c:	080050e3 	.word	0x080050e3
 8005050:	080050e3 	.word	0x080050e3
 8005054:	080050e3 	.word	0x080050e3
 8005058:	080050e3 	.word	0x080050e3
 800505c:	080050e3 	.word	0x080050e3
 8005060:	080050e3 	.word	0x080050e3
 8005064:	080050e3 	.word	0x080050e3
 8005068:	080050e3 	.word	0x080050e3
 800506c:	080050e3 	.word	0x080050e3
 8005070:	080050e3 	.word	0x080050e3
 8005074:	080050e3 	.word	0x080050e3
 8005078:	080050e3 	.word	0x080050e3
 800507c:	080050e3 	.word	0x080050e3
 8005080:	080050e3 	.word	0x080050e3
 8005084:	080050e3 	.word	0x080050e3
 8005088:	080050e3 	.word	0x080050e3
 800508c:	080050e3 	.word	0x080050e3
 8005090:	080050e3 	.word	0x080050e3
 8005094:	080050e3 	.word	0x080050e3
 8005098:	080050e3 	.word	0x080050e3
 800509c:	080050e3 	.word	0x080050e3
 80050a0:	080050e3 	.word	0x080050e3
 80050a4:	080050e3 	.word	0x080050e3
 80050a8:	080050e3 	.word	0x080050e3
 80050ac:	080050c7 	.word	0x080050c7
 80050b0:	080050d5 	.word	0x080050d5
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    HAL_Delay(1);
 80050b4:	2001      	movs	r0, #1
 80050b6:	f000 fd5d 	bl	8005b74 <HAL_Delay>
    break;
 80050ba:	e012      	b.n	80050e2 <u8x8_stm32_gpio_and_delay+0xde>
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 80050bc:	7abb      	ldrb	r3, [r7, #10]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fd58 	bl	8005b74 <HAL_Delay>
    break;
 80050c4:	e00d      	b.n	80050e2 <u8x8_stm32_gpio_and_delay+0xde>
  case U8X8_MSG_GPIO_DC:
    HAL_GPIO_WritePin(OLED_D_C_GPIO_Port, OLED_D_C_Pin, arg_int);
 80050c6:	7abb      	ldrb	r3, [r7, #10]
 80050c8:	461a      	mov	r2, r3
 80050ca:	2140      	movs	r1, #64	; 0x40
 80050cc:	4807      	ldr	r0, [pc, #28]	; (80050ec <u8x8_stm32_gpio_and_delay+0xe8>)
 80050ce:	f002 f945 	bl	800735c <HAL_GPIO_WritePin>
    break;
 80050d2:	e006      	b.n	80050e2 <u8x8_stm32_gpio_and_delay+0xde>
  case U8X8_MSG_GPIO_RESET:
    HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
 80050d4:	7abb      	ldrb	r3, [r7, #10]
 80050d6:	461a      	mov	r2, r3
 80050d8:	2110      	movs	r1, #16
 80050da:	4804      	ldr	r0, [pc, #16]	; (80050ec <u8x8_stm32_gpio_and_delay+0xe8>)
 80050dc:	f002 f93e 	bl	800735c <HAL_GPIO_WritePin>
    break;
 80050e0:	bf00      	nop
  }
  return 1;
 80050e2:	2301      	movs	r3, #1
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40020000 	.word	0x40020000

080050f0 <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
    void *arg_ptr)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	460b      	mov	r3, r1
 80050fc:	72fb      	strb	r3, [r7, #11]
 80050fe:	4613      	mov	r3, r2
 8005100:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 8005102:	7afb      	ldrb	r3, [r7, #11]
 8005104:	3b14      	subs	r3, #20
 8005106:	2b0c      	cmp	r3, #12
 8005108:	d83a      	bhi.n	8005180 <u8x8_byte_4wire_hw_spi+0x90>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <u8x8_byte_4wire_hw_spi+0x20>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005185 	.word	0x08005185
 8005114:	08005181 	.word	0x08005181
 8005118:	08005181 	.word	0x08005181
 800511c:	08005145 	.word	0x08005145
 8005120:	08005165 	.word	0x08005165
 8005124:	08005173 	.word	0x08005173
 8005128:	08005181 	.word	0x08005181
 800512c:	08005181 	.word	0x08005181
 8005130:	08005181 	.word	0x08005181
 8005134:	08005181 	.word	0x08005181
 8005138:	08005181 	.word	0x08005181
 800513c:	08005181 	.word	0x08005181
 8005140:	08005157 	.word	0x08005157
  {
  case U8X8_MSG_BYTE_SEND:
    HAL_SPI_Transmit(&hspi1, (uint8_t *) arg_ptr, arg_int,1000);
 8005144:	7abb      	ldrb	r3, [r7, #10]
 8005146:	b29a      	uxth	r2, r3
 8005148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4810      	ldr	r0, [pc, #64]	; (8005190 <u8x8_byte_4wire_hw_spi+0xa0>)
 8005150:	f002 ffb2 	bl	80080b8 <HAL_SPI_Transmit>
    break;
 8005154:	e017      	b.n	8005186 <u8x8_byte_4wire_hw_spi+0x96>
  case U8X8_MSG_BYTE_INIT:
    break;
  case U8X8_MSG_BYTE_SET_DC:
    HAL_GPIO_WritePin(OLED_D_C_GPIO_Port, OLED_D_C_Pin, arg_int);
 8005156:	7abb      	ldrb	r3, [r7, #10]
 8005158:	461a      	mov	r2, r3
 800515a:	2140      	movs	r1, #64	; 0x40
 800515c:	480d      	ldr	r0, [pc, #52]	; (8005194 <u8x8_byte_4wire_hw_spi+0xa4>)
 800515e:	f002 f8fd 	bl	800735c <HAL_GPIO_WritePin>
    break;
 8005162:	e010      	b.n	8005186 <u8x8_byte_4wire_hw_spi+0x96>
  case U8X8_MSG_BYTE_START_TRANSFER:
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8005164:	2200      	movs	r2, #0
 8005166:	2110      	movs	r1, #16
 8005168:	480b      	ldr	r0, [pc, #44]	; (8005198 <u8x8_byte_4wire_hw_spi+0xa8>)
 800516a:	f002 f8f7 	bl	800735c <HAL_GPIO_WritePin>
	__NOP(); // 21 ns
 800516e:	bf00      	nop
    break;
 8005170:	e009      	b.n	8005186 <u8x8_byte_4wire_hw_spi+0x96>
  case U8X8_MSG_BYTE_END_TRANSFER:
	__NOP(); // 21 ns
 8005172:	bf00      	nop
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8005174:	2201      	movs	r2, #1
 8005176:	2110      	movs	r1, #16
 8005178:	4807      	ldr	r0, [pc, #28]	; (8005198 <u8x8_byte_4wire_hw_spi+0xa8>)
 800517a:	f002 f8ef 	bl	800735c <HAL_GPIO_WritePin>
    break;
 800517e:	e002      	b.n	8005186 <u8x8_byte_4wire_hw_spi+0x96>
  default:
    return 0;
 8005180:	2300      	movs	r3, #0
 8005182:	e001      	b.n	8005188 <u8x8_byte_4wire_hw_spi+0x98>
    break;
 8005184:	bf00      	nop
  }
  return 1;
 8005186:	2301      	movs	r3, #1
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20009658 	.word	0x20009658
 8005194:	40020000 	.word	0x40020000
 8005198:	40020800 	.word	0x40020800

0800519c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a04      	ldr	r2, [pc, #16]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80051ae:	f000 fcc1 	bl	8005b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40001000 	.word	0x40001000

080051c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b094      	sub	sp, #80	; 0x50
 80051c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

//	if(!RCC_CR_HSERDY){

		HSE_status = 0;
 80051c6:	4b2e      	ldr	r3, [pc, #184]	; (8005280 <Error_Handler+0xc0>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]

		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051cc:	f107 0320 	add.w	r3, r7, #32
 80051d0:	2230      	movs	r2, #48	; 0x30
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f008 fc7a 	bl	800dace <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051da:	f107 030c 	add.w	r3, r7, #12
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	605a      	str	r2, [r3, #4]
 80051e4:	609a      	str	r2, [r3, #8]
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		*/
		__HAL_RCC_PWR_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	4b25      	ldr	r3, [pc, #148]	; (8005284 <Error_Handler+0xc4>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	4a24      	ldr	r2, [pc, #144]	; (8005284 <Error_Handler+0xc4>)
 80051f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f8:	6413      	str	r3, [r2, #64]	; 0x40
 80051fa:	4b22      	ldr	r3, [pc, #136]	; (8005284 <Error_Handler+0xc4>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005202:	60bb      	str	r3, [r7, #8]
 8005204:	68bb      	ldr	r3, [r7, #8]
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005206:	2300      	movs	r3, #0
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	4b1f      	ldr	r3, [pc, #124]	; (8005288 <Error_Handler+0xc8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1e      	ldr	r2, [pc, #120]	; (8005288 <Error_Handler+0xc8>)
 8005210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <Error_Handler+0xc8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
		/** Initializes the CPU, AHB and APB busses clocks
		*/
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005222:	230a      	movs	r3, #10
 8005224:	623b      	str	r3, [r7, #32]
		RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005226:	2301      	movs	r3, #1
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
		RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800522a:	2310      	movs	r3, #16
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
		RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800522e:	2301      	movs	r3, #1
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005232:	2302      	movs	r3, #2
 8005234:	63bb      	str	r3, [r7, #56]	; 0x38
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005236:	2300      	movs	r3, #0
 8005238:	63fb      	str	r3, [r7, #60]	; 0x3c
		RCC_OscInitStruct.PLL.PLLM = 8;
 800523a:	2308      	movs	r3, #8
 800523c:	643b      	str	r3, [r7, #64]	; 0x40
		RCC_OscInitStruct.PLL.PLLN = 168;
 800523e:	23a8      	movs	r3, #168	; 0xa8
 8005240:	647b      	str	r3, [r7, #68]	; 0x44
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005242:	2302      	movs	r3, #2
 8005244:	64bb      	str	r3, [r7, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLQ = 7;
 8005246:	2307      	movs	r3, #7
 8005248:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800524a:	f107 0320 	add.w	r3, r7, #32
 800524e:	4618      	mov	r0, r3
 8005250:	f002 fa3a 	bl	80076c8 <HAL_RCC_OscConfig>
		{

		}
		/** Initializes the CPU, AHB and APB busses clocks
		*/
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005254:	230f      	movs	r3, #15
 8005256:	60fb      	str	r3, [r7, #12]
								  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005258:	2302      	movs	r3, #2
 800525a:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005260:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005264:	61bb      	str	r3, [r7, #24]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800526a:	61fb      	str	r3, [r7, #28]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800526c:	f107 030c 	add.w	r3, r7, #12
 8005270:	2105      	movs	r1, #5
 8005272:	4618      	mov	r0, r3
 8005274:	f002 fc98 	bl	8007ba8 <HAL_RCC_ClockConfig>
		}
//	}
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005278:	bf00      	nop
 800527a:	3750      	adds	r7, #80	; 0x50
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000001 	.word	0x20000001
 8005284:	40023800 	.word	0x40023800
 8005288:	40007000 	.word	0x40007000

0800528c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8005290:	4b18      	ldr	r3, [pc, #96]	; (80052f4 <MX_SPI1_Init+0x68>)
 8005292:	4a19      	ldr	r2, [pc, #100]	; (80052f8 <MX_SPI1_Init+0x6c>)
 8005294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005296:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <MX_SPI1_Init+0x68>)
 8005298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800529c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800529e:	4b15      	ldr	r3, [pc, #84]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80052a4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052a6:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052b8:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80052c0:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052c2:	2210      	movs	r2, #16
 80052c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052da:	220a      	movs	r2, #10
 80052dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80052de:	4805      	ldr	r0, [pc, #20]	; (80052f4 <MX_SPI1_Init+0x68>)
 80052e0:	f002 fe86 	bl	8007ff0 <HAL_SPI_Init>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80052ea:	f7ff ff69 	bl	80051c0 <Error_Handler>
  }

}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20009658 	.word	0x20009658
 80052f8:	40013000 	.word	0x40013000

080052fc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <MX_SPI3_Init+0x64>)
 8005302:	4a18      	ldr	r2, [pc, #96]	; (8005364 <MX_SPI3_Init+0x68>)
 8005304:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005306:	4b16      	ldr	r3, [pc, #88]	; (8005360 <MX_SPI3_Init+0x64>)
 8005308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800530c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800530e:	4b14      	ldr	r3, [pc, #80]	; (8005360 <MX_SPI3_Init+0x64>)
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005314:	4b12      	ldr	r3, [pc, #72]	; (8005360 <MX_SPI3_Init+0x64>)
 8005316:	2200      	movs	r2, #0
 8005318:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800531a:	4b11      	ldr	r3, [pc, #68]	; (8005360 <MX_SPI3_Init+0x64>)
 800531c:	2200      	movs	r2, #0
 800531e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005320:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <MX_SPI3_Init+0x64>)
 8005322:	2200      	movs	r2, #0
 8005324:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005326:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <MX_SPI3_Init+0x64>)
 8005328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800532e:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <MX_SPI3_Init+0x64>)
 8005330:	2218      	movs	r2, #24
 8005332:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <MX_SPI3_Init+0x64>)
 8005336:	2200      	movs	r2, #0
 8005338:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <MX_SPI3_Init+0x64>)
 800533c:	2200      	movs	r2, #0
 800533e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <MX_SPI3_Init+0x64>)
 8005342:	2200      	movs	r2, #0
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <MX_SPI3_Init+0x64>)
 8005348:	220a      	movs	r2, #10
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800534c:	4804      	ldr	r0, [pc, #16]	; (8005360 <MX_SPI3_Init+0x64>)
 800534e:	f002 fe4f 	bl	8007ff0 <HAL_SPI_Init>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8005358:	f7ff ff32 	bl	80051c0 <Error_Handler>
  }

}
 800535c:	bf00      	nop
 800535e:	bd80      	pop	{r7, pc}
 8005360:	200096b0 	.word	0x200096b0
 8005364:	40003c00 	.word	0x40003c00

08005368 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08c      	sub	sp, #48	; 0x30
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005370:	f107 031c 	add.w	r3, r7, #28
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a42      	ldr	r2, [pc, #264]	; (8005490 <HAL_SPI_MspInit+0x128>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d12c      	bne.n	80053e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	4b41      	ldr	r3, [pc, #260]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	4a40      	ldr	r2, [pc, #256]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 8005394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005398:	6453      	str	r3, [r2, #68]	; 0x44
 800539a:	4b3e      	ldr	r3, [pc, #248]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	4b3a      	ldr	r3, [pc, #232]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	4a39      	ldr	r2, [pc, #228]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	6313      	str	r3, [r2, #48]	; 0x30
 80053b6:	4b37      	ldr	r3, [pc, #220]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
 80053c2:	23a0      	movs	r3, #160	; 0xa0
 80053c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c6:	2302      	movs	r3, #2
 80053c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80053ca:	2302      	movs	r3, #2
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ce:	2303      	movs	r3, #3
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053d2:	2305      	movs	r3, #5
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053d6:	f107 031c 	add.w	r3, r7, #28
 80053da:	4619      	mov	r1, r3
 80053dc:	482e      	ldr	r0, [pc, #184]	; (8005498 <HAL_SPI_MspInit+0x130>)
 80053de:	f001 fe0b 	bl	8006ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80053e2:	e050      	b.n	8005486 <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2c      	ldr	r2, [pc, #176]	; (800549c <HAL_SPI_MspInit+0x134>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d14b      	bne.n	8005486 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	4b28      	ldr	r3, [pc, #160]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	4a27      	ldr	r2, [pc, #156]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 80053f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fc:	6413      	str	r3, [r2, #64]	; 0x40
 80053fe:	4b25      	ldr	r3, [pc, #148]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	4b21      	ldr	r3, [pc, #132]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	4a20      	ldr	r2, [pc, #128]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	6313      	str	r3, [r2, #48]	; 0x30
 800541a:	4b1e      	ldr	r3, [pc, #120]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005426:	2300      	movs	r3, #0
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	4b1a      	ldr	r3, [pc, #104]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	4a19      	ldr	r2, [pc, #100]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 8005430:	f043 0304 	orr.w	r3, r3, #4
 8005434:	6313      	str	r3, [r2, #48]	; 0x30
 8005436:	4b17      	ldr	r3, [pc, #92]	; (8005494 <HAL_SPI_MspInit+0x12c>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005448:	2302      	movs	r3, #2
 800544a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544c:	2300      	movs	r3, #0
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005450:	2303      	movs	r3, #3
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005454:	2306      	movs	r3, #6
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005458:	f107 031c 	add.w	r3, r7, #28
 800545c:	4619      	mov	r1, r3
 800545e:	480e      	ldr	r0, [pc, #56]	; (8005498 <HAL_SPI_MspInit+0x130>)
 8005460:	f001 fdca 	bl	8006ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005464:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546a:	2302      	movs	r3, #2
 800546c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546e:	2300      	movs	r3, #0
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005472:	2303      	movs	r3, #3
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005476:	2306      	movs	r3, #6
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800547a:	f107 031c 	add.w	r3, r7, #28
 800547e:	4619      	mov	r1, r3
 8005480:	4807      	ldr	r0, [pc, #28]	; (80054a0 <HAL_SPI_MspInit+0x138>)
 8005482:	f001 fdb9 	bl	8006ff8 <HAL_GPIO_Init>
}
 8005486:	bf00      	nop
 8005488:	3730      	adds	r7, #48	; 0x30
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40013000 	.word	0x40013000
 8005494:	40023800 	.word	0x40023800
 8005498:	40020000 	.word	0x40020000
 800549c:	40003c00 	.word	0x40003c00
 80054a0:	40020800 	.word	0x40020800

080054a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054aa:	2300      	movs	r3, #0
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	4b12      	ldr	r3, [pc, #72]	; (80054f8 <HAL_MspInit+0x54>)
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	4a11      	ldr	r2, [pc, #68]	; (80054f8 <HAL_MspInit+0x54>)
 80054b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054b8:	6453      	str	r3, [r2, #68]	; 0x44
 80054ba:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <HAL_MspInit+0x54>)
 80054bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c2:	607b      	str	r3, [r7, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054c6:	2300      	movs	r3, #0
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <HAL_MspInit+0x54>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <HAL_MspInit+0x54>)
 80054d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6413      	str	r3, [r2, #64]	; 0x40
 80054d6:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <HAL_MspInit+0x54>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80054e2:	2200      	movs	r2, #0
 80054e4:	210f      	movs	r1, #15
 80054e6:	f06f 0001 	mvn.w	r0, #1
 80054ea:	f001 f95b 	bl	80067a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800

080054fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08c      	sub	sp, #48	; 0x30
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800550c:	2200      	movs	r2, #0
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	2036      	movs	r0, #54	; 0x36
 8005512:	f001 f947 	bl	80067a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8005516:	2036      	movs	r0, #54	; 0x36
 8005518:	f001 f960 	bl	80067dc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <HAL_InitTick+0xa4>)
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <HAL_InitTick+0xa4>)
 8005526:	f043 0310 	orr.w	r3, r3, #16
 800552a:	6413      	str	r3, [r2, #64]	; 0x40
 800552c:	4b1c      	ldr	r3, [pc, #112]	; (80055a0 <HAL_InitTick+0xa4>)
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005538:	f107 0210 	add.w	r2, r7, #16
 800553c:	f107 0314 	add.w	r3, r7, #20
 8005540:	4611      	mov	r1, r2
 8005542:	4618      	mov	r0, r3
 8005544:	f002 fd22 	bl	8007f8c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005548:	f002 fcf8 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 800554c:	4603      	mov	r3, r0
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <HAL_InitTick+0xa8>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	0c9b      	lsrs	r3, r3, #18
 800555c:	3b01      	subs	r3, #1
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005560:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <HAL_InitTick+0xac>)
 8005562:	4a12      	ldr	r2, [pc, #72]	; (80055ac <HAL_InitTick+0xb0>)
 8005564:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8005566:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <HAL_InitTick+0xac>)
 8005568:	f240 32e7 	movw	r2, #999	; 0x3e7
 800556c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800556e:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <HAL_InitTick+0xac>)
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_InitTick+0xac>)
 8005576:	2200      	movs	r2, #0
 8005578:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_InitTick+0xac>)
 800557c:	2200      	movs	r2, #0
 800557e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005580:	4809      	ldr	r0, [pc, #36]	; (80055a8 <HAL_InitTick+0xac>)
 8005582:	f002 ff79 	bl	8008478 <HAL_TIM_Base_Init>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800558c:	4806      	ldr	r0, [pc, #24]	; (80055a8 <HAL_InitTick+0xac>)
 800558e:	f002 ff9e 	bl	80084ce <HAL_TIM_Base_Start_IT>
 8005592:	4603      	mov	r3, r0
 8005594:	e000      	b.n	8005598 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
}
 8005598:	4618      	mov	r0, r3
 800559a:	3730      	adds	r7, #48	; 0x30
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40023800 	.word	0x40023800
 80055a4:	431bde83 	.word	0x431bde83
 80055a8:	20009708 	.word	0x20009708
 80055ac:	40001000 	.word	0x40001000

080055b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055be:	b480      	push	{r7}
 80055c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055c2:	e7fe      	b.n	80055c2 <HardFault_Handler+0x4>

080055c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055c8:	e7fe      	b.n	80055c8 <MemManage_Handler+0x4>

080055ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055ca:	b480      	push	{r7}
 80055cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055ce:	e7fe      	b.n	80055ce <BusFault_Handler+0x4>

080055d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055d4:	e7fe      	b.n	80055d4 <UsageFault_Handler+0x4>

080055d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80055e8:	4802      	ldr	r0, [pc, #8]	; (80055f4 <DMA1_Stream1_IRQHandler+0x10>)
 80055ea:	f001 fa9d 	bl	8006b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20009808 	.word	0x20009808

080055f8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80055fc:	4802      	ldr	r0, [pc, #8]	; (8005608 <ADC_IRQHandler+0x10>)
 80055fe:	f000 fb1e 	bl	8005c3e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005602:	bf00      	nop
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20006a88 	.word	0x20006a88

0800560c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005610:	4802      	ldr	r0, [pc, #8]	; (800561c <USART3_IRQHandler+0x10>)
 8005612:	f003 fba3 	bl	8008d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005616:	bf00      	nop
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	200098a8 	.word	0x200098a8

08005620 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

	WDG_tim13_Handler();
 8005624:	f7fd fdc6 	bl	80031b4 <WDG_tim13_Handler>
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8005628:	4802      	ldr	r0, [pc, #8]	; (8005634 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800562a:	f002 ff74 	bl	8008516 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20009788 	.word	0x20009788

08005638 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	ADC_Read12vHandler();
 800563c:	f7fd fe40 	bl	80032c0 <ADC_Read12vHandler>
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005640:	4802      	ldr	r0, [pc, #8]	; (800564c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8005642:	f002 ff68 	bl	8008516 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20009748 	.word	0x20009748

08005650 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005654:	4802      	ldr	r0, [pc, #8]	; (8005660 <TIM6_DAC_IRQHandler+0x10>)
 8005656:	f002 ff5e 	bl	8008516 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20009708 	.word	0x20009708

08005664 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

	UPTIME_IRQHandler();
 8005668:	f7fd fd96 	bl	8003198 <UPTIME_IRQHandler>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800566c:	4802      	ldr	r0, [pc, #8]	; (8005678 <TIM7_IRQHandler+0x14>)
 800566e:	f002 ff52 	bl	8008516 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005672:	bf00      	nop
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	200097c8 	.word	0x200097c8

0800567c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005680:	4802      	ldr	r0, [pc, #8]	; (800568c <DMA2_Stream0_IRQHandler+0x10>)
 8005682:	f001 fa51 	bl	8006b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20006a28 	.word	0x20006a28

08005690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005694:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <SystemInit+0x28>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569a:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <SystemInit+0x28>)
 800569c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <SystemInit+0x28>)
 80056a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056aa:	609a      	str	r2, [r3, #8]
#endif
}
 80056ac:	bf00      	nop
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	e000ed00 	.word	0xe000ed00

080056bc <MX_TIM7_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056c2:	463b      	mov	r3, r7
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80056ca:	4b15      	ldr	r3, [pc, #84]	; (8005720 <MX_TIM7_Init+0x64>)
 80056cc:	4a15      	ldr	r2, [pc, #84]	; (8005724 <MX_TIM7_Init+0x68>)
 80056ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 80056d0:	4b13      	ldr	r3, [pc, #76]	; (8005720 <MX_TIM7_Init+0x64>)
 80056d2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80056d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056d8:	4b11      	ldr	r3, [pc, #68]	; (8005720 <MX_TIM7_Init+0x64>)
 80056da:	2200      	movs	r2, #0
 80056dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 80056de:	4b10      	ldr	r3, [pc, #64]	; (8005720 <MX_TIM7_Init+0x64>)
 80056e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80056e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <MX_TIM7_Init+0x64>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80056ec:	480c      	ldr	r0, [pc, #48]	; (8005720 <MX_TIM7_Init+0x64>)
 80056ee:	f002 fec3 	bl	8008478 <HAL_TIM_Base_Init>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80056f8:	f7ff fd62 	bl	80051c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056fc:	2300      	movs	r3, #0
 80056fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005700:	2300      	movs	r3, #0
 8005702:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005704:	463b      	mov	r3, r7
 8005706:	4619      	mov	r1, r3
 8005708:	4805      	ldr	r0, [pc, #20]	; (8005720 <MX_TIM7_Init+0x64>)
 800570a:	f003 f8d5 	bl	80088b8 <HAL_TIMEx_MasterConfigSynchronization>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005714:	f7ff fd54 	bl	80051c0 <Error_Handler>
  }

}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	200097c8 	.word	0x200097c8
 8005724:	40001400 	.word	0x40001400

08005728 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <MX_TIM13_Init+0x40>)
 800572e:	4a0f      	ldr	r2, [pc, #60]	; (800576c <MX_TIM13_Init+0x44>)
 8005730:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400;
 8005732:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <MX_TIM13_Init+0x40>)
 8005734:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8005738:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <MX_TIM13_Init+0x40>)
 800573c:	2200      	movs	r2, #0
 800573e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000;
 8005740:	4b09      	ldr	r3, [pc, #36]	; (8005768 <MX_TIM13_Init+0x40>)
 8005742:	f242 7210 	movw	r2, #10000	; 0x2710
 8005746:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005748:	4b07      	ldr	r3, [pc, #28]	; (8005768 <MX_TIM13_Init+0x40>)
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800574e:	4b06      	ldr	r3, [pc, #24]	; (8005768 <MX_TIM13_Init+0x40>)
 8005750:	2200      	movs	r2, #0
 8005752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005754:	4804      	ldr	r0, [pc, #16]	; (8005768 <MX_TIM13_Init+0x40>)
 8005756:	f002 fe8f 	bl	8008478 <HAL_TIM_Base_Init>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8005760:	f7ff fd2e 	bl	80051c0 <Error_Handler>
  }

}
 8005764:	bf00      	nop
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20009788 	.word	0x20009788
 800576c:	40001c00 	.word	0x40001c00

08005770 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <MX_TIM14_Init+0x40>)
 8005776:	4a0f      	ldr	r2, [pc, #60]	; (80057b4 <MX_TIM14_Init+0x44>)
 8005778:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1680;
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <MX_TIM14_Init+0x40>)
 800577c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8005780:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <MX_TIM14_Init+0x40>)
 8005784:	2200      	movs	r2, #0
 8005786:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 8005788:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <MX_TIM14_Init+0x40>)
 800578a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800578e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <MX_TIM14_Init+0x40>)
 8005792:	2200      	movs	r2, #0
 8005794:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005796:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <MX_TIM14_Init+0x40>)
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800579c:	4804      	ldr	r0, [pc, #16]	; (80057b0 <MX_TIM14_Init+0x40>)
 800579e:	f002 fe6b 	bl	8008478 <HAL_TIM_Base_Init>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80057a8:	f7ff fd0a 	bl	80051c0 <Error_Handler>
  }

}
 80057ac:	bf00      	nop
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20009748 	.word	0x20009748
 80057b4:	40002000 	.word	0x40002000

080057b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a2a      	ldr	r2, [pc, #168]	; (8005870 <HAL_TIM_Base_MspInit+0xb8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d116      	bne.n	80057f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	4b29      	ldr	r3, [pc, #164]	; (8005874 <HAL_TIM_Base_MspInit+0xbc>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	4a28      	ldr	r2, [pc, #160]	; (8005874 <HAL_TIM_Base_MspInit+0xbc>)
 80057d4:	f043 0320 	orr.w	r3, r3, #32
 80057d8:	6413      	str	r3, [r2, #64]	; 0x40
 80057da:	4b26      	ldr	r3, [pc, #152]	; (8005874 <HAL_TIM_Base_MspInit+0xbc>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80057e6:	2200      	movs	r2, #0
 80057e8:	2105      	movs	r1, #5
 80057ea:	2037      	movs	r0, #55	; 0x37
 80057ec:	f000 ffda 	bl	80067a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80057f0:	2037      	movs	r0, #55	; 0x37
 80057f2:	f000 fff3 	bl	80067dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80057f6:	e036      	b.n	8005866 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM13)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <HAL_TIM_Base_MspInit+0xc0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d116      	bne.n	8005830 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005802:	2300      	movs	r3, #0
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <HAL_TIM_Base_MspInit+0xbc>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	4a1a      	ldr	r2, [pc, #104]	; (8005874 <HAL_TIM_Base_MspInit+0xbc>)
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	6413      	str	r3, [r2, #64]	; 0x40
 8005812:	4b18      	ldr	r3, [pc, #96]	; (8005874 <HAL_TIM_Base_MspInit+0xbc>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800581e:	2200      	movs	r2, #0
 8005820:	2105      	movs	r1, #5
 8005822:	202c      	movs	r0, #44	; 0x2c
 8005824:	f000 ffbe 	bl	80067a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005828:	202c      	movs	r0, #44	; 0x2c
 800582a:	f000 ffd7 	bl	80067dc <HAL_NVIC_EnableIRQ>
}
 800582e:	e01a      	b.n	8005866 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM14)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a11      	ldr	r2, [pc, #68]	; (800587c <HAL_TIM_Base_MspInit+0xc4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d115      	bne.n	8005866 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <HAL_TIM_Base_MspInit+0xbc>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	4a0c      	ldr	r2, [pc, #48]	; (8005874 <HAL_TIM_Base_MspInit+0xbc>)
 8005844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005848:	6413      	str	r3, [r2, #64]	; 0x40
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <HAL_TIM_Base_MspInit+0xbc>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8005856:	2200      	movs	r2, #0
 8005858:	2105      	movs	r1, #5
 800585a:	202d      	movs	r0, #45	; 0x2d
 800585c:	f000 ffa2 	bl	80067a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005860:	202d      	movs	r0, #45	; 0x2d
 8005862:	f000 ffbb 	bl	80067dc <HAL_NVIC_EnableIRQ>
}
 8005866:	bf00      	nop
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40001400 	.word	0x40001400
 8005874:	40023800 	.word	0x40023800
 8005878:	40001c00 	.word	0x40001c00
 800587c:	40002000 	.word	0x40002000

08005880 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005884:	4b11      	ldr	r3, [pc, #68]	; (80058cc <MX_USART1_UART_Init+0x4c>)
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <MX_USART1_UART_Init+0x50>)
 8005888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800588a:	4b10      	ldr	r3, [pc, #64]	; (80058cc <MX_USART1_UART_Init+0x4c>)
 800588c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005892:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <MX_USART1_UART_Init+0x4c>)
 8005894:	2200      	movs	r2, #0
 8005896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <MX_USART1_UART_Init+0x4c>)
 800589a:	2200      	movs	r2, #0
 800589c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <MX_USART1_UART_Init+0x4c>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80058a4:	4b09      	ldr	r3, [pc, #36]	; (80058cc <MX_USART1_UART_Init+0x4c>)
 80058a6:	220c      	movs	r2, #12
 80058a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058aa:	4b08      	ldr	r3, [pc, #32]	; (80058cc <MX_USART1_UART_Init+0x4c>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80058b0:	4b06      	ldr	r3, [pc, #24]	; (80058cc <MX_USART1_UART_Init+0x4c>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80058b6:	4805      	ldr	r0, [pc, #20]	; (80058cc <MX_USART1_UART_Init+0x4c>)
 80058b8:	f003 f88e 	bl	80089d8 <HAL_UART_Init>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80058c2:	f7ff fc7d 	bl	80051c0 <Error_Handler>
  }

}
 80058c6:	bf00      	nop
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20009868 	.word	0x20009868
 80058d0:	40011000 	.word	0x40011000

080058d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80058d8:	4b11      	ldr	r3, [pc, #68]	; (8005920 <MX_USART3_UART_Init+0x4c>)
 80058da:	4a12      	ldr	r2, [pc, #72]	; (8005924 <MX_USART3_UART_Init+0x50>)
 80058dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <MX_USART3_UART_Init+0x4c>)
 80058e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80058e6:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <MX_USART3_UART_Init+0x4c>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80058ec:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <MX_USART3_UART_Init+0x4c>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80058f2:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <MX_USART3_UART_Init+0x4c>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <MX_USART3_UART_Init+0x4c>)
 80058fa:	220c      	movs	r2, #12
 80058fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058fe:	4b08      	ldr	r3, [pc, #32]	; (8005920 <MX_USART3_UART_Init+0x4c>)
 8005900:	2200      	movs	r2, #0
 8005902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005904:	4b06      	ldr	r3, [pc, #24]	; (8005920 <MX_USART3_UART_Init+0x4c>)
 8005906:	2200      	movs	r2, #0
 8005908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800590a:	4805      	ldr	r0, [pc, #20]	; (8005920 <MX_USART3_UART_Init+0x4c>)
 800590c:	f003 f864 	bl	80089d8 <HAL_UART_Init>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005916:	f7ff fc53 	bl	80051c0 <Error_Handler>
  }

}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	200098a8 	.word	0x200098a8
 8005924:	40004800 	.word	0x40004800

08005928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08c      	sub	sp, #48	; 0x30
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005930:	f107 031c 	add.w	r3, r7, #28
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a4e      	ldr	r2, [pc, #312]	; (8005a80 <HAL_UART_MspInit+0x158>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d12d      	bne.n	80059a6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800594a:	2300      	movs	r3, #0
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	4b4d      	ldr	r3, [pc, #308]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	4a4c      	ldr	r2, [pc, #304]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 8005954:	f043 0310 	orr.w	r3, r3, #16
 8005958:	6453      	str	r3, [r2, #68]	; 0x44
 800595a:	4b4a      	ldr	r3, [pc, #296]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	4b46      	ldr	r3, [pc, #280]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	4a45      	ldr	r2, [pc, #276]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	6313      	str	r3, [r2, #48]	; 0x30
 8005976:	4b43      	ldr	r3, [pc, #268]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005982:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005988:	2302      	movs	r3, #2
 800598a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005990:	2303      	movs	r3, #3
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005994:	2307      	movs	r3, #7
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005998:	f107 031c 	add.w	r3, r7, #28
 800599c:	4619      	mov	r1, r3
 800599e:	483a      	ldr	r0, [pc, #232]	; (8005a88 <HAL_UART_MspInit+0x160>)
 80059a0:	f001 fb2a 	bl	8006ff8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80059a4:	e068      	b.n	8005a78 <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART3)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a38      	ldr	r2, [pc, #224]	; (8005a8c <HAL_UART_MspInit+0x164>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d163      	bne.n	8005a78 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	4b33      	ldr	r3, [pc, #204]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	4a32      	ldr	r2, [pc, #200]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 80059ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059be:	6413      	str	r3, [r2, #64]	; 0x40
 80059c0:	4b30      	ldr	r3, [pc, #192]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	4b2c      	ldr	r3, [pc, #176]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	4a2b      	ldr	r2, [pc, #172]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 80059d6:	f043 0302 	orr.w	r3, r3, #2
 80059da:	6313      	str	r3, [r2, #48]	; 0x30
 80059dc:	4b29      	ldr	r3, [pc, #164]	; (8005a84 <HAL_UART_MspInit+0x15c>)
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80059e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ee:	2302      	movs	r3, #2
 80059f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f6:	2303      	movs	r3, #3
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80059fa:	2307      	movs	r3, #7
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059fe:	f107 031c 	add.w	r3, r7, #28
 8005a02:	4619      	mov	r1, r3
 8005a04:	4822      	ldr	r0, [pc, #136]	; (8005a90 <HAL_UART_MspInit+0x168>)
 8005a06:	f001 faf7 	bl	8006ff8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005a0a:	4b22      	ldr	r3, [pc, #136]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a0c:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <HAL_UART_MspInit+0x170>)
 8005a0e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005a10:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a16:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a18:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a24:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a2a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a2c:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a32:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005a38:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a3e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a40:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a46:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005a4c:	4811      	ldr	r0, [pc, #68]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a4e:	f000 fed3 	bl	80067f8 <HAL_DMA_Init>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_UART_MspInit+0x134>
      Error_Handler();
 8005a58:	f7ff fbb2 	bl	80051c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a0d      	ldr	r2, [pc, #52]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a60:	635a      	str	r2, [r3, #52]	; 0x34
 8005a62:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <HAL_UART_MspInit+0x16c>)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2105      	movs	r1, #5
 8005a6c:	2027      	movs	r0, #39	; 0x27
 8005a6e:	f000 fe99 	bl	80067a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a72:	2027      	movs	r0, #39	; 0x27
 8005a74:	f000 feb2 	bl	80067dc <HAL_NVIC_EnableIRQ>
}
 8005a78:	bf00      	nop
 8005a7a:	3730      	adds	r7, #48	; 0x30
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40011000 	.word	0x40011000
 8005a84:	40023800 	.word	0x40023800
 8005a88:	40020000 	.word	0x40020000
 8005a8c:	40004800 	.word	0x40004800
 8005a90:	40020400 	.word	0x40020400
 8005a94:	20009808 	.word	0x20009808
 8005a98:	40026028 	.word	0x40026028

08005a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005aa2:	e003      	b.n	8005aac <LoopCopyDataInit>

08005aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005aaa:	3104      	adds	r1, #4

08005aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005aac:	480b      	ldr	r0, [pc, #44]	; (8005adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ab4:	d3f6      	bcc.n	8005aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8005ab6:	4a0b      	ldr	r2, [pc, #44]	; (8005ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ab8:	e002      	b.n	8005ac0 <LoopFillZerobss>

08005aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005abc:	f842 3b04 	str.w	r3, [r2], #4

08005ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ac0:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ac4:	d3f9      	bcc.n	8005aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005ac6:	f7ff fde3 	bl	8005690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aca:	f007 ffb7 	bl	800da3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ace:	f7ff f957 	bl	8004d80 <main>
  bx  lr    
 8005ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005ad8:	08015188 	.word	0x08015188
  ldr  r0, =_sdata
 8005adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005ae0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8005ae4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8005ae8:	200098ec 	.word	0x200098ec

08005aec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005aec:	e7fe      	b.n	8005aec <CAN1_RX0_IRQHandler>
	...

08005af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005af4:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <HAL_Init+0x40>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <HAL_Init+0x40>)
 8005afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <HAL_Init+0x40>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a0a      	ldr	r2, [pc, #40]	; (8005b30 <HAL_Init+0x40>)
 8005b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b0c:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <HAL_Init+0x40>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a07      	ldr	r2, [pc, #28]	; (8005b30 <HAL_Init+0x40>)
 8005b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b18:	2003      	movs	r0, #3
 8005b1a:	f000 fe38 	bl	800678e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b1e:	2000      	movs	r0, #0
 8005b20:	f7ff fcec 	bl	80054fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b24:	f7ff fcbe 	bl	80054a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40023c00 	.word	0x40023c00

08005b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b38:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <HAL_IncTick+0x20>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <HAL_IncTick+0x24>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4413      	add	r3, r2
 8005b44:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <HAL_IncTick+0x24>)
 8005b46:	6013      	str	r3, [r2, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000000c 	.word	0x2000000c
 8005b58:	200098e8 	.word	0x200098e8

08005b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b60:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <HAL_GetTick+0x14>)
 8005b62:	681b      	ldr	r3, [r3, #0]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	200098e8 	.word	0x200098e8

08005b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b7c:	f7ff ffee 	bl	8005b5c <HAL_GetTick>
 8005b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d005      	beq.n	8005b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <HAL_Delay+0x40>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b9a:	bf00      	nop
 8005b9c:	f7ff ffde 	bl	8005b5c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d8f7      	bhi.n	8005b9c <HAL_Delay+0x28>
  {
  }
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	2000000c 	.word	0x2000000c

08005bb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e033      	b.n	8005c36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fb fa42 	bl	8001060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d118      	bne.n	8005c28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005bfe:	f023 0302 	bic.w	r3, r3, #2
 8005c02:	f043 0202 	orr.w	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fb8a 	bl	8006324 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	f043 0201 	orr.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40
 8005c26:	e001      	b.n	8005c2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d049      	beq.n	8005d14 <HAL_ADC_IRQHandler+0xd6>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d046      	beq.n	8005d14 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d105      	bne.n	8005c9e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d12b      	bne.n	8005d04 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d127      	bne.n	8005d04 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d006      	beq.n	8005cd0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d119      	bne.n	8005d04 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0220 	bic.w	r2, r2, #32
 8005cde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f043 0201 	orr.w	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f9cd 	bl	80060a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0212 	mvn.w	r2, #18
 8005d12:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d34:	2b80      	cmp	r3, #128	; 0x80
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d057      	beq.n	8005df6 <HAL_ADC_IRQHandler+0x1b8>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d054      	beq.n	8005df6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d105      	bne.n	8005d64 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d139      	bne.n	8005de6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d006      	beq.n	8005d8e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d12b      	bne.n	8005de6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d124      	bne.n	8005de6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d11d      	bne.n	8005de6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d119      	bne.n	8005de6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dc0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	f043 0201 	orr.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fc1a 	bl	8006620 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 020c 	mvn.w	r2, #12
 8005df4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b40      	cmp	r3, #64	; 0x40
 8005e18:	bf0c      	ite	eq
 8005e1a:	2301      	moveq	r3, #1
 8005e1c:	2300      	movne	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d017      	beq.n	8005e58 <HAL_ADC_IRQHandler+0x21a>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d014      	beq.n	8005e58 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10d      	bne.n	8005e58 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fd faad 	bl	80033a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0201 	mvn.w	r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
 8005e68:	2300      	movne	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d015      	beq.n	8005eb8 <HAL_ADC_IRQHandler+0x27a>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d012      	beq.n	8005eb8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0220 	mvn.w	r2, #32
 8005ea6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f90f 	bl	80060cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f06f 0220 	mvn.w	r2, #32
 8005eb6:	601a      	str	r2, [r3, #0]
  }
}
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_ADC_Start_DMA+0x1e>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e0cc      	b.n	8006078 <HAL_ADC_Start_DMA+0x1b8>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d018      	beq.n	8005f26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005f04:	4b5e      	ldr	r3, [pc, #376]	; (8006080 <HAL_ADC_Start_DMA+0x1c0>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a5e      	ldr	r2, [pc, #376]	; (8006084 <HAL_ADC_Start_DMA+0x1c4>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	0c9a      	lsrs	r2, r3, #18
 8005f10:	4613      	mov	r3, r2
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	4413      	add	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005f18:	e002      	b.n	8005f20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f9      	bne.n	8005f1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f040 80a0 	bne.w	8006076 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f74:	d106      	bne.n	8005f84 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	f023 0206 	bic.w	r2, r3, #6
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	645a      	str	r2, [r3, #68]	; 0x44
 8005f82:	e002      	b.n	8005f8a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f92:	4b3d      	ldr	r3, [pc, #244]	; (8006088 <HAL_ADC_Start_DMA+0x1c8>)
 8005f94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	4a3c      	ldr	r2, [pc, #240]	; (800608c <HAL_ADC_Start_DMA+0x1cc>)
 8005f9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	4a3b      	ldr	r2, [pc, #236]	; (8006090 <HAL_ADC_Start_DMA+0x1d0>)
 8005fa4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	4a3a      	ldr	r2, [pc, #232]	; (8006094 <HAL_ADC_Start_DMA+0x1d4>)
 8005fac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005fb6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005fc6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fd6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	334c      	adds	r3, #76	; 0x4c
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f000 fcb4 	bl	8006954 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d12a      	bne.n	800604e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a26      	ldr	r2, [pc, #152]	; (8006098 <HAL_ADC_Start_DMA+0x1d8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d015      	beq.n	800602e <HAL_ADC_Start_DMA+0x16e>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a25      	ldr	r2, [pc, #148]	; (800609c <HAL_ADC_Start_DMA+0x1dc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d105      	bne.n	8006018 <HAL_ADC_Start_DMA+0x158>
 800600c:	4b1e      	ldr	r3, [pc, #120]	; (8006088 <HAL_ADC_Start_DMA+0x1c8>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a20      	ldr	r2, [pc, #128]	; (80060a0 <HAL_ADC_Start_DMA+0x1e0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d129      	bne.n	8006076 <HAL_ADC_Start_DMA+0x1b6>
 8006022:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_ADC_Start_DMA+0x1c8>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2b0f      	cmp	r3, #15
 800602c:	d823      	bhi.n	8006076 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d11c      	bne.n	8006076 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	e013      	b.n	8006076 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a11      	ldr	r2, [pc, #68]	; (8006098 <HAL_ADC_Start_DMA+0x1d8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d10e      	bne.n	8006076 <HAL_ADC_Start_DMA+0x1b6>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d107      	bne.n	8006076 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006074:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20000004 	.word	0x20000004
 8006084:	431bde83 	.word	0x431bde83
 8006088:	40012300 	.word	0x40012300
 800608c:	0800651d 	.word	0x0800651d
 8006090:	080065d7 	.word	0x080065d7
 8006094:	080065f3 	.word	0x080065f3
 8006098:	40012000 	.word	0x40012000
 800609c:	40012100 	.word	0x40012100
 80060a0:	40012200 	.word	0x40012200

080060a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_ADC_ConfigChannel+0x1c>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e105      	b.n	8006308 <HAL_ADC_ConfigChannel+0x228>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b09      	cmp	r3, #9
 800610a:	d925      	bls.n	8006158 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68d9      	ldr	r1, [r3, #12]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	4613      	mov	r3, r2
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4413      	add	r3, r2
 8006120:	3b1e      	subs	r3, #30
 8006122:	2207      	movs	r2, #7
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	43da      	mvns	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	400a      	ands	r2, r1
 8006130:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68d9      	ldr	r1, [r3, #12]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	4618      	mov	r0, r3
 8006144:	4603      	mov	r3, r0
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	4403      	add	r3, r0
 800614a:	3b1e      	subs	r3, #30
 800614c:	409a      	lsls	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	60da      	str	r2, [r3, #12]
 8006156:	e022      	b.n	800619e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6919      	ldr	r1, [r3, #16]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	4613      	mov	r3, r2
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	4413      	add	r3, r2
 800616c:	2207      	movs	r2, #7
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43da      	mvns	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	400a      	ands	r2, r1
 800617a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6919      	ldr	r1, [r3, #16]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	4618      	mov	r0, r3
 800618e:	4603      	mov	r3, r0
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	4403      	add	r3, r0
 8006194:	409a      	lsls	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b06      	cmp	r3, #6
 80061a4:	d824      	bhi.n	80061f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	3b05      	subs	r3, #5
 80061b8:	221f      	movs	r2, #31
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43da      	mvns	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	400a      	ands	r2, r1
 80061c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	4618      	mov	r0, r3
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	3b05      	subs	r3, #5
 80061e2:	fa00 f203 	lsl.w	r2, r0, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	635a      	str	r2, [r3, #52]	; 0x34
 80061ee:	e04c      	b.n	800628a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b0c      	cmp	r3, #12
 80061f6:	d824      	bhi.n	8006242 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	3b23      	subs	r3, #35	; 0x23
 800620a:	221f      	movs	r2, #31
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	43da      	mvns	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	400a      	ands	r2, r1
 8006218:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	4618      	mov	r0, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	3b23      	subs	r3, #35	; 0x23
 8006234:	fa00 f203 	lsl.w	r2, r0, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
 8006240:	e023      	b.n	800628a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	3b41      	subs	r3, #65	; 0x41
 8006254:	221f      	movs	r2, #31
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	43da      	mvns	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	400a      	ands	r2, r1
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	b29b      	uxth	r3, r3
 8006270:	4618      	mov	r0, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	3b41      	subs	r3, #65	; 0x41
 800627e:	fa00 f203 	lsl.w	r2, r0, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800628a:	4b22      	ldr	r3, [pc, #136]	; (8006314 <HAL_ADC_ConfigChannel+0x234>)
 800628c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a21      	ldr	r2, [pc, #132]	; (8006318 <HAL_ADC_ConfigChannel+0x238>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d109      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x1cc>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b12      	cmp	r3, #18
 800629e:	d105      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a19      	ldr	r2, [pc, #100]	; (8006318 <HAL_ADC_ConfigChannel+0x238>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d123      	bne.n	80062fe <HAL_ADC_ConfigChannel+0x21e>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d003      	beq.n	80062c6 <HAL_ADC_ConfigChannel+0x1e6>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b11      	cmp	r3, #17
 80062c4:	d11b      	bne.n	80062fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d111      	bne.n	80062fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80062da:	4b10      	ldr	r3, [pc, #64]	; (800631c <HAL_ADC_ConfigChannel+0x23c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a10      	ldr	r2, [pc, #64]	; (8006320 <HAL_ADC_ConfigChannel+0x240>)
 80062e0:	fba2 2303 	umull	r2, r3, r2, r3
 80062e4:	0c9a      	lsrs	r2, r3, #18
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80062f0:	e002      	b.n	80062f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1f9      	bne.n	80062f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	40012300 	.word	0x40012300
 8006318:	40012000 	.word	0x40012000
 800631c:	20000004 	.word	0x20000004
 8006320:	431bde83 	.word	0x431bde83

08006324 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800632c:	4b79      	ldr	r3, [pc, #484]	; (8006514 <ADC_Init+0x1f0>)
 800632e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	431a      	orrs	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6859      	ldr	r1, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	021a      	lsls	r2, r3, #8
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800637c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6859      	ldr	r1, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800639e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6899      	ldr	r1, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	4a58      	ldr	r2, [pc, #352]	; (8006518 <ADC_Init+0x1f4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d022      	beq.n	8006402 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6899      	ldr	r1, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6899      	ldr	r1, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	609a      	str	r2, [r3, #8]
 8006400:	e00f      	b.n	8006422 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006420:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0202 	bic.w	r2, r2, #2
 8006430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6899      	ldr	r1, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	7e1b      	ldrb	r3, [r3, #24]
 800643c:	005a      	lsls	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d01b      	beq.n	8006488 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800645e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800646e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	3b01      	subs	r3, #1
 800647c:	035a      	lsls	r2, r3, #13
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	e007      	b.n	8006498 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006496:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80064a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	051a      	lsls	r2, r3, #20
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6899      	ldr	r1, [r3, #8]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064da:	025a      	lsls	r2, r3, #9
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6899      	ldr	r1, [r3, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	029a      	lsls	r2, r3, #10
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	609a      	str	r2, [r3, #8]
}
 8006508:	bf00      	nop
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	40012300 	.word	0x40012300
 8006518:	0f000001 	.word	0x0f000001

0800651c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006532:	2b00      	cmp	r3, #0
 8006534:	d13c      	bne.n	80065b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d12b      	bne.n	80065a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006554:	2b00      	cmp	r3, #0
 8006556:	d127      	bne.n	80065a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006562:	2b00      	cmp	r3, #0
 8006564:	d006      	beq.n	8006574 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006570:	2b00      	cmp	r3, #0
 8006572:	d119      	bne.n	80065a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0220 	bic.w	r2, r2, #32
 8006582:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	f043 0201 	orr.w	r2, r3, #1
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff fd7b 	bl	80060a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80065ae:	e00e      	b.n	80065ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f7ff fd85 	bl	80060cc <HAL_ADC_ErrorCallback>
}
 80065c2:	e004      	b.n	80065ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff fd67 	bl	80060b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2240      	movs	r2, #64	; 0x40
 8006604:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660a:	f043 0204 	orr.w	r2, r3, #4
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f7ff fd5a 	bl	80060cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <__NVIC_SetPriorityGrouping+0x44>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006650:	4013      	ands	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800665c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006666:	4a04      	ldr	r2, [pc, #16]	; (8006678 <__NVIC_SetPriorityGrouping+0x44>)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	60d3      	str	r3, [r2, #12]
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	e000ed00 	.word	0xe000ed00

0800667c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006680:	4b04      	ldr	r3, [pc, #16]	; (8006694 <__NVIC_GetPriorityGrouping+0x18>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	f003 0307 	and.w	r3, r3, #7
}
 800668a:	4618      	mov	r0, r3
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	e000ed00 	.word	0xe000ed00

08006698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	db0b      	blt.n	80066c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	f003 021f 	and.w	r2, r3, #31
 80066b0:	4907      	ldr	r1, [pc, #28]	; (80066d0 <__NVIC_EnableIRQ+0x38>)
 80066b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	2001      	movs	r0, #1
 80066ba:	fa00 f202 	lsl.w	r2, r0, r2
 80066be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	e000e100 	.word	0xe000e100

080066d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	db0a      	blt.n	80066fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	490c      	ldr	r1, [pc, #48]	; (8006720 <__NVIC_SetPriority+0x4c>)
 80066ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f2:	0112      	lsls	r2, r2, #4
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	440b      	add	r3, r1
 80066f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066fc:	e00a      	b.n	8006714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	4908      	ldr	r1, [pc, #32]	; (8006724 <__NVIC_SetPriority+0x50>)
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	3b04      	subs	r3, #4
 800670c:	0112      	lsls	r2, r2, #4
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	440b      	add	r3, r1
 8006712:	761a      	strb	r2, [r3, #24]
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	e000e100 	.word	0xe000e100
 8006724:	e000ed00 	.word	0xe000ed00

08006728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006728:	b480      	push	{r7}
 800672a:	b089      	sub	sp, #36	; 0x24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f1c3 0307 	rsb	r3, r3, #7
 8006742:	2b04      	cmp	r3, #4
 8006744:	bf28      	it	cs
 8006746:	2304      	movcs	r3, #4
 8006748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3304      	adds	r3, #4
 800674e:	2b06      	cmp	r3, #6
 8006750:	d902      	bls.n	8006758 <NVIC_EncodePriority+0x30>
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	3b03      	subs	r3, #3
 8006756:	e000      	b.n	800675a <NVIC_EncodePriority+0x32>
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800675c:	f04f 32ff 	mov.w	r2, #4294967295
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	43da      	mvns	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	401a      	ands	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006770:	f04f 31ff 	mov.w	r1, #4294967295
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	fa01 f303 	lsl.w	r3, r1, r3
 800677a:	43d9      	mvns	r1, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006780:	4313      	orrs	r3, r2
         );
}
 8006782:	4618      	mov	r0, r3
 8006784:	3724      	adds	r7, #36	; 0x24
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff ff4c 	bl	8006634 <__NVIC_SetPriorityGrouping>
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067b6:	f7ff ff61 	bl	800667c <__NVIC_GetPriorityGrouping>
 80067ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	6978      	ldr	r0, [r7, #20]
 80067c2:	f7ff ffb1 	bl	8006728 <NVIC_EncodePriority>
 80067c6:	4602      	mov	r2, r0
 80067c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067cc:	4611      	mov	r1, r2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff ff80 	bl	80066d4 <__NVIC_SetPriority>
}
 80067d4:	bf00      	nop
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff ff54 	bl	8006698 <__NVIC_EnableIRQ>
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006804:	f7ff f9aa 	bl	8005b5c <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e099      	b.n	8006948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006834:	e00f      	b.n	8006856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006836:	f7ff f991 	bl	8005b5c <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b05      	cmp	r3, #5
 8006842:	d908      	bls.n	8006856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2220      	movs	r2, #32
 8006848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2203      	movs	r2, #3
 800684e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e078      	b.n	8006948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e8      	bne.n	8006836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4b38      	ldr	r3, [pc, #224]	; (8006950 <HAL_DMA_Init+0x158>)
 8006870:	4013      	ands	r3, r2
 8006872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800688e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800689a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d107      	bne.n	80068c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	4313      	orrs	r3, r2
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0307 	bic.w	r3, r3, #7
 80068d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d117      	bne.n	800691a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00e      	beq.n	800691a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fb01 	bl	8006f04 <DMA_CheckFifoParam>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d008      	beq.n	800691a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2240      	movs	r2, #64	; 0x40
 800690c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006916:	2301      	movs	r3, #1
 8006918:	e016      	b.n	8006948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fab8 	bl	8006e98 <DMA_CalcBaseAndBitshift>
 8006928:	4603      	mov	r3, r0
 800692a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006930:	223f      	movs	r2, #63	; 0x3f
 8006932:	409a      	lsls	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	f010803f 	.word	0xf010803f

08006954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006972:	2b01      	cmp	r3, #1
 8006974:	d101      	bne.n	800697a <HAL_DMA_Start_IT+0x26>
 8006976:	2302      	movs	r3, #2
 8006978:	e040      	b.n	80069fc <HAL_DMA_Start_IT+0xa8>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b01      	cmp	r3, #1
 800698c:	d12f      	bne.n	80069ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2202      	movs	r2, #2
 8006992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 fa4a 	bl	8006e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	223f      	movs	r2, #63	; 0x3f
 80069ae:	409a      	lsls	r2, r3
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0216 	orr.w	r2, r2, #22
 80069c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0208 	orr.w	r2, r2, #8
 80069da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	e005      	b.n	80069fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80069f6:	2302      	movs	r3, #2
 80069f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a12:	f7ff f8a3 	bl	8005b5c <HAL_GetTick>
 8006a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d008      	beq.n	8006a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2280      	movs	r2, #128	; 0x80
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e052      	b.n	8006adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0216 	bic.w	r2, r2, #22
 8006a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695a      	ldr	r2, [r3, #20]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d103      	bne.n	8006a66 <HAL_DMA_Abort+0x62>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d007      	beq.n	8006a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0208 	bic.w	r2, r2, #8
 8006a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a86:	e013      	b.n	8006ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a88:	f7ff f868 	bl	8005b5c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d90c      	bls.n	8006ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2203      	movs	r2, #3
 8006aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e015      	b.n	8006adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e4      	bne.n	8006a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac2:	223f      	movs	r2, #63	; 0x3f
 8006ac4:	409a      	lsls	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d004      	beq.n	8006b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2280      	movs	r2, #128	; 0x80
 8006afc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e00c      	b.n	8006b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2205      	movs	r2, #5
 8006b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0201 	bic.w	r2, r2, #1
 8006b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b34:	4b92      	ldr	r3, [pc, #584]	; (8006d80 <HAL_DMA_IRQHandler+0x258>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a92      	ldr	r2, [pc, #584]	; (8006d84 <HAL_DMA_IRQHandler+0x25c>)
 8006b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3e:	0a9b      	lsrs	r3, r3, #10
 8006b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b52:	2208      	movs	r2, #8
 8006b54:	409a      	lsls	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d01a      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d013      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0204 	bic.w	r2, r2, #4
 8006b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b80:	2208      	movs	r2, #8
 8006b82:	409a      	lsls	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8c:	f043 0201 	orr.w	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	2201      	movs	r2, #1
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d012      	beq.n	8006bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	409a      	lsls	r2, r3
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	f043 0202 	orr.w	r2, r3, #2
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bce:	2204      	movs	r2, #4
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d012      	beq.n	8006c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bec:	2204      	movs	r2, #4
 8006bee:	409a      	lsls	r2, r3
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf8:	f043 0204 	orr.w	r2, r3, #4
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c04:	2210      	movs	r2, #16
 8006c06:	409a      	lsls	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d043      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d03c      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c22:	2210      	movs	r2, #16
 8006c24:	409a      	lsls	r2, r3
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d018      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d108      	bne.n	8006c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d024      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	4798      	blx	r3
 8006c56:	e01f      	b.n	8006c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01b      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
 8006c68:	e016      	b.n	8006c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d107      	bne.n	8006c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0208 	bic.w	r2, r2, #8
 8006c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 808e 	beq.w	8006dc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8086 	beq.w	8006dc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	409a      	lsls	r2, r3
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b05      	cmp	r3, #5
 8006cd0:	d136      	bne.n	8006d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0216 	bic.w	r2, r2, #22
 8006ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695a      	ldr	r2, [r3, #20]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d103      	bne.n	8006d02 <HAL_DMA_IRQHandler+0x1da>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0208 	bic.w	r2, r2, #8
 8006d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d16:	223f      	movs	r2, #63	; 0x3f
 8006d18:	409a      	lsls	r2, r3
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d07d      	beq.n	8006e32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
        }
        return;
 8006d3e:	e078      	b.n	8006e32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01c      	beq.n	8006d88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d108      	bne.n	8006d6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d030      	beq.n	8006dc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
 8006d6c:	e02b      	b.n	8006dc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d027      	beq.n	8006dc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
 8006d7e:	e022      	b.n	8006dc6 <HAL_DMA_IRQHandler+0x29e>
 8006d80:	20000004 	.word	0x20000004
 8006d84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10f      	bne.n	8006db6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0210 	bic.w	r2, r2, #16
 8006da4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d032      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d022      	beq.n	8006e20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2205      	movs	r2, #5
 8006dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	3301      	adds	r3, #1
 8006df6:	60bb      	str	r3, [r7, #8]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d307      	bcc.n	8006e0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f2      	bne.n	8006df2 <HAL_DMA_IRQHandler+0x2ca>
 8006e0c:	e000      	b.n	8006e10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006e0e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
 8006e30:	e000      	b.n	8006e34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006e32:	bf00      	nop
    }
  }
}
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop

08006e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d108      	bne.n	8006e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e7a:	e007      	b.n	8006e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	60da      	str	r2, [r3, #12]
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	3b10      	subs	r3, #16
 8006ea8:	4a14      	ldr	r2, [pc, #80]	; (8006efc <DMA_CalcBaseAndBitshift+0x64>)
 8006eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8006eae:	091b      	lsrs	r3, r3, #4
 8006eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006eb2:	4a13      	ldr	r2, [pc, #76]	; (8006f00 <DMA_CalcBaseAndBitshift+0x68>)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d909      	bls.n	8006eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ece:	f023 0303 	bic.w	r3, r3, #3
 8006ed2:	1d1a      	adds	r2, r3, #4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8006ed8:	e007      	b.n	8006eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ee2:	f023 0303 	bic.w	r3, r3, #3
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	aaaaaaab 	.word	0xaaaaaaab
 8006f00:	0801087c 	.word	0x0801087c

08006f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d11f      	bne.n	8006f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d855      	bhi.n	8006fd0 <DMA_CheckFifoParam+0xcc>
 8006f24:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <DMA_CheckFifoParam+0x28>)
 8006f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2a:	bf00      	nop
 8006f2c:	08006f3d 	.word	0x08006f3d
 8006f30:	08006f4f 	.word	0x08006f4f
 8006f34:	08006f3d 	.word	0x08006f3d
 8006f38:	08006fd1 	.word	0x08006fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d045      	beq.n	8006fd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f4c:	e042      	b.n	8006fd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f56:	d13f      	bne.n	8006fd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f5c:	e03c      	b.n	8006fd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f66:	d121      	bne.n	8006fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d836      	bhi.n	8006fdc <DMA_CheckFifoParam+0xd8>
 8006f6e:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <DMA_CheckFifoParam+0x70>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006f85 	.word	0x08006f85
 8006f78:	08006f8b 	.word	0x08006f8b
 8006f7c:	08006f85 	.word	0x08006f85
 8006f80:	08006f9d 	.word	0x08006f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	73fb      	strb	r3, [r7, #15]
      break;
 8006f88:	e02f      	b.n	8006fea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d024      	beq.n	8006fe0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f9a:	e021      	b.n	8006fe0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fa4:	d11e      	bne.n	8006fe4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006faa:	e01b      	b.n	8006fe4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d902      	bls.n	8006fb8 <DMA_CheckFifoParam+0xb4>
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d003      	beq.n	8006fbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006fb6:	e018      	b.n	8006fea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
      break;
 8006fbc:	e015      	b.n	8006fea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00e      	beq.n	8006fe8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8006fce:	e00b      	b.n	8006fe8 <DMA_CheckFifoParam+0xe4>
      break;
 8006fd0:	bf00      	nop
 8006fd2:	e00a      	b.n	8006fea <DMA_CheckFifoParam+0xe6>
      break;
 8006fd4:	bf00      	nop
 8006fd6:	e008      	b.n	8006fea <DMA_CheckFifoParam+0xe6>
      break;
 8006fd8:	bf00      	nop
 8006fda:	e006      	b.n	8006fea <DMA_CheckFifoParam+0xe6>
      break;
 8006fdc:	bf00      	nop
 8006fde:	e004      	b.n	8006fea <DMA_CheckFifoParam+0xe6>
      break;
 8006fe0:	bf00      	nop
 8006fe2:	e002      	b.n	8006fea <DMA_CheckFifoParam+0xe6>
      break;   
 8006fe4:	bf00      	nop
 8006fe6:	e000      	b.n	8006fea <DMA_CheckFifoParam+0xe6>
      break;
 8006fe8:	bf00      	nop
    }
  } 
  
  return status; 
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b089      	sub	sp, #36	; 0x24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007006:	2300      	movs	r3, #0
 8007008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800700a:	2300      	movs	r3, #0
 800700c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	e16b      	b.n	80072ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007014:	2201      	movs	r2, #1
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4013      	ands	r3, r2
 8007026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	429a      	cmp	r2, r3
 800702e:	f040 815a 	bne.w	80072e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d00b      	beq.n	8007052 <HAL_GPIO_Init+0x5a>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d007      	beq.n	8007052 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007046:	2b11      	cmp	r3, #17
 8007048:	d003      	beq.n	8007052 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b12      	cmp	r3, #18
 8007050:	d130      	bne.n	80070b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	2203      	movs	r2, #3
 800705e:	fa02 f303 	lsl.w	r3, r2, r3
 8007062:	43db      	mvns	r3, r3
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	4013      	ands	r3, r2
 8007068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	fa02 f303 	lsl.w	r3, r2, r3
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	4313      	orrs	r3, r2
 800707a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007088:	2201      	movs	r2, #1
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	43db      	mvns	r3, r3
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	4013      	ands	r3, r2
 8007096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	091b      	lsrs	r3, r3, #4
 800709e:	f003 0201 	and.w	r2, r3, #1
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	2203      	movs	r2, #3
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	43db      	mvns	r3, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4013      	ands	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	fa02 f303 	lsl.w	r3, r2, r3
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4313      	orrs	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d003      	beq.n	80070f4 <HAL_GPIO_Init+0xfc>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b12      	cmp	r3, #18
 80070f2:	d123      	bne.n	800713c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	08da      	lsrs	r2, r3, #3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3208      	adds	r2, #8
 80070fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	220f      	movs	r2, #15
 800710c:	fa02 f303 	lsl.w	r3, r2, r3
 8007110:	43db      	mvns	r3, r3
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	4013      	ands	r3, r2
 8007116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	4313      	orrs	r3, r2
 800712c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	08da      	lsrs	r2, r3, #3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3208      	adds	r2, #8
 8007136:	69b9      	ldr	r1, [r7, #24]
 8007138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	2203      	movs	r2, #3
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	43db      	mvns	r3, r3
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	4013      	ands	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f003 0203 	and.w	r2, r3, #3
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	4313      	orrs	r3, r2
 8007168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 80b4 	beq.w	80072e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	4b5f      	ldr	r3, [pc, #380]	; (8007300 <HAL_GPIO_Init+0x308>)
 8007184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007186:	4a5e      	ldr	r2, [pc, #376]	; (8007300 <HAL_GPIO_Init+0x308>)
 8007188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800718c:	6453      	str	r3, [r2, #68]	; 0x44
 800718e:	4b5c      	ldr	r3, [pc, #368]	; (8007300 <HAL_GPIO_Init+0x308>)
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800719a:	4a5a      	ldr	r2, [pc, #360]	; (8007304 <HAL_GPIO_Init+0x30c>)
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	089b      	lsrs	r3, r3, #2
 80071a0:	3302      	adds	r3, #2
 80071a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	220f      	movs	r2, #15
 80071b2:	fa02 f303 	lsl.w	r3, r2, r3
 80071b6:	43db      	mvns	r3, r3
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	4013      	ands	r3, r2
 80071bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a51      	ldr	r2, [pc, #324]	; (8007308 <HAL_GPIO_Init+0x310>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d02b      	beq.n	800721e <HAL_GPIO_Init+0x226>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a50      	ldr	r2, [pc, #320]	; (800730c <HAL_GPIO_Init+0x314>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d025      	beq.n	800721a <HAL_GPIO_Init+0x222>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a4f      	ldr	r2, [pc, #316]	; (8007310 <HAL_GPIO_Init+0x318>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01f      	beq.n	8007216 <HAL_GPIO_Init+0x21e>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a4e      	ldr	r2, [pc, #312]	; (8007314 <HAL_GPIO_Init+0x31c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d019      	beq.n	8007212 <HAL_GPIO_Init+0x21a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a4d      	ldr	r2, [pc, #308]	; (8007318 <HAL_GPIO_Init+0x320>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d013      	beq.n	800720e <HAL_GPIO_Init+0x216>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a4c      	ldr	r2, [pc, #304]	; (800731c <HAL_GPIO_Init+0x324>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00d      	beq.n	800720a <HAL_GPIO_Init+0x212>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a4b      	ldr	r2, [pc, #300]	; (8007320 <HAL_GPIO_Init+0x328>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d007      	beq.n	8007206 <HAL_GPIO_Init+0x20e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a4a      	ldr	r2, [pc, #296]	; (8007324 <HAL_GPIO_Init+0x32c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d101      	bne.n	8007202 <HAL_GPIO_Init+0x20a>
 80071fe:	2307      	movs	r3, #7
 8007200:	e00e      	b.n	8007220 <HAL_GPIO_Init+0x228>
 8007202:	2308      	movs	r3, #8
 8007204:	e00c      	b.n	8007220 <HAL_GPIO_Init+0x228>
 8007206:	2306      	movs	r3, #6
 8007208:	e00a      	b.n	8007220 <HAL_GPIO_Init+0x228>
 800720a:	2305      	movs	r3, #5
 800720c:	e008      	b.n	8007220 <HAL_GPIO_Init+0x228>
 800720e:	2304      	movs	r3, #4
 8007210:	e006      	b.n	8007220 <HAL_GPIO_Init+0x228>
 8007212:	2303      	movs	r3, #3
 8007214:	e004      	b.n	8007220 <HAL_GPIO_Init+0x228>
 8007216:	2302      	movs	r3, #2
 8007218:	e002      	b.n	8007220 <HAL_GPIO_Init+0x228>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <HAL_GPIO_Init+0x228>
 800721e:	2300      	movs	r3, #0
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	f002 0203 	and.w	r2, r2, #3
 8007226:	0092      	lsls	r2, r2, #2
 8007228:	4093      	lsls	r3, r2
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	4313      	orrs	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007230:	4934      	ldr	r1, [pc, #208]	; (8007304 <HAL_GPIO_Init+0x30c>)
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	089b      	lsrs	r3, r3, #2
 8007236:	3302      	adds	r3, #2
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800723e:	4b3a      	ldr	r3, [pc, #232]	; (8007328 <HAL_GPIO_Init+0x330>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	43db      	mvns	r3, r3
 8007248:	69ba      	ldr	r2, [r7, #24]
 800724a:	4013      	ands	r3, r2
 800724c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007262:	4a31      	ldr	r2, [pc, #196]	; (8007328 <HAL_GPIO_Init+0x330>)
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007268:	4b2f      	ldr	r3, [pc, #188]	; (8007328 <HAL_GPIO_Init+0x330>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	43db      	mvns	r3, r3
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	4013      	ands	r3, r2
 8007276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800728c:	4a26      	ldr	r2, [pc, #152]	; (8007328 <HAL_GPIO_Init+0x330>)
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007292:	4b25      	ldr	r3, [pc, #148]	; (8007328 <HAL_GPIO_Init+0x330>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	43db      	mvns	r3, r3
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	4013      	ands	r3, r2
 80072a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072b6:	4a1c      	ldr	r2, [pc, #112]	; (8007328 <HAL_GPIO_Init+0x330>)
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072bc:	4b1a      	ldr	r3, [pc, #104]	; (8007328 <HAL_GPIO_Init+0x330>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	43db      	mvns	r3, r3
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	4013      	ands	r3, r2
 80072ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072e0:	4a11      	ldr	r2, [pc, #68]	; (8007328 <HAL_GPIO_Init+0x330>)
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	3301      	adds	r3, #1
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b0f      	cmp	r3, #15
 80072f0:	f67f ae90 	bls.w	8007014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80072f4:	bf00      	nop
 80072f6:	3724      	adds	r7, #36	; 0x24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	40023800 	.word	0x40023800
 8007304:	40013800 	.word	0x40013800
 8007308:	40020000 	.word	0x40020000
 800730c:	40020400 	.word	0x40020400
 8007310:	40020800 	.word	0x40020800
 8007314:	40020c00 	.word	0x40020c00
 8007318:	40021000 	.word	0x40021000
 800731c:	40021400 	.word	0x40021400
 8007320:	40021800 	.word	0x40021800
 8007324:	40021c00 	.word	0x40021c00
 8007328:	40013c00 	.word	0x40013c00

0800732c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	887b      	ldrh	r3, [r7, #2]
 800733e:	4013      	ands	r3, r2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
 8007348:	e001      	b.n	800734e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	807b      	strh	r3, [r7, #2]
 8007368:	4613      	mov	r3, r2
 800736a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800736c:	787b      	ldrb	r3, [r7, #1]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007372:	887a      	ldrh	r2, [r7, #2]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007378:	e003      	b.n	8007382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800737a:	887b      	ldrh	r3, [r7, #2]
 800737c:	041a      	lsls	r2, r3, #16
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	619a      	str	r2, [r3, #24]
}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	695a      	ldr	r2, [r3, #20]
 800739e:	887b      	ldrh	r3, [r7, #2]
 80073a0:	401a      	ands	r2, r3
 80073a2:	887b      	ldrh	r3, [r7, #2]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d104      	bne.n	80073b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80073a8:	887b      	ldrh	r3, [r7, #2]
 80073aa:	041a      	lsls	r2, r3, #16
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80073b0:	e002      	b.n	80073b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80073b2:	887a      	ldrh	r2, [r7, #2]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	619a      	str	r2, [r3, #24]
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e11f      	b.n	8007616 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fd fc66 	bl	8004cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2224      	movs	r2, #36	; 0x24
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0201 	bic.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007428:	f000 fd88 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 800742c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	4a7b      	ldr	r2, [pc, #492]	; (8007620 <HAL_I2C_Init+0x25c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d807      	bhi.n	8007448 <HAL_I2C_Init+0x84>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a7a      	ldr	r2, [pc, #488]	; (8007624 <HAL_I2C_Init+0x260>)
 800743c:	4293      	cmp	r3, r2
 800743e:	bf94      	ite	ls
 8007440:	2301      	movls	r3, #1
 8007442:	2300      	movhi	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	e006      	b.n	8007456 <HAL_I2C_Init+0x92>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4a77      	ldr	r2, [pc, #476]	; (8007628 <HAL_I2C_Init+0x264>)
 800744c:	4293      	cmp	r3, r2
 800744e:	bf94      	ite	ls
 8007450:	2301      	movls	r3, #1
 8007452:	2300      	movhi	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e0db      	b.n	8007616 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a72      	ldr	r2, [pc, #456]	; (800762c <HAL_I2C_Init+0x268>)
 8007462:	fba2 2303 	umull	r2, r3, r2, r3
 8007466:	0c9b      	lsrs	r3, r3, #18
 8007468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	4a64      	ldr	r2, [pc, #400]	; (8007620 <HAL_I2C_Init+0x25c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d802      	bhi.n	8007498 <HAL_I2C_Init+0xd4>
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	3301      	adds	r3, #1
 8007496:	e009      	b.n	80074ac <HAL_I2C_Init+0xe8>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	4a63      	ldr	r2, [pc, #396]	; (8007630 <HAL_I2C_Init+0x26c>)
 80074a4:	fba2 2303 	umull	r2, r3, r2, r3
 80074a8:	099b      	lsrs	r3, r3, #6
 80074aa:	3301      	adds	r3, #1
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	430b      	orrs	r3, r1
 80074b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80074be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	4956      	ldr	r1, [pc, #344]	; (8007620 <HAL_I2C_Init+0x25c>)
 80074c8:	428b      	cmp	r3, r1
 80074ca:	d80d      	bhi.n	80074e8 <HAL_I2C_Init+0x124>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	1e59      	subs	r1, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80074da:	3301      	adds	r3, #1
 80074dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	bf38      	it	cc
 80074e4:	2304      	movcc	r3, #4
 80074e6:	e04f      	b.n	8007588 <HAL_I2C_Init+0x1c4>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d111      	bne.n	8007514 <HAL_I2C_Init+0x150>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	1e58      	subs	r0, r3, #1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6859      	ldr	r1, [r3, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	440b      	add	r3, r1
 80074fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007502:	3301      	adds	r3, #1
 8007504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007508:	2b00      	cmp	r3, #0
 800750a:	bf0c      	ite	eq
 800750c:	2301      	moveq	r3, #1
 800750e:	2300      	movne	r3, #0
 8007510:	b2db      	uxtb	r3, r3
 8007512:	e012      	b.n	800753a <HAL_I2C_Init+0x176>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	1e58      	subs	r0, r3, #1
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6859      	ldr	r1, [r3, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	0099      	lsls	r1, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	fbb0 f3f3 	udiv	r3, r0, r3
 800752a:	3301      	adds	r3, #1
 800752c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007530:	2b00      	cmp	r3, #0
 8007532:	bf0c      	ite	eq
 8007534:	2301      	moveq	r3, #1
 8007536:	2300      	movne	r3, #0
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <HAL_I2C_Init+0x17e>
 800753e:	2301      	movs	r3, #1
 8007540:	e022      	b.n	8007588 <HAL_I2C_Init+0x1c4>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10e      	bne.n	8007568 <HAL_I2C_Init+0x1a4>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	1e58      	subs	r0, r3, #1
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6859      	ldr	r1, [r3, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	440b      	add	r3, r1
 8007558:	fbb0 f3f3 	udiv	r3, r0, r3
 800755c:	3301      	adds	r3, #1
 800755e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007566:	e00f      	b.n	8007588 <HAL_I2C_Init+0x1c4>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	1e58      	subs	r0, r3, #1
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6859      	ldr	r1, [r3, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	0099      	lsls	r1, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	fbb0 f3f3 	udiv	r3, r0, r3
 800757e:	3301      	adds	r3, #1
 8007580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	6809      	ldr	r1, [r1, #0]
 800758c:	4313      	orrs	r3, r2
 800758e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80075b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6911      	ldr	r1, [r2, #16]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	68d2      	ldr	r2, [r2, #12]
 80075c2:	4311      	orrs	r1, r2
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6812      	ldr	r2, [r2, #0]
 80075c8:	430b      	orrs	r3, r1
 80075ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	695a      	ldr	r2, [r3, #20]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	431a      	orrs	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	000186a0 	.word	0x000186a0
 8007624:	001e847f 	.word	0x001e847f
 8007628:	003d08ff 	.word	0x003d08ff
 800762c:	431bde83 	.word	0x431bde83
 8007630:	10624dd3 	.word	0x10624dd3

08007634 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e02b      	b.n	800769e <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800764e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f245 5255 	movw	r2, #21845	; 0x5555
 8007658:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6852      	ldr	r2, [r2, #4]
 8007662:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6892      	ldr	r2, [r2, #8]
 800766c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800766e:	f7fe fa75 	bl	8005b5c <HAL_GetTick>
 8007672:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8007674:	e008      	b.n	8007688 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007676:	f7fe fa71 	bl	8005b5c <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b30      	cmp	r3, #48	; 0x30
 8007682:	d901      	bls.n	8007688 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e00a      	b.n	800769e <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1f1      	bne.n	8007676 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800769a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80076b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
	...

080076c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e25b      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d075      	beq.n	80077d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076e6:	4ba3      	ldr	r3, [pc, #652]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 030c 	and.w	r3, r3, #12
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d00c      	beq.n	800770c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076f2:	4ba0      	ldr	r3, [pc, #640]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d112      	bne.n	8007724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076fe:	4b9d      	ldr	r3, [pc, #628]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800770a:	d10b      	bne.n	8007724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800770c:	4b99      	ldr	r3, [pc, #612]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d05b      	beq.n	80077d0 <HAL_RCC_OscConfig+0x108>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d157      	bne.n	80077d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e236      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772c:	d106      	bne.n	800773c <HAL_RCC_OscConfig+0x74>
 800772e:	4b91      	ldr	r3, [pc, #580]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a90      	ldr	r2, [pc, #576]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	e01d      	b.n	8007778 <HAL_RCC_OscConfig+0xb0>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007744:	d10c      	bne.n	8007760 <HAL_RCC_OscConfig+0x98>
 8007746:	4b8b      	ldr	r3, [pc, #556]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a8a      	ldr	r2, [pc, #552]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 800774c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	4b88      	ldr	r3, [pc, #544]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a87      	ldr	r2, [pc, #540]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	e00b      	b.n	8007778 <HAL_RCC_OscConfig+0xb0>
 8007760:	4b84      	ldr	r3, [pc, #528]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a83      	ldr	r2, [pc, #524]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	4b81      	ldr	r3, [pc, #516]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a80      	ldr	r2, [pc, #512]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d013      	beq.n	80077a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007780:	f7fe f9ec 	bl	8005b5c <HAL_GetTick>
 8007784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007786:	e008      	b.n	800779a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007788:	f7fe f9e8 	bl	8005b5c <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	2b64      	cmp	r3, #100	; 0x64
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e1fb      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800779a:	4b76      	ldr	r3, [pc, #472]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0f0      	beq.n	8007788 <HAL_RCC_OscConfig+0xc0>
 80077a6:	e014      	b.n	80077d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a8:	f7fe f9d8 	bl	8005b5c <HAL_GetTick>
 80077ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ae:	e008      	b.n	80077c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077b0:	f7fe f9d4 	bl	8005b5c <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b64      	cmp	r3, #100	; 0x64
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e1e7      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077c2:	4b6c      	ldr	r3, [pc, #432]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1f0      	bne.n	80077b0 <HAL_RCC_OscConfig+0xe8>
 80077ce:	e000      	b.n	80077d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d063      	beq.n	80078a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077de:	4b65      	ldr	r3, [pc, #404]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 030c 	and.w	r3, r3, #12
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00b      	beq.n	8007802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077ea:	4b62      	ldr	r3, [pc, #392]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	d11c      	bne.n	8007830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077f6:	4b5f      	ldr	r3, [pc, #380]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d116      	bne.n	8007830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007802:	4b5c      	ldr	r3, [pc, #368]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <HAL_RCC_OscConfig+0x152>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d001      	beq.n	800781a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e1bb      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800781a:	4b56      	ldr	r3, [pc, #344]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	4952      	ldr	r1, [pc, #328]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 800782a:	4313      	orrs	r3, r2
 800782c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800782e:	e03a      	b.n	80078a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d020      	beq.n	800787a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007838:	4b4f      	ldr	r3, [pc, #316]	; (8007978 <HAL_RCC_OscConfig+0x2b0>)
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783e:	f7fe f98d 	bl	8005b5c <HAL_GetTick>
 8007842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007844:	e008      	b.n	8007858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007846:	f7fe f989 	bl	8005b5c <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e19c      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007858:	4b46      	ldr	r3, [pc, #280]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f0      	beq.n	8007846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007864:	4b43      	ldr	r3, [pc, #268]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	4940      	ldr	r1, [pc, #256]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007874:	4313      	orrs	r3, r2
 8007876:	600b      	str	r3, [r1, #0]
 8007878:	e015      	b.n	80078a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800787a:	4b3f      	ldr	r3, [pc, #252]	; (8007978 <HAL_RCC_OscConfig+0x2b0>)
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007880:	f7fe f96c 	bl	8005b5c <HAL_GetTick>
 8007884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007888:	f7fe f968 	bl	8005b5c <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e17b      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800789a:	4b36      	ldr	r3, [pc, #216]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f0      	bne.n	8007888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d030      	beq.n	8007914 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d016      	beq.n	80078e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ba:	4b30      	ldr	r3, [pc, #192]	; (800797c <HAL_RCC_OscConfig+0x2b4>)
 80078bc:	2201      	movs	r2, #1
 80078be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c0:	f7fe f94c 	bl	8005b5c <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078c8:	f7fe f948 	bl	8005b5c <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e15b      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078da:	4b26      	ldr	r3, [pc, #152]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 80078dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCC_OscConfig+0x200>
 80078e6:	e015      	b.n	8007914 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078e8:	4b24      	ldr	r3, [pc, #144]	; (800797c <HAL_RCC_OscConfig+0x2b4>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078ee:	f7fe f935 	bl	8005b5c <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078f6:	f7fe f931 	bl	8005b5c <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e144      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007908:	4b1a      	ldr	r3, [pc, #104]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 800790a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f0      	bne.n	80078f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 80a0 	beq.w	8007a62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007922:	2300      	movs	r3, #0
 8007924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007926:	4b13      	ldr	r3, [pc, #76]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10f      	bne.n	8007952 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007932:	2300      	movs	r3, #0
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	4a0e      	ldr	r2, [pc, #56]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 800793c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007940:	6413      	str	r3, [r2, #64]	; 0x40
 8007942:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <HAL_RCC_OscConfig+0x2ac>)
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800794a:	60bb      	str	r3, [r7, #8]
 800794c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800794e:	2301      	movs	r3, #1
 8007950:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007952:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <HAL_RCC_OscConfig+0x2b8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795a:	2b00      	cmp	r3, #0
 800795c:	d121      	bne.n	80079a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800795e:	4b08      	ldr	r3, [pc, #32]	; (8007980 <HAL_RCC_OscConfig+0x2b8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a07      	ldr	r2, [pc, #28]	; (8007980 <HAL_RCC_OscConfig+0x2b8>)
 8007964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800796a:	f7fe f8f7 	bl	8005b5c <HAL_GetTick>
 800796e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007970:	e011      	b.n	8007996 <HAL_RCC_OscConfig+0x2ce>
 8007972:	bf00      	nop
 8007974:	40023800 	.word	0x40023800
 8007978:	42470000 	.word	0x42470000
 800797c:	42470e80 	.word	0x42470e80
 8007980:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007984:	f7fe f8ea 	bl	8005b5c <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e0fd      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007996:	4b81      	ldr	r3, [pc, #516]	; (8007b9c <HAL_RCC_OscConfig+0x4d4>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0f0      	beq.n	8007984 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d106      	bne.n	80079b8 <HAL_RCC_OscConfig+0x2f0>
 80079aa:	4b7d      	ldr	r3, [pc, #500]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 80079ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ae:	4a7c      	ldr	r2, [pc, #496]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 80079b0:	f043 0301 	orr.w	r3, r3, #1
 80079b4:	6713      	str	r3, [r2, #112]	; 0x70
 80079b6:	e01c      	b.n	80079f2 <HAL_RCC_OscConfig+0x32a>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b05      	cmp	r3, #5
 80079be:	d10c      	bne.n	80079da <HAL_RCC_OscConfig+0x312>
 80079c0:	4b77      	ldr	r3, [pc, #476]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 80079c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c4:	4a76      	ldr	r2, [pc, #472]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 80079c6:	f043 0304 	orr.w	r3, r3, #4
 80079ca:	6713      	str	r3, [r2, #112]	; 0x70
 80079cc:	4b74      	ldr	r3, [pc, #464]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 80079ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d0:	4a73      	ldr	r2, [pc, #460]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 80079d2:	f043 0301 	orr.w	r3, r3, #1
 80079d6:	6713      	str	r3, [r2, #112]	; 0x70
 80079d8:	e00b      	b.n	80079f2 <HAL_RCC_OscConfig+0x32a>
 80079da:	4b71      	ldr	r3, [pc, #452]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079de:	4a70      	ldr	r2, [pc, #448]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	6713      	str	r3, [r2, #112]	; 0x70
 80079e6:	4b6e      	ldr	r3, [pc, #440]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a6d      	ldr	r2, [pc, #436]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 80079ec:	f023 0304 	bic.w	r3, r3, #4
 80079f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d015      	beq.n	8007a26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079fa:	f7fe f8af 	bl	8005b5c <HAL_GetTick>
 80079fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a00:	e00a      	b.n	8007a18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a02:	f7fe f8ab 	bl	8005b5c <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e0bc      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a18:	4b61      	ldr	r3, [pc, #388]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 8007a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0ee      	beq.n	8007a02 <HAL_RCC_OscConfig+0x33a>
 8007a24:	e014      	b.n	8007a50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a26:	f7fe f899 	bl	8005b5c <HAL_GetTick>
 8007a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a2c:	e00a      	b.n	8007a44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a2e:	f7fe f895 	bl	8005b5c <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d901      	bls.n	8007a44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e0a6      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a44:	4b56      	ldr	r3, [pc, #344]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 8007a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1ee      	bne.n	8007a2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d105      	bne.n	8007a62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a56:	4b52      	ldr	r3, [pc, #328]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	4a51      	ldr	r2, [pc, #324]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 8007a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8092 	beq.w	8007b90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a6c:	4b4c      	ldr	r3, [pc, #304]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 030c 	and.w	r3, r3, #12
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d05c      	beq.n	8007b32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d141      	bne.n	8007b04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a80:	4b48      	ldr	r3, [pc, #288]	; (8007ba4 <HAL_RCC_OscConfig+0x4dc>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a86:	f7fe f869 	bl	8005b5c <HAL_GetTick>
 8007a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a8e:	f7fe f865 	bl	8005b5c <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e078      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aa0:	4b3f      	ldr	r3, [pc, #252]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1f0      	bne.n	8007a8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69da      	ldr	r2, [r3, #28]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	019b      	lsls	r3, r3, #6
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	041b      	lsls	r3, r3, #16
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ace:	061b      	lsls	r3, r3, #24
 8007ad0:	4933      	ldr	r1, [pc, #204]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ad6:	4b33      	ldr	r3, [pc, #204]	; (8007ba4 <HAL_RCC_OscConfig+0x4dc>)
 8007ad8:	2201      	movs	r2, #1
 8007ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007adc:	f7fe f83e 	bl	8005b5c <HAL_GetTick>
 8007ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ae2:	e008      	b.n	8007af6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ae4:	f7fe f83a 	bl	8005b5c <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e04d      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af6:	4b2a      	ldr	r3, [pc, #168]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f0      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x41c>
 8007b02:	e045      	b.n	8007b90 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b04:	4b27      	ldr	r3, [pc, #156]	; (8007ba4 <HAL_RCC_OscConfig+0x4dc>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b0a:	f7fe f827 	bl	8005b5c <HAL_GetTick>
 8007b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b10:	e008      	b.n	8007b24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b12:	f7fe f823 	bl	8005b5c <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e036      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b24:	4b1e      	ldr	r3, [pc, #120]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1f0      	bne.n	8007b12 <HAL_RCC_OscConfig+0x44a>
 8007b30:	e02e      	b.n	8007b90 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e029      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007b3e:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <HAL_RCC_OscConfig+0x4d8>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d11c      	bne.n	8007b8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d115      	bne.n	8007b8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b66:	4013      	ands	r3, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d10d      	bne.n	8007b8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d106      	bne.n	8007b8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d001      	beq.n	8007b90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	40007000 	.word	0x40007000
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	42470060 	.word	0x42470060

08007ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e0cc      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bbc:	4b68      	ldr	r3, [pc, #416]	; (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 030f 	and.w	r3, r3, #15
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d90c      	bls.n	8007be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bca:	4b65      	ldr	r3, [pc, #404]	; (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bd2:	4b63      	ldr	r3, [pc, #396]	; (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d001      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e0b8      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d020      	beq.n	8007c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bfc:	4b59      	ldr	r3, [pc, #356]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	4a58      	ldr	r2, [pc, #352]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d005      	beq.n	8007c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c14:	4b53      	ldr	r3, [pc, #332]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	4a52      	ldr	r2, [pc, #328]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c20:	4b50      	ldr	r3, [pc, #320]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	494d      	ldr	r1, [pc, #308]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d044      	beq.n	8007cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d107      	bne.n	8007c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c46:	4b47      	ldr	r3, [pc, #284]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d119      	bne.n	8007c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e07f      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d003      	beq.n	8007c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d107      	bne.n	8007c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c66:	4b3f      	ldr	r3, [pc, #252]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d109      	bne.n	8007c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e06f      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c76:	4b3b      	ldr	r3, [pc, #236]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e067      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c86:	4b37      	ldr	r3, [pc, #220]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f023 0203 	bic.w	r2, r3, #3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	4934      	ldr	r1, [pc, #208]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c98:	f7fd ff60 	bl	8005b5c <HAL_GetTick>
 8007c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c9e:	e00a      	b.n	8007cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ca0:	f7fd ff5c 	bl	8005b5c <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e04f      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cb6:	4b2b      	ldr	r3, [pc, #172]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 020c 	and.w	r2, r3, #12
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d1eb      	bne.n	8007ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cc8:	4b25      	ldr	r3, [pc, #148]	; (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d20c      	bcs.n	8007cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cd6:	4b22      	ldr	r3, [pc, #136]	; (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cde:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d001      	beq.n	8007cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e032      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d008      	beq.n	8007d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cfc:	4b19      	ldr	r3, [pc, #100]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	4916      	ldr	r1, [pc, #88]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d009      	beq.n	8007d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	490e      	ldr	r1, [pc, #56]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d2e:	f000 f821 	bl	8007d74 <HAL_RCC_GetSysClockFreq>
 8007d32:	4601      	mov	r1, r0
 8007d34:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	091b      	lsrs	r3, r3, #4
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	4a0a      	ldr	r2, [pc, #40]	; (8007d68 <HAL_RCC_ClockConfig+0x1c0>)
 8007d40:	5cd3      	ldrb	r3, [r2, r3]
 8007d42:	fa21 f303 	lsr.w	r3, r1, r3
 8007d46:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <HAL_RCC_ClockConfig+0x1c4>)
 8007d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d4a:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <HAL_RCC_ClockConfig+0x1c8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fd fbd4 	bl	80054fc <HAL_InitTick>

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40023c00 	.word	0x40023c00
 8007d64:	40023800 	.word	0x40023800
 8007d68:	08010864 	.word	0x08010864
 8007d6c:	20000004 	.word	0x20000004
 8007d70:	20000008 	.word	0x20000008

08007d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	607b      	str	r3, [r7, #4]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	2300      	movs	r3, #0
 8007d84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d8a:	4b63      	ldr	r3, [pc, #396]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f003 030c 	and.w	r3, r3, #12
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d007      	beq.n	8007da6 <HAL_RCC_GetSysClockFreq+0x32>
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d008      	beq.n	8007dac <HAL_RCC_GetSysClockFreq+0x38>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 80b4 	bne.w	8007f08 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007da0:	4b5e      	ldr	r3, [pc, #376]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007da2:	60bb      	str	r3, [r7, #8]
       break;
 8007da4:	e0b3      	b.n	8007f0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007da6:	4b5e      	ldr	r3, [pc, #376]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007da8:	60bb      	str	r3, [r7, #8]
      break;
 8007daa:	e0b0      	b.n	8007f0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dac:	4b5a      	ldr	r3, [pc, #360]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007db4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007db6:	4b58      	ldr	r3, [pc, #352]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d04a      	beq.n	8007e58 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dc2:	4b55      	ldr	r3, [pc, #340]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	099b      	lsrs	r3, r3, #6
 8007dc8:	f04f 0400 	mov.w	r4, #0
 8007dcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	ea03 0501 	and.w	r5, r3, r1
 8007dd8:	ea04 0602 	and.w	r6, r4, r2
 8007ddc:	4629      	mov	r1, r5
 8007dde:	4632      	mov	r2, r6
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	f04f 0400 	mov.w	r4, #0
 8007de8:	0154      	lsls	r4, r2, #5
 8007dea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007dee:	014b      	lsls	r3, r1, #5
 8007df0:	4619      	mov	r1, r3
 8007df2:	4622      	mov	r2, r4
 8007df4:	1b49      	subs	r1, r1, r5
 8007df6:	eb62 0206 	sbc.w	r2, r2, r6
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	f04f 0400 	mov.w	r4, #0
 8007e02:	0194      	lsls	r4, r2, #6
 8007e04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007e08:	018b      	lsls	r3, r1, #6
 8007e0a:	1a5b      	subs	r3, r3, r1
 8007e0c:	eb64 0402 	sbc.w	r4, r4, r2
 8007e10:	f04f 0100 	mov.w	r1, #0
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	00e2      	lsls	r2, r4, #3
 8007e1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007e1e:	00d9      	lsls	r1, r3, #3
 8007e20:	460b      	mov	r3, r1
 8007e22:	4614      	mov	r4, r2
 8007e24:	195b      	adds	r3, r3, r5
 8007e26:	eb44 0406 	adc.w	r4, r4, r6
 8007e2a:	f04f 0100 	mov.w	r1, #0
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	0262      	lsls	r2, r4, #9
 8007e34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007e38:	0259      	lsls	r1, r3, #9
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4614      	mov	r4, r2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	4621      	mov	r1, r4
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f04f 0400 	mov.w	r4, #0
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4623      	mov	r3, r4
 8007e4c:	f7f8 fe7c 	bl	8000b48 <__aeabi_uldivmod>
 8007e50:	4603      	mov	r3, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	e049      	b.n	8007eec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e58:	4b2f      	ldr	r3, [pc, #188]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	099b      	lsrs	r3, r3, #6
 8007e5e:	f04f 0400 	mov.w	r4, #0
 8007e62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007e66:	f04f 0200 	mov.w	r2, #0
 8007e6a:	ea03 0501 	and.w	r5, r3, r1
 8007e6e:	ea04 0602 	and.w	r6, r4, r2
 8007e72:	4629      	mov	r1, r5
 8007e74:	4632      	mov	r2, r6
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	f04f 0400 	mov.w	r4, #0
 8007e7e:	0154      	lsls	r4, r2, #5
 8007e80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007e84:	014b      	lsls	r3, r1, #5
 8007e86:	4619      	mov	r1, r3
 8007e88:	4622      	mov	r2, r4
 8007e8a:	1b49      	subs	r1, r1, r5
 8007e8c:	eb62 0206 	sbc.w	r2, r2, r6
 8007e90:	f04f 0300 	mov.w	r3, #0
 8007e94:	f04f 0400 	mov.w	r4, #0
 8007e98:	0194      	lsls	r4, r2, #6
 8007e9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007e9e:	018b      	lsls	r3, r1, #6
 8007ea0:	1a5b      	subs	r3, r3, r1
 8007ea2:	eb64 0402 	sbc.w	r4, r4, r2
 8007ea6:	f04f 0100 	mov.w	r1, #0
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	00e2      	lsls	r2, r4, #3
 8007eb0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007eb4:	00d9      	lsls	r1, r3, #3
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4614      	mov	r4, r2
 8007eba:	195b      	adds	r3, r3, r5
 8007ebc:	eb44 0406 	adc.w	r4, r4, r6
 8007ec0:	f04f 0100 	mov.w	r1, #0
 8007ec4:	f04f 0200 	mov.w	r2, #0
 8007ec8:	02a2      	lsls	r2, r4, #10
 8007eca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007ece:	0299      	lsls	r1, r3, #10
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4614      	mov	r4, r2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f04f 0400 	mov.w	r4, #0
 8007ede:	461a      	mov	r2, r3
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	f7f8 fe31 	bl	8000b48 <__aeabi_uldivmod>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	460c      	mov	r4, r1
 8007eea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	0c1b      	lsrs	r3, r3, #16
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f04:	60bb      	str	r3, [r7, #8]
      break;
 8007f06:	e002      	b.n	8007f0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f08:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007f0a:	60bb      	str	r3, [r7, #8]
      break;
 8007f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f18:	40023800 	.word	0x40023800
 8007f1c:	00f42400 	.word	0x00f42400
 8007f20:	007a1200 	.word	0x007a1200

08007f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f24:	b480      	push	{r7}
 8007f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f28:	4b03      	ldr	r3, [pc, #12]	; (8007f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	20000004 	.word	0x20000004

08007f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f40:	f7ff fff0 	bl	8007f24 <HAL_RCC_GetHCLKFreq>
 8007f44:	4601      	mov	r1, r0
 8007f46:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	0a9b      	lsrs	r3, r3, #10
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	4a03      	ldr	r2, [pc, #12]	; (8007f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f52:	5cd3      	ldrb	r3, [r2, r3]
 8007f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40023800 	.word	0x40023800
 8007f60:	08010874 	.word	0x08010874

08007f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f68:	f7ff ffdc 	bl	8007f24 <HAL_RCC_GetHCLKFreq>
 8007f6c:	4601      	mov	r1, r0
 8007f6e:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	0b5b      	lsrs	r3, r3, #13
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	4a03      	ldr	r2, [pc, #12]	; (8007f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f7a:	5cd3      	ldrb	r3, [r2, r3]
 8007f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40023800 	.word	0x40023800
 8007f88:	08010874 	.word	0x08010874

08007f8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	220f      	movs	r2, #15
 8007f9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f9c:	4b12      	ldr	r3, [pc, #72]	; (8007fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f003 0203 	and.w	r2, r3, #3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007fa8:	4b0f      	ldr	r3, [pc, #60]	; (8007fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007fb4:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007fc0:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	08db      	lsrs	r3, r3, #3
 8007fc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007fce:	4b07      	ldr	r3, [pc, #28]	; (8007fec <HAL_RCC_GetClockConfig+0x60>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 020f 	and.w	r2, r3, #15
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	601a      	str	r2, [r3, #0]
}
 8007fda:	bf00      	nop
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	40023c00 	.word	0x40023c00

08007ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e056      	b.n	80080b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7fd f9a3 	bl	8005368 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008038:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	431a      	orrs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800805e:	431a      	orrs	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	ea42 0103 	orr.w	r1, r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	0c1b      	lsrs	r3, r3, #16
 8008080:	f003 0104 	and.w	r1, r3, #4
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	69da      	ldr	r2, [r3, #28]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800809e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	4613      	mov	r3, r2
 80080c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <HAL_SPI_Transmit+0x22>
 80080d6:	2302      	movs	r3, #2
 80080d8:	e11e      	b.n	8008318 <HAL_SPI_Transmit+0x260>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080e2:	f7fd fd3b 	bl	8005b5c <HAL_GetTick>
 80080e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d002      	beq.n	80080fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80080f8:	2302      	movs	r3, #2
 80080fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080fc:	e103      	b.n	8008306 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <HAL_SPI_Transmit+0x52>
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d102      	bne.n	8008110 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800810e:	e0fa      	b.n	8008306 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2203      	movs	r2, #3
 8008114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	88fa      	ldrh	r2, [r7, #6]
 8008128:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	88fa      	ldrh	r2, [r7, #6]
 800812e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008156:	d107      	bne.n	8008168 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008166:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008172:	2b40      	cmp	r3, #64	; 0x40
 8008174:	d007      	beq.n	8008186 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008184:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800818e:	d14b      	bne.n	8008228 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <HAL_SPI_Transmit+0xe6>
 8008198:	8afb      	ldrh	r3, [r7, #22]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d13e      	bne.n	800821c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a2:	881a      	ldrh	r2, [r3, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	1c9a      	adds	r2, r3, #2
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081c2:	e02b      	b.n	800821c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d112      	bne.n	80081f8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d6:	881a      	ldrh	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e2:	1c9a      	adds	r2, r3, #2
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3b01      	subs	r3, #1
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80081f6:	e011      	b.n	800821c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081f8:	f7fd fcb0 	bl	8005b5c <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d803      	bhi.n	8008210 <HAL_SPI_Transmit+0x158>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820e:	d102      	bne.n	8008216 <HAL_SPI_Transmit+0x15e>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d102      	bne.n	800821c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	77fb      	strb	r3, [r7, #31]
          goto error;
 800821a:	e074      	b.n	8008306 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1ce      	bne.n	80081c4 <HAL_SPI_Transmit+0x10c>
 8008226:	e04c      	b.n	80082c2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <HAL_SPI_Transmit+0x17e>
 8008230:	8afb      	ldrh	r3, [r7, #22]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d140      	bne.n	80082b8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	330c      	adds	r3, #12
 8008240:	7812      	ldrb	r2, [r2, #0]
 8008242:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008252:	b29b      	uxth	r3, r3
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800825c:	e02c      	b.n	80082b8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	2b02      	cmp	r3, #2
 800826a:	d113      	bne.n	8008294 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	7812      	ldrb	r2, [r2, #0]
 8008278:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827e:	1c5a      	adds	r2, r3, #1
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008288:	b29b      	uxth	r3, r3
 800828a:	3b01      	subs	r3, #1
 800828c:	b29a      	uxth	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	86da      	strh	r2, [r3, #54]	; 0x36
 8008292:	e011      	b.n	80082b8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008294:	f7fd fc62 	bl	8005b5c <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d803      	bhi.n	80082ac <HAL_SPI_Transmit+0x1f4>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082aa:	d102      	bne.n	80082b2 <HAL_SPI_Transmit+0x1fa>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d102      	bne.n	80082b8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082b6:	e026      	b.n	8008306 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082bc:	b29b      	uxth	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1cd      	bne.n	800825e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 f894 	bl	80083f4 <SPI_EndRxTxTransaction>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2220      	movs	r2, #32
 80082d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082e0:	2300      	movs	r3, #0
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	613b      	str	r3, [r7, #16]
 80082f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	77fb      	strb	r3, [r7, #31]
 8008302:	e000      	b.n	8008306 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008304:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008316:	7ffb      	ldrb	r3, [r7, #31]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3720      	adds	r7, #32
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008330:	e04c      	b.n	80083cc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008338:	d048      	beq.n	80083cc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800833a:	f7fd fc0f 	bl	8005b5c <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	429a      	cmp	r2, r3
 8008348:	d902      	bls.n	8008350 <SPI_WaitFlagStateUntilTimeout+0x30>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d13d      	bne.n	80083cc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800835e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008368:	d111      	bne.n	800838e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008372:	d004      	beq.n	800837e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800837c:	d107      	bne.n	800838e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800838c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008396:	d10f      	bne.n	80083b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e00f      	b.n	80083ec <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	4013      	ands	r3, r2
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	429a      	cmp	r2, r3
 80083da:	bf0c      	ite	eq
 80083dc:	2301      	moveq	r3, #1
 80083de:	2300      	movne	r3, #0
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	461a      	mov	r2, r3
 80083e4:	79fb      	ldrb	r3, [r7, #7]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d1a3      	bne.n	8008332 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008400:	4b1b      	ldr	r3, [pc, #108]	; (8008470 <SPI_EndRxTxTransaction+0x7c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1b      	ldr	r2, [pc, #108]	; (8008474 <SPI_EndRxTxTransaction+0x80>)
 8008406:	fba2 2303 	umull	r2, r3, r2, r3
 800840a:	0d5b      	lsrs	r3, r3, #21
 800840c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008410:	fb02 f303 	mul.w	r3, r2, r3
 8008414:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800841e:	d112      	bne.n	8008446 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2200      	movs	r2, #0
 8008428:	2180      	movs	r1, #128	; 0x80
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff ff78 	bl	8008320 <SPI_WaitFlagStateUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d016      	beq.n	8008464 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	f043 0220 	orr.w	r2, r3, #32
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e00f      	b.n	8008466 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	3b01      	subs	r3, #1
 8008450:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845c:	2b80      	cmp	r3, #128	; 0x80
 800845e:	d0f2      	beq.n	8008446 <SPI_EndRxTxTransaction+0x52>
 8008460:	e000      	b.n	8008464 <SPI_EndRxTxTransaction+0x70>
        break;
 8008462:	bf00      	nop
  }

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000004 	.word	0x20000004
 8008474:	165e9f81 	.word	0x165e9f81

08008478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e01d      	b.n	80084c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7fd f98a 	bl	80057b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f000 f95e 	bl	8008778 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b085      	sub	sp, #20
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0201 	orr.w	r2, r2, #1
 80084e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f003 0307 	and.w	r3, r3, #7
 80084f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b06      	cmp	r3, #6
 80084f6:	d007      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f042 0201 	orr.w	r2, r2, #1
 8008506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b02      	cmp	r3, #2
 800852a:	d122      	bne.n	8008572 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b02      	cmp	r3, #2
 8008538:	d11b      	bne.n	8008572 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f06f 0202 	mvn.w	r2, #2
 8008542:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f8ee 	bl	800873a <HAL_TIM_IC_CaptureCallback>
 800855e:	e005      	b.n	800856c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f8e0 	bl	8008726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f8f1 	bl	800874e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	2b04      	cmp	r3, #4
 800857e:	d122      	bne.n	80085c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f003 0304 	and.w	r3, r3, #4
 800858a:	2b04      	cmp	r3, #4
 800858c:	d11b      	bne.n	80085c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f06f 0204 	mvn.w	r2, #4
 8008596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f8c4 	bl	800873a <HAL_TIM_IC_CaptureCallback>
 80085b2:	e005      	b.n	80085c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f8b6 	bl	8008726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f8c7 	bl	800874e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	f003 0308 	and.w	r3, r3, #8
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d122      	bne.n	800861a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b08      	cmp	r3, #8
 80085e0:	d11b      	bne.n	800861a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f06f 0208 	mvn.w	r2, #8
 80085ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2204      	movs	r2, #4
 80085f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	f003 0303 	and.w	r3, r3, #3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f89a 	bl	800873a <HAL_TIM_IC_CaptureCallback>
 8008606:	e005      	b.n	8008614 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f88c 	bl	8008726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f89d 	bl	800874e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	f003 0310 	and.w	r3, r3, #16
 8008624:	2b10      	cmp	r3, #16
 8008626:	d122      	bne.n	800866e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f003 0310 	and.w	r3, r3, #16
 8008632:	2b10      	cmp	r3, #16
 8008634:	d11b      	bne.n	800866e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f06f 0210 	mvn.w	r2, #16
 800863e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2208      	movs	r2, #8
 8008644:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f870 	bl	800873a <HAL_TIM_IC_CaptureCallback>
 800865a:	e005      	b.n	8008668 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f862 	bl	8008726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f873 	bl	800874e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b01      	cmp	r3, #1
 800867a:	d10e      	bne.n	800869a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b01      	cmp	r3, #1
 8008688:	d107      	bne.n	800869a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f06f 0201 	mvn.w	r2, #1
 8008692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7fc fd81 	bl	800519c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a4:	2b80      	cmp	r3, #128	; 0x80
 80086a6:	d10e      	bne.n	80086c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	2b80      	cmp	r3, #128	; 0x80
 80086b4:	d107      	bne.n	80086c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f97f 	bl	80089c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d0:	2b40      	cmp	r3, #64	; 0x40
 80086d2:	d10e      	bne.n	80086f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086de:	2b40      	cmp	r3, #64	; 0x40
 80086e0:	d107      	bne.n	80086f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f838 	bl	8008762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	f003 0320 	and.w	r3, r3, #32
 80086fc:	2b20      	cmp	r3, #32
 80086fe:	d10e      	bne.n	800871e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b20      	cmp	r3, #32
 800870c:	d107      	bne.n	800871e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f06f 0220 	mvn.w	r2, #32
 8008716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f949 	bl	80089b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
	...

08008778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a40      	ldr	r2, [pc, #256]	; (800888c <TIM_Base_SetConfig+0x114>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d013      	beq.n	80087b8 <TIM_Base_SetConfig+0x40>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008796:	d00f      	beq.n	80087b8 <TIM_Base_SetConfig+0x40>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a3d      	ldr	r2, [pc, #244]	; (8008890 <TIM_Base_SetConfig+0x118>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d00b      	beq.n	80087b8 <TIM_Base_SetConfig+0x40>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a3c      	ldr	r2, [pc, #240]	; (8008894 <TIM_Base_SetConfig+0x11c>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d007      	beq.n	80087b8 <TIM_Base_SetConfig+0x40>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a3b      	ldr	r2, [pc, #236]	; (8008898 <TIM_Base_SetConfig+0x120>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d003      	beq.n	80087b8 <TIM_Base_SetConfig+0x40>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a3a      	ldr	r2, [pc, #232]	; (800889c <TIM_Base_SetConfig+0x124>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d108      	bne.n	80087ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a2f      	ldr	r2, [pc, #188]	; (800888c <TIM_Base_SetConfig+0x114>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d02b      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d8:	d027      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a2c      	ldr	r2, [pc, #176]	; (8008890 <TIM_Base_SetConfig+0x118>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d023      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a2b      	ldr	r2, [pc, #172]	; (8008894 <TIM_Base_SetConfig+0x11c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01f      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a2a      	ldr	r2, [pc, #168]	; (8008898 <TIM_Base_SetConfig+0x120>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d01b      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a29      	ldr	r2, [pc, #164]	; (800889c <TIM_Base_SetConfig+0x124>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d017      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a28      	ldr	r2, [pc, #160]	; (80088a0 <TIM_Base_SetConfig+0x128>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d013      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a27      	ldr	r2, [pc, #156]	; (80088a4 <TIM_Base_SetConfig+0x12c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00f      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a26      	ldr	r2, [pc, #152]	; (80088a8 <TIM_Base_SetConfig+0x130>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d00b      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a25      	ldr	r2, [pc, #148]	; (80088ac <TIM_Base_SetConfig+0x134>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d007      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a24      	ldr	r2, [pc, #144]	; (80088b0 <TIM_Base_SetConfig+0x138>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d003      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a23      	ldr	r2, [pc, #140]	; (80088b4 <TIM_Base_SetConfig+0x13c>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d108      	bne.n	800883c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4313      	orrs	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a0a      	ldr	r2, [pc, #40]	; (800888c <TIM_Base_SetConfig+0x114>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d003      	beq.n	8008870 <TIM_Base_SetConfig+0xf8>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a0c      	ldr	r2, [pc, #48]	; (800889c <TIM_Base_SetConfig+0x124>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d103      	bne.n	8008878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	691a      	ldr	r2, [r3, #16]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	615a      	str	r2, [r3, #20]
}
 800887e:	bf00      	nop
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	40010000 	.word	0x40010000
 8008890:	40000400 	.word	0x40000400
 8008894:	40000800 	.word	0x40000800
 8008898:	40000c00 	.word	0x40000c00
 800889c:	40010400 	.word	0x40010400
 80088a0:	40014000 	.word	0x40014000
 80088a4:	40014400 	.word	0x40014400
 80088a8:	40014800 	.word	0x40014800
 80088ac:	40001800 	.word	0x40001800
 80088b0:	40001c00 	.word	0x40001c00
 80088b4:	40002000 	.word	0x40002000

080088b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d101      	bne.n	80088d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088cc:	2302      	movs	r3, #2
 80088ce:	e05a      	b.n	8008986 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a21      	ldr	r2, [pc, #132]	; (8008994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d022      	beq.n	800895a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800891c:	d01d      	beq.n	800895a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a1d      	ldr	r2, [pc, #116]	; (8008998 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d018      	beq.n	800895a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a1b      	ldr	r2, [pc, #108]	; (800899c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d013      	beq.n	800895a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a1a      	ldr	r2, [pc, #104]	; (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d00e      	beq.n	800895a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a18      	ldr	r2, [pc, #96]	; (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d009      	beq.n	800895a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a17      	ldr	r2, [pc, #92]	; (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d004      	beq.n	800895a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a15      	ldr	r2, [pc, #84]	; (80089ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d10c      	bne.n	8008974 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	4313      	orrs	r3, r2
 800896a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40010000 	.word	0x40010000
 8008998:	40000400 	.word	0x40000400
 800899c:	40000800 	.word	0x40000800
 80089a0:	40000c00 	.word	0x40000c00
 80089a4:	40010400 	.word	0x40010400
 80089a8:	40014000 	.word	0x40014000
 80089ac:	40001800 	.word	0x40001800

080089b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e03f      	b.n	8008a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7fc ff92 	bl	8005928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2224      	movs	r2, #36	; 0x24
 8008a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fcc9 	bl	80093b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	691a      	ldr	r2, [r3, #16]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	695a      	ldr	r2, [r3, #20]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b088      	sub	sp, #32
 8008a76:	af02      	add	r7, sp, #8
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	603b      	str	r3, [r7, #0]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b20      	cmp	r3, #32
 8008a90:	f040 8083 	bne.w	8008b9a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <HAL_UART_Transmit+0x2e>
 8008a9a:	88fb      	ldrh	r3, [r7, #6]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e07b      	b.n	8008b9c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d101      	bne.n	8008ab2 <HAL_UART_Transmit+0x40>
 8008aae:	2302      	movs	r3, #2
 8008ab0:	e074      	b.n	8008b9c <HAL_UART_Transmit+0x12a>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2221      	movs	r2, #33	; 0x21
 8008ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008ac8:	f7fd f848 	bl	8005b5c <HAL_GetTick>
 8008acc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	88fa      	ldrh	r2, [r7, #6]
 8008ad2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	88fa      	ldrh	r2, [r7, #6]
 8008ad8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008ae2:	e042      	b.n	8008b6a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008afa:	d122      	bne.n	8008b42 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	2200      	movs	r2, #0
 8008b04:	2180      	movs	r1, #128	; 0x80
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 fad2 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e042      	b.n	8008b9c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b28:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	3302      	adds	r3, #2
 8008b36:	60bb      	str	r3, [r7, #8]
 8008b38:	e017      	b.n	8008b6a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	60bb      	str	r3, [r7, #8]
 8008b40:	e013      	b.n	8008b6a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2180      	movs	r1, #128	; 0x80
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 faaf 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e01f      	b.n	8008b9c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	60ba      	str	r2, [r7, #8]
 8008b62:	781a      	ldrb	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1b7      	bne.n	8008ae4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2140      	movs	r1, #64	; 0x40
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 fa96 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e006      	b.n	8008b9c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	e000      	b.n	8008b9c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008b9a:	2302      	movs	r3, #2
  }
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	d166      	bne.n	8008c8c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <HAL_UART_Receive_DMA+0x26>
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e05f      	b.n	8008c8e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d101      	bne.n	8008bdc <HAL_UART_Receive_DMA+0x38>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e058      	b.n	8008c8e <HAL_UART_Receive_DMA+0xea>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	88fa      	ldrh	r2, [r7, #6]
 8008bee:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2222      	movs	r2, #34	; 0x22
 8008bfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c02:	4a25      	ldr	r2, [pc, #148]	; (8008c98 <HAL_UART_Receive_DMA+0xf4>)
 8008c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0a:	4a24      	ldr	r2, [pc, #144]	; (8008c9c <HAL_UART_Receive_DMA+0xf8>)
 8008c0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c12:	4a23      	ldr	r2, [pc, #140]	; (8008ca0 <HAL_UART_Receive_DMA+0xfc>)
 8008c14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008c1e:	f107 0308 	add.w	r3, r7, #8
 8008c22:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	4619      	mov	r1, r3
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	f7fd fe8d 	bl	8006954 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	613b      	str	r3, [r7, #16]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	613b      	str	r3, [r7, #16]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c66:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	695a      	ldr	r2, [r3, #20]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f042 0201 	orr.w	r2, r2, #1
 8008c76:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	695a      	ldr	r2, [r3, #20]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c86:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e000      	b.n	8008c8e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008c8c:	2302      	movs	r3, #2
  }
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	08008f99 	.word	0x08008f99
 8008c9c:	08009001 	.word	0x08009001
 8008ca0:	0800901d 	.word	0x0800901d

08008ca4 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cba:	2b80      	cmp	r3, #128	; 0x80
 8008cbc:	bf0c      	ite	eq
 8008cbe:	2301      	moveq	r3, #1
 8008cc0:	2300      	movne	r3, #0
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b21      	cmp	r3, #33	; 0x21
 8008cd0:	d116      	bne.n	8008d00 <HAL_UART_DMAStop+0x5c>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d013      	beq.n	8008d00 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	695a      	ldr	r2, [r3, #20]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ce6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fd fe85 	bl	8006a04 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa22 	bl	8009144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0a:	2b40      	cmp	r3, #64	; 0x40
 8008d0c:	bf0c      	ite	eq
 8008d0e:	2301      	moveq	r3, #1
 8008d10:	2300      	movne	r3, #0
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b22      	cmp	r3, #34	; 0x22
 8008d20:	d116      	bne.n	8008d50 <HAL_UART_DMAStop+0xac>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d013      	beq.n	8008d50 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	695a      	ldr	r2, [r3, #20]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d36:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d004      	beq.n	8008d4a <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fd fe5d 	bl	8006a04 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa10 	bl	8009170 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	f003 030f 	and.w	r3, r3, #15
 8008d8a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10d      	bne.n	8008dae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	f003 0320 	and.w	r3, r3, #32
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d008      	beq.n	8008dae <HAL_UART_IRQHandler+0x52>
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	f003 0320 	and.w	r3, r3, #32
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa82 	bl	80092b0 <UART_Receive_IT>
      return;
 8008dac:	e0d1      	b.n	8008f52 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 80b0 	beq.w	8008f16 <HAL_UART_IRQHandler+0x1ba>
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d105      	bne.n	8008dcc <HAL_UART_IRQHandler+0x70>
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 80a5 	beq.w	8008f16 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <HAL_UART_IRQHandler+0x90>
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d005      	beq.n	8008dec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de4:	f043 0201 	orr.w	r2, r3, #1
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <HAL_UART_IRQHandler+0xb0>
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f003 0301 	and.w	r3, r3, #1
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e04:	f043 0202 	orr.w	r2, r3, #2
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00a      	beq.n	8008e2c <HAL_UART_IRQHandler+0xd0>
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d005      	beq.n	8008e2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e24:	f043 0204 	orr.w	r2, r3, #4
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00f      	beq.n	8008e56 <HAL_UART_IRQHandler+0xfa>
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <HAL_UART_IRQHandler+0xee>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d005      	beq.n	8008e56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e4e:	f043 0208 	orr.w	r2, r3, #8
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d078      	beq.n	8008f50 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	f003 0320 	and.w	r3, r3, #32
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d007      	beq.n	8008e78 <HAL_UART_IRQHandler+0x11c>
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fa1c 	bl	80092b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e82:	2b40      	cmp	r3, #64	; 0x40
 8008e84:	bf0c      	ite	eq
 8008e86:	2301      	moveq	r3, #1
 8008e88:	2300      	movne	r3, #0
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <HAL_UART_IRQHandler+0x144>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d031      	beq.n	8008f04 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f965 	bl	8009170 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb0:	2b40      	cmp	r3, #64	; 0x40
 8008eb2:	d123      	bne.n	8008efc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	695a      	ldr	r2, [r3, #20]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ec2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d013      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed0:	4a21      	ldr	r2, [pc, #132]	; (8008f58 <HAL_UART_IRQHandler+0x1fc>)
 8008ed2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fd fe03 	bl	8006ae4 <HAL_DMA_Abort_IT>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d016      	beq.n	8008f12 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008eee:	4610      	mov	r0, r2
 8008ef0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef2:	e00e      	b.n	8008f12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f845 	bl	8008f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008efa:	e00a      	b.n	8008f12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f841 	bl	8008f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f02:	e006      	b.n	8008f12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f83d 	bl	8008f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008f10:	e01e      	b.n	8008f50 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f12:	bf00      	nop
    return;
 8008f14:	e01c      	b.n	8008f50 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d008      	beq.n	8008f32 <HAL_UART_IRQHandler+0x1d6>
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f952 	bl	80091d4 <UART_Transmit_IT>
    return;
 8008f30:	e00f      	b.n	8008f52 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00a      	beq.n	8008f52 <HAL_UART_IRQHandler+0x1f6>
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d005      	beq.n	8008f52 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f99a 	bl	8009280 <UART_EndTransmit_IT>
    return;
 8008f4c:	bf00      	nop
 8008f4e:	e000      	b.n	8008f52 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008f50:	bf00      	nop
  }
}
 8008f52:	3720      	adds	r7, #32
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	080091ad 	.word	0x080091ad

08008f5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d11e      	bne.n	8008ff2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fc8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	695a      	ldr	r2, [r3, #20]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0201 	bic.w	r2, r2, #1
 8008fd8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	695a      	ldr	r2, [r3, #20]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fe8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f7ff ffbc 	bl	8008f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ff8:	bf00      	nop
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7fb fca4 	bl	800495c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009014:	bf00      	nop
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009038:	2b80      	cmp	r3, #128	; 0x80
 800903a:	bf0c      	ite	eq
 800903c:	2301      	moveq	r3, #1
 800903e:	2300      	movne	r3, #0
 8009040:	b2db      	uxtb	r3, r3
 8009042:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b21      	cmp	r3, #33	; 0x21
 800904e:	d108      	bne.n	8009062 <UART_DMAError+0x46>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d005      	beq.n	8009062 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2200      	movs	r2, #0
 800905a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800905c:	68b8      	ldr	r0, [r7, #8]
 800905e:	f000 f871 	bl	8009144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906c:	2b40      	cmp	r3, #64	; 0x40
 800906e:	bf0c      	ite	eq
 8009070:	2301      	moveq	r3, #1
 8009072:	2300      	movne	r3, #0
 8009074:	b2db      	uxtb	r3, r3
 8009076:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b22      	cmp	r3, #34	; 0x22
 8009082:	d108      	bne.n	8009096 <UART_DMAError+0x7a>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d005      	beq.n	8009096 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2200      	movs	r2, #0
 800908e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009090:	68b8      	ldr	r0, [r7, #8]
 8009092:	f000 f86d 	bl	8009170 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909a:	f043 0210 	orr.w	r2, r3, #16
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090a2:	68b8      	ldr	r0, [r7, #8]
 80090a4:	f7ff ff6e 	bl	8008f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	4613      	mov	r3, r2
 80090be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c0:	e02c      	b.n	800911c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c8:	d028      	beq.n	800911c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d007      	beq.n	80090e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80090d0:	f7fc fd44 	bl	8005b5c <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d21d      	bcs.n	800911c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	695a      	ldr	r2, [r3, #20]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0201 	bic.w	r2, r2, #1
 80090fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2220      	movs	r2, #32
 800910c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e00f      	b.n	800913c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	4013      	ands	r3, r2
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	429a      	cmp	r2, r3
 800912a:	bf0c      	ite	eq
 800912c:	2301      	moveq	r3, #1
 800912e:	2300      	movne	r3, #0
 8009130:	b2db      	uxtb	r3, r3
 8009132:	461a      	mov	r2, r3
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	429a      	cmp	r2, r3
 8009138:	d0c3      	beq.n	80090c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800915a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2220      	movs	r2, #32
 8009160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009186:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	695a      	ldr	r2, [r3, #20]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 0201 	bic.w	r2, r2, #1
 8009196:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2220      	movs	r2, #32
 800919c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7ff fedc 	bl	8008f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091cc:	bf00      	nop
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b21      	cmp	r3, #33	; 0x21
 80091e6:	d144      	bne.n	8009272 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f0:	d11a      	bne.n	8009228 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009206:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d105      	bne.n	800921c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	1c9a      	adds	r2, r3, #2
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	621a      	str	r2, [r3, #32]
 800921a:	e00e      	b.n	800923a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	621a      	str	r2, [r3, #32]
 8009226:	e008      	b.n	800923a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	1c59      	adds	r1, r3, #1
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6211      	str	r1, [r2, #32]
 8009232:	781a      	ldrb	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800923e:	b29b      	uxth	r3, r3
 8009240:	3b01      	subs	r3, #1
 8009242:	b29b      	uxth	r3, r3
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	4619      	mov	r1, r3
 8009248:	84d1      	strh	r1, [r2, #38]	; 0x26
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10f      	bne.n	800926e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800925c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800926c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	e000      	b.n	8009274 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009272:	2302      	movs	r3, #2
  }
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68da      	ldr	r2, [r3, #12]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009296:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2220      	movs	r2, #32
 800929c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff fe5b 	bl	8008f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b22      	cmp	r3, #34	; 0x22
 80092c2:	d171      	bne.n	80093a8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092cc:	d123      	bne.n	8009316 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10e      	bne.n	80092fa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f2:	1c9a      	adds	r2, r3, #2
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	629a      	str	r2, [r3, #40]	; 0x28
 80092f8:	e029      	b.n	800934e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	b29b      	uxth	r3, r3
 8009302:	b2db      	uxtb	r3, r3
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	629a      	str	r2, [r3, #40]	; 0x28
 8009314:	e01b      	b.n	800934e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6858      	ldr	r0, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009328:	1c59      	adds	r1, r3, #1
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6291      	str	r1, [r2, #40]	; 0x28
 800932e:	b2c2      	uxtb	r2, r0
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	e00c      	b.n	800934e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	b2da      	uxtb	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009340:	1c58      	adds	r0, r3, #1
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	6288      	str	r0, [r1, #40]	; 0x28
 8009346:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800934a:	b2d2      	uxtb	r2, r2
 800934c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009352:	b29b      	uxth	r3, r3
 8009354:	3b01      	subs	r3, #1
 8009356:	b29b      	uxth	r3, r3
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	4619      	mov	r1, r3
 800935c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800935e:	2b00      	cmp	r3, #0
 8009360:	d120      	bne.n	80093a4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68da      	ldr	r2, [r3, #12]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0220 	bic.w	r2, r2, #32
 8009370:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68da      	ldr	r2, [r3, #12]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009380:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	695a      	ldr	r2, [r3, #20]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 0201 	bic.w	r2, r2, #1
 8009390:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2220      	movs	r2, #32
 8009396:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff fde8 	bl	8008f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e002      	b.n	80093aa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	e000      	b.n	80093aa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80093a8:	2302      	movs	r3, #2
  }
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	b085      	sub	sp, #20
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	431a      	orrs	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	431a      	orrs	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80093f6:	f023 030c 	bic.w	r3, r3, #12
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6812      	ldr	r2, [r2, #0]
 80093fe:	68f9      	ldr	r1, [r7, #12]
 8009400:	430b      	orrs	r3, r1
 8009402:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	699a      	ldr	r2, [r3, #24]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009422:	f040 818b 	bne.w	800973c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4ac1      	ldr	r2, [pc, #772]	; (8009730 <UART_SetConfig+0x37c>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d005      	beq.n	800943c <UART_SetConfig+0x88>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4abf      	ldr	r2, [pc, #764]	; (8009734 <UART_SetConfig+0x380>)
 8009436:	4293      	cmp	r3, r2
 8009438:	f040 80bd 	bne.w	80095b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800943c:	f7fe fd92 	bl	8007f64 <HAL_RCC_GetPCLK2Freq>
 8009440:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	461d      	mov	r5, r3
 8009446:	f04f 0600 	mov.w	r6, #0
 800944a:	46a8      	mov	r8, r5
 800944c:	46b1      	mov	r9, r6
 800944e:	eb18 0308 	adds.w	r3, r8, r8
 8009452:	eb49 0409 	adc.w	r4, r9, r9
 8009456:	4698      	mov	r8, r3
 8009458:	46a1      	mov	r9, r4
 800945a:	eb18 0805 	adds.w	r8, r8, r5
 800945e:	eb49 0906 	adc.w	r9, r9, r6
 8009462:	f04f 0100 	mov.w	r1, #0
 8009466:	f04f 0200 	mov.w	r2, #0
 800946a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800946e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009472:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009476:	4688      	mov	r8, r1
 8009478:	4691      	mov	r9, r2
 800947a:	eb18 0005 	adds.w	r0, r8, r5
 800947e:	eb49 0106 	adc.w	r1, r9, r6
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	461d      	mov	r5, r3
 8009488:	f04f 0600 	mov.w	r6, #0
 800948c:	196b      	adds	r3, r5, r5
 800948e:	eb46 0406 	adc.w	r4, r6, r6
 8009492:	461a      	mov	r2, r3
 8009494:	4623      	mov	r3, r4
 8009496:	f7f7 fb57 	bl	8000b48 <__aeabi_uldivmod>
 800949a:	4603      	mov	r3, r0
 800949c:	460c      	mov	r4, r1
 800949e:	461a      	mov	r2, r3
 80094a0:	4ba5      	ldr	r3, [pc, #660]	; (8009738 <UART_SetConfig+0x384>)
 80094a2:	fba3 2302 	umull	r2, r3, r3, r2
 80094a6:	095b      	lsrs	r3, r3, #5
 80094a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	461d      	mov	r5, r3
 80094b0:	f04f 0600 	mov.w	r6, #0
 80094b4:	46a9      	mov	r9, r5
 80094b6:	46b2      	mov	sl, r6
 80094b8:	eb19 0309 	adds.w	r3, r9, r9
 80094bc:	eb4a 040a 	adc.w	r4, sl, sl
 80094c0:	4699      	mov	r9, r3
 80094c2:	46a2      	mov	sl, r4
 80094c4:	eb19 0905 	adds.w	r9, r9, r5
 80094c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80094cc:	f04f 0100 	mov.w	r1, #0
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094e0:	4689      	mov	r9, r1
 80094e2:	4692      	mov	sl, r2
 80094e4:	eb19 0005 	adds.w	r0, r9, r5
 80094e8:	eb4a 0106 	adc.w	r1, sl, r6
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	461d      	mov	r5, r3
 80094f2:	f04f 0600 	mov.w	r6, #0
 80094f6:	196b      	adds	r3, r5, r5
 80094f8:	eb46 0406 	adc.w	r4, r6, r6
 80094fc:	461a      	mov	r2, r3
 80094fe:	4623      	mov	r3, r4
 8009500:	f7f7 fb22 	bl	8000b48 <__aeabi_uldivmod>
 8009504:	4603      	mov	r3, r0
 8009506:	460c      	mov	r4, r1
 8009508:	461a      	mov	r2, r3
 800950a:	4b8b      	ldr	r3, [pc, #556]	; (8009738 <UART_SetConfig+0x384>)
 800950c:	fba3 1302 	umull	r1, r3, r3, r2
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	2164      	movs	r1, #100	; 0x64
 8009514:	fb01 f303 	mul.w	r3, r1, r3
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	3332      	adds	r3, #50	; 0x32
 800951e:	4a86      	ldr	r2, [pc, #536]	; (8009738 <UART_SetConfig+0x384>)
 8009520:	fba2 2303 	umull	r2, r3, r2, r3
 8009524:	095b      	lsrs	r3, r3, #5
 8009526:	005b      	lsls	r3, r3, #1
 8009528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800952c:	4498      	add	r8, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	461d      	mov	r5, r3
 8009532:	f04f 0600 	mov.w	r6, #0
 8009536:	46a9      	mov	r9, r5
 8009538:	46b2      	mov	sl, r6
 800953a:	eb19 0309 	adds.w	r3, r9, r9
 800953e:	eb4a 040a 	adc.w	r4, sl, sl
 8009542:	4699      	mov	r9, r3
 8009544:	46a2      	mov	sl, r4
 8009546:	eb19 0905 	adds.w	r9, r9, r5
 800954a:	eb4a 0a06 	adc.w	sl, sl, r6
 800954e:	f04f 0100 	mov.w	r1, #0
 8009552:	f04f 0200 	mov.w	r2, #0
 8009556:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800955a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800955e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009562:	4689      	mov	r9, r1
 8009564:	4692      	mov	sl, r2
 8009566:	eb19 0005 	adds.w	r0, r9, r5
 800956a:	eb4a 0106 	adc.w	r1, sl, r6
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	461d      	mov	r5, r3
 8009574:	f04f 0600 	mov.w	r6, #0
 8009578:	196b      	adds	r3, r5, r5
 800957a:	eb46 0406 	adc.w	r4, r6, r6
 800957e:	461a      	mov	r2, r3
 8009580:	4623      	mov	r3, r4
 8009582:	f7f7 fae1 	bl	8000b48 <__aeabi_uldivmod>
 8009586:	4603      	mov	r3, r0
 8009588:	460c      	mov	r4, r1
 800958a:	461a      	mov	r2, r3
 800958c:	4b6a      	ldr	r3, [pc, #424]	; (8009738 <UART_SetConfig+0x384>)
 800958e:	fba3 1302 	umull	r1, r3, r3, r2
 8009592:	095b      	lsrs	r3, r3, #5
 8009594:	2164      	movs	r1, #100	; 0x64
 8009596:	fb01 f303 	mul.w	r3, r1, r3
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	00db      	lsls	r3, r3, #3
 800959e:	3332      	adds	r3, #50	; 0x32
 80095a0:	4a65      	ldr	r2, [pc, #404]	; (8009738 <UART_SetConfig+0x384>)
 80095a2:	fba2 2303 	umull	r2, r3, r2, r3
 80095a6:	095b      	lsrs	r3, r3, #5
 80095a8:	f003 0207 	and.w	r2, r3, #7
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4442      	add	r2, r8
 80095b2:	609a      	str	r2, [r3, #8]
 80095b4:	e26f      	b.n	8009a96 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095b6:	f7fe fcc1 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 80095ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	461d      	mov	r5, r3
 80095c0:	f04f 0600 	mov.w	r6, #0
 80095c4:	46a8      	mov	r8, r5
 80095c6:	46b1      	mov	r9, r6
 80095c8:	eb18 0308 	adds.w	r3, r8, r8
 80095cc:	eb49 0409 	adc.w	r4, r9, r9
 80095d0:	4698      	mov	r8, r3
 80095d2:	46a1      	mov	r9, r4
 80095d4:	eb18 0805 	adds.w	r8, r8, r5
 80095d8:	eb49 0906 	adc.w	r9, r9, r6
 80095dc:	f04f 0100 	mov.w	r1, #0
 80095e0:	f04f 0200 	mov.w	r2, #0
 80095e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80095e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80095ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80095f0:	4688      	mov	r8, r1
 80095f2:	4691      	mov	r9, r2
 80095f4:	eb18 0005 	adds.w	r0, r8, r5
 80095f8:	eb49 0106 	adc.w	r1, r9, r6
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	461d      	mov	r5, r3
 8009602:	f04f 0600 	mov.w	r6, #0
 8009606:	196b      	adds	r3, r5, r5
 8009608:	eb46 0406 	adc.w	r4, r6, r6
 800960c:	461a      	mov	r2, r3
 800960e:	4623      	mov	r3, r4
 8009610:	f7f7 fa9a 	bl	8000b48 <__aeabi_uldivmod>
 8009614:	4603      	mov	r3, r0
 8009616:	460c      	mov	r4, r1
 8009618:	461a      	mov	r2, r3
 800961a:	4b47      	ldr	r3, [pc, #284]	; (8009738 <UART_SetConfig+0x384>)
 800961c:	fba3 2302 	umull	r2, r3, r3, r2
 8009620:	095b      	lsrs	r3, r3, #5
 8009622:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	461d      	mov	r5, r3
 800962a:	f04f 0600 	mov.w	r6, #0
 800962e:	46a9      	mov	r9, r5
 8009630:	46b2      	mov	sl, r6
 8009632:	eb19 0309 	adds.w	r3, r9, r9
 8009636:	eb4a 040a 	adc.w	r4, sl, sl
 800963a:	4699      	mov	r9, r3
 800963c:	46a2      	mov	sl, r4
 800963e:	eb19 0905 	adds.w	r9, r9, r5
 8009642:	eb4a 0a06 	adc.w	sl, sl, r6
 8009646:	f04f 0100 	mov.w	r1, #0
 800964a:	f04f 0200 	mov.w	r2, #0
 800964e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009652:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009656:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800965a:	4689      	mov	r9, r1
 800965c:	4692      	mov	sl, r2
 800965e:	eb19 0005 	adds.w	r0, r9, r5
 8009662:	eb4a 0106 	adc.w	r1, sl, r6
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	461d      	mov	r5, r3
 800966c:	f04f 0600 	mov.w	r6, #0
 8009670:	196b      	adds	r3, r5, r5
 8009672:	eb46 0406 	adc.w	r4, r6, r6
 8009676:	461a      	mov	r2, r3
 8009678:	4623      	mov	r3, r4
 800967a:	f7f7 fa65 	bl	8000b48 <__aeabi_uldivmod>
 800967e:	4603      	mov	r3, r0
 8009680:	460c      	mov	r4, r1
 8009682:	461a      	mov	r2, r3
 8009684:	4b2c      	ldr	r3, [pc, #176]	; (8009738 <UART_SetConfig+0x384>)
 8009686:	fba3 1302 	umull	r1, r3, r3, r2
 800968a:	095b      	lsrs	r3, r3, #5
 800968c:	2164      	movs	r1, #100	; 0x64
 800968e:	fb01 f303 	mul.w	r3, r1, r3
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	3332      	adds	r3, #50	; 0x32
 8009698:	4a27      	ldr	r2, [pc, #156]	; (8009738 <UART_SetConfig+0x384>)
 800969a:	fba2 2303 	umull	r2, r3, r2, r3
 800969e:	095b      	lsrs	r3, r3, #5
 80096a0:	005b      	lsls	r3, r3, #1
 80096a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096a6:	4498      	add	r8, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	461d      	mov	r5, r3
 80096ac:	f04f 0600 	mov.w	r6, #0
 80096b0:	46a9      	mov	r9, r5
 80096b2:	46b2      	mov	sl, r6
 80096b4:	eb19 0309 	adds.w	r3, r9, r9
 80096b8:	eb4a 040a 	adc.w	r4, sl, sl
 80096bc:	4699      	mov	r9, r3
 80096be:	46a2      	mov	sl, r4
 80096c0:	eb19 0905 	adds.w	r9, r9, r5
 80096c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80096c8:	f04f 0100 	mov.w	r1, #0
 80096cc:	f04f 0200 	mov.w	r2, #0
 80096d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80096d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096dc:	4689      	mov	r9, r1
 80096de:	4692      	mov	sl, r2
 80096e0:	eb19 0005 	adds.w	r0, r9, r5
 80096e4:	eb4a 0106 	adc.w	r1, sl, r6
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	461d      	mov	r5, r3
 80096ee:	f04f 0600 	mov.w	r6, #0
 80096f2:	196b      	adds	r3, r5, r5
 80096f4:	eb46 0406 	adc.w	r4, r6, r6
 80096f8:	461a      	mov	r2, r3
 80096fa:	4623      	mov	r3, r4
 80096fc:	f7f7 fa24 	bl	8000b48 <__aeabi_uldivmod>
 8009700:	4603      	mov	r3, r0
 8009702:	460c      	mov	r4, r1
 8009704:	461a      	mov	r2, r3
 8009706:	4b0c      	ldr	r3, [pc, #48]	; (8009738 <UART_SetConfig+0x384>)
 8009708:	fba3 1302 	umull	r1, r3, r3, r2
 800970c:	095b      	lsrs	r3, r3, #5
 800970e:	2164      	movs	r1, #100	; 0x64
 8009710:	fb01 f303 	mul.w	r3, r1, r3
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	3332      	adds	r3, #50	; 0x32
 800971a:	4a07      	ldr	r2, [pc, #28]	; (8009738 <UART_SetConfig+0x384>)
 800971c:	fba2 2303 	umull	r2, r3, r2, r3
 8009720:	095b      	lsrs	r3, r3, #5
 8009722:	f003 0207 	and.w	r2, r3, #7
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4442      	add	r2, r8
 800972c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800972e:	e1b2      	b.n	8009a96 <UART_SetConfig+0x6e2>
 8009730:	40011000 	.word	0x40011000
 8009734:	40011400 	.word	0x40011400
 8009738:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4ad7      	ldr	r2, [pc, #860]	; (8009aa0 <UART_SetConfig+0x6ec>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d005      	beq.n	8009752 <UART_SetConfig+0x39e>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4ad6      	ldr	r2, [pc, #856]	; (8009aa4 <UART_SetConfig+0x6f0>)
 800974c:	4293      	cmp	r3, r2
 800974e:	f040 80d1 	bne.w	80098f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009752:	f7fe fc07 	bl	8007f64 <HAL_RCC_GetPCLK2Freq>
 8009756:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	469a      	mov	sl, r3
 800975c:	f04f 0b00 	mov.w	fp, #0
 8009760:	46d0      	mov	r8, sl
 8009762:	46d9      	mov	r9, fp
 8009764:	eb18 0308 	adds.w	r3, r8, r8
 8009768:	eb49 0409 	adc.w	r4, r9, r9
 800976c:	4698      	mov	r8, r3
 800976e:	46a1      	mov	r9, r4
 8009770:	eb18 080a 	adds.w	r8, r8, sl
 8009774:	eb49 090b 	adc.w	r9, r9, fp
 8009778:	f04f 0100 	mov.w	r1, #0
 800977c:	f04f 0200 	mov.w	r2, #0
 8009780:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009784:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009788:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800978c:	4688      	mov	r8, r1
 800978e:	4691      	mov	r9, r2
 8009790:	eb1a 0508 	adds.w	r5, sl, r8
 8009794:	eb4b 0609 	adc.w	r6, fp, r9
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	4619      	mov	r1, r3
 800979e:	f04f 0200 	mov.w	r2, #0
 80097a2:	f04f 0300 	mov.w	r3, #0
 80097a6:	f04f 0400 	mov.w	r4, #0
 80097aa:	0094      	lsls	r4, r2, #2
 80097ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80097b0:	008b      	lsls	r3, r1, #2
 80097b2:	461a      	mov	r2, r3
 80097b4:	4623      	mov	r3, r4
 80097b6:	4628      	mov	r0, r5
 80097b8:	4631      	mov	r1, r6
 80097ba:	f7f7 f9c5 	bl	8000b48 <__aeabi_uldivmod>
 80097be:	4603      	mov	r3, r0
 80097c0:	460c      	mov	r4, r1
 80097c2:	461a      	mov	r2, r3
 80097c4:	4bb8      	ldr	r3, [pc, #736]	; (8009aa8 <UART_SetConfig+0x6f4>)
 80097c6:	fba3 2302 	umull	r2, r3, r3, r2
 80097ca:	095b      	lsrs	r3, r3, #5
 80097cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	469b      	mov	fp, r3
 80097d4:	f04f 0c00 	mov.w	ip, #0
 80097d8:	46d9      	mov	r9, fp
 80097da:	46e2      	mov	sl, ip
 80097dc:	eb19 0309 	adds.w	r3, r9, r9
 80097e0:	eb4a 040a 	adc.w	r4, sl, sl
 80097e4:	4699      	mov	r9, r3
 80097e6:	46a2      	mov	sl, r4
 80097e8:	eb19 090b 	adds.w	r9, r9, fp
 80097ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80097f0:	f04f 0100 	mov.w	r1, #0
 80097f4:	f04f 0200 	mov.w	r2, #0
 80097f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009800:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009804:	4689      	mov	r9, r1
 8009806:	4692      	mov	sl, r2
 8009808:	eb1b 0509 	adds.w	r5, fp, r9
 800980c:	eb4c 060a 	adc.w	r6, ip, sl
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	4619      	mov	r1, r3
 8009816:	f04f 0200 	mov.w	r2, #0
 800981a:	f04f 0300 	mov.w	r3, #0
 800981e:	f04f 0400 	mov.w	r4, #0
 8009822:	0094      	lsls	r4, r2, #2
 8009824:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009828:	008b      	lsls	r3, r1, #2
 800982a:	461a      	mov	r2, r3
 800982c:	4623      	mov	r3, r4
 800982e:	4628      	mov	r0, r5
 8009830:	4631      	mov	r1, r6
 8009832:	f7f7 f989 	bl	8000b48 <__aeabi_uldivmod>
 8009836:	4603      	mov	r3, r0
 8009838:	460c      	mov	r4, r1
 800983a:	461a      	mov	r2, r3
 800983c:	4b9a      	ldr	r3, [pc, #616]	; (8009aa8 <UART_SetConfig+0x6f4>)
 800983e:	fba3 1302 	umull	r1, r3, r3, r2
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	2164      	movs	r1, #100	; 0x64
 8009846:	fb01 f303 	mul.w	r3, r1, r3
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	3332      	adds	r3, #50	; 0x32
 8009850:	4a95      	ldr	r2, [pc, #596]	; (8009aa8 <UART_SetConfig+0x6f4>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	095b      	lsrs	r3, r3, #5
 8009858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800985c:	4498      	add	r8, r3
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	469b      	mov	fp, r3
 8009862:	f04f 0c00 	mov.w	ip, #0
 8009866:	46d9      	mov	r9, fp
 8009868:	46e2      	mov	sl, ip
 800986a:	eb19 0309 	adds.w	r3, r9, r9
 800986e:	eb4a 040a 	adc.w	r4, sl, sl
 8009872:	4699      	mov	r9, r3
 8009874:	46a2      	mov	sl, r4
 8009876:	eb19 090b 	adds.w	r9, r9, fp
 800987a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800987e:	f04f 0100 	mov.w	r1, #0
 8009882:	f04f 0200 	mov.w	r2, #0
 8009886:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800988a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800988e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009892:	4689      	mov	r9, r1
 8009894:	4692      	mov	sl, r2
 8009896:	eb1b 0509 	adds.w	r5, fp, r9
 800989a:	eb4c 060a 	adc.w	r6, ip, sl
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	4619      	mov	r1, r3
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	f04f 0300 	mov.w	r3, #0
 80098ac:	f04f 0400 	mov.w	r4, #0
 80098b0:	0094      	lsls	r4, r2, #2
 80098b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80098b6:	008b      	lsls	r3, r1, #2
 80098b8:	461a      	mov	r2, r3
 80098ba:	4623      	mov	r3, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	4631      	mov	r1, r6
 80098c0:	f7f7 f942 	bl	8000b48 <__aeabi_uldivmod>
 80098c4:	4603      	mov	r3, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	461a      	mov	r2, r3
 80098ca:	4b77      	ldr	r3, [pc, #476]	; (8009aa8 <UART_SetConfig+0x6f4>)
 80098cc:	fba3 1302 	umull	r1, r3, r3, r2
 80098d0:	095b      	lsrs	r3, r3, #5
 80098d2:	2164      	movs	r1, #100	; 0x64
 80098d4:	fb01 f303 	mul.w	r3, r1, r3
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	011b      	lsls	r3, r3, #4
 80098dc:	3332      	adds	r3, #50	; 0x32
 80098de:	4a72      	ldr	r2, [pc, #456]	; (8009aa8 <UART_SetConfig+0x6f4>)
 80098e0:	fba2 2303 	umull	r2, r3, r2, r3
 80098e4:	095b      	lsrs	r3, r3, #5
 80098e6:	f003 020f 	and.w	r2, r3, #15
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4442      	add	r2, r8
 80098f0:	609a      	str	r2, [r3, #8]
 80098f2:	e0d0      	b.n	8009a96 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80098f4:	f7fe fb22 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 80098f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	469a      	mov	sl, r3
 80098fe:	f04f 0b00 	mov.w	fp, #0
 8009902:	46d0      	mov	r8, sl
 8009904:	46d9      	mov	r9, fp
 8009906:	eb18 0308 	adds.w	r3, r8, r8
 800990a:	eb49 0409 	adc.w	r4, r9, r9
 800990e:	4698      	mov	r8, r3
 8009910:	46a1      	mov	r9, r4
 8009912:	eb18 080a 	adds.w	r8, r8, sl
 8009916:	eb49 090b 	adc.w	r9, r9, fp
 800991a:	f04f 0100 	mov.w	r1, #0
 800991e:	f04f 0200 	mov.w	r2, #0
 8009922:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009926:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800992a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800992e:	4688      	mov	r8, r1
 8009930:	4691      	mov	r9, r2
 8009932:	eb1a 0508 	adds.w	r5, sl, r8
 8009936:	eb4b 0609 	adc.w	r6, fp, r9
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	4619      	mov	r1, r3
 8009940:	f04f 0200 	mov.w	r2, #0
 8009944:	f04f 0300 	mov.w	r3, #0
 8009948:	f04f 0400 	mov.w	r4, #0
 800994c:	0094      	lsls	r4, r2, #2
 800994e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009952:	008b      	lsls	r3, r1, #2
 8009954:	461a      	mov	r2, r3
 8009956:	4623      	mov	r3, r4
 8009958:	4628      	mov	r0, r5
 800995a:	4631      	mov	r1, r6
 800995c:	f7f7 f8f4 	bl	8000b48 <__aeabi_uldivmod>
 8009960:	4603      	mov	r3, r0
 8009962:	460c      	mov	r4, r1
 8009964:	461a      	mov	r2, r3
 8009966:	4b50      	ldr	r3, [pc, #320]	; (8009aa8 <UART_SetConfig+0x6f4>)
 8009968:	fba3 2302 	umull	r2, r3, r3, r2
 800996c:	095b      	lsrs	r3, r3, #5
 800996e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	469b      	mov	fp, r3
 8009976:	f04f 0c00 	mov.w	ip, #0
 800997a:	46d9      	mov	r9, fp
 800997c:	46e2      	mov	sl, ip
 800997e:	eb19 0309 	adds.w	r3, r9, r9
 8009982:	eb4a 040a 	adc.w	r4, sl, sl
 8009986:	4699      	mov	r9, r3
 8009988:	46a2      	mov	sl, r4
 800998a:	eb19 090b 	adds.w	r9, r9, fp
 800998e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009992:	f04f 0100 	mov.w	r1, #0
 8009996:	f04f 0200 	mov.w	r2, #0
 800999a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800999e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099a6:	4689      	mov	r9, r1
 80099a8:	4692      	mov	sl, r2
 80099aa:	eb1b 0509 	adds.w	r5, fp, r9
 80099ae:	eb4c 060a 	adc.w	r6, ip, sl
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	4619      	mov	r1, r3
 80099b8:	f04f 0200 	mov.w	r2, #0
 80099bc:	f04f 0300 	mov.w	r3, #0
 80099c0:	f04f 0400 	mov.w	r4, #0
 80099c4:	0094      	lsls	r4, r2, #2
 80099c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80099ca:	008b      	lsls	r3, r1, #2
 80099cc:	461a      	mov	r2, r3
 80099ce:	4623      	mov	r3, r4
 80099d0:	4628      	mov	r0, r5
 80099d2:	4631      	mov	r1, r6
 80099d4:	f7f7 f8b8 	bl	8000b48 <__aeabi_uldivmod>
 80099d8:	4603      	mov	r3, r0
 80099da:	460c      	mov	r4, r1
 80099dc:	461a      	mov	r2, r3
 80099de:	4b32      	ldr	r3, [pc, #200]	; (8009aa8 <UART_SetConfig+0x6f4>)
 80099e0:	fba3 1302 	umull	r1, r3, r3, r2
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	2164      	movs	r1, #100	; 0x64
 80099e8:	fb01 f303 	mul.w	r3, r1, r3
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	011b      	lsls	r3, r3, #4
 80099f0:	3332      	adds	r3, #50	; 0x32
 80099f2:	4a2d      	ldr	r2, [pc, #180]	; (8009aa8 <UART_SetConfig+0x6f4>)
 80099f4:	fba2 2303 	umull	r2, r3, r2, r3
 80099f8:	095b      	lsrs	r3, r3, #5
 80099fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099fe:	4498      	add	r8, r3
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	469b      	mov	fp, r3
 8009a04:	f04f 0c00 	mov.w	ip, #0
 8009a08:	46d9      	mov	r9, fp
 8009a0a:	46e2      	mov	sl, ip
 8009a0c:	eb19 0309 	adds.w	r3, r9, r9
 8009a10:	eb4a 040a 	adc.w	r4, sl, sl
 8009a14:	4699      	mov	r9, r3
 8009a16:	46a2      	mov	sl, r4
 8009a18:	eb19 090b 	adds.w	r9, r9, fp
 8009a1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009a20:	f04f 0100 	mov.w	r1, #0
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a34:	4689      	mov	r9, r1
 8009a36:	4692      	mov	sl, r2
 8009a38:	eb1b 0509 	adds.w	r5, fp, r9
 8009a3c:	eb4c 060a 	adc.w	r6, ip, sl
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	4619      	mov	r1, r3
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	f04f 0300 	mov.w	r3, #0
 8009a4e:	f04f 0400 	mov.w	r4, #0
 8009a52:	0094      	lsls	r4, r2, #2
 8009a54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a58:	008b      	lsls	r3, r1, #2
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	4623      	mov	r3, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	4631      	mov	r1, r6
 8009a62:	f7f7 f871 	bl	8000b48 <__aeabi_uldivmod>
 8009a66:	4603      	mov	r3, r0
 8009a68:	460c      	mov	r4, r1
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	4b0e      	ldr	r3, [pc, #56]	; (8009aa8 <UART_SetConfig+0x6f4>)
 8009a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8009a72:	095b      	lsrs	r3, r3, #5
 8009a74:	2164      	movs	r1, #100	; 0x64
 8009a76:	fb01 f303 	mul.w	r3, r1, r3
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	011b      	lsls	r3, r3, #4
 8009a7e:	3332      	adds	r3, #50	; 0x32
 8009a80:	4a09      	ldr	r2, [pc, #36]	; (8009aa8 <UART_SetConfig+0x6f4>)
 8009a82:	fba2 2303 	umull	r2, r3, r2, r3
 8009a86:	095b      	lsrs	r3, r3, #5
 8009a88:	f003 020f 	and.w	r2, r3, #15
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4442      	add	r2, r8
 8009a92:	609a      	str	r2, [r3, #8]
}
 8009a94:	e7ff      	b.n	8009a96 <UART_SetConfig+0x6e2>
 8009a96:	bf00      	nop
 8009a98:	3714      	adds	r7, #20
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa0:	40011000 	.word	0x40011000
 8009aa4:	40011400 	.word	0x40011400
 8009aa8:	51eb851f 	.word	0x51eb851f

08009aac <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	461a      	mov	r2, r3
 8009aba:	4603      	mov	r3, r0
 8009abc:	70fb      	strb	r3, [r7, #3]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	70bb      	strb	r3, [r7, #2]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009acc:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	bf0c      	ite	eq
 8009ad4:	2301      	moveq	r3, #1
 8009ad6:	2300      	movne	r3, #0
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8009adc:	78fa      	ldrb	r2, [r7, #3]
 8009ade:	787b      	ldrb	r3, [r7, #1]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	b2d8      	uxtb	r0, r3
 8009ae4:	78bb      	ldrb	r3, [r7, #2]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	78ba      	ldrb	r2, [r7, #2]
 8009aec:	78f9      	ldrb	r1, [r7, #3]
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	4603      	mov	r3, r0
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 f8b8 	bl	800ac68 <u8g2_IsIntersection>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d040      	beq.n	8009b80 <u8g2_DrawHXBMP+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8009afe:	2301      	movs	r3, #1
 8009b00:	73fb      	strb	r3, [r7, #15]
  while(len > 0)
 8009b02:	e035      	b.n	8009b70 <u8g2_DrawHXBMP+0xc4>
  {
    if( u8x8_pgm_read(b) & mask ) {
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	781a      	ldrb	r2, [r3, #0]
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00c      	beq.n	8009b2c <u8g2_DrawHXBMP+0x80>
      u8g2->draw_color = color;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	7bba      	ldrb	r2, [r7, #14]
 8009b16:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8009b1a:	78ba      	ldrb	r2, [r7, #2]
 8009b1c:	78f9      	ldrb	r1, [r7, #3]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	2301      	movs	r3, #1
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 ffd2 	bl	800aace <u8g2_DrawHVLine>
 8009b2a:	e010      	b.n	8009b4e <u8g2_DrawHXBMP+0xa2>
    } else if( u8g2->bitmap_transparency == 0 ) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10b      	bne.n	8009b4e <u8g2_DrawHXBMP+0xa2>
      u8g2->draw_color = ncolor;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7b7a      	ldrb	r2, [r7, #13]
 8009b3a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8009b3e:	78ba      	ldrb	r2, [r7, #2]
 8009b40:	78f9      	ldrb	r1, [r7, #3]
 8009b42:	2300      	movs	r3, #0
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2301      	movs	r3, #1
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 ffc0 	bl	800aace <u8g2_DrawHVLine>
    }
   
    x++;
 8009b4e:	78fb      	ldrb	r3, [r7, #3]
 8009b50:	3301      	adds	r3, #1
 8009b52:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d104      	bne.n	8009b6a <u8g2_DrawHXBMP+0xbe>
    {
      mask = 1;
 8009b60:	2301      	movs	r3, #1
 8009b62:	73fb      	strb	r3, [r7, #15]
      b++;
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	3301      	adds	r3, #1
 8009b68:	61bb      	str	r3, [r7, #24]
    }
    len--;
 8009b6a:	787b      	ldrb	r3, [r7, #1]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	707b      	strb	r3, [r7, #1]
  while(len > 0)
 8009b70:	787b      	ldrb	r3, [r7, #1]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1c6      	bne.n	8009b04 <u8g2_DrawHXBMP+0x58>
  }
  u8g2->draw_color = color;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	7bba      	ldrb	r2, [r7, #14]
 8009b7a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8009b7e:	e000      	b.n	8009b82 <u8g2_DrawHXBMP+0xd6>
    return;
 8009b80:	bf00      	nop
}
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af02      	add	r7, sp, #8
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	4608      	mov	r0, r1
 8009b92:	4611      	mov	r1, r2
 8009b94:	461a      	mov	r2, r3
 8009b96:	4603      	mov	r3, r0
 8009b98:	70fb      	strb	r3, [r7, #3]
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	70bb      	strb	r3, [r7, #2]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 8009ba2:	787b      	ldrb	r3, [r7, #1]
 8009ba4:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	3307      	adds	r3, #7
 8009baa:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	08db      	lsrs	r3, r3, #3
 8009bb0:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8009bb2:	78fa      	ldrb	r2, [r7, #3]
 8009bb4:	787b      	ldrb	r3, [r7, #1]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	b2d8      	uxtb	r0, r3
 8009bba:	78ba      	ldrb	r2, [r7, #2]
 8009bbc:	7e3b      	ldrb	r3, [r7, #24]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	78ba      	ldrb	r2, [r7, #2]
 8009bc4:	78f9      	ldrb	r1, [r7, #3]
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	4603      	mov	r3, r0
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 f84c 	bl	800ac68 <u8g2_IsIntersection>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d017      	beq.n	8009c06 <u8g2_DrawXBMP+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8009bd6:	e012      	b.n	8009bfe <u8g2_DrawXBMP+0x76>
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 8009bd8:	7878      	ldrb	r0, [r7, #1]
 8009bda:	78ba      	ldrb	r2, [r7, #2]
 8009bdc:	78f9      	ldrb	r1, [r7, #3]
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	4603      	mov	r3, r0
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff ff61 	bl	8009aac <u8g2_DrawHXBMP>
    bitmap += blen;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	69fa      	ldr	r2, [r7, #28]
 8009bee:	4413      	add	r3, r2
 8009bf0:	61fb      	str	r3, [r7, #28]
    y++;
 8009bf2:	78bb      	ldrb	r3, [r7, #2]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	70bb      	strb	r3, [r7, #2]
    h--;
 8009bf8:	7e3b      	ldrb	r3, [r7, #24]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 8009bfe:	7e3b      	ldrb	r3, [r7, #24]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1e9      	bne.n	8009bd8 <u8g2_DrawXBMP+0x50>
 8009c04:	e000      	b.n	8009c08 <u8g2_DrawXBMP+0x80>
    return;
 8009c06:	bf00      	nop
  }
}
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af02      	add	r7, sp, #8
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	4608      	mov	r0, r1
 8009c18:	4611      	mov	r1, r2
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	70fb      	strb	r3, [r7, #3]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70bb      	strb	r3, [r7, #2]
 8009c24:	4613      	mov	r3, r2
 8009c26:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8009c28:	78fa      	ldrb	r2, [r7, #3]
 8009c2a:	787b      	ldrb	r3, [r7, #1]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	b2d8      	uxtb	r0, r3
 8009c30:	78ba      	ldrb	r2, [r7, #2]
 8009c32:	7c3b      	ldrb	r3, [r7, #16]
 8009c34:	4413      	add	r3, r2
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	78ba      	ldrb	r2, [r7, #2]
 8009c3a:	78f9      	ldrb	r1, [r7, #3]
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	4603      	mov	r3, r0
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 f811 	bl	800ac68 <u8g2_IsIntersection>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d013      	beq.n	8009c74 <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8009c4c:	e00e      	b.n	8009c6c <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8009c4e:	7878      	ldrb	r0, [r7, #1]
 8009c50:	78ba      	ldrb	r2, [r7, #2]
 8009c52:	78f9      	ldrb	r1, [r7, #3]
 8009c54:	2300      	movs	r3, #0
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	4603      	mov	r3, r0
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 ff37 	bl	800aace <u8g2_DrawHVLine>
    y++;    
 8009c60:	78bb      	ldrb	r3, [r7, #2]
 8009c62:	3301      	adds	r3, #1
 8009c64:	70bb      	strb	r3, [r7, #2]
    h--;
 8009c66:	7c3b      	ldrb	r3, [r7, #16]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8009c6c:	7c3b      	ldrb	r3, [r7, #16]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1ed      	bne.n	8009c4e <u8g2_DrawBox+0x40>
 8009c72:	e000      	b.n	8009c76 <u8g2_DrawBox+0x68>
    return;
 8009c74:	bf00      	nop
  }
}
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <u8g2_ClearBuffer>:
#include <string.h>
#include "../u8g2/u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	7c1b      	ldrb	r3, [r3, #16]
 8009c8a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c92:	461a      	mov	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	fb02 f303 	mul.w	r3, r2, r3
 8009c9a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	2100      	movs	r1, #0
 8009caa:	4618      	mov	r0, r3
 8009cac:	f003 ff0f 	bl	800dace <memset>
}
 8009cb0:	bf00      	nop
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	7c1b      	ldrb	r3, [r3, #16]
 8009cce:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	89ba      	ldrh	r2, [r7, #12]
 8009ce0:	fb12 f303 	smulbb	r3, r2, r3
 8009ce4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8009ce6:	89bb      	ldrh	r3, [r7, #12]
 8009ce8:	00db      	lsls	r3, r3, #3
 8009cea:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8009cec:	89bb      	ldrh	r3, [r7, #12]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8009cf4:	7bf9      	ldrb	r1, [r7, #15]
 8009cf6:	78ba      	ldrb	r2, [r7, #2]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	2100      	movs	r1, #0
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 fd26 	bl	800b752 <u8x8_DrawTile>
}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d20:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d28:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	7c5b      	ldrb	r3, [r3, #17]
 8009d30:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8009d32:	7bba      	ldrb	r2, [r7, #14]
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff ffbd 	bl	8009cb8 <u8g2_send_tile_row>
    src_row++;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	3301      	adds	r3, #1
 8009d42:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	3301      	adds	r3, #1
 8009d48:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8009d4a:	7bfa      	ldrb	r2, [r7, #15]
 8009d4c:	7b7b      	ldrb	r3, [r7, #13]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d203      	bcs.n	8009d5a <u8g2_send_buffer+0x4c>
 8009d52:	7bba      	ldrb	r2, [r7, #14]
 8009d54:	7b3b      	ldrb	r3, [r7, #12]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d3eb      	bcc.n	8009d32 <u8g2_send_buffer+0x24>
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff ffcf 	bl	8009d0e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f001 fd3f 	bl	800b7f4 <u8x8_RefreshDisplay>
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	460b      	mov	r3, r1
 8009d88:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	78fa      	ldrb	r2, [r7, #3]
 8009d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	4798      	blx	r3
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff ff5b 	bl	8009c7c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff ffd8 	bl	8009d7e <u8g2_SetBufferCurrTileRow>
}
 8009dce:	bf00      	nop
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff ff95 	bl	8009d0e <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dea:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	4413      	add	r3, r2
 8009df6:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	7c5b      	ldrb	r3, [r3, #17]
 8009dfe:	7bfa      	ldrb	r2, [r7, #15]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d304      	bcc.n	8009e0e <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 fcf5 	bl	800b7f4 <u8x8_RefreshDisplay>
    return 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	e00d      	b.n	8009e2a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7ff ff2f 	bl	8009c7c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff ffab 	bl	8009d7e <u8g2_SetBufferCurrTileRow>
  return 1;
 8009e28:	2301      	movs	r3, #1
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <u8g2_ClearDisplay>:
#include "../u8g2/u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff ffb7 	bl	8009dae <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff ffc8 	bl	8009dd6 <u8g2_NextPage>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1f9      	bne.n	8009e40 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff ff95 	bl	8009d7e <u8g2_SetBufferCurrTileRow>
}
 8009e54:	bf00      	nop
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <u8g2_m_32_8_f>:
  static uint8_t buf[512];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_32_8_f(uint8_t *page_cnt)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  static uint8_t buf[2048];
  *page_cnt = 8;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2208      	movs	r2, #8
 8009e68:	701a      	strb	r2, [r3, #0]
  return buf;
 8009e6a:	4b03      	ldr	r3, [pc, #12]	; (8009e78 <u8g2_m_32_8_f+0x1c>)
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	2000129c 	.word	0x2000129c

08009e7c <u8g2_Setup_ssd1322_nhd_256x64_f>:
  buf = u8g2_m_32_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1322 f */
void u8g2_Setup_ssd1322_nhd_256x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af02      	add	r7, sp, #8
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1322_nhd_256x64, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a0b      	ldr	r2, [pc, #44]	; (8009ec0 <u8g2_Setup_ssd1322_nhd_256x64_f+0x44>)
 8009e92:	490c      	ldr	r1, [pc, #48]	; (8009ec4 <u8g2_Setup_ssd1322_nhd_256x64_f+0x48>)
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f001 fd0f 	bl	800b8b8 <u8x8_Setup>
  buf = u8g2_m_32_8_f(&tile_buf_height);
 8009e9a:	f107 0313 	add.w	r3, r7, #19
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7ff ffdc 	bl	8009e5c <u8g2_m_32_8_f>
 8009ea4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8009ea6:	7cfa      	ldrb	r2, [r7, #19]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <u8g2_Setup_ssd1322_nhd_256x64_f+0x4c>)
 8009eae:	6979      	ldr	r1, [r7, #20]
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 ffc2 	bl	800ae3a <u8g2_SetupBuffer>
}
 8009eb6:	bf00      	nop
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800b3bd 	.word	0x0800b3bd
 8009ec4:	0800b619 	.word	0x0800b619
 8009ec8:	0800acbf 	.word	0x0800acbf

08009ecc <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8009ed8:	78fb      	ldrb	r3, [r7, #3]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	4413      	add	r3, r2
 8009ede:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8009efc:	78fb      	ldrb	r3, [r7, #3]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	4413      	add	r3, r2
 8009f02:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	81fb      	strh	r3, [r7, #14]
    font++;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8009f10:	89fb      	ldrh	r3, [r7, #14]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	89fb      	ldrh	r3, [r7, #14]
 8009f1e:	4413      	add	r3, r2
 8009f20:	81fb      	strh	r3, [r7, #14]
    return pos;
 8009f22:	89fb      	ldrh	r3, [r7, #14]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	6838      	ldr	r0, [r7, #0]
 8009f3e:	f7ff ffc5 	bl	8009ecc <u8g2_font_get_byte>
 8009f42:	4603      	mov	r3, r0
 8009f44:	461a      	mov	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	6838      	ldr	r0, [r7, #0]
 8009f4e:	f7ff ffbd 	bl	8009ecc <u8g2_font_get_byte>
 8009f52:	4603      	mov	r3, r0
 8009f54:	461a      	mov	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8009f5a:	2102      	movs	r1, #2
 8009f5c:	6838      	ldr	r0, [r7, #0]
 8009f5e:	f7ff ffb5 	bl	8009ecc <u8g2_font_get_byte>
 8009f62:	4603      	mov	r3, r0
 8009f64:	461a      	mov	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8009f6a:	2103      	movs	r1, #3
 8009f6c:	6838      	ldr	r0, [r7, #0]
 8009f6e:	f7ff ffad 	bl	8009ecc <u8g2_font_get_byte>
 8009f72:	4603      	mov	r3, r0
 8009f74:	461a      	mov	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8009f7a:	2104      	movs	r1, #4
 8009f7c:	6838      	ldr	r0, [r7, #0]
 8009f7e:	f7ff ffa5 	bl	8009ecc <u8g2_font_get_byte>
 8009f82:	4603      	mov	r3, r0
 8009f84:	461a      	mov	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8009f8a:	2105      	movs	r1, #5
 8009f8c:	6838      	ldr	r0, [r7, #0]
 8009f8e:	f7ff ff9d 	bl	8009ecc <u8g2_font_get_byte>
 8009f92:	4603      	mov	r3, r0
 8009f94:	461a      	mov	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8009f9a:	2106      	movs	r1, #6
 8009f9c:	6838      	ldr	r0, [r7, #0]
 8009f9e:	f7ff ff95 	bl	8009ecc <u8g2_font_get_byte>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8009faa:	2107      	movs	r1, #7
 8009fac:	6838      	ldr	r0, [r7, #0]
 8009fae:	f7ff ff8d 	bl	8009ecc <u8g2_font_get_byte>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8009fba:	2108      	movs	r1, #8
 8009fbc:	6838      	ldr	r0, [r7, #0]
 8009fbe:	f7ff ff85 	bl	8009ecc <u8g2_font_get_byte>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8009fca:	2109      	movs	r1, #9
 8009fcc:	6838      	ldr	r0, [r7, #0]
 8009fce:	f7ff ff7d 	bl	8009ecc <u8g2_font_get_byte>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	b25a      	sxtb	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8009fda:	210a      	movs	r1, #10
 8009fdc:	6838      	ldr	r0, [r7, #0]
 8009fde:	f7ff ff75 	bl	8009ecc <u8g2_font_get_byte>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	b25a      	sxtb	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8009fea:	210b      	movs	r1, #11
 8009fec:	6838      	ldr	r0, [r7, #0]
 8009fee:	f7ff ff6d 	bl	8009ecc <u8g2_font_get_byte>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	b25a      	sxtb	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8009ffa:	210c      	movs	r1, #12
 8009ffc:	6838      	ldr	r0, [r7, #0]
 8009ffe:	f7ff ff65 	bl	8009ecc <u8g2_font_get_byte>
 800a002:	4603      	mov	r3, r0
 800a004:	b25a      	sxtb	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800a00a:	210d      	movs	r1, #13
 800a00c:	6838      	ldr	r0, [r7, #0]
 800a00e:	f7ff ff5d 	bl	8009ecc <u8g2_font_get_byte>
 800a012:	4603      	mov	r3, r0
 800a014:	b25a      	sxtb	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800a01a:	210e      	movs	r1, #14
 800a01c:	6838      	ldr	r0, [r7, #0]
 800a01e:	f7ff ff55 	bl	8009ecc <u8g2_font_get_byte>
 800a022:	4603      	mov	r3, r0
 800a024:	b25a      	sxtb	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800a02a:	210f      	movs	r1, #15
 800a02c:	6838      	ldr	r0, [r7, #0]
 800a02e:	f7ff ff4d 	bl	8009ecc <u8g2_font_get_byte>
 800a032:	4603      	mov	r3, r0
 800a034:	b25a      	sxtb	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800a03a:	2110      	movs	r1, #16
 800a03c:	6838      	ldr	r0, [r7, #0]
 800a03e:	f7ff ff45 	bl	8009ecc <u8g2_font_get_byte>
 800a042:	4603      	mov	r3, r0
 800a044:	b25a      	sxtb	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800a04a:	2111      	movs	r1, #17
 800a04c:	6838      	ldr	r0, [r7, #0]
 800a04e:	f7ff ff4f 	bl	8009ef0 <u8g2_font_get_word>
 800a052:	4603      	mov	r3, r0
 800a054:	461a      	mov	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800a05a:	2113      	movs	r1, #19
 800a05c:	6838      	ldr	r0, [r7, #0]
 800a05e:	f7ff ff47 	bl	8009ef0 <u8g2_font_get_word>
 800a062:	4603      	mov	r3, r0
 800a064:	461a      	mov	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800a06a:	2115      	movs	r1, #21
 800a06c:	6838      	ldr	r0, [r7, #0]
 800a06e:	f7ff ff3f 	bl	8009ef0 <u8g2_font_get_word>
 800a072:	4603      	mov	r3, r0
 800a074:	461a      	mov	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	82da      	strh	r2, [r3, #22]
#endif
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800a082:	b480      	push	{r7}
 800a084:	b085      	sub	sp, #20
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	460b      	mov	r3, r1
 800a08c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	7a9b      	ldrb	r3, [r3, #10]
 800a092:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800a09c:	7bfa      	ldrb	r2, [r7, #15]
 800a09e:	7b7b      	ldrb	r3, [r7, #13]
 800a0a0:	fa42 f303 	asr.w	r3, r2, r3
 800a0a4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800a0a6:	7b7b      	ldrb	r3, [r7, #13]
 800a0a8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800a0aa:	7bba      	ldrb	r2, [r7, #14]
 800a0ac:	78fb      	ldrb	r3, [r7, #3]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	2b07      	cmp	r3, #7
 800a0b6:	d91a      	bls.n	800a0ee <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800a0b8:	2308      	movs	r3, #8
 800a0ba:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800a0bc:	7b3a      	ldrb	r2, [r7, #12]
 800a0be:	7b7b      	ldrb	r3, [r7, #13]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	1c5a      	adds	r2, r3, #1
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	7b3b      	ldrb	r3, [r7, #12]
 800a0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0dc:	b25a      	sxtb	r2, r3
 800a0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	b25b      	sxtb	r3, r3
 800a0e6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	3b08      	subs	r3, #8
 800a0ec:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800a0ee:	78fb      	ldrb	r3, [r7, #3]
 800a0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	43db      	mvns	r3, r3
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
 800a100:	4013      	ands	r3, r2
 800a102:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	7bba      	ldrb	r2, [r7, #14]
 800a108:	729a      	strb	r2, [r3, #10]
  return val;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7ff ffaa 	bl	800a082 <u8g2_font_decode_get_unsigned_bits>
 800a12e:	4603      	mov	r3, r0
 800a130:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800a132:	2301      	movs	r3, #1
 800a134:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800a136:	78fb      	ldrb	r3, [r7, #3]
 800a138:	3b01      	subs	r3, #1
 800a13a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800a13c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	fa02 f303 	lsl.w	r3, r2, r3
 800a146:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800a148:	7bfa      	ldrb	r2, [r7, #15]
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	73fb      	strb	r3, [r7, #15]
  return v;
 800a152:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800a15e:	b490      	push	{r4, r7}
 800a160:	b082      	sub	sp, #8
 800a162:	af00      	add	r7, sp, #0
 800a164:	4604      	mov	r4, r0
 800a166:	4608      	mov	r0, r1
 800a168:	4611      	mov	r1, r2
 800a16a:	461a      	mov	r2, r3
 800a16c:	4623      	mov	r3, r4
 800a16e:	71fb      	strb	r3, [r7, #7]
 800a170:	4603      	mov	r3, r0
 800a172:	71bb      	strb	r3, [r7, #6]
 800a174:	460b      	mov	r3, r1
 800a176:	717b      	strb	r3, [r7, #5]
 800a178:	4613      	mov	r3, r2
 800a17a:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800a17c:	793b      	ldrb	r3, [r7, #4]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d008      	beq.n	800a194 <u8g2_add_vector_y+0x36>
 800a182:	2b02      	cmp	r3, #2
 800a184:	d00b      	beq.n	800a19e <u8g2_add_vector_y+0x40>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10e      	bne.n	800a1a8 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 800a18a:	797a      	ldrb	r2, [r7, #5]
 800a18c:	79fb      	ldrb	r3, [r7, #7]
 800a18e:	4413      	add	r3, r2
 800a190:	71fb      	strb	r3, [r7, #7]
      break;
 800a192:	e00e      	b.n	800a1b2 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 800a194:	79ba      	ldrb	r2, [r7, #6]
 800a196:	79fb      	ldrb	r3, [r7, #7]
 800a198:	4413      	add	r3, r2
 800a19a:	71fb      	strb	r3, [r7, #7]
      break;
 800a19c:	e009      	b.n	800a1b2 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 800a19e:	797b      	ldrb	r3, [r7, #5]
 800a1a0:	79fa      	ldrb	r2, [r7, #7]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	71fb      	strb	r3, [r7, #7]
      break;
 800a1a6:	e004      	b.n	800a1b2 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 800a1a8:	79bb      	ldrb	r3, [r7, #6]
 800a1aa:	79fa      	ldrb	r2, [r7, #7]
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	71fb      	strb	r3, [r7, #7]
      break;      
 800a1b0:	bf00      	nop
  }
  return dy;
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bc90      	pop	{r4, r7}
 800a1bc:	4770      	bx	lr

0800a1be <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800a1be:	b490      	push	{r4, r7}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	4608      	mov	r0, r1
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	4623      	mov	r3, r4
 800a1ce:	71fb      	strb	r3, [r7, #7]
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	71bb      	strb	r3, [r7, #6]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	717b      	strb	r3, [r7, #5]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800a1dc:	793b      	ldrb	r3, [r7, #4]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d008      	beq.n	800a1f4 <u8g2_add_vector_x+0x36>
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d00b      	beq.n	800a1fe <u8g2_add_vector_x+0x40>
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10e      	bne.n	800a208 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 800a1ea:	79ba      	ldrb	r2, [r7, #6]
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	71fb      	strb	r3, [r7, #7]
      break;
 800a1f2:	e00e      	b.n	800a212 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 800a1f4:	797b      	ldrb	r3, [r7, #5]
 800a1f6:	79fa      	ldrb	r2, [r7, #7]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	71fb      	strb	r3, [r7, #7]
      break;
 800a1fc:	e009      	b.n	800a212 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 800a1fe:	79bb      	ldrb	r3, [r7, #6]
 800a200:	79fa      	ldrb	r2, [r7, #7]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	71fb      	strb	r3, [r7, #7]
      break;
 800a206:	e004      	b.n	800a212 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 800a208:	797a      	ldrb	r2, [r7, #5]
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	4413      	add	r3, r2
 800a20e:	71fb      	strb	r3, [r7, #7]
      break;      
 800a210:	bf00      	nop
  }
  return dx;
 800a212:	79fb      	ldrb	r3, [r7, #7]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bc90      	pop	{r4, r7}
 800a21c:	4770      	bx	lr

0800a21e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b088      	sub	sp, #32
 800a222:	af02      	add	r7, sp, #8
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	460b      	mov	r3, r1
 800a228:	70fb      	strb	r3, [r7, #3]
 800a22a:	4613      	mov	r3, r2
 800a22c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3358      	adds	r3, #88	; 0x58
 800a232:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800a23e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800a246:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a24e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800a250:	7bfa      	ldrb	r2, [r7, #15]
 800a252:	7d7b      	ldrb	r3, [r7, #21]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800a25c:	7dfa      	ldrb	r2, [r7, #23]
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	429a      	cmp	r2, r3
 800a262:	d201      	bcs.n	800a268 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800a264:	7dfb      	ldrb	r3, [r7, #23]
 800a266:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	791b      	ldrb	r3, [r3, #4]
 800a26c:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	795b      	ldrb	r3, [r3, #5]
 800a272:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800a274:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800a278:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	7b9b      	ldrb	r3, [r3, #14]
 800a280:	7bb8      	ldrb	r0, [r7, #14]
 800a282:	f7ff ff9c 	bl	800a1be <u8g2_add_vector_x>
 800a286:	4603      	mov	r3, r0
 800a288:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800a28a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800a28e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	7b9b      	ldrb	r3, [r3, #14]
 800a296:	7b78      	ldrb	r0, [r7, #13]
 800a298:	f7ff ff61 	bl	800a15e <u8g2_add_vector_y>
 800a29c:	4603      	mov	r3, r0
 800a29e:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800a2a0:	78bb      	ldrb	r3, [r7, #2]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00f      	beq.n	800a2c6 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	7b1a      	ldrb	r2, [r3, #12]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	7b9b      	ldrb	r3, [r3, #14]
 800a2b4:	7db8      	ldrb	r0, [r7, #22]
 800a2b6:	7b7a      	ldrb	r2, [r7, #13]
 800a2b8:	7bb9      	ldrb	r1, [r7, #14]
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	4603      	mov	r3, r0
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fc05 	bl	800aace <u8g2_DrawHVLine>
 800a2c4:	e012      	b.n	800a2ec <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	7adb      	ldrb	r3, [r3, #11]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10e      	bne.n	800a2ec <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	7b5a      	ldrb	r2, [r3, #13]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	7b9b      	ldrb	r3, [r3, #14]
 800a2dc:	7db8      	ldrb	r0, [r7, #22]
 800a2de:	7b7a      	ldrb	r2, [r7, #13]
 800a2e0:	7bb9      	ldrb	r1, [r7, #14]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fbf1 	bl	800aace <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800a2ec:	7dfa      	ldrb	r2, [r7, #23]
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d309      	bcc.n	800a308 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 800a2f4:	7dfa      	ldrb	r2, [r7, #23]
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	757b      	strb	r3, [r7, #21]
    ly++;
 800a300:	7d3b      	ldrb	r3, [r7, #20]
 800a302:	3301      	adds	r3, #1
 800a304:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800a306:	e79f      	b.n	800a248 <u8g2_font_decode_len+0x2a>
      break;
 800a308:	bf00      	nop
  }
  lx += cnt;
 800a30a:	7d7a      	ldrb	r2, [r7, #21]
 800a30c:	7dfb      	ldrb	r3, [r7, #23]
 800a30e:	4413      	add	r3, r2
 800a310:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800a312:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 800a31a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	71da      	strb	r2, [r3, #7]
  
}
 800a322:	bf00      	nop
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	3358      	adds	r3, #88	; 0x58
 800a338:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a34c:	4619      	mov	r1, r3
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff fe97 	bl	800a082 <u8g2_font_decode_get_unsigned_bits>
 800a354:	4603      	mov	r3, r0
 800a356:	b25a      	sxtb	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800a362:	4619      	mov	r1, r3
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff fe8c 	bl	800a082 <u8g2_font_decode_get_unsigned_bits>
 800a36a:	4603      	mov	r3, r0
 800a36c:	b25a      	sxtb	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	7b1b      	ldrb	r3, [r3, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	bf0c      	ite	eq
 800a384:	2301      	moveq	r3, #1
 800a386:	2300      	movne	r3, #0
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	461a      	mov	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	735a      	strb	r2, [r3, #13]
}
 800a390:	bf00      	nop
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af02      	add	r7, sp, #8
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3358      	adds	r3, #88	; 0x58
 800a3a6:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff ffbd 	bl	800a32a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a3b6:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6938      	ldr	r0, [r7, #16]
 800a3c2:	f7ff fea9 	bl	800a118 <u8g2_font_decode_get_signed_bits>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6938      	ldr	r0, [r7, #16]
 800a3d4:	f7ff fea0 	bl	800a118 <u8g2_font_decode_get_signed_bits>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6938      	ldr	r0, [r7, #16]
 800a3e6:	f7ff fe97 	bl	800a118 <u8g2_font_decode_get_signed_bits>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f340 80cf 	ble.w	800a598 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	7918      	ldrb	r0, [r3, #4]
 800a3fe:	7bfa      	ldrb	r2, [r7, #15]
 800a400:	7b7b      	ldrb	r3, [r7, #13]
 800a402:	4413      	add	r3, r2
 800a404:	b2db      	uxtb	r3, r3
 800a406:	425b      	negs	r3, r3
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	b25a      	sxtb	r2, r3
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	7b9b      	ldrb	r3, [r3, #14]
 800a410:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800a414:	f7ff fed3 	bl	800a1be <u8g2_add_vector_x>
 800a418:	4603      	mov	r3, r0
 800a41a:	461a      	mov	r2, r3
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	7958      	ldrb	r0, [r3, #5]
 800a424:	7bfa      	ldrb	r2, [r7, #15]
 800a426:	7b7b      	ldrb	r3, [r7, #13]
 800a428:	4413      	add	r3, r2
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	425b      	negs	r3, r3
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	b25a      	sxtb	r2, r3
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	7b9b      	ldrb	r3, [r3, #14]
 800a436:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800a43a:	f7ff fe90 	bl	800a15e <u8g2_add_vector_y>
 800a43e:	4603      	mov	r3, r0
 800a440:	461a      	mov	r2, r3
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	791b      	ldrb	r3, [r3, #4]
 800a44a:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	795b      	ldrb	r3, [r3, #5]
 800a450:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 800a452:	7dfb      	ldrb	r3, [r7, #23]
 800a454:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 800a456:	7d7b      	ldrb	r3, [r7, #21]
 800a458:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	7b9b      	ldrb	r3, [r3, #14]
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d852      	bhi.n	800a508 <u8g2_font_decode_glyph+0x170>
 800a462:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <u8g2_font_decode_glyph+0xd0>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a479 	.word	0x0800a479
 800a46c:	0800a491 	.word	0x0800a491
 800a470:	0800a4b5 	.word	0x0800a4b5
 800a474:	0800a4e5 	.word	0x0800a4e5
      {
	case 0:
	    x1 += decode->glyph_width;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	7dbb      	ldrb	r3, [r7, #22]
 800a482:	4413      	add	r3, r2
 800a484:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 800a486:	7bfa      	ldrb	r2, [r7, #15]
 800a488:	7d3b      	ldrb	r3, [r7, #20]
 800a48a:	4413      	add	r3, r2
 800a48c:	753b      	strb	r3, [r7, #20]
	    break;
 800a48e:	e03b      	b.n	800a508 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 800a490:	7bfb      	ldrb	r3, [r7, #15]
 800a492:	7dfa      	ldrb	r2, [r7, #23]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800a498:	7dfb      	ldrb	r3, [r7, #23]
 800a49a:	3301      	adds	r3, #1
 800a49c:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800a49e:	7dbb      	ldrb	r3, [r7, #22]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	7d3b      	ldrb	r3, [r7, #20]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	753b      	strb	r3, [r7, #20]
	    break;
 800a4b2:	e029      	b.n	800a508 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	7dfa      	ldrb	r2, [r7, #23]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800a4c8:	7dbb      	ldrb	r3, [r7, #22]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 800a4ce:	7bfb      	ldrb	r3, [r7, #15]
 800a4d0:	7d7a      	ldrb	r2, [r7, #21]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800a4d6:	7d7b      	ldrb	r3, [r7, #21]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	757b      	strb	r3, [r7, #21]
	    y1++;
 800a4dc:	7d3b      	ldrb	r3, [r7, #20]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	753b      	strb	r3, [r7, #20]
	    break;	  
 800a4e2:	e011      	b.n	800a508 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 800a4e4:	7bfa      	ldrb	r2, [r7, #15]
 800a4e6:	7dbb      	ldrb	r3, [r7, #22]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	7d7a      	ldrb	r2, [r7, #21]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800a4fa:	7d7b      	ldrb	r3, [r7, #21]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	757b      	strb	r3, [r7, #21]
	    y1++;
 800a500:	7d3b      	ldrb	r3, [r7, #20]
 800a502:	3301      	adds	r3, #1
 800a504:	753b      	strb	r3, [r7, #20]
	    break;	  
 800a506:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800a508:	7db8      	ldrb	r0, [r7, #22]
 800a50a:	7d7a      	ldrb	r2, [r7, #21]
 800a50c:	7df9      	ldrb	r1, [r7, #23]
 800a50e:	7d3b      	ldrb	r3, [r7, #20]
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	4603      	mov	r3, r0
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fba7 	bl	800ac68 <u8g2_IsIntersection>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d102      	bne.n	800a526 <u8g2_font_decode_glyph+0x18e>
	return d;
 800a520:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a524:	e03a      	b.n	800a59c <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2200      	movs	r2, #0
 800a52a:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	2200      	movs	r2, #0
 800a530:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800a538:	4619      	mov	r1, r3
 800a53a:	6938      	ldr	r0, [r7, #16]
 800a53c:	f7ff fda1 	bl	800a082 <u8g2_font_decode_get_unsigned_bits>
 800a540:	4603      	mov	r3, r0
 800a542:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800a54a:	4619      	mov	r1, r3
 800a54c:	6938      	ldr	r0, [r7, #16]
 800a54e:	f7ff fd98 	bl	800a082 <u8g2_font_decode_get_unsigned_bits>
 800a552:	4603      	mov	r3, r0
 800a554:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800a556:	7afb      	ldrb	r3, [r7, #11]
 800a558:	2200      	movs	r2, #0
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7ff fe5e 	bl	800a21e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800a562:	7abb      	ldrb	r3, [r7, #10]
 800a564:	2201      	movs	r2, #1
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff fe58 	bl	800a21e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800a56e:	2101      	movs	r1, #1
 800a570:	6938      	ldr	r0, [r7, #16]
 800a572:	f7ff fd86 	bl	800a082 <u8g2_font_decode_get_unsigned_bits>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1ec      	bne.n	800a556 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800a582:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800a586:	429a      	cmp	r2, r3
 800a588:	dd00      	ble.n	800a58c <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800a58a:	e7d2      	b.n	800a532 <u8g2_font_decode_glyph+0x19a>
	break;
 800a58c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	7b1a      	ldrb	r2, [r3, #12]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 800a598:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	3317      	adds	r3, #23
 800a5ba:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 256 )
 800a5bc:	887b      	ldrh	r3, [r7, #2]
 800a5be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5c2:	d82a      	bhi.n	800a61a <u8g2_font_get_glyph_data+0x76>
  {
    if ( encoding >= 'a' )
 800a5c4:	887b      	ldrh	r3, [r7, #2]
 800a5c6:	2b60      	cmp	r3, #96	; 0x60
 800a5c8:	d907      	bls.n	800a5da <u8g2_font_get_glyph_data+0x36>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	617b      	str	r3, [r7, #20]
 800a5d8:	e009      	b.n	800a5ee <u8g2_font_get_glyph_data+0x4a>
    }
    else if ( encoding >= 'A' )
 800a5da:	887b      	ldrh	r3, [r7, #2]
 800a5dc:	2b40      	cmp	r3, #64	; 0x40
 800a5de:	d906      	bls.n	800a5ee <u8g2_font_get_glyph_data+0x4a>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d04e      	beq.n	800a696 <u8g2_font_get_glyph_data+0xf2>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	887a      	ldrh	r2, [r7, #2]
 800a600:	429a      	cmp	r2, r3
 800a602:	d102      	bne.n	800a60a <u8g2_font_get_glyph_data+0x66>
      {
	return font+2;	/* skip encoding and glyph size */
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	3302      	adds	r3, #2
 800a608:	e049      	b.n	800a69e <u8g2_font_get_glyph_data+0xfa>
      }
      font += u8x8_pgm_read( font + 1 );
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	3301      	adds	r3, #1
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	461a      	mov	r2, r3
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	4413      	add	r3, r2
 800a616:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800a618:	e7e9      	b.n	800a5ee <u8g2_font_get_glyph_data+0x4a>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800a620:	461a      	mov	r2, r3
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	4413      	add	r3, r2
 800a626:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800a62c:	2100      	movs	r1, #0
 800a62e:	6938      	ldr	r0, [r7, #16]
 800a630:	f7ff fc5e 	bl	8009ef0 <u8g2_font_get_word>
 800a634:	4603      	mov	r3, r0
 800a636:	461a      	mov	r2, r3
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	4413      	add	r3, r2
 800a63c:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800a63e:	2102      	movs	r1, #2
 800a640:	6938      	ldr	r0, [r7, #16]
 800a642:	f7ff fc55 	bl	8009ef0 <u8g2_font_get_word>
 800a646:	4603      	mov	r3, r0
 800a648:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	3304      	adds	r3, #4
 800a64e:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800a650:	89fa      	ldrh	r2, [r7, #14]
 800a652:	887b      	ldrh	r3, [r7, #2]
 800a654:	429a      	cmp	r2, r3
 800a656:	d3e9      	bcc.n	800a62c <u8g2_font_get_glyph_data+0x88>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800a65e:	89fb      	ldrh	r3, [r7, #14]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	3301      	adds	r3, #1
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	89fb      	ldrh	r3, [r7, #14]
 800a66e:	4313      	orrs	r3, r2
 800a670:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800a672:	89fb      	ldrh	r3, [r7, #14]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d010      	beq.n	800a69a <u8g2_font_get_glyph_data+0xf6>
	break;
  
      if ( e == encoding )
 800a678:	89fa      	ldrh	r2, [r7, #14]
 800a67a:	887b      	ldrh	r3, [r7, #2]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d102      	bne.n	800a686 <u8g2_font_get_glyph_data+0xe2>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	3303      	adds	r3, #3
 800a684:	e00b      	b.n	800a69e <u8g2_font_get_glyph_data+0xfa>
      }
      font += u8x8_pgm_read( font + 2 );
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	3302      	adds	r3, #2
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	461a      	mov	r2, r3
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	4413      	add	r3, r2
 800a692:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800a694:	e7e0      	b.n	800a658 <u8g2_font_get_glyph_data+0xb4>
	break;
 800a696:	bf00      	nop
 800a698:	e000      	b.n	800a69c <u8g2_font_get_glyph_data+0xf8>
	break;
 800a69a:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	4608      	mov	r0, r1
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	70fb      	strb	r3, [r7, #3]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70bb      	strb	r3, [r7, #2]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	78fa      	ldrb	r2, [r7, #3]
 800a6c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	78ba      	ldrb	r2, [r7, #2]
 800a6d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800a6d4:	883b      	ldrh	r3, [r7, #0]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff ff63 	bl	800a5a4 <u8g2_font_get_glyph_data>
 800a6de:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d005      	beq.n	800a6f2 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800a6e6:	68b9      	ldr	r1, [r7, #8]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff fe55 	bl	800a398 <u8g2_font_decode_glyph>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	78fa      	ldrb	r2, [r7, #3]
 800a70c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	4608      	mov	r0, r1
 800a726:	4611      	mov	r1, r2
 800a728:	461a      	mov	r2, r3
 800a72a:	4603      	mov	r3, r0
 800a72c:	70fb      	strb	r3, [r7, #3]
 800a72e:	460b      	mov	r3, r1
 800a730:	70bb      	strb	r3, [r7, #2]
 800a732:	4613      	mov	r3, r2
 800a734:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d833      	bhi.n	800a7a8 <u8g2_DrawGlyph+0x8c>
 800a740:	a201      	add	r2, pc, #4	; (adr r2, 800a748 <u8g2_DrawGlyph+0x2c>)
 800a742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a746:	bf00      	nop
 800a748:	0800a759 	.word	0x0800a759
 800a74c:	0800a76d 	.word	0x0800a76d
 800a750:	0800a781 	.word	0x0800a781
 800a754:	0800a795 	.word	0x0800a795
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	4798      	blx	r3
 800a760:	4603      	mov	r3, r0
 800a762:	461a      	mov	r2, r3
 800a764:	78bb      	ldrb	r3, [r7, #2]
 800a766:	4413      	add	r3, r2
 800a768:	70bb      	strb	r3, [r7, #2]
      break;
 800a76a:	e01d      	b.n	800a7a8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	4798      	blx	r3
 800a774:	4603      	mov	r3, r0
 800a776:	461a      	mov	r2, r3
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	1a9b      	subs	r3, r3, r2
 800a77c:	70fb      	strb	r3, [r7, #3]
      break;
 800a77e:	e013      	b.n	800a7a8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	78bb      	ldrb	r3, [r7, #2]
 800a78e:	1a9b      	subs	r3, r3, r2
 800a790:	70bb      	strb	r3, [r7, #2]
      break;
 800a792:	e009      	b.n	800a7a8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	4798      	blx	r3
 800a79c:	4603      	mov	r3, r0
 800a79e:	461a      	mov	r2, r3
 800a7a0:	78fb      	ldrb	r3, [r7, #3]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	70fb      	strb	r3, [r7, #3]
      break;
 800a7a6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800a7a8:	883b      	ldrh	r3, [r7, #0]
 800a7aa:	78ba      	ldrb	r2, [r7, #2]
 800a7ac:	78f9      	ldrb	r1, [r7, #3]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff ff79 	bl	800a6a6 <u8g2_font_draw_glyph>
 800a7b4:	4603      	mov	r3, r0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop

0800a7c0 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	607b      	str	r3, [r7, #4]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	72fb      	strb	r3, [r7, #11]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 fc85 	bl	800b0e2 <u8x8_utf8_init>
  sum = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	7812      	ldrb	r2, [r2, #0]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	4798      	blx	r3
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800a7ee:	8abb      	ldrh	r3, [r7, #20]
 800a7f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d038      	beq.n	800a86a <u8g2_draw_string+0xaa>
      break;
    str++;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800a7fe:	8abb      	ldrh	r3, [r7, #20]
 800a800:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a804:	4293      	cmp	r3, r2
 800a806:	d0e9      	beq.n	800a7dc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800a808:	8abb      	ldrh	r3, [r7, #20]
 800a80a:	7aba      	ldrb	r2, [r7, #10]
 800a80c:	7af9      	ldrb	r1, [r7, #11]
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f7ff ff84 	bl	800a71c <u8g2_DrawGlyph>
 800a814:	4603      	mov	r3, r0
 800a816:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d81e      	bhi.n	800a860 <u8g2_draw_string+0xa0>
 800a822:	a201      	add	r2, pc, #4	; (adr r2, 800a828 <u8g2_draw_string+0x68>)
 800a824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a828:	0800a839 	.word	0x0800a839
 800a82c:	0800a843 	.word	0x0800a843
 800a830:	0800a84d 	.word	0x0800a84d
 800a834:	0800a857 	.word	0x0800a857
      {
	case 0:
	  x += delta;
 800a838:	7afa      	ldrb	r2, [r7, #11]
 800a83a:	7cfb      	ldrb	r3, [r7, #19]
 800a83c:	4413      	add	r3, r2
 800a83e:	72fb      	strb	r3, [r7, #11]
	  break;
 800a840:	e00e      	b.n	800a860 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800a842:	7aba      	ldrb	r2, [r7, #10]
 800a844:	7cfb      	ldrb	r3, [r7, #19]
 800a846:	4413      	add	r3, r2
 800a848:	72bb      	strb	r3, [r7, #10]
	  break;
 800a84a:	e009      	b.n	800a860 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800a84c:	7afa      	ldrb	r2, [r7, #11]
 800a84e:	7cfb      	ldrb	r3, [r7, #19]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	72fb      	strb	r3, [r7, #11]
	  break;
 800a854:	e004      	b.n	800a860 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800a856:	7aba      	ldrb	r2, [r7, #10]
 800a858:	7cfb      	ldrb	r3, [r7, #19]
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	72bb      	strb	r3, [r7, #10]
	  break;
 800a85e:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 800a860:	7dfa      	ldrb	r2, [r7, #23]
 800a862:	7cfb      	ldrb	r3, [r7, #19]
 800a864:	4413      	add	r3, r2
 800a866:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800a868:	e7b8      	b.n	800a7dc <u8g2_draw_string+0x1c>
      break;
 800a86a:	bf00      	nop
    }
  }
  return sum;
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop

0800a878 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	607b      	str	r3, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	72fb      	strb	r3, [r7, #11]
 800a886:	4613      	mov	r3, r2
 800a888:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4a06      	ldr	r2, [pc, #24]	; (800a8a8 <u8g2_DrawUTF8+0x30>)
 800a88e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800a890:	7aba      	ldrb	r2, [r7, #10]
 800a892:	7af9      	ldrb	r1, [r7, #11]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f7ff ff92 	bl	800a7c0 <u8g2_draw_string>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	0800b0ff 	.word	0x0800b0ff

0800a8ac <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d05d      	beq.n	800a978 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d04d      	beq.n	800a97a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d11c      	bne.n	800a922 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	da05      	bge.n	800a904 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 800a910:	429a      	cmp	r2, r3
 800a912:	dd32      	ble.n	800a97a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800a920:	e02b      	b.n	800a97a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 800a928:	461a      	mov	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800a930:	4619      	mov	r1, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800a938:	440b      	add	r3, r1
 800a93a:	429a      	cmp	r2, r3
 800a93c:	da0d      	bge.n	800a95a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800a944:	b2da      	uxtb	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	4413      	add	r3, r2
 800a950:	b2db      	uxtb	r3, r3
 800a952:	b25a      	sxtb	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800a966:	429a      	cmp	r2, r3
 800a968:	dd07      	ble.n	800a97a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800a976:	e000      	b.n	800a97a <u8g2_UpdateRefHeight+0xce>
    return;
 800a978:	bf00      	nop
  }  
}
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  return 0;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
	...

0800a99c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a04      	ldr	r2, [pc, #16]	; (800a9b8 <u8g2_SetFontPosBaseline+0x1c>)
 800a9a8:	655a      	str	r2, [r3, #84]	; 0x54
}
 800a9aa:	bf00      	nop
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	0800a985 	.word	0x0800a985

0800a9bc <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d00b      	beq.n	800a9e8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	3368      	adds	r3, #104	; 0x68
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7ff faa7 	bl	8009f30 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff ff62 	bl	800a8ac <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800a9e8:	bf00      	nop
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	460b      	mov	r3, r1
 800aa00:	71fb      	strb	r3, [r7, #7]
 800aa02:	4613      	mov	r3, r2
 800aa04:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
 800aa0e:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	781a      	ldrb	r2, [r3, #0]
 800aa14:	7dbb      	ldrb	r3, [r7, #22]
 800aa16:	4413      	add	r3, r2
 800aa18:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800aa1a:	7dfa      	ldrb	r2, [r7, #23]
 800aa1c:	7dbb      	ldrb	r3, [r7, #22]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d90b      	bls.n	800aa3a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800aa22:	7dfa      	ldrb	r2, [r7, #23]
 800aa24:	79bb      	ldrb	r3, [r7, #6]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d205      	bcs.n	800aa36 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800aa2a:	79bb      	ldrb	r3, [r7, #6]
 800aa2c:	75bb      	strb	r3, [r7, #22]
      b--;
 800aa2e:	7dbb      	ldrb	r3, [r7, #22]
 800aa30:	3b01      	subs	r3, #1
 800aa32:	75bb      	strb	r3, [r7, #22]
 800aa34:	e001      	b.n	800aa3a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800aa36:	79fb      	ldrb	r3, [r7, #7]
 800aa38:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800aa3a:	7dfa      	ldrb	r2, [r7, #23]
 800aa3c:	79bb      	ldrb	r3, [r7, #6]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d301      	bcc.n	800aa46 <u8g2_clip_intersection2+0x56>
    return 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	e01c      	b.n	800aa80 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800aa46:	7dba      	ldrb	r2, [r7, #22]
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d801      	bhi.n	800aa52 <u8g2_clip_intersection2+0x62>
    return 0;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e016      	b.n	800aa80 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800aa52:	7dfa      	ldrb	r2, [r7, #23]
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d201      	bcs.n	800aa5e <u8g2_clip_intersection2+0x6e>
    a = c;
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800aa5e:	7dba      	ldrb	r2, [r7, #22]
 800aa60:	79bb      	ldrb	r3, [r7, #6]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d901      	bls.n	800aa6a <u8g2_clip_intersection2+0x7a>
    b = d;
 800aa66:	79bb      	ldrb	r3, [r7, #6]
 800aa68:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	7dfa      	ldrb	r2, [r7, #23]
 800aa6e:	701a      	strb	r2, [r3, #0]
  b -= a;
 800aa70:	7dba      	ldrb	r2, [r7, #22]
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	1ad3      	subs	r3, r2, r3
 800aa76:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	7dba      	ldrb	r2, [r7, #22]
 800aa7c:	701a      	strb	r2, [r3, #0]
  return 1;
 800aa7e:	2301      	movs	r3, #1
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	371c      	adds	r7, #28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800aa8c:	b590      	push	{r4, r7, lr}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af02      	add	r7, sp, #8
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	4608      	mov	r0, r1
 800aa96:	4611      	mov	r1, r2
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	70fb      	strb	r3, [r7, #3]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	70bb      	strb	r3, [r7, #2]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaac:	78ba      	ldrb	r2, [r7, #2]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800aab6:	7878      	ldrb	r0, [r7, #1]
 800aab8:	78ba      	ldrb	r2, [r7, #2]
 800aaba:	78f9      	ldrb	r1, [r7, #3]
 800aabc:	7e3b      	ldrb	r3, [r7, #24]
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	4603      	mov	r3, r0
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	47a0      	blx	r4
}
 800aac6:	bf00      	nop
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd90      	pop	{r4, r7, pc}

0800aace <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800aace:	b590      	push	{r4, r7, lr}
 800aad0:	b085      	sub	sp, #20
 800aad2:	af02      	add	r7, sp, #8
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	4608      	mov	r0, r1
 800aad8:	4611      	mov	r1, r2
 800aada:	461a      	mov	r2, r3
 800aadc:	4603      	mov	r3, r0
 800aade:	70fb      	strb	r3, [r7, #3]
 800aae0:	460b      	mov	r3, r1
 800aae2:	70bb      	strb	r3, [r7, #2]
 800aae4:	4613      	mov	r3, r2
 800aae6:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d06d      	beq.n	800abce <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800aaf2:	787b      	ldrb	r3, [r7, #1]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d06a      	beq.n	800abce <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800aaf8:	787b      	ldrb	r3, [r7, #1]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d918      	bls.n	800ab30 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800aafe:	7e3b      	ldrb	r3, [r7, #24]
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d109      	bne.n	800ab18 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 800ab04:	78fa      	ldrb	r2, [r7, #3]
 800ab06:	787b      	ldrb	r3, [r7, #1]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	70fb      	strb	r3, [r7, #3]
	  x++;
 800ab0e:	78fb      	ldrb	r3, [r7, #3]
 800ab10:	3301      	adds	r3, #1
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	70fb      	strb	r3, [r7, #3]
 800ab16:	e00b      	b.n	800ab30 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 800ab18:	7e3b      	ldrb	r3, [r7, #24]
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d108      	bne.n	800ab30 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800ab1e:	78ba      	ldrb	r2, [r7, #2]
 800ab20:	787b      	ldrb	r3, [r7, #1]
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	70bb      	strb	r3, [r7, #2]
	  y++;
 800ab28:	78bb      	ldrb	r3, [r7, #2]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800ab30:	7e3b      	ldrb	r3, [r7, #24]
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 800ab38:	7e3b      	ldrb	r3, [r7, #24]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d119      	bne.n	800ab72 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ab44:	78bb      	ldrb	r3, [r7, #2]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d838      	bhi.n	800abbc <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ab50:	78bb      	ldrb	r3, [r7, #2]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d934      	bls.n	800abc0 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ab62:	1c79      	adds	r1, r7, #1
 800ab64:	1cf8      	adds	r0, r7, #3
 800ab66:	f7ff ff43 	bl	800a9f0 <u8g2_clip_intersection2>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d119      	bne.n	800aba4 <u8g2_DrawHVLine+0xd6>
	  return;
 800ab70:	e02d      	b.n	800abce <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ab78:	78fb      	ldrb	r3, [r7, #3]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d822      	bhi.n	800abc4 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ab84:	78fb      	ldrb	r3, [r7, #3]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d91e      	bls.n	800abc8 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab96:	1c79      	adds	r1, r7, #1
 800ab98:	1cb8      	adds	r0, r7, #2
 800ab9a:	f7ff ff29 	bl	800a9f0 <u8g2_clip_intersection2>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d013      	beq.n	800abcc <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba8:	689c      	ldr	r4, [r3, #8]
 800abaa:	78f9      	ldrb	r1, [r7, #3]
 800abac:	78ba      	ldrb	r2, [r7, #2]
 800abae:	7878      	ldrb	r0, [r7, #1]
 800abb0:	7e3b      	ldrb	r3, [r7, #24]
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4603      	mov	r3, r0
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	47a0      	blx	r4
 800abba:	e008      	b.n	800abce <u8g2_DrawHVLine+0x100>
	  return;
 800abbc:	bf00      	nop
 800abbe:	e006      	b.n	800abce <u8g2_DrawHVLine+0x100>
	  return;
 800abc0:	bf00      	nop
 800abc2:	e004      	b.n	800abce <u8g2_DrawHVLine+0x100>
	  return;
 800abc4:	bf00      	nop
 800abc6:	e002      	b.n	800abce <u8g2_DrawHVLine+0x100>
	  return;
 800abc8:	bf00      	nop
 800abca:	e000      	b.n	800abce <u8g2_DrawHVLine+0x100>
	  return;
 800abcc:	bf00      	nop
    }
}
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd90      	pop	{r4, r7, pc}

0800abd4 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	78fa      	ldrb	r2, [r7, #3]
 800abe4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 800abe8:	78fb      	ldrb	r3, [r7, #3]
 800abea:	2b02      	cmp	r3, #2
 800abec:	d903      	bls.n	800abf6 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 800abf6:	bf00      	nop
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800ac02:	b490      	push	{r4, r7}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	4604      	mov	r4, r0
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	461a      	mov	r2, r3
 800ac10:	4623      	mov	r3, r4
 800ac12:	71fb      	strb	r3, [r7, #7]
 800ac14:	4603      	mov	r3, r0
 800ac16:	71bb      	strb	r3, [r7, #6]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	717b      	strb	r3, [r7, #5]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800ac20:	797a      	ldrb	r2, [r7, #5]
 800ac22:	79bb      	ldrb	r3, [r7, #6]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d20d      	bcs.n	800ac44 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800ac28:	793a      	ldrb	r2, [r7, #4]
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d901      	bls.n	800ac34 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800ac30:	2301      	movs	r3, #1
 800ac32:	e014      	b.n	800ac5e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800ac34:	797a      	ldrb	r2, [r7, #5]
 800ac36:	793b      	ldrb	r3, [r7, #4]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d901      	bls.n	800ac40 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e00e      	b.n	800ac5e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	e00c      	b.n	800ac5e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800ac44:	793a      	ldrb	r2, [r7, #4]
 800ac46:	79fb      	ldrb	r3, [r7, #7]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d907      	bls.n	800ac5c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800ac4c:	797a      	ldrb	r2, [r7, #5]
 800ac4e:	793b      	ldrb	r3, [r7, #4]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d901      	bls.n	800ac58 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e002      	b.n	800ac5e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	e000      	b.n	800ac5e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800ac5c:	2300      	movs	r3, #0
    }
  }
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bc90      	pop	{r4, r7}
 800ac66:	4770      	bx	lr

0800ac68 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	4608      	mov	r0, r1
 800ac72:	4611      	mov	r1, r2
 800ac74:	461a      	mov	r2, r3
 800ac76:	4603      	mov	r3, r0
 800ac78:	70fb      	strb	r3, [r7, #3]
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	70bb      	strb	r3, [r7, #2]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800ac8e:	7c3b      	ldrb	r3, [r7, #16]
 800ac90:	78ba      	ldrb	r2, [r7, #2]
 800ac92:	f7ff ffb6 	bl	800ac02 <u8g2_is_intersection_decision_tree>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <u8g2_IsIntersection+0x38>
    return 0; 
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e00a      	b.n	800acb6 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800acac:	787b      	ldrb	r3, [r7, #1]
 800acae:	78fa      	ldrb	r2, [r7, #3]
 800acb0:	f7ff ffa7 	bl	800ac02 <u8g2_is_intersection_decision_tree>
 800acb4:	4603      	mov	r3, r0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b087      	sub	sp, #28
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	4608      	mov	r0, r1
 800acc8:	4611      	mov	r1, r2
 800acca:	461a      	mov	r2, r3
 800accc:	4603      	mov	r3, r0
 800acce:	70fb      	strb	r3, [r7, #3]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70bb      	strb	r3, [r7, #2]
 800acd4:	4613      	mov	r3, r2
 800acd6:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800acd8:	78bb      	ldrb	r3, [r7, #2]
 800acda:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800acdc:	7cfb      	ldrb	r3, [r7, #19]
 800acde:	f003 0307 	and.w	r3, r3, #7
 800ace2:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800ace4:	2301      	movs	r3, #1
 800ace6:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800ace8:	7c3a      	ldrb	r2, [r7, #16]
 800acea:	7cfb      	ldrb	r3, [r7, #19]
 800acec:	fa02 f303 	lsl.w	r3, r2, r3
 800acf0:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d801      	bhi.n	800ad08 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800ad04:	7c3b      	ldrb	r3, [r7, #16]
 800ad06:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d001      	beq.n	800ad16 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800ad12:	7c3b      	ldrb	r3, [r7, #16]
 800ad14:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800ad16:	78bb      	ldrb	r3, [r7, #2]
 800ad18:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800ad1a:	89fb      	ldrh	r3, [r7, #14]
 800ad1c:	f023 0307 	bic.w	r3, r3, #7
 800ad20:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	7c1b      	ldrb	r3, [r3, #16]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	89fa      	ldrh	r2, [r7, #14]
 800ad2c:	fb12 f303 	smulbb	r3, r2, r3
 800ad30:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800ad38:	89fb      	ldrh	r3, [r7, #14]
 800ad3a:	697a      	ldr	r2, [r7, #20]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	617b      	str	r3, [r7, #20]
  ptr += x;
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	4413      	add	r3, r2
 800ad46:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800ad48:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d117      	bne.n	800ad80 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	781a      	ldrb	r2, [r3, #0]
 800ad54:	7cbb      	ldrb	r3, [r7, #18]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	781a      	ldrb	r2, [r3, #0]
 800ad62:	7c7b      	ldrb	r3, [r7, #17]
 800ad64:	4053      	eors	r3, r2
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	701a      	strb	r2, [r3, #0]
	ptr++;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	617b      	str	r3, [r7, #20]
	len--;
 800ad72:	787b      	ldrb	r3, [r7, #1]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800ad78:	787b      	ldrb	r3, [r7, #1]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1e8      	bne.n	800ad50 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800ad7e:	e039      	b.n	800adf4 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	781a      	ldrb	r2, [r3, #0]
 800ad84:	7cbb      	ldrb	r3, [r7, #18]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	781a      	ldrb	r2, [r3, #0]
 800ad92:	7c7b      	ldrb	r3, [r7, #17]
 800ad94:	4053      	eors	r3, r2
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800ad9c:	7cfb      	ldrb	r3, [r7, #19]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800ada2:	7cfb      	ldrb	r3, [r7, #19]
 800ada4:	f003 0307 	and.w	r3, r3, #7
 800ada8:	74fb      	strb	r3, [r7, #19]
      len--;
 800adaa:	787b      	ldrb	r3, [r7, #1]
 800adac:	3b01      	subs	r3, #1
 800adae:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800adb0:	7cfb      	ldrb	r3, [r7, #19]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d115      	bne.n	800ade2 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adbc:	461a      	mov	r2, r3
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	4413      	add	r3, r2
 800adc2:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d801      	bhi.n	800add2 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800adce:	2301      	movs	r3, #1
 800add0:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800add8:	2b01      	cmp	r3, #1
 800adda:	d008      	beq.n	800adee <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800addc:	2301      	movs	r3, #1
 800adde:	747b      	strb	r3, [r7, #17]
 800ade0:	e005      	b.n	800adee <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800ade2:	7cbb      	ldrb	r3, [r7, #18]
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800ade8:	7c7b      	ldrb	r3, [r7, #17]
 800adea:	005b      	lsls	r3, r3, #1
 800adec:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800adee:	787b      	ldrb	r3, [r7, #1]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1c5      	bne.n	800ad80 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800adf4:	bf00      	nop
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	22ff      	movs	r2, #255	; 0xff
 800ae1c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	22ff      	movs	r2, #255	; 0xff
 800ae24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	4798      	blx	r3
}
 800ae32:	bf00      	nop
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b084      	sub	sp, #16
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	603b      	str	r3, [r7, #0]
 800ae46:	4613      	mov	r3, r2
 800ae48:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	79fa      	ldrb	r2, [r7, #7]
 800ae60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f7ff ffaf 	bl	800ae00 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f7ff fd7a 	bl	800a99c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 800aeb0:	bf00      	nop
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aecc:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	00db      	lsls	r3, r3, #3
 800aed2:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7bfa      	ldrb	r2, [r7, #15]
 800aed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	7c1b      	ldrb	r3, [r3, #16]
 800aee0:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800aee2:	7bfb      	ldrb	r3, [r7, #15]
 800aee4:	2b1f      	cmp	r3, #31
 800aee6:	d901      	bls.n	800aeec <u8g2_update_dimension_common+0x34>
    t = 31;
 800aee8:	231f      	movs	r3, #31
 800aeea:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	7bfa      	ldrb	r2, [r7, #15]
 800aef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af00:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800af02:	7bfb      	ldrb	r3, [r7, #15]
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	7bfa      	ldrb	r2, [r7, #15]
 800af0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af16:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800af20:	4413      	add	r3, r2
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	7c52      	ldrb	r2, [r2, #17]
 800af26:	4293      	cmp	r3, r2
 800af28:	dd06      	ble.n	800af38 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	7c5a      	ldrb	r2, [r3, #17]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800af38:	7bfb      	ldrb	r3, [r7, #15]
 800af3a:	00db      	lsls	r3, r3, #3
 800af3c:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	4413      	add	r3, r2
 800af60:	b2da      	uxtb	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	22f0      	movs	r2, #240	; 0xf0
 800af6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	8a9b      	ldrh	r3, [r3, #20]
 800af74:	2bf0      	cmp	r3, #240	; 0xf0
 800af76:	d805      	bhi.n	800af84 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	8a9b      	ldrh	r3, [r3, #20]
 800af7c:	b2da      	uxtb	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	8adb      	ldrh	r3, [r3, #22]
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 800af90:	bf00      	nop
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af02      	add	r7, sp, #8
 800afa2:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	4603      	mov	r3, r0
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f7ff fe51 	bl	800ac68 <u8g2_IsIntersection>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800afd4:	e03b      	b.n	800b04e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800afea:	429a      	cmp	r2, r3
 800afec:	d205      	bcs.n	800affa <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800b006:	429a      	cmp	r2, r3
 800b008:	d905      	bls.n	800b016 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b022:	429a      	cmp	r2, r3
 800b024:	d205      	bcs.n	800b032 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b03e:	429a      	cmp	r2, r3
 800b040:	d905      	bls.n	800b04e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b082      	sub	sp, #8
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff ff2a 	bl	800aeb8 <u8g2_update_dimension_common>
}
 800b064:	bf00      	nop
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f7ff ff7b 	bl	800af9c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800b0a6:	bf00      	nop
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af02      	add	r7, sp, #8
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	4608      	mov	r0, r1
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	4603      	mov	r3, r0
 800b0be:	70fb      	strb	r3, [r7, #3]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	70bb      	strb	r3, [r7, #2]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800b0c8:	7878      	ldrb	r0, [r7, #1]
 800b0ca:	78ba      	ldrb	r2, [r7, #2]
 800b0cc:	78f9      	ldrb	r1, [r7, #3]
 800b0ce:	7c3b      	ldrb	r3, [r7, #16]
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f7ff fcd9 	bl	800aa8c <u8g2_draw_hv_line_2dir>
}
 800b0da:	bf00      	nop
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b083      	sub	sp, #12
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800b0f2:	bf00      	nop
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	460b      	mov	r3, r1
 800b108:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 800b10a:	78fb      	ldrb	r3, [r7, #3]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <u8x8_utf8_next+0x18>
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	2b0a      	cmp	r3, #10
 800b114:	d102      	bne.n	800b11c <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 800b116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b11a:	e06e      	b.n	800b1fa <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b122:	2b00      	cmp	r3, #0
 800b124:	d145      	bne.n	800b1b2 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 800b126:	78fb      	ldrb	r3, [r7, #3]
 800b128:	2bfb      	cmp	r3, #251	; 0xfb
 800b12a:	d908      	bls.n	800b13e <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2205      	movs	r2, #5
 800b130:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 1;
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	70fb      	strb	r3, [r7, #3]
 800b13c:	e032      	b.n	800b1a4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	2bf7      	cmp	r3, #247	; 0xf7
 800b142:	d908      	bls.n	800b156 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2204      	movs	r2, #4
 800b148:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 3;
 800b14c:	78fb      	ldrb	r3, [r7, #3]
 800b14e:	f003 0303 	and.w	r3, r3, #3
 800b152:	70fb      	strb	r3, [r7, #3]
 800b154:	e026      	b.n	800b1a4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 800b156:	78fb      	ldrb	r3, [r7, #3]
 800b158:	2bef      	cmp	r3, #239	; 0xef
 800b15a:	d908      	bls.n	800b16e <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2203      	movs	r2, #3
 800b160:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 7;      
 800b164:	78fb      	ldrb	r3, [r7, #3]
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	70fb      	strb	r3, [r7, #3]
 800b16c:	e01a      	b.n	800b1a4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 800b16e:	78fb      	ldrb	r3, [r7, #3]
 800b170:	2bdf      	cmp	r3, #223	; 0xdf
 800b172:	d908      	bls.n	800b186 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2202      	movs	r2, #2
 800b178:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 15;
 800b17c:	78fb      	ldrb	r3, [r7, #3]
 800b17e:	f003 030f 	and.w	r3, r3, #15
 800b182:	70fb      	strb	r3, [r7, #3]
 800b184:	e00e      	b.n	800b1a4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 800b186:	78fb      	ldrb	r3, [r7, #3]
 800b188:	2bbf      	cmp	r3, #191	; 0xbf
 800b18a:	d908      	bls.n	800b19e <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 0x01f;
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	f003 031f 	and.w	r3, r3, #31
 800b19a:	70fb      	strb	r3, [r7, #3]
 800b19c:	e002      	b.n	800b1a4 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 800b19e:	78fb      	ldrb	r3, [r7, #3]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	e02a      	b.n	800b1fa <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 800b1ac:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b1b0:	e023      	b.n	800b1fa <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	b2da      	uxtb	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	8c1b      	ldrh	r3, [r3, #32]
 800b1c6:	019b      	lsls	r3, r3, #6
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 800b1ce:	78fb      	ldrb	r3, [r7, #3]
 800b1d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1d4:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	8c1a      	ldrh	r2, [r3, #32]
 800b1da:	78fb      	ldrb	r3, [r7, #3]
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 800b1f0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b1f4:	e001      	b.n	800b1fa <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	8c1b      	ldrh	r3, [r3, #32]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	370c      	adds	r7, #12
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <u8x8_byte_SetDC>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800b206:	b590      	push	{r4, r7, lr}
 800b208:	b083      	sub	sp, #12
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	460b      	mov	r3, r1
 800b210:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	691c      	ldr	r4, [r3, #16]
 800b216:	78fa      	ldrb	r2, [r7, #3]
 800b218:	2300      	movs	r3, #0
 800b21a:	2120      	movs	r1, #32
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	47a0      	blx	r4
 800b220:	4603      	mov	r3, r0
}
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	bd90      	pop	{r4, r7, pc}

0800b22a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800b22a:	b590      	push	{r4, r7, lr}
 800b22c:	b085      	sub	sp, #20
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	460b      	mov	r3, r1
 800b234:	607a      	str	r2, [r7, #4]
 800b236:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	691c      	ldr	r4, [r3, #16]
 800b23c:	7afa      	ldrb	r2, [r7, #11]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2117      	movs	r1, #23
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	47a0      	blx	r4
 800b246:	4603      	mov	r3, r0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd90      	pop	{r4, r7, pc}

0800b250 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800b25c:	1cfb      	adds	r3, r7, #3
 800b25e:	461a      	mov	r2, r3
 800b260:	2101      	movs	r1, #1
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff ffe1 	bl	800b22a <u8x8_byte_SendBytes>
 800b268:	4603      	mov	r3, r0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <u8x8_cad_SendCmd>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800b272:	b590      	push	{r4, r7, lr}
 800b274:	b083      	sub	sp, #12
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	460b      	mov	r3, r1
 800b27c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68dc      	ldr	r4, [r3, #12]
 800b282:	78fa      	ldrb	r2, [r7, #3]
 800b284:	2300      	movs	r3, #0
 800b286:	2115      	movs	r1, #21
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	47a0      	blx	r4
 800b28c:	4603      	mov	r3, r0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	bd90      	pop	{r4, r7, pc}

0800b296 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800b296:	b590      	push	{r4, r7, lr}
 800b298:	b083      	sub	sp, #12
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68dc      	ldr	r4, [r3, #12]
 800b2a6:	78fa      	ldrb	r2, [r7, #3]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	2116      	movs	r1, #22
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	47a0      	blx	r4
 800b2b0:	4603      	mov	r3, r0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd90      	pop	{r4, r7, pc}

0800b2ba <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800b2ba:	b590      	push	{r4, r7, lr}
 800b2bc:	b085      	sub	sp, #20
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	607a      	str	r2, [r7, #4]
 800b2c6:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68dc      	ldr	r4, [r3, #12]
 800b2cc:	7afa      	ldrb	r2, [r7, #11]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2117      	movs	r1, #23
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	47a0      	blx	r4
 800b2d6:	4603      	mov	r3, r0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd90      	pop	{r4, r7, pc}

0800b2e0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68dc      	ldr	r4, [r3, #12]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	2118      	movs	r1, #24
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	47a0      	blx	r4
 800b2f6:	4603      	mov	r3, r0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd90      	pop	{r4, r7, pc}

0800b300 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800b300:	b590      	push	{r4, r7, lr}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68dc      	ldr	r4, [r3, #12]
 800b30c:	2300      	movs	r3, #0
 800b30e:	2200      	movs	r2, #0
 800b310:	2119      	movs	r1, #25
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	47a0      	blx	r4
 800b316:	4603      	mov	r3, r0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd90      	pop	{r4, r7, pc}

0800b320 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800b320:	b590      	push	{r4, r7, lr}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	73fb      	strb	r3, [r7, #15]
    data++;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	2b17      	cmp	r3, #23
 800b33a:	d017      	beq.n	800b36c <u8x8_cad_SendSequence+0x4c>
 800b33c:	2b17      	cmp	r3, #23
 800b33e:	dc02      	bgt.n	800b346 <u8x8_cad_SendSequence+0x26>
 800b340:	2b15      	cmp	r3, #21
 800b342:	db37      	blt.n	800b3b4 <u8x8_cad_SendSequence+0x94>
 800b344:	e004      	b.n	800b350 <u8x8_cad_SendSequence+0x30>
 800b346:	2b19      	cmp	r3, #25
 800b348:	dd1e      	ble.n	800b388 <u8x8_cad_SendSequence+0x68>
 800b34a:	2bfe      	cmp	r3, #254	; 0xfe
 800b34c:	d024      	beq.n	800b398 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800b34e:	e031      	b.n	800b3b4 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	68dc      	ldr	r4, [r3, #12]
 800b35a:	7bba      	ldrb	r2, [r7, #14]
 800b35c:	7bf9      	ldrb	r1, [r7, #15]
 800b35e:	2300      	movs	r3, #0
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	47a0      	blx	r4
	  data++;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	3301      	adds	r3, #1
 800b368:	603b      	str	r3, [r7, #0]
	  break;
 800b36a:	e022      	b.n	800b3b2 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800b372:	f107 030e 	add.w	r3, r7, #14
 800b376:	461a      	mov	r2, r3
 800b378:	2101      	movs	r1, #1
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff ff9d 	bl	800b2ba <u8x8_cad_SendData>
	  data++;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	3301      	adds	r3, #1
 800b384:	603b      	str	r3, [r7, #0]
	  break;
 800b386:	e014      	b.n	800b3b2 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	68dc      	ldr	r4, [r3, #12]
 800b38c:	7bf9      	ldrb	r1, [r7, #15]
 800b38e:	2300      	movs	r3, #0
 800b390:	2200      	movs	r2, #0
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	47a0      	blx	r4
	  break;
 800b396:	e00c      	b.n	800b3b2 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800b39e:	7bbb      	ldrb	r3, [r7, #14]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	2129      	movs	r1, #41	; 0x29
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fa34 	bl	800b812 <u8x8_gpio_call>
	  data++;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	603b      	str	r3, [r7, #0]
	  break;
 800b3b0:	bf00      	nop
    cmd = *data;
 800b3b2:	e7ba      	b.n	800b32a <u8x8_cad_SendSequence+0xa>
	return;
 800b3b4:	bf00      	nop
    }
  }
}
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd90      	pop	{r4, r7, pc}

0800b3bc <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800b3bc:	b590      	push	{r4, r7, lr}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	607b      	str	r3, [r7, #4]
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	72fb      	strb	r3, [r7, #11]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800b3ce:	7afb      	ldrb	r3, [r7, #11]
 800b3d0:	3b14      	subs	r3, #20
 800b3d2:	2b05      	cmp	r3, #5
 800b3d4:	d82f      	bhi.n	800b436 <u8x8_cad_011+0x7a>
 800b3d6:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <u8x8_cad_011+0x20>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b425 	.word	0x0800b425
 800b3e0:	0800b3f5 	.word	0x0800b3f5
 800b3e4:	0800b409 	.word	0x0800b409
 800b3e8:	0800b41d 	.word	0x0800b41d
 800b3ec:	0800b425 	.word	0x0800b425
 800b3f0:	0800b425 	.word	0x0800b425
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f7ff ff05 	bl	800b206 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800b3fc:	7abb      	ldrb	r3, [r7, #10]
 800b3fe:	4619      	mov	r1, r3
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f7ff ff25 	bl	800b250 <u8x8_byte_SendByte>
      break;
 800b406:	e018      	b.n	800b43a <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 800b408:	2101      	movs	r1, #1
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff fefb 	bl	800b206 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800b410:	7abb      	ldrb	r3, [r7, #10]
 800b412:	4619      	mov	r1, r3
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f7ff ff1b 	bl	800b250 <u8x8_byte_SendByte>
      break;
 800b41a:	e00e      	b.n	800b43a <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800b41c:	2101      	movs	r1, #1
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f7ff fef1 	bl	800b206 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	691c      	ldr	r4, [r3, #16]
 800b428:	7aba      	ldrb	r2, [r7, #10]
 800b42a:	7af9      	ldrb	r1, [r7, #11]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	47a0      	blx	r4
 800b432:	4603      	mov	r3, r0
 800b434:	e002      	b.n	800b43c <u8x8_cad_011+0x80>
    default:
      return 0;
 800b436:	2300      	movs	r3, #0
 800b438:	e000      	b.n	800b43c <u8x8_cad_011+0x80>
  }
  return 1;
 800b43a:	2301      	movs	r3, #1
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	bd90      	pop	{r4, r7, pc}

0800b444 <u8x8_ssd1322_8to32>:
*/

static uint8_t u8x8_ssd1322_to32_dest_buf[32];

static uint8_t *u8x8_ssd1322_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 800b444:	b480      	push	{r7}
 800b446:	b087      	sub	sp, #28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  uint8_t v;
  uint8_t a,b;
  uint8_t i, j;
  uint8_t *dest;
  
  for( j = 0; j < 4; j++ )
 800b44e:	2300      	movs	r3, #0
 800b450:	74fb      	strb	r3, [r7, #19]
 800b452:	e03d      	b.n	800b4d0 <u8x8_ssd1322_8to32+0x8c>
  {
    dest = u8x8_ssd1322_to32_dest_buf;
 800b454:	4b23      	ldr	r3, [pc, #140]	; (800b4e4 <u8x8_ssd1322_8to32+0xa0>)
 800b456:	60fb      	str	r3, [r7, #12]
    dest += j;
 800b458:	7cfb      	ldrb	r3, [r7, #19]
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	4413      	add	r3, r2
 800b45e:	60fb      	str	r3, [r7, #12]
    a =*ptr;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	75bb      	strb	r3, [r7, #22]
    ptr++;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	3301      	adds	r3, #1
 800b46a:	603b      	str	r3, [r7, #0]
    b = *ptr;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	757b      	strb	r3, [r7, #21]
    ptr++;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	3301      	adds	r3, #1
 800b476:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 8; i++ )
 800b478:	2300      	movs	r3, #0
 800b47a:	753b      	strb	r3, [r7, #20]
 800b47c:	e022      	b.n	800b4c4 <u8x8_ssd1322_8to32+0x80>
    {
      v = 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	75fb      	strb	r3, [r7, #23]
      if ( a&1 ) v |= 0xf0;
 800b482:	7dbb      	ldrb	r3, [r7, #22]
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d003      	beq.n	800b494 <u8x8_ssd1322_8to32+0x50>
 800b48c:	7dfb      	ldrb	r3, [r7, #23]
 800b48e:	f063 030f 	orn	r3, r3, #15
 800b492:	75fb      	strb	r3, [r7, #23]
      if ( b&1 ) v |= 0x0f;
 800b494:	7d7b      	ldrb	r3, [r7, #21]
 800b496:	f003 0301 	and.w	r3, r3, #1
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d003      	beq.n	800b4a6 <u8x8_ssd1322_8to32+0x62>
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	f043 030f 	orr.w	r3, r3, #15
 800b4a4:	75fb      	strb	r3, [r7, #23]
      *dest = v;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	7dfa      	ldrb	r2, [r7, #23]
 800b4aa:	701a      	strb	r2, [r3, #0]
      dest+=4;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	3304      	adds	r3, #4
 800b4b0:	60fb      	str	r3, [r7, #12]
      a >>= 1;
 800b4b2:	7dbb      	ldrb	r3, [r7, #22]
 800b4b4:	085b      	lsrs	r3, r3, #1
 800b4b6:	75bb      	strb	r3, [r7, #22]
      b >>= 1;
 800b4b8:	7d7b      	ldrb	r3, [r7, #21]
 800b4ba:	085b      	lsrs	r3, r3, #1
 800b4bc:	757b      	strb	r3, [r7, #21]
    for( i = 0; i < 8; i++ )
 800b4be:	7d3b      	ldrb	r3, [r7, #20]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	753b      	strb	r3, [r7, #20]
 800b4c4:	7d3b      	ldrb	r3, [r7, #20]
 800b4c6:	2b07      	cmp	r3, #7
 800b4c8:	d9d9      	bls.n	800b47e <u8x8_ssd1322_8to32+0x3a>
  for( j = 0; j < 4; j++ )
 800b4ca:	7cfb      	ldrb	r3, [r7, #19]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	74fb      	strb	r3, [r7, #19]
 800b4d0:	7cfb      	ldrb	r3, [r7, #19]
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d9be      	bls.n	800b454 <u8x8_ssd1322_8to32+0x10>
    }
  }
  
  return u8x8_ssd1322_to32_dest_buf;
 800b4d6:	4b03      	ldr	r3, [pc, #12]	; (800b4e4 <u8x8_ssd1322_8to32+0xa0>)
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	371c      	adds	r7, #28
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	20001a9c 	.word	0x20001a9c

0800b4e8 <u8x8_d_ssd1322_common>:
  return u8x8_ssd1322_to32_dest_buf;
}


uint8_t u8x8_d_ssd1322_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	607b      	str	r3, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	72fb      	strb	r3, [r7, #11]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	72bb      	strb	r3, [r7, #10]
  uint8_t x; 
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 800b4fa:	7afb      	ldrb	r3, [r7, #11]
 800b4fc:	2b0e      	cmp	r3, #14
 800b4fe:	d010      	beq.n	800b522 <u8x8_d_ssd1322_common+0x3a>
 800b500:	2b0f      	cmp	r3, #15
 800b502:	d01e      	beq.n	800b542 <u8x8_d_ssd1322_common+0x5a>
 800b504:	2b0b      	cmp	r3, #11
 800b506:	d17b      	bne.n	800b600 <u8x8_d_ssd1322_common+0x118>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800b508:	7abb      	ldrb	r3, [r7, #10]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d104      	bne.n	800b518 <u8x8_d_ssd1322_common+0x30>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave0_seq);
 800b50e:	4940      	ldr	r1, [pc, #256]	; (800b610 <u8x8_d_ssd1322_common+0x128>)
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f7ff ff05 	bl	800b320 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
      break;
 800b516:	e075      	b.n	800b604 <u8x8_d_ssd1322_common+0x11c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
 800b518:	493e      	ldr	r1, [pc, #248]	; (800b614 <u8x8_d_ssd1322_common+0x12c>)
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f7ff ff00 	bl	800b320 <u8x8_cad_SendSequence>
      break;
 800b520:	e070      	b.n	800b604 <u8x8_d_ssd1322_common+0x11c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f7ff fedc 	bl	800b2e0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x0C1 );
 800b528:	21c1      	movs	r1, #193	; 0xc1
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f7ff fea1 	bl	800b272 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1322 has range from 0 to 255 */
 800b530:	7abb      	ldrb	r3, [r7, #10]
 800b532:	4619      	mov	r1, r3
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f7ff feae 	bl	800b296 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f7ff fee0 	bl	800b300 <u8x8_cad_EndTransfer>
      break;
 800b540:	e060      	b.n	800b604 <u8x8_d_ssd1322_common+0x11c>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f7ff fecc 	bl	800b2e0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	795b      	ldrb	r3, [r3, #5]
 800b54c:	77fb      	strb	r3, [r7, #31]
      x *= 2;		// only every 4th col can be addressed
 800b54e:	7ffb      	ldrb	r3, [r7, #31]
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	77fb      	strb	r3, [r7, #31]
      x += u8x8->x_offset;		
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800b55a:	7ffb      	ldrb	r3, [r7, #31]
 800b55c:	4413      	add	r3, r2
 800b55e:	77fb      	strb	r3, [r7, #31]
    
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	799b      	ldrb	r3, [r3, #6]
 800b564:	75fb      	strb	r3, [r7, #23]
      y *= 8;
 800b566:	7dfb      	ldrb	r3, [r7, #23]
 800b568:	00db      	lsls	r3, r3, #3
 800b56a:	75fb      	strb	r3, [r7, #23]
    
      
      u8x8_cad_SendCmd(u8x8, 0x075 );	/* set row address, moved out of the loop (issue 302) */
 800b56c:	2175      	movs	r1, #117	; 0x75
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f7ff fe7f 	bl	800b272 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, y);
 800b574:	7dfb      	ldrb	r3, [r7, #23]
 800b576:	4619      	mov	r1, r3
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f7ff fe8c 	bl	800b296 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, y+7);
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	3307      	adds	r3, #7
 800b582:	b2db      	uxtb	r3, r3
 800b584:	4619      	mov	r1, r3
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f7ff fe85 	bl	800b296 <u8x8_cad_SendArg>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	791b      	ldrb	r3, [r3, #4]
 800b590:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	61bb      	str	r3, [r7, #24]

	do
	{
	  u8x8_cad_SendCmd(u8x8, 0x015 );	/* set column address */
 800b598:	2115      	movs	r1, #21
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f7ff fe69 	bl	800b272 <u8x8_cad_SendCmd>
	  u8x8_cad_SendArg(u8x8, x );	/* start */
 800b5a0:	7ffb      	ldrb	r3, [r7, #31]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f7ff fe76 	bl	800b296 <u8x8_cad_SendArg>
	  u8x8_cad_SendArg(u8x8, x+1 );	/* end */
 800b5aa:	7ffb      	ldrb	r3, [r7, #31]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7ff fe6f 	bl	800b296 <u8x8_cad_SendArg>

	  u8x8_cad_SendCmd(u8x8, 0x05c );	/* write to ram */
 800b5b8:	215c      	movs	r1, #92	; 0x5c
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f7ff fe59 	bl	800b272 <u8x8_cad_SendCmd>
	  
	  u8x8_cad_SendData(u8x8, 32, u8x8_ssd1322_8to32(u8x8, ptr));
 800b5c0:	69b9      	ldr	r1, [r7, #24]
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f7ff ff3e 	bl	800b444 <u8x8_ssd1322_8to32>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	2120      	movs	r1, #32
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f7ff fe73 	bl	800b2ba <u8x8_cad_SendData>
	  
	  ptr += 8;
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	61bb      	str	r3, [r7, #24]
	  x += 2;
 800b5da:	7ffb      	ldrb	r3, [r7, #31]
 800b5dc:	3302      	adds	r3, #2
 800b5de:	77fb      	strb	r3, [r7, #31]
	  c--;
 800b5e0:	7fbb      	ldrb	r3, [r7, #30]
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );
 800b5e6:	7fbb      	ldrb	r3, [r7, #30]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1d5      	bne.n	800b598 <u8x8_d_ssd1322_common+0xb0>
	
	//x += 2;
	arg_int--;
 800b5ec:	7abb      	ldrb	r3, [r7, #10]
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800b5f2:	7abb      	ldrb	r3, [r7, #10]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1c9      	bne.n	800b58c <u8x8_d_ssd1322_common+0xa4>
      
      u8x8_cad_EndTransfer(u8x8);
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7ff fe81 	bl	800b300 <u8x8_cad_EndTransfer>
      break;
 800b5fe:	e001      	b.n	800b604 <u8x8_d_ssd1322_common+0x11c>
    default:
      return 0;
 800b600:	2300      	movs	r3, #0
 800b602:	e000      	b.n	800b606 <u8x8_d_ssd1322_common+0x11e>
  }
  return 1;
 800b604:	2301      	movs	r3, #1
}
 800b606:	4618      	mov	r0, r3
 800b608:	3720      	adds	r7, #32
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	08014e40 	.word	0x08014e40
 800b614:	08014e48 	.word	0x08014e48

0800b618 <u8x8_d_ssd1322_nhd_256x64>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1322_nhd_256x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	607b      	str	r3, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	72fb      	strb	r3, [r7, #11]
 800b626:	4613      	mov	r3, r2
 800b628:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800b62a:	7afb      	ldrb	r3, [r7, #11]
 800b62c:	2b0a      	cmp	r3, #10
 800b62e:	d008      	beq.n	800b642 <u8x8_d_ssd1322_nhd_256x64+0x2a>
 800b630:	2b0d      	cmp	r3, #13
 800b632:	d00e      	beq.n	800b652 <u8x8_d_ssd1322_nhd_256x64+0x3a>
 800b634:	2b09      	cmp	r3, #9
 800b636:	d125      	bne.n	800b684 <u8x8_d_ssd1322_nhd_256x64+0x6c>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1322_256x64_display_info);
 800b638:	4919      	ldr	r1, [pc, #100]	; (800b6a0 <u8x8_d_ssd1322_nhd_256x64+0x88>)
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f000 f838 	bl	800b6b0 <u8x8_d_helper_display_setup_memory>
      break;
 800b640:	e028      	b.n	800b694 <u8x8_d_ssd1322_nhd_256x64+0x7c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 f848 	bl	800b6d8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
 800b648:	4916      	ldr	r1, [pc, #88]	; (800b6a4 <u8x8_d_ssd1322_nhd_256x64+0x8c>)
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f7ff fe68 	bl	800b320 <u8x8_cad_SendSequence>
      break;
 800b650:	e020      	b.n	800b694 <u8x8_d_ssd1322_nhd_256x64+0x7c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800b652:	7abb      	ldrb	r3, [r7, #10]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10a      	bne.n	800b66e <u8x8_d_ssd1322_nhd_256x64+0x56>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip0_seq);
 800b658:	4913      	ldr	r1, [pc, #76]	; (800b6a8 <u8x8_d_ssd1322_nhd_256x64+0x90>)
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fe60 	bl	800b320 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	7c9a      	ldrb	r2, [r3, #18]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800b66c:	e012      	b.n	800b694 <u8x8_d_ssd1322_nhd_256x64+0x7c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
 800b66e:	490f      	ldr	r1, [pc, #60]	; (800b6ac <u8x8_d_ssd1322_nhd_256x64+0x94>)
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f7ff fe55 	bl	800b320 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	7cda      	ldrb	r2, [r3, #19]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800b682:	e007      	b.n	800b694 <u8x8_d_ssd1322_nhd_256x64+0x7c>
    
    default:
      return u8x8_d_ssd1322_common(u8x8, msg, arg_int, arg_ptr);
 800b684:	7aba      	ldrb	r2, [r7, #10]
 800b686:	7af9      	ldrb	r1, [r7, #11]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f7ff ff2c 	bl	800b4e8 <u8x8_d_ssd1322_common>
 800b690:	4603      	mov	r3, r0
 800b692:	e000      	b.n	800b696 <u8x8_d_ssd1322_nhd_256x64+0x7e>
  }
  return 1;
 800b694:	2301      	movs	r3, #1
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	08014e68 	.word	0x08014e68
 800b6a4:	08014e80 	.word	0x08014e80
 800b6a8:	08014e50 	.word	0x08014e50
 800b6ac:	08014e5c 	.word	0x08014e5c

0800b6b0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	683a      	ldr	r2, [r7, #0]
 800b6be:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	7c9a      	ldrb	r2, [r3, #18]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800b6d8:	b590      	push	{r4, r7, lr}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	695c      	ldr	r4, [r3, #20]
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	2128      	movs	r1, #40	; 0x28
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68dc      	ldr	r4, [r3, #12]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2114      	movs	r1, #20
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	214b      	movs	r1, #75	; 0x4b
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f886 	bl	800b812 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	791b      	ldrb	r3, [r3, #4]
 800b70c:	461a      	mov	r2, r3
 800b70e:	2129      	movs	r1, #41	; 0x29
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f87e 	bl	800b812 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800b716:	2200      	movs	r2, #0
 800b718:	214b      	movs	r1, #75	; 0x4b
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f879 	bl	800b812 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	791b      	ldrb	r3, [r3, #4]
 800b726:	461a      	mov	r2, r3
 800b728:	2129      	movs	r1, #41	; 0x29
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f871 	bl	800b812 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800b730:	2201      	movs	r2, #1
 800b732:	214b      	movs	r1, #75	; 0x4b
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f86c 	bl	800b812 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	795b      	ldrb	r3, [r3, #5]
 800b740:	461a      	mov	r2, r3
 800b742:	2129      	movs	r1, #41	; 0x29
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f864 	bl	800b812 <u8x8_gpio_call>
}    
 800b74a:	bf00      	nop
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd90      	pop	{r4, r7, pc}

0800b752 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800b752:	b590      	push	{r4, r7, lr}
 800b754:	b085      	sub	sp, #20
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	4608      	mov	r0, r1
 800b75c:	4611      	mov	r1, r2
 800b75e:	461a      	mov	r2, r3
 800b760:	4603      	mov	r3, r0
 800b762:	70fb      	strb	r3, [r7, #3]
 800b764:	460b      	mov	r3, r1
 800b766:	70bb      	strb	r3, [r7, #2]
 800b768:	4613      	mov	r3, r2
 800b76a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800b76c:	78fb      	ldrb	r3, [r7, #3]
 800b76e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800b770:	78bb      	ldrb	r3, [r7, #2]
 800b772:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800b774:	787b      	ldrb	r3, [r7, #1]
 800b776:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	689c      	ldr	r4, [r3, #8]
 800b780:	f107 0308 	add.w	r3, r7, #8
 800b784:	2201      	movs	r2, #1
 800b786:	210f      	movs	r1, #15
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	47a0      	blx	r4
 800b78c:	4603      	mov	r3, r0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	bd90      	pop	{r4, r7, pc}

0800b796 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800b796:	b590      	push	{r4, r7, lr}
 800b798:	b083      	sub	sp, #12
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	689c      	ldr	r4, [r3, #8]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2109      	movs	r1, #9
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	47a0      	blx	r4
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd90      	pop	{r4, r7, pc}

0800b7b4 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	689c      	ldr	r4, [r3, #8]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	210a      	movs	r1, #10
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	47a0      	blx	r4
}
 800b7ca:	bf00      	nop
 800b7cc:	370c      	adds	r7, #12
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd90      	pop	{r4, r7, pc}

0800b7d2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800b7d2:	b590      	push	{r4, r7, lr}
 800b7d4:	b083      	sub	sp, #12
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	460b      	mov	r3, r1
 800b7dc:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	689c      	ldr	r4, [r3, #8]
 800b7e2:	78fa      	ldrb	r2, [r7, #3]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	210b      	movs	r1, #11
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	47a0      	blx	r4
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd90      	pop	{r4, r7, pc}

0800b7f4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800b7f4:	b590      	push	{r4, r7, lr}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	689c      	ldr	r4, [r3, #8]
 800b800:	2300      	movs	r3, #0
 800b802:	2200      	movs	r2, #0
 800b804:	2110      	movs	r1, #16
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	47a0      	blx	r4
}
 800b80a:	bf00      	nop
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd90      	pop	{r4, r7, pc}

0800b812 <u8x8_gpio_call>:

#include "../u8g2/u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800b812:	b590      	push	{r4, r7, lr}
 800b814:	b083      	sub	sp, #12
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	460b      	mov	r3, r1
 800b81c:	70fb      	strb	r3, [r7, #3]
 800b81e:	4613      	mov	r3, r2
 800b820:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	695c      	ldr	r4, [r3, #20]
 800b826:	78ba      	ldrb	r2, [r7, #2]
 800b828:	78f9      	ldrb	r1, [r7, #3]
 800b82a:	2300      	movs	r3, #0
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	47a0      	blx	r4
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	bd90      	pop	{r4, r7, pc}

0800b838 <u8x8_dummy_cb>:

#include "../u8g2/u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	607b      	str	r3, [r7, #4]
 800b842:	460b      	mov	r3, r1
 800b844:	72fb      	strb	r3, [r7, #11]
 800b846:	4613      	mov	r3, r2
 800b848:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3714      	adds	r7, #20
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a12      	ldr	r2, [pc, #72]	; (800b8b4 <u8x8_SetupDefaults+0x5c>)
 800b86a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a11      	ldr	r2, [pc, #68]	; (800b8b4 <u8x8_SetupDefaults+0x5c>)
 800b870:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a0f      	ldr	r2, [pc, #60]	; (800b8b4 <u8x8_SetupDefaults+0x5c>)
 800b876:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a0e      	ldr	r2, [pc, #56]	; (800b8b4 <u8x8_SetupDefaults+0x5c>)
 800b87c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->i2c_address = 255;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	22ff      	movs	r2, #255	; 0xff
 800b89a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	22ff      	movs	r2, #255	; 0xff
 800b8a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800b8a6:	bf00      	nop
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	0800b839 	.word	0x0800b839

0800b8b8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f7ff ffc6 	bl	800b858 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f7ff ff56 	bl	800b796 <u8x8_SetupMemory>
}
 800b8ea:	bf00      	nop
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b8f2:	b480      	push	{r7}
 800b8f4:	b085      	sub	sp, #20
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b904:	2b84      	cmp	r3, #132	; 0x84
 800b906:	d005      	beq.n	800b914 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b908:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4413      	add	r3, r2
 800b910:	3303      	adds	r3, #3
 800b912:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b914:	68fb      	ldr	r3, [r7, #12]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b926:	f000 ffa5 	bl	800c874 <vTaskStartScheduler>
  
  return osOK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b932:	b089      	sub	sp, #36	; 0x24
 800b934:	af04      	add	r7, sp, #16
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	695b      	ldr	r3, [r3, #20]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d020      	beq.n	800b984 <osThreadCreate+0x54>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	699b      	ldr	r3, [r3, #24]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d01c      	beq.n	800b984 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685c      	ldr	r4, [r3, #4]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681d      	ldr	r5, [r3, #0]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	691e      	ldr	r6, [r3, #16]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff ffc8 	bl	800b8f2 <makeFreeRtosPriority>
 800b962:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	695b      	ldr	r3, [r3, #20]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b96c:	9202      	str	r2, [sp, #8]
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	9100      	str	r1, [sp, #0]
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	4632      	mov	r2, r6
 800b976:	4629      	mov	r1, r5
 800b978:	4620      	mov	r0, r4
 800b97a:	f000 fd33 	bl	800c3e4 <xTaskCreateStatic>
 800b97e:	4603      	mov	r3, r0
 800b980:	60fb      	str	r3, [r7, #12]
 800b982:	e01c      	b.n	800b9be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685c      	ldr	r4, [r3, #4]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b990:	b29e      	uxth	r6, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff ffaa 	bl	800b8f2 <makeFreeRtosPriority>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	f107 030c 	add.w	r3, r7, #12
 800b9a4:	9301      	str	r3, [sp, #4]
 800b9a6:	9200      	str	r2, [sp, #0]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	4632      	mov	r2, r6
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f000 fd71 	bl	800c496 <xTaskCreate>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d001      	beq.n	800b9be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	e000      	b.n	800b9c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b9be:	68fb      	ldr	r3, [r7, #12]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <osDelay+0x16>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	e000      	b.n	800b9e0 <osDelay+0x18>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 ff13 	bl	800c80c <vTaskDelay>
  
  return osOK;
 800b9e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b9f0:	b590      	push	{r4, r7, lr}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af02      	add	r7, sp, #8
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d012      	beq.n	800ba28 <osMessageCreate+0x38>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00e      	beq.n	800ba28 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6818      	ldr	r0, [r3, #0]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6859      	ldr	r1, [r3, #4]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	689a      	ldr	r2, [r3, #8]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68dc      	ldr	r4, [r3, #12]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	4623      	mov	r3, r4
 800ba20:	f000 f92c 	bl	800bc7c <xQueueGenericCreateStatic>
 800ba24:	4603      	mov	r3, r0
 800ba26:	e008      	b.n	800ba3a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6818      	ldr	r0, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	4619      	mov	r1, r3
 800ba34:	f000 f994 	bl	800bd60 <xQueueGenericCreate>
 800ba38:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	370c      	adds	r7, #12
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd90      	pop	{r4, r7, pc}

0800ba42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f103 0208 	add.w	r2, r3, #8
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f04f 32ff 	mov.w	r2, #4294967295
 800ba5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f103 0208 	add.w	r2, r3, #8
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f103 0208 	add.w	r2, r3, #8
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba76:	bf00      	nop
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba82:	b480      	push	{r7}
 800ba84:	b083      	sub	sp, #12
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	689a      	ldr	r2, [r3, #8]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	683a      	ldr	r2, [r7, #0]
 800bac0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	1c5a      	adds	r2, r3, #1
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	601a      	str	r2, [r3, #0]
}
 800bad8:	bf00      	nop
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafa:	d103      	bne.n	800bb04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	60fb      	str	r3, [r7, #12]
 800bb02:	e00c      	b.n	800bb1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	3308      	adds	r3, #8
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	e002      	b.n	800bb12 <vListInsert+0x2e>
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	60fb      	str	r3, [r7, #12]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d2f6      	bcs.n	800bb0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	601a      	str	r2, [r3, #0]
}
 800bb4a:	bf00      	nop
 800bb4c:	3714      	adds	r7, #20
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb56:	b480      	push	{r7}
 800bb58:	b085      	sub	sp, #20
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	6892      	ldr	r2, [r2, #8]
 800bb6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	6852      	ldr	r2, [r2, #4]
 800bb76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d103      	bne.n	800bb8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	689a      	ldr	r2, [r3, #8]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	1e5a      	subs	r2, r3, #1
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
	...

0800bbac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d109      	bne.n	800bbd4 <xQueueGenericReset+0x28>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	60bb      	str	r3, [r7, #8]
 800bbd2:	e7fe      	b.n	800bbd2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800bbd4:	f001 fc7a 	bl	800d4cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe0:	68f9      	ldr	r1, [r7, #12]
 800bbe2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbe4:	fb01 f303 	mul.w	r3, r1, r3
 800bbe8:	441a      	add	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc04:	3b01      	subs	r3, #1
 800bc06:	68f9      	ldr	r1, [r7, #12]
 800bc08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc0a:	fb01 f303 	mul.w	r3, r1, r3
 800bc0e:	441a      	add	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	22ff      	movs	r2, #255	; 0xff
 800bc18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	22ff      	movs	r2, #255	; 0xff
 800bc20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d114      	bne.n	800bc54 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d01a      	beq.n	800bc68 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	3310      	adds	r3, #16
 800bc36:	4618      	mov	r0, r3
 800bc38:	f001 f85e 	bl	800ccf8 <xTaskRemoveFromEventList>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d012      	beq.n	800bc68 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc42:	4b0d      	ldr	r3, [pc, #52]	; (800bc78 <xQueueGenericReset+0xcc>)
 800bc44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	e009      	b.n	800bc68 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	3310      	adds	r3, #16
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff fef2 	bl	800ba42 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3324      	adds	r3, #36	; 0x24
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff feed 	bl	800ba42 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc68:	f001 fc5e 	bl	800d528 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc6c:	2301      	movs	r3, #1
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	e000ed04 	.word	0xe000ed04

0800bc7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b08e      	sub	sp, #56	; 0x38
 800bc80:	af02      	add	r7, sp, #8
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d109      	bne.n	800bca4 <xQueueGenericCreateStatic+0x28>
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bca2:	e7fe      	b.n	800bca2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d109      	bne.n	800bcbe <xQueueGenericCreateStatic+0x42>
 800bcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24
 800bcbc:	e7fe      	b.n	800bcbc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d002      	beq.n	800bcca <xQueueGenericCreateStatic+0x4e>
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <xQueueGenericCreateStatic+0x52>
 800bcca:	2301      	movs	r3, #1
 800bccc:	e000      	b.n	800bcd0 <xQueueGenericCreateStatic+0x54>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d109      	bne.n	800bce8 <xQueueGenericCreateStatic+0x6c>
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	623b      	str	r3, [r7, #32]
 800bce6:	e7fe      	b.n	800bce6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d102      	bne.n	800bcf4 <xQueueGenericCreateStatic+0x78>
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <xQueueGenericCreateStatic+0x7c>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e000      	b.n	800bcfa <xQueueGenericCreateStatic+0x7e>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d109      	bne.n	800bd12 <xQueueGenericCreateStatic+0x96>
 800bcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	61fb      	str	r3, [r7, #28]
 800bd10:	e7fe      	b.n	800bd10 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd12:	2348      	movs	r3, #72	; 0x48
 800bd14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2b48      	cmp	r3, #72	; 0x48
 800bd1a:	d009      	beq.n	800bd30 <xQueueGenericCreateStatic+0xb4>
 800bd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	61bb      	str	r3, [r7, #24]
 800bd2e:	e7fe      	b.n	800bd2e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00d      	beq.n	800bd56 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	68b9      	ldr	r1, [r7, #8]
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 f842 	bl	800bdda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3730      	adds	r7, #48	; 0x30
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08a      	sub	sp, #40	; 0x28
 800bd64:	af02      	add	r7, sp, #8
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d109      	bne.n	800bd88 <xQueueGenericCreate+0x28>
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	613b      	str	r3, [r7, #16]
 800bd86:	e7fe      	b.n	800bd86 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d102      	bne.n	800bd94 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	61fb      	str	r3, [r7, #28]
 800bd92:	e004      	b.n	800bd9e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	fb02 f303 	mul.w	r3, r2, r3
 800bd9c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	3348      	adds	r3, #72	; 0x48
 800bda2:	4618      	mov	r0, r3
 800bda4:	f001 fc6e 	bl	800d684 <pvPortMalloc>
 800bda8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00f      	beq.n	800bdd0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	3348      	adds	r3, #72	; 0x48
 800bdb4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdbe:	79fa      	ldrb	r2, [r7, #7]
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	68b9      	ldr	r1, [r7, #8]
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f000 f805 	bl	800bdda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bdd0:	69bb      	ldr	r3, [r7, #24]
	}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3720      	adds	r7, #32
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b084      	sub	sp, #16
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	60b9      	str	r1, [r7, #8]
 800bde4:	607a      	str	r2, [r7, #4]
 800bde6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d103      	bne.n	800bdf6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	69ba      	ldr	r2, [r7, #24]
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	e002      	b.n	800bdfc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be08:	2101      	movs	r1, #1
 800be0a:	69b8      	ldr	r0, [r7, #24]
 800be0c:	f7ff fece 	bl	800bbac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be10:	bf00      	nop
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08e      	sub	sp, #56	; 0x38
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
 800be24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be26:	2300      	movs	r3, #0
 800be28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	2b00      	cmp	r3, #0
 800be32:	d109      	bne.n	800be48 <xQueueGenericSend+0x30>
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	62bb      	str	r3, [r7, #40]	; 0x28
 800be46:	e7fe      	b.n	800be46 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d103      	bne.n	800be56 <xQueueGenericSend+0x3e>
 800be4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be52:	2b00      	cmp	r3, #0
 800be54:	d101      	bne.n	800be5a <xQueueGenericSend+0x42>
 800be56:	2301      	movs	r3, #1
 800be58:	e000      	b.n	800be5c <xQueueGenericSend+0x44>
 800be5a:	2300      	movs	r3, #0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d109      	bne.n	800be74 <xQueueGenericSend+0x5c>
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	627b      	str	r3, [r7, #36]	; 0x24
 800be72:	e7fe      	b.n	800be72 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	2b02      	cmp	r3, #2
 800be78:	d103      	bne.n	800be82 <xQueueGenericSend+0x6a>
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d101      	bne.n	800be86 <xQueueGenericSend+0x6e>
 800be82:	2301      	movs	r3, #1
 800be84:	e000      	b.n	800be88 <xQueueGenericSend+0x70>
 800be86:	2300      	movs	r3, #0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d109      	bne.n	800bea0 <xQueueGenericSend+0x88>
 800be8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	623b      	str	r3, [r7, #32]
 800be9e:	e7fe      	b.n	800be9e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bea0:	f001 f8e6 	bl	800d070 <xTaskGetSchedulerState>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d102      	bne.n	800beb0 <xQueueGenericSend+0x98>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <xQueueGenericSend+0x9c>
 800beb0:	2301      	movs	r3, #1
 800beb2:	e000      	b.n	800beb6 <xQueueGenericSend+0x9e>
 800beb4:	2300      	movs	r3, #0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d109      	bne.n	800bece <xQueueGenericSend+0xb6>
 800beba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	61fb      	str	r3, [r7, #28]
 800becc:	e7fe      	b.n	800becc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bece:	f001 fafd 	bl	800d4cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beda:	429a      	cmp	r2, r3
 800bedc:	d302      	bcc.n	800bee4 <xQueueGenericSend+0xcc>
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d129      	bne.n	800bf38 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bee4:	683a      	ldr	r2, [r7, #0]
 800bee6:	68b9      	ldr	r1, [r7, #8]
 800bee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beea:	f000 f96b 	bl	800c1c4 <prvCopyDataToQueue>
 800beee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d010      	beq.n	800bf1a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befa:	3324      	adds	r3, #36	; 0x24
 800befc:	4618      	mov	r0, r3
 800befe:	f000 fefb 	bl	800ccf8 <xTaskRemoveFromEventList>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d013      	beq.n	800bf30 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf08:	4b3f      	ldr	r3, [pc, #252]	; (800c008 <xQueueGenericSend+0x1f0>)
 800bf0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	e00a      	b.n	800bf30 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d007      	beq.n	800bf30 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf20:	4b39      	ldr	r3, [pc, #228]	; (800c008 <xQueueGenericSend+0x1f0>)
 800bf22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf30:	f001 fafa 	bl	800d528 <vPortExitCritical>
				return pdPASS;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e063      	b.n	800c000 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d103      	bne.n	800bf46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf3e:	f001 faf3 	bl	800d528 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf42:	2300      	movs	r3, #0
 800bf44:	e05c      	b.n	800c000 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d106      	bne.n	800bf5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf4c:	f107 0314 	add.w	r3, r7, #20
 800bf50:	4618      	mov	r0, r3
 800bf52:	f000 ff33 	bl	800cdbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf56:	2301      	movs	r3, #1
 800bf58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf5a:	f001 fae5 	bl	800d528 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf5e:	f000 fce7 	bl	800c930 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf62:	f001 fab3 	bl	800d4cc <vPortEnterCritical>
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf6c:	b25b      	sxtb	r3, r3
 800bf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf72:	d103      	bne.n	800bf7c <xQueueGenericSend+0x164>
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf82:	b25b      	sxtb	r3, r3
 800bf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf88:	d103      	bne.n	800bf92 <xQueueGenericSend+0x17a>
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf92:	f001 fac9 	bl	800d528 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf96:	1d3a      	adds	r2, r7, #4
 800bf98:	f107 0314 	add.w	r3, r7, #20
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 ff22 	bl	800cde8 <xTaskCheckForTimeOut>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d124      	bne.n	800bff4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfac:	f000 fa02 	bl	800c3b4 <prvIsQueueFull>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d018      	beq.n	800bfe8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	3310      	adds	r3, #16
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 fe76 	bl	800ccb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bfc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfc6:	f000 f98d 	bl	800c2e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bfca:	f000 fcbf 	bl	800c94c <xTaskResumeAll>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f47f af7c 	bne.w	800bece <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bfd6:	4b0c      	ldr	r3, [pc, #48]	; (800c008 <xQueueGenericSend+0x1f0>)
 800bfd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	e772      	b.n	800bece <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bfe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfea:	f000 f97b 	bl	800c2e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfee:	f000 fcad 	bl	800c94c <xTaskResumeAll>
 800bff2:	e76c      	b.n	800bece <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bff6:	f000 f975 	bl	800c2e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bffa:	f000 fca7 	bl	800c94c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bffe:	2300      	movs	r3, #0
		}
	}
}
 800c000:	4618      	mov	r0, r3
 800c002:	3738      	adds	r7, #56	; 0x38
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	e000ed04 	.word	0xe000ed04

0800c00c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08c      	sub	sp, #48	; 0x30
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c018:	2300      	movs	r3, #0
 800c01a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c022:	2b00      	cmp	r3, #0
 800c024:	d109      	bne.n	800c03a <xQueueReceive+0x2e>
 800c026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02a:	f383 8811 	msr	BASEPRI, r3
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f3bf 8f4f 	dsb	sy
 800c036:	623b      	str	r3, [r7, #32]
 800c038:	e7fe      	b.n	800c038 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d103      	bne.n	800c048 <xQueueReceive+0x3c>
 800c040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c044:	2b00      	cmp	r3, #0
 800c046:	d101      	bne.n	800c04c <xQueueReceive+0x40>
 800c048:	2301      	movs	r3, #1
 800c04a:	e000      	b.n	800c04e <xQueueReceive+0x42>
 800c04c:	2300      	movs	r3, #0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d109      	bne.n	800c066 <xQueueReceive+0x5a>
 800c052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	61fb      	str	r3, [r7, #28]
 800c064:	e7fe      	b.n	800c064 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c066:	f001 f803 	bl	800d070 <xTaskGetSchedulerState>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d102      	bne.n	800c076 <xQueueReceive+0x6a>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <xQueueReceive+0x6e>
 800c076:	2301      	movs	r3, #1
 800c078:	e000      	b.n	800c07c <xQueueReceive+0x70>
 800c07a:	2300      	movs	r3, #0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d109      	bne.n	800c094 <xQueueReceive+0x88>
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	61bb      	str	r3, [r7, #24]
 800c092:	e7fe      	b.n	800c092 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c094:	f001 fa1a 	bl	800d4cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d01f      	beq.n	800c0e4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0a4:	68b9      	ldr	r1, [r7, #8]
 800c0a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0a8:	f000 f8f6 	bl	800c298 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ae:	1e5a      	subs	r2, r3, #1
 800c0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00f      	beq.n	800c0dc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	3310      	adds	r3, #16
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f000 fe19 	bl	800ccf8 <xTaskRemoveFromEventList>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d007      	beq.n	800c0dc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c0cc:	4b3c      	ldr	r3, [pc, #240]	; (800c1c0 <xQueueReceive+0x1b4>)
 800c0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c0dc:	f001 fa24 	bl	800d528 <vPortExitCritical>
				return pdPASS;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e069      	b.n	800c1b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d103      	bne.n	800c0f2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0ea:	f001 fa1d 	bl	800d528 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e062      	b.n	800c1b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d106      	bne.n	800c106 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0f8:	f107 0310 	add.w	r3, r7, #16
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 fe5d 	bl	800cdbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c102:	2301      	movs	r3, #1
 800c104:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c106:	f001 fa0f 	bl	800d528 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c10a:	f000 fc11 	bl	800c930 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c10e:	f001 f9dd 	bl	800d4cc <vPortEnterCritical>
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c118:	b25b      	sxtb	r3, r3
 800c11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11e:	d103      	bne.n	800c128 <xQueueReceive+0x11c>
 800c120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c12e:	b25b      	sxtb	r3, r3
 800c130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c134:	d103      	bne.n	800c13e <xQueueReceive+0x132>
 800c136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c13e:	f001 f9f3 	bl	800d528 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c142:	1d3a      	adds	r2, r7, #4
 800c144:	f107 0310 	add.w	r3, r7, #16
 800c148:	4611      	mov	r1, r2
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 fe4c 	bl	800cde8 <xTaskCheckForTimeOut>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d123      	bne.n	800c19e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c158:	f000 f916 	bl	800c388 <prvIsQueueEmpty>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d017      	beq.n	800c192 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c164:	3324      	adds	r3, #36	; 0x24
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	4611      	mov	r1, r2
 800c16a:	4618      	mov	r0, r3
 800c16c:	f000 fda0 	bl	800ccb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c172:	f000 f8b7 	bl	800c2e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c176:	f000 fbe9 	bl	800c94c <xTaskResumeAll>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d189      	bne.n	800c094 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c180:	4b0f      	ldr	r3, [pc, #60]	; (800c1c0 <xQueueReceive+0x1b4>)
 800c182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c186:	601a      	str	r2, [r3, #0]
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	f3bf 8f6f 	isb	sy
 800c190:	e780      	b.n	800c094 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c194:	f000 f8a6 	bl	800c2e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c198:	f000 fbd8 	bl	800c94c <xTaskResumeAll>
 800c19c:	e77a      	b.n	800c094 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1a0:	f000 f8a0 	bl	800c2e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1a4:	f000 fbd2 	bl	800c94c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1aa:	f000 f8ed 	bl	800c388 <prvIsQueueEmpty>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f43f af6f 	beq.w	800c094 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c1b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3730      	adds	r7, #48	; 0x30
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	e000ed04 	.word	0xe000ed04

0800c1c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b086      	sub	sp, #24
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10d      	bne.n	800c1fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d14d      	bne.n	800c286 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 ff5c 	bl	800d0ac <xTaskPriorityDisinherit>
 800c1f4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	605a      	str	r2, [r3, #4]
 800c1fc:	e043      	b.n	800c286 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d119      	bne.n	800c238 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6898      	ldr	r0, [r3, #8]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20c:	461a      	mov	r2, r3
 800c20e:	68b9      	ldr	r1, [r7, #8]
 800c210:	f001 fc52 	bl	800dab8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	689a      	ldr	r2, [r3, #8]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21c:	441a      	add	r2, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	689a      	ldr	r2, [r3, #8]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d32b      	bcc.n	800c286 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	609a      	str	r2, [r3, #8]
 800c236:	e026      	b.n	800c286 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	68d8      	ldr	r0, [r3, #12]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c240:	461a      	mov	r2, r3
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	f001 fc38 	bl	800dab8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	68da      	ldr	r2, [r3, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c250:	425b      	negs	r3, r3
 800c252:	441a      	add	r2, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68da      	ldr	r2, [r3, #12]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	429a      	cmp	r2, r3
 800c262:	d207      	bcs.n	800c274 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	685a      	ldr	r2, [r3, #4]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26c:	425b      	negs	r3, r3
 800c26e:	441a      	add	r2, r3
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b02      	cmp	r3, #2
 800c278:	d105      	bne.n	800c286 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d002      	beq.n	800c286 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	3b01      	subs	r3, #1
 800c284:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	1c5a      	adds	r2, r3, #1
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c28e:	697b      	ldr	r3, [r7, #20]
}
 800c290:	4618      	mov	r0, r3
 800c292:	3718      	adds	r7, #24
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d018      	beq.n	800c2dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	68da      	ldr	r2, [r3, #12]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b2:	441a      	add	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68da      	ldr	r2, [r3, #12]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d303      	bcc.n	800c2cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68d9      	ldr	r1, [r3, #12]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	6838      	ldr	r0, [r7, #0]
 800c2d8:	f001 fbee 	bl	800dab8 <memcpy>
	}
}
 800c2dc:	bf00      	nop
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2ec:	f001 f8ee 	bl	800d4cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2f8:	e011      	b.n	800c31e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d012      	beq.n	800c328 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	3324      	adds	r3, #36	; 0x24
 800c306:	4618      	mov	r0, r3
 800c308:	f000 fcf6 	bl	800ccf8 <xTaskRemoveFromEventList>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c312:	f000 fdc9 	bl	800cea8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c316:	7bfb      	ldrb	r3, [r7, #15]
 800c318:	3b01      	subs	r3, #1
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c31e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c322:	2b00      	cmp	r3, #0
 800c324:	dce9      	bgt.n	800c2fa <prvUnlockQueue+0x16>
 800c326:	e000      	b.n	800c32a <prvUnlockQueue+0x46>
					break;
 800c328:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	22ff      	movs	r2, #255	; 0xff
 800c32e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c332:	f001 f8f9 	bl	800d528 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c336:	f001 f8c9 	bl	800d4cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c340:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c342:	e011      	b.n	800c368 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d012      	beq.n	800c372 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3310      	adds	r3, #16
 800c350:	4618      	mov	r0, r3
 800c352:	f000 fcd1 	bl	800ccf8 <xTaskRemoveFromEventList>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c35c:	f000 fda4 	bl	800cea8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c360:	7bbb      	ldrb	r3, [r7, #14]
 800c362:	3b01      	subs	r3, #1
 800c364:	b2db      	uxtb	r3, r3
 800c366:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c368:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	dce9      	bgt.n	800c344 <prvUnlockQueue+0x60>
 800c370:	e000      	b.n	800c374 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c372:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	22ff      	movs	r2, #255	; 0xff
 800c378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c37c:	f001 f8d4 	bl	800d528 <vPortExitCritical>
}
 800c380:	bf00      	nop
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c390:	f001 f89c 	bl	800d4cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d102      	bne.n	800c3a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c39c:	2301      	movs	r3, #1
 800c39e:	60fb      	str	r3, [r7, #12]
 800c3a0:	e001      	b.n	800c3a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3a6:	f001 f8bf 	bl	800d528 <vPortExitCritical>

	return xReturn;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3bc:	f001 f886 	bl	800d4cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d102      	bne.n	800c3d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	60fb      	str	r3, [r7, #12]
 800c3d0:	e001      	b.n	800c3d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3d6:	f001 f8a7 	bl	800d528 <vPortExitCritical>

	return xReturn;
 800c3da:	68fb      	ldr	r3, [r7, #12]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b08e      	sub	sp, #56	; 0x38
 800c3e8:	af04      	add	r7, sp, #16
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d109      	bne.n	800c40c <xTaskCreateStatic+0x28>
 800c3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fc:	f383 8811 	msr	BASEPRI, r3
 800c400:	f3bf 8f6f 	isb	sy
 800c404:	f3bf 8f4f 	dsb	sy
 800c408:	623b      	str	r3, [r7, #32]
 800c40a:	e7fe      	b.n	800c40a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d109      	bne.n	800c426 <xTaskCreateStatic+0x42>
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	61fb      	str	r3, [r7, #28]
 800c424:	e7fe      	b.n	800c424 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c426:	2354      	movs	r3, #84	; 0x54
 800c428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	2b54      	cmp	r3, #84	; 0x54
 800c42e:	d009      	beq.n	800c444 <xTaskCreateStatic+0x60>
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	61bb      	str	r3, [r7, #24]
 800c442:	e7fe      	b.n	800c442 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c446:	2b00      	cmp	r3, #0
 800c448:	d01e      	beq.n	800c488 <xTaskCreateStatic+0xa4>
 800c44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d01b      	beq.n	800c488 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c458:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	2202      	movs	r2, #2
 800c45e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c462:	2300      	movs	r3, #0
 800c464:	9303      	str	r3, [sp, #12]
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	9302      	str	r3, [sp, #8]
 800c46a:	f107 0314 	add.w	r3, r7, #20
 800c46e:	9301      	str	r3, [sp, #4]
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	68b9      	ldr	r1, [r7, #8]
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f000 f850 	bl	800c520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c482:	f000 f8cb 	bl	800c61c <prvAddNewTaskToReadyList>
 800c486:	e001      	b.n	800c48c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800c488:	2300      	movs	r3, #0
 800c48a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c48c:	697b      	ldr	r3, [r7, #20]
	}
 800c48e:	4618      	mov	r0, r3
 800c490:	3728      	adds	r7, #40	; 0x28
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c496:	b580      	push	{r7, lr}
 800c498:	b08c      	sub	sp, #48	; 0x30
 800c49a:	af04      	add	r7, sp, #16
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	603b      	str	r3, [r7, #0]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4a6:	88fb      	ldrh	r3, [r7, #6]
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f001 f8ea 	bl	800d684 <pvPortMalloc>
 800c4b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00e      	beq.n	800c4d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c4b8:	2054      	movs	r0, #84	; 0x54
 800c4ba:	f001 f8e3 	bl	800d684 <pvPortMalloc>
 800c4be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	631a      	str	r2, [r3, #48]	; 0x30
 800c4cc:	e005      	b.n	800c4da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c4ce:	6978      	ldr	r0, [r7, #20]
 800c4d0:	f001 f99a 	bl	800d808 <vPortFree>
 800c4d4:	e001      	b.n	800c4da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d017      	beq.n	800c510 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c4e8:	88fa      	ldrh	r2, [r7, #6]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9303      	str	r3, [sp, #12]
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	9302      	str	r3, [sp, #8]
 800c4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	68b9      	ldr	r1, [r7, #8]
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f000 f80e 	bl	800c520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c504:	69f8      	ldr	r0, [r7, #28]
 800c506:	f000 f889 	bl	800c61c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c50a:	2301      	movs	r3, #1
 800c50c:	61bb      	str	r3, [r7, #24]
 800c50e:	e002      	b.n	800c516 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c510:	f04f 33ff 	mov.w	r3, #4294967295
 800c514:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c516:	69bb      	ldr	r3, [r7, #24]
	}
 800c518:	4618      	mov	r0, r3
 800c51a:	3720      	adds	r7, #32
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b088      	sub	sp, #32
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
 800c52c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c538:	3b01      	subs	r3, #1
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	4413      	add	r3, r2
 800c53e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	f023 0307 	bic.w	r3, r3, #7
 800c546:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d009      	beq.n	800c566 <prvInitialiseNewTask+0x46>
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	617b      	str	r3, [r7, #20]
 800c564:	e7fe      	b.n	800c564 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c566:	2300      	movs	r3, #0
 800c568:	61fb      	str	r3, [r7, #28]
 800c56a:	e012      	b.n	800c592 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	4413      	add	r3, r2
 800c572:	7819      	ldrb	r1, [r3, #0]
 800c574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	4413      	add	r3, r2
 800c57a:	3334      	adds	r3, #52	; 0x34
 800c57c:	460a      	mov	r2, r1
 800c57e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	4413      	add	r3, r2
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d006      	beq.n	800c59a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	3301      	adds	r3, #1
 800c590:	61fb      	str	r3, [r7, #28]
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	2b0f      	cmp	r3, #15
 800c596:	d9e9      	bls.n	800c56c <prvInitialiseNewTask+0x4c>
 800c598:	e000      	b.n	800c59c <prvInitialiseNewTask+0x7c>
		{
			break;
 800c59a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a6:	2b06      	cmp	r3, #6
 800c5a8:	d901      	bls.n	800c5ae <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c5aa:	2306      	movs	r3, #6
 800c5ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5b8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5bc:	2200      	movs	r2, #0
 800c5be:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff fa5c 	bl	800ba82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	3318      	adds	r3, #24
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff fa57 	bl	800ba82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5dc:	f1c3 0207 	rsb	r2, r3, #7
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	68f9      	ldr	r1, [r7, #12]
 800c5fc:	69b8      	ldr	r0, [r7, #24]
 800c5fe:	f000 fe3f 	bl	800d280 <pxPortInitialiseStack>
 800c602:	4602      	mov	r2, r0
 800c604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c606:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c612:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c614:	bf00      	nop
 800c616:	3720      	adds	r7, #32
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c624:	f000 ff52 	bl	800d4cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c628:	4b2a      	ldr	r3, [pc, #168]	; (800c6d4 <prvAddNewTaskToReadyList+0xb8>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3301      	adds	r3, #1
 800c62e:	4a29      	ldr	r2, [pc, #164]	; (800c6d4 <prvAddNewTaskToReadyList+0xb8>)
 800c630:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c632:	4b29      	ldr	r3, [pc, #164]	; (800c6d8 <prvAddNewTaskToReadyList+0xbc>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d109      	bne.n	800c64e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c63a:	4a27      	ldr	r2, [pc, #156]	; (800c6d8 <prvAddNewTaskToReadyList+0xbc>)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c640:	4b24      	ldr	r3, [pc, #144]	; (800c6d4 <prvAddNewTaskToReadyList+0xb8>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d110      	bne.n	800c66a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c648:	f000 fc52 	bl	800cef0 <prvInitialiseTaskLists>
 800c64c:	e00d      	b.n	800c66a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c64e:	4b23      	ldr	r3, [pc, #140]	; (800c6dc <prvAddNewTaskToReadyList+0xc0>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d109      	bne.n	800c66a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c656:	4b20      	ldr	r3, [pc, #128]	; (800c6d8 <prvAddNewTaskToReadyList+0xbc>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c660:	429a      	cmp	r2, r3
 800c662:	d802      	bhi.n	800c66a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c664:	4a1c      	ldr	r2, [pc, #112]	; (800c6d8 <prvAddNewTaskToReadyList+0xbc>)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c66a:	4b1d      	ldr	r3, [pc, #116]	; (800c6e0 <prvAddNewTaskToReadyList+0xc4>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	3301      	adds	r3, #1
 800c670:	4a1b      	ldr	r2, [pc, #108]	; (800c6e0 <prvAddNewTaskToReadyList+0xc4>)
 800c672:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c678:	2201      	movs	r2, #1
 800c67a:	409a      	lsls	r2, r3
 800c67c:	4b19      	ldr	r3, [pc, #100]	; (800c6e4 <prvAddNewTaskToReadyList+0xc8>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4313      	orrs	r3, r2
 800c682:	4a18      	ldr	r2, [pc, #96]	; (800c6e4 <prvAddNewTaskToReadyList+0xc8>)
 800c684:	6013      	str	r3, [r2, #0]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c68a:	4613      	mov	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4413      	add	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4a15      	ldr	r2, [pc, #84]	; (800c6e8 <prvAddNewTaskToReadyList+0xcc>)
 800c694:	441a      	add	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3304      	adds	r3, #4
 800c69a:	4619      	mov	r1, r3
 800c69c:	4610      	mov	r0, r2
 800c69e:	f7ff f9fd 	bl	800ba9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c6a2:	f000 ff41 	bl	800d528 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c6a6:	4b0d      	ldr	r3, [pc, #52]	; (800c6dc <prvAddNewTaskToReadyList+0xc0>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00e      	beq.n	800c6cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c6ae:	4b0a      	ldr	r3, [pc, #40]	; (800c6d8 <prvAddNewTaskToReadyList+0xbc>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d207      	bcs.n	800c6cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c6bc:	4b0b      	ldr	r3, [pc, #44]	; (800c6ec <prvAddNewTaskToReadyList+0xd0>)
 800c6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c2:	601a      	str	r2, [r3, #0]
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6cc:	bf00      	nop
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	20001bbc 	.word	0x20001bbc
 800c6d8:	20001abc 	.word	0x20001abc
 800c6dc:	20001bc8 	.word	0x20001bc8
 800c6e0:	20001bd8 	.word	0x20001bd8
 800c6e4:	20001bc4 	.word	0x20001bc4
 800c6e8:	20001ac0 	.word	0x20001ac0
 800c6ec:	e000ed04 	.word	0xe000ed04

0800c6f0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c6f8:	f000 fee8 	bl	800d4cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d102      	bne.n	800c708 <vTaskDelete+0x18>
 800c702:	4b38      	ldr	r3, [pc, #224]	; (800c7e4 <vTaskDelete+0xf4>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	e000      	b.n	800c70a <vTaskDelete+0x1a>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	3304      	adds	r3, #4
 800c710:	4618      	mov	r0, r3
 800c712:	f7ff fa20 	bl	800bb56 <uxListRemove>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d115      	bne.n	800c748 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c720:	4931      	ldr	r1, [pc, #196]	; (800c7e8 <vTaskDelete+0xf8>)
 800c722:	4613      	mov	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	440b      	add	r3, r1
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10a      	bne.n	800c748 <vTaskDelete+0x58>
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c736:	2201      	movs	r2, #1
 800c738:	fa02 f303 	lsl.w	r3, r2, r3
 800c73c:	43da      	mvns	r2, r3
 800c73e:	4b2b      	ldr	r3, [pc, #172]	; (800c7ec <vTaskDelete+0xfc>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4013      	ands	r3, r2
 800c744:	4a29      	ldr	r2, [pc, #164]	; (800c7ec <vTaskDelete+0xfc>)
 800c746:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d004      	beq.n	800c75a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3318      	adds	r3, #24
 800c754:	4618      	mov	r0, r3
 800c756:	f7ff f9fe 	bl	800bb56 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c75a:	4b25      	ldr	r3, [pc, #148]	; (800c7f0 <vTaskDelete+0x100>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	3301      	adds	r3, #1
 800c760:	4a23      	ldr	r2, [pc, #140]	; (800c7f0 <vTaskDelete+0x100>)
 800c762:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c764:	4b1f      	ldr	r3, [pc, #124]	; (800c7e4 <vTaskDelete+0xf4>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d10b      	bne.n	800c786 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3304      	adds	r3, #4
 800c772:	4619      	mov	r1, r3
 800c774:	481f      	ldr	r0, [pc, #124]	; (800c7f4 <vTaskDelete+0x104>)
 800c776:	f7ff f991 	bl	800ba9c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c77a:	4b1f      	ldr	r3, [pc, #124]	; (800c7f8 <vTaskDelete+0x108>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3301      	adds	r3, #1
 800c780:	4a1d      	ldr	r2, [pc, #116]	; (800c7f8 <vTaskDelete+0x108>)
 800c782:	6013      	str	r3, [r2, #0]
 800c784:	e009      	b.n	800c79a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c786:	4b1d      	ldr	r3, [pc, #116]	; (800c7fc <vTaskDelete+0x10c>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	4a1b      	ldr	r2, [pc, #108]	; (800c7fc <vTaskDelete+0x10c>)
 800c78e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f000 fc19 	bl	800cfc8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c796:	f000 fc45 	bl	800d024 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c79a:	f000 fec5 	bl	800d528 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c79e:	4b18      	ldr	r3, [pc, #96]	; (800c800 <vTaskDelete+0x110>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d01a      	beq.n	800c7dc <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800c7a6:	4b0f      	ldr	r3, [pc, #60]	; (800c7e4 <vTaskDelete+0xf4>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d115      	bne.n	800c7dc <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c7b0:	4b14      	ldr	r3, [pc, #80]	; (800c804 <vTaskDelete+0x114>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d009      	beq.n	800c7cc <vTaskDelete+0xdc>
 800c7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7bc:	f383 8811 	msr	BASEPRI, r3
 800c7c0:	f3bf 8f6f 	isb	sy
 800c7c4:	f3bf 8f4f 	dsb	sy
 800c7c8:	60bb      	str	r3, [r7, #8]
 800c7ca:	e7fe      	b.n	800c7ca <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800c7cc:	4b0e      	ldr	r3, [pc, #56]	; (800c808 <vTaskDelete+0x118>)
 800c7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d2:	601a      	str	r2, [r3, #0]
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c7dc:	bf00      	nop
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	20001abc 	.word	0x20001abc
 800c7e8:	20001ac0 	.word	0x20001ac0
 800c7ec:	20001bc4 	.word	0x20001bc4
 800c7f0:	20001bd8 	.word	0x20001bd8
 800c7f4:	20001b90 	.word	0x20001b90
 800c7f8:	20001ba4 	.word	0x20001ba4
 800c7fc:	20001bbc 	.word	0x20001bbc
 800c800:	20001bc8 	.word	0x20001bc8
 800c804:	20001be4 	.word	0x20001be4
 800c808:	e000ed04 	.word	0xe000ed04

0800c80c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d016      	beq.n	800c84c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c81e:	4b13      	ldr	r3, [pc, #76]	; (800c86c <vTaskDelay+0x60>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d009      	beq.n	800c83a <vTaskDelay+0x2e>
 800c826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82a:	f383 8811 	msr	BASEPRI, r3
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	60bb      	str	r3, [r7, #8]
 800c838:	e7fe      	b.n	800c838 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c83a:	f000 f879 	bl	800c930 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c83e:	2100      	movs	r1, #0
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fcb7 	bl	800d1b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c846:	f000 f881 	bl	800c94c <xTaskResumeAll>
 800c84a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d107      	bne.n	800c862 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c852:	4b07      	ldr	r3, [pc, #28]	; (800c870 <vTaskDelay+0x64>)
 800c854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c858:	601a      	str	r2, [r3, #0]
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c862:	bf00      	nop
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	20001be4 	.word	0x20001be4
 800c870:	e000ed04 	.word	0xe000ed04

0800c874 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08a      	sub	sp, #40	; 0x28
 800c878:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c87a:	2300      	movs	r3, #0
 800c87c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c87e:	2300      	movs	r3, #0
 800c880:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c882:	463a      	mov	r2, r7
 800c884:	1d39      	adds	r1, r7, #4
 800c886:	f107 0308 	add.w	r3, r7, #8
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7f4 fc9e 	bl	80011cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c890:	6839      	ldr	r1, [r7, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	9202      	str	r2, [sp, #8]
 800c898:	9301      	str	r3, [sp, #4]
 800c89a:	2300      	movs	r3, #0
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	2300      	movs	r3, #0
 800c8a0:	460a      	mov	r2, r1
 800c8a2:	491d      	ldr	r1, [pc, #116]	; (800c918 <vTaskStartScheduler+0xa4>)
 800c8a4:	481d      	ldr	r0, [pc, #116]	; (800c91c <vTaskStartScheduler+0xa8>)
 800c8a6:	f7ff fd9d 	bl	800c3e4 <xTaskCreateStatic>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	4b1c      	ldr	r3, [pc, #112]	; (800c920 <vTaskStartScheduler+0xac>)
 800c8ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c8b0:	4b1b      	ldr	r3, [pc, #108]	; (800c920 <vTaskStartScheduler+0xac>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	617b      	str	r3, [r7, #20]
 800c8bc:	e001      	b.n	800c8c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d115      	bne.n	800c8f4 <vTaskStartScheduler+0x80>
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c8da:	4b12      	ldr	r3, [pc, #72]	; (800c924 <vTaskStartScheduler+0xb0>)
 800c8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c8e2:	4b11      	ldr	r3, [pc, #68]	; (800c928 <vTaskStartScheduler+0xb4>)
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c8e8:	4b10      	ldr	r3, [pc, #64]	; (800c92c <vTaskStartScheduler+0xb8>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c8ee:	f000 fd4f 	bl	800d390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c8f2:	e00d      	b.n	800c910 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fa:	d109      	bne.n	800c910 <vTaskStartScheduler+0x9c>
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	e7fe      	b.n	800c90e <vTaskStartScheduler+0x9a>
}
 800c910:	bf00      	nop
 800c912:	3718      	adds	r7, #24
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	0800fd20 	.word	0x0800fd20
 800c91c:	0800cec1 	.word	0x0800cec1
 800c920:	20001be0 	.word	0x20001be0
 800c924:	20001bdc 	.word	0x20001bdc
 800c928:	20001bc8 	.word	0x20001bc8
 800c92c:	20001bc0 	.word	0x20001bc0

0800c930 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c930:	b480      	push	{r7}
 800c932:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c934:	4b04      	ldr	r3, [pc, #16]	; (800c948 <vTaskSuspendAll+0x18>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	3301      	adds	r3, #1
 800c93a:	4a03      	ldr	r2, [pc, #12]	; (800c948 <vTaskSuspendAll+0x18>)
 800c93c:	6013      	str	r3, [r2, #0]
}
 800c93e:	bf00      	nop
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	20001be4 	.word	0x20001be4

0800c94c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c952:	2300      	movs	r3, #0
 800c954:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c956:	2300      	movs	r3, #0
 800c958:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c95a:	4b41      	ldr	r3, [pc, #260]	; (800ca60 <xTaskResumeAll+0x114>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d109      	bne.n	800c976 <xTaskResumeAll+0x2a>
 800c962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c966:	f383 8811 	msr	BASEPRI, r3
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	603b      	str	r3, [r7, #0]
 800c974:	e7fe      	b.n	800c974 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c976:	f000 fda9 	bl	800d4cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c97a:	4b39      	ldr	r3, [pc, #228]	; (800ca60 <xTaskResumeAll+0x114>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	3b01      	subs	r3, #1
 800c980:	4a37      	ldr	r2, [pc, #220]	; (800ca60 <xTaskResumeAll+0x114>)
 800c982:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c984:	4b36      	ldr	r3, [pc, #216]	; (800ca60 <xTaskResumeAll+0x114>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d161      	bne.n	800ca50 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c98c:	4b35      	ldr	r3, [pc, #212]	; (800ca64 <xTaskResumeAll+0x118>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d05d      	beq.n	800ca50 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c994:	e02e      	b.n	800c9f4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c996:	4b34      	ldr	r3, [pc, #208]	; (800ca68 <xTaskResumeAll+0x11c>)
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	3318      	adds	r3, #24
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7ff f8d7 	bl	800bb56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7ff f8d2 	bl	800bb56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	409a      	lsls	r2, r3
 800c9ba:	4b2c      	ldr	r3, [pc, #176]	; (800ca6c <xTaskResumeAll+0x120>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	4a2a      	ldr	r2, [pc, #168]	; (800ca6c <xTaskResumeAll+0x120>)
 800c9c2:	6013      	str	r3, [r2, #0]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	4413      	add	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4a27      	ldr	r2, [pc, #156]	; (800ca70 <xTaskResumeAll+0x124>)
 800c9d2:	441a      	add	r2, r3
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4610      	mov	r0, r2
 800c9dc:	f7ff f85e 	bl	800ba9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e4:	4b23      	ldr	r3, [pc, #140]	; (800ca74 <xTaskResumeAll+0x128>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d302      	bcc.n	800c9f4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800c9ee:	4b22      	ldr	r3, [pc, #136]	; (800ca78 <xTaskResumeAll+0x12c>)
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9f4:	4b1c      	ldr	r3, [pc, #112]	; (800ca68 <xTaskResumeAll+0x11c>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1cc      	bne.n	800c996 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca02:	f000 fb0f 	bl	800d024 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ca06:	4b1d      	ldr	r3, [pc, #116]	; (800ca7c <xTaskResumeAll+0x130>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d010      	beq.n	800ca34 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca12:	f000 f837 	bl	800ca84 <xTaskIncrementTick>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800ca1c:	4b16      	ldr	r3, [pc, #88]	; (800ca78 <xTaskResumeAll+0x12c>)
 800ca1e:	2201      	movs	r2, #1
 800ca20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3b01      	subs	r3, #1
 800ca26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1f1      	bne.n	800ca12 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800ca2e:	4b13      	ldr	r3, [pc, #76]	; (800ca7c <xTaskResumeAll+0x130>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca34:	4b10      	ldr	r3, [pc, #64]	; (800ca78 <xTaskResumeAll+0x12c>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d009      	beq.n	800ca50 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca40:	4b0f      	ldr	r3, [pc, #60]	; (800ca80 <xTaskResumeAll+0x134>)
 800ca42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca50:	f000 fd6a 	bl	800d528 <vPortExitCritical>

	return xAlreadyYielded;
 800ca54:	68bb      	ldr	r3, [r7, #8]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	20001be4 	.word	0x20001be4
 800ca64:	20001bbc 	.word	0x20001bbc
 800ca68:	20001b7c 	.word	0x20001b7c
 800ca6c:	20001bc4 	.word	0x20001bc4
 800ca70:	20001ac0 	.word	0x20001ac0
 800ca74:	20001abc 	.word	0x20001abc
 800ca78:	20001bd0 	.word	0x20001bd0
 800ca7c:	20001bcc 	.word	0x20001bcc
 800ca80:	e000ed04 	.word	0xe000ed04

0800ca84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b086      	sub	sp, #24
 800ca88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca8e:	4b50      	ldr	r3, [pc, #320]	; (800cbd0 <xTaskIncrementTick+0x14c>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f040 808c 	bne.w	800cbb0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca98:	4b4e      	ldr	r3, [pc, #312]	; (800cbd4 <xTaskIncrementTick+0x150>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800caa0:	4a4c      	ldr	r2, [pc, #304]	; (800cbd4 <xTaskIncrementTick+0x150>)
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d11f      	bne.n	800caec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800caac:	4b4a      	ldr	r3, [pc, #296]	; (800cbd8 <xTaskIncrementTick+0x154>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d009      	beq.n	800caca <xTaskIncrementTick+0x46>
 800cab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	603b      	str	r3, [r7, #0]
 800cac8:	e7fe      	b.n	800cac8 <xTaskIncrementTick+0x44>
 800caca:	4b43      	ldr	r3, [pc, #268]	; (800cbd8 <xTaskIncrementTick+0x154>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	4b42      	ldr	r3, [pc, #264]	; (800cbdc <xTaskIncrementTick+0x158>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a40      	ldr	r2, [pc, #256]	; (800cbd8 <xTaskIncrementTick+0x154>)
 800cad6:	6013      	str	r3, [r2, #0]
 800cad8:	4a40      	ldr	r2, [pc, #256]	; (800cbdc <xTaskIncrementTick+0x158>)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6013      	str	r3, [r2, #0]
 800cade:	4b40      	ldr	r3, [pc, #256]	; (800cbe0 <xTaskIncrementTick+0x15c>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3301      	adds	r3, #1
 800cae4:	4a3e      	ldr	r2, [pc, #248]	; (800cbe0 <xTaskIncrementTick+0x15c>)
 800cae6:	6013      	str	r3, [r2, #0]
 800cae8:	f000 fa9c 	bl	800d024 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800caec:	4b3d      	ldr	r3, [pc, #244]	; (800cbe4 <xTaskIncrementTick+0x160>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d34d      	bcc.n	800cb92 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800caf6:	4b38      	ldr	r3, [pc, #224]	; (800cbd8 <xTaskIncrementTick+0x154>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d101      	bne.n	800cb04 <xTaskIncrementTick+0x80>
 800cb00:	2301      	movs	r3, #1
 800cb02:	e000      	b.n	800cb06 <xTaskIncrementTick+0x82>
 800cb04:	2300      	movs	r3, #0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d004      	beq.n	800cb14 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb0a:	4b36      	ldr	r3, [pc, #216]	; (800cbe4 <xTaskIncrementTick+0x160>)
 800cb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb10:	601a      	str	r2, [r3, #0]
					break;
 800cb12:	e03e      	b.n	800cb92 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cb14:	4b30      	ldr	r3, [pc, #192]	; (800cbd8 <xTaskIncrementTick+0x154>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d203      	bcs.n	800cb34 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb2c:	4a2d      	ldr	r2, [pc, #180]	; (800cbe4 <xTaskIncrementTick+0x160>)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6013      	str	r3, [r2, #0]
						break;
 800cb32:	e02e      	b.n	800cb92 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	3304      	adds	r3, #4
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7ff f80c 	bl	800bb56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d004      	beq.n	800cb50 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	3318      	adds	r3, #24
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7ff f803 	bl	800bb56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb54:	2201      	movs	r2, #1
 800cb56:	409a      	lsls	r2, r3
 800cb58:	4b23      	ldr	r3, [pc, #140]	; (800cbe8 <xTaskIncrementTick+0x164>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	4a22      	ldr	r2, [pc, #136]	; (800cbe8 <xTaskIncrementTick+0x164>)
 800cb60:	6013      	str	r3, [r2, #0]
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb66:	4613      	mov	r3, r2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4a1f      	ldr	r2, [pc, #124]	; (800cbec <xTaskIncrementTick+0x168>)
 800cb70:	441a      	add	r2, r3
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	3304      	adds	r3, #4
 800cb76:	4619      	mov	r1, r3
 800cb78:	4610      	mov	r0, r2
 800cb7a:	f7fe ff8f 	bl	800ba9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb82:	4b1b      	ldr	r3, [pc, #108]	; (800cbf0 <xTaskIncrementTick+0x16c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d3b4      	bcc.n	800caf6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb90:	e7b1      	b.n	800caf6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb92:	4b17      	ldr	r3, [pc, #92]	; (800cbf0 <xTaskIncrementTick+0x16c>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb98:	4914      	ldr	r1, [pc, #80]	; (800cbec <xTaskIncrementTick+0x168>)
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4413      	add	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	440b      	add	r3, r1
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d907      	bls.n	800cbba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	617b      	str	r3, [r7, #20]
 800cbae:	e004      	b.n	800cbba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cbb0:	4b10      	ldr	r3, [pc, #64]	; (800cbf4 <xTaskIncrementTick+0x170>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	4a0f      	ldr	r2, [pc, #60]	; (800cbf4 <xTaskIncrementTick+0x170>)
 800cbb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cbba:	4b0f      	ldr	r3, [pc, #60]	; (800cbf8 <xTaskIncrementTick+0x174>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d001      	beq.n	800cbc6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cbc6:	697b      	ldr	r3, [r7, #20]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3718      	adds	r7, #24
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	20001be4 	.word	0x20001be4
 800cbd4:	20001bc0 	.word	0x20001bc0
 800cbd8:	20001b74 	.word	0x20001b74
 800cbdc:	20001b78 	.word	0x20001b78
 800cbe0:	20001bd4 	.word	0x20001bd4
 800cbe4:	20001bdc 	.word	0x20001bdc
 800cbe8:	20001bc4 	.word	0x20001bc4
 800cbec:	20001ac0 	.word	0x20001ac0
 800cbf0:	20001abc 	.word	0x20001abc
 800cbf4:	20001bcc 	.word	0x20001bcc
 800cbf8:	20001bd0 	.word	0x20001bd0

0800cbfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc02:	4b26      	ldr	r3, [pc, #152]	; (800cc9c <vTaskSwitchContext+0xa0>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d003      	beq.n	800cc12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc0a:	4b25      	ldr	r3, [pc, #148]	; (800cca0 <vTaskSwitchContext+0xa4>)
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc10:	e03e      	b.n	800cc90 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800cc12:	4b23      	ldr	r3, [pc, #140]	; (800cca0 <vTaskSwitchContext+0xa4>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800cc18:	4b22      	ldr	r3, [pc, #136]	; (800cca4 <vTaskSwitchContext+0xa8>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	fab3 f383 	clz	r3, r3
 800cc24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cc26:	7afb      	ldrb	r3, [r7, #11]
 800cc28:	f1c3 031f 	rsb	r3, r3, #31
 800cc2c:	617b      	str	r3, [r7, #20]
 800cc2e:	491e      	ldr	r1, [pc, #120]	; (800cca8 <vTaskSwitchContext+0xac>)
 800cc30:	697a      	ldr	r2, [r7, #20]
 800cc32:	4613      	mov	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4413      	add	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	440b      	add	r3, r1
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d109      	bne.n	800cc56 <vTaskSwitchContext+0x5a>
	__asm volatile
 800cc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc46:	f383 8811 	msr	BASEPRI, r3
 800cc4a:	f3bf 8f6f 	isb	sy
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	607b      	str	r3, [r7, #4]
 800cc54:	e7fe      	b.n	800cc54 <vTaskSwitchContext+0x58>
 800cc56:	697a      	ldr	r2, [r7, #20]
 800cc58:	4613      	mov	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4a11      	ldr	r2, [pc, #68]	; (800cca8 <vTaskSwitchContext+0xac>)
 800cc62:	4413      	add	r3, r2
 800cc64:	613b      	str	r3, [r7, #16]
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	685a      	ldr	r2, [r3, #4]
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	605a      	str	r2, [r3, #4]
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	3308      	adds	r3, #8
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d104      	bne.n	800cc86 <vTaskSwitchContext+0x8a>
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	685a      	ldr	r2, [r3, #4]
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	605a      	str	r2, [r3, #4]
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	4a07      	ldr	r2, [pc, #28]	; (800ccac <vTaskSwitchContext+0xb0>)
 800cc8e:	6013      	str	r3, [r2, #0]
}
 800cc90:	bf00      	nop
 800cc92:	371c      	adds	r7, #28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	20001be4 	.word	0x20001be4
 800cca0:	20001bd0 	.word	0x20001bd0
 800cca4:	20001bc4 	.word	0x20001bc4
 800cca8:	20001ac0 	.word	0x20001ac0
 800ccac:	20001abc 	.word	0x20001abc

0800ccb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d109      	bne.n	800ccd4 <vTaskPlaceOnEventList+0x24>
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	60fb      	str	r3, [r7, #12]
 800ccd2:	e7fe      	b.n	800ccd2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccd4:	4b07      	ldr	r3, [pc, #28]	; (800ccf4 <vTaskPlaceOnEventList+0x44>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	3318      	adds	r3, #24
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7fe ff01 	bl	800bae4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cce2:	2101      	movs	r1, #1
 800cce4:	6838      	ldr	r0, [r7, #0]
 800cce6:	f000 fa65 	bl	800d1b4 <prvAddCurrentTaskToDelayedList>
}
 800ccea:	bf00      	nop
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20001abc 	.word	0x20001abc

0800ccf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b086      	sub	sp, #24
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d109      	bne.n	800cd22 <xTaskRemoveFromEventList+0x2a>
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	60fb      	str	r3, [r7, #12]
 800cd20:	e7fe      	b.n	800cd20 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	3318      	adds	r3, #24
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fe ff15 	bl	800bb56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd2c:	4b1d      	ldr	r3, [pc, #116]	; (800cda4 <xTaskRemoveFromEventList+0xac>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d11c      	bne.n	800cd6e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	3304      	adds	r3, #4
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fe ff0c 	bl	800bb56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd42:	2201      	movs	r2, #1
 800cd44:	409a      	lsls	r2, r3
 800cd46:	4b18      	ldr	r3, [pc, #96]	; (800cda8 <xTaskRemoveFromEventList+0xb0>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	4a16      	ldr	r2, [pc, #88]	; (800cda8 <xTaskRemoveFromEventList+0xb0>)
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd54:	4613      	mov	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4a13      	ldr	r2, [pc, #76]	; (800cdac <xTaskRemoveFromEventList+0xb4>)
 800cd5e:	441a      	add	r2, r3
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	3304      	adds	r3, #4
 800cd64:	4619      	mov	r1, r3
 800cd66:	4610      	mov	r0, r2
 800cd68:	f7fe fe98 	bl	800ba9c <vListInsertEnd>
 800cd6c:	e005      	b.n	800cd7a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	3318      	adds	r3, #24
 800cd72:	4619      	mov	r1, r3
 800cd74:	480e      	ldr	r0, [pc, #56]	; (800cdb0 <xTaskRemoveFromEventList+0xb8>)
 800cd76:	f7fe fe91 	bl	800ba9c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7e:	4b0d      	ldr	r3, [pc, #52]	; (800cdb4 <xTaskRemoveFromEventList+0xbc>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d905      	bls.n	800cd94 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd8c:	4b0a      	ldr	r3, [pc, #40]	; (800cdb8 <xTaskRemoveFromEventList+0xc0>)
 800cd8e:	2201      	movs	r2, #1
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	e001      	b.n	800cd98 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800cd94:	2300      	movs	r3, #0
 800cd96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800cd98:	697b      	ldr	r3, [r7, #20]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20001be4 	.word	0x20001be4
 800cda8:	20001bc4 	.word	0x20001bc4
 800cdac:	20001ac0 	.word	0x20001ac0
 800cdb0:	20001b7c 	.word	0x20001b7c
 800cdb4:	20001abc 	.word	0x20001abc
 800cdb8:	20001bd0 	.word	0x20001bd0

0800cdbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cdc4:	4b06      	ldr	r3, [pc, #24]	; (800cde0 <vTaskInternalSetTimeOutState+0x24>)
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cdcc:	4b05      	ldr	r3, [pc, #20]	; (800cde4 <vTaskInternalSetTimeOutState+0x28>)
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	605a      	str	r2, [r3, #4]
}
 800cdd4:	bf00      	nop
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr
 800cde0:	20001bd4 	.word	0x20001bd4
 800cde4:	20001bc0 	.word	0x20001bc0

0800cde8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d109      	bne.n	800ce0c <xTaskCheckForTimeOut+0x24>
 800cdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	613b      	str	r3, [r7, #16]
 800ce0a:	e7fe      	b.n	800ce0a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d109      	bne.n	800ce26 <xTaskCheckForTimeOut+0x3e>
 800ce12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	60fb      	str	r3, [r7, #12]
 800ce24:	e7fe      	b.n	800ce24 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ce26:	f000 fb51 	bl	800d4cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce2a:	4b1d      	ldr	r3, [pc, #116]	; (800cea0 <xTaskCheckForTimeOut+0xb8>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	69ba      	ldr	r2, [r7, #24]
 800ce36:	1ad3      	subs	r3, r2, r3
 800ce38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce42:	d102      	bne.n	800ce4a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce44:	2300      	movs	r3, #0
 800ce46:	61fb      	str	r3, [r7, #28]
 800ce48:	e023      	b.n	800ce92 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	4b15      	ldr	r3, [pc, #84]	; (800cea4 <xTaskCheckForTimeOut+0xbc>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d007      	beq.n	800ce66 <xTaskCheckForTimeOut+0x7e>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	69ba      	ldr	r2, [r7, #24]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d302      	bcc.n	800ce66 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ce60:	2301      	movs	r3, #1
 800ce62:	61fb      	str	r3, [r7, #28]
 800ce64:	e015      	b.n	800ce92 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	697a      	ldr	r2, [r7, #20]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d20b      	bcs.n	800ce88 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	1ad2      	subs	r2, r2, r3
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff ff9d 	bl	800cdbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce82:	2300      	movs	r3, #0
 800ce84:	61fb      	str	r3, [r7, #28]
 800ce86:	e004      	b.n	800ce92 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce92:	f000 fb49 	bl	800d528 <vPortExitCritical>

	return xReturn;
 800ce96:	69fb      	ldr	r3, [r7, #28]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3720      	adds	r7, #32
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	20001bc0 	.word	0x20001bc0
 800cea4:	20001bd4 	.word	0x20001bd4

0800cea8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cea8:	b480      	push	{r7}
 800ceaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ceac:	4b03      	ldr	r3, [pc, #12]	; (800cebc <vTaskMissedYield+0x14>)
 800ceae:	2201      	movs	r2, #1
 800ceb0:	601a      	str	r2, [r3, #0]
}
 800ceb2:	bf00      	nop
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	20001bd0 	.word	0x20001bd0

0800cec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cec8:	f000 f852 	bl	800cf70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cecc:	4b06      	ldr	r3, [pc, #24]	; (800cee8 <prvIdleTask+0x28>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d9f9      	bls.n	800cec8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ced4:	4b05      	ldr	r3, [pc, #20]	; (800ceec <prvIdleTask+0x2c>)
 800ced6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cee4:	e7f0      	b.n	800cec8 <prvIdleTask+0x8>
 800cee6:	bf00      	nop
 800cee8:	20001ac0 	.word	0x20001ac0
 800ceec:	e000ed04 	.word	0xe000ed04

0800cef0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cef6:	2300      	movs	r3, #0
 800cef8:	607b      	str	r3, [r7, #4]
 800cefa:	e00c      	b.n	800cf16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	4613      	mov	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4a12      	ldr	r2, [pc, #72]	; (800cf50 <prvInitialiseTaskLists+0x60>)
 800cf08:	4413      	add	r3, r2
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fe fd99 	bl	800ba42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3301      	adds	r3, #1
 800cf14:	607b      	str	r3, [r7, #4]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b06      	cmp	r3, #6
 800cf1a:	d9ef      	bls.n	800cefc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf1c:	480d      	ldr	r0, [pc, #52]	; (800cf54 <prvInitialiseTaskLists+0x64>)
 800cf1e:	f7fe fd90 	bl	800ba42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf22:	480d      	ldr	r0, [pc, #52]	; (800cf58 <prvInitialiseTaskLists+0x68>)
 800cf24:	f7fe fd8d 	bl	800ba42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf28:	480c      	ldr	r0, [pc, #48]	; (800cf5c <prvInitialiseTaskLists+0x6c>)
 800cf2a:	f7fe fd8a 	bl	800ba42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf2e:	480c      	ldr	r0, [pc, #48]	; (800cf60 <prvInitialiseTaskLists+0x70>)
 800cf30:	f7fe fd87 	bl	800ba42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf34:	480b      	ldr	r0, [pc, #44]	; (800cf64 <prvInitialiseTaskLists+0x74>)
 800cf36:	f7fe fd84 	bl	800ba42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf3a:	4b0b      	ldr	r3, [pc, #44]	; (800cf68 <prvInitialiseTaskLists+0x78>)
 800cf3c:	4a05      	ldr	r2, [pc, #20]	; (800cf54 <prvInitialiseTaskLists+0x64>)
 800cf3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf40:	4b0a      	ldr	r3, [pc, #40]	; (800cf6c <prvInitialiseTaskLists+0x7c>)
 800cf42:	4a05      	ldr	r2, [pc, #20]	; (800cf58 <prvInitialiseTaskLists+0x68>)
 800cf44:	601a      	str	r2, [r3, #0]
}
 800cf46:	bf00      	nop
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	20001ac0 	.word	0x20001ac0
 800cf54:	20001b4c 	.word	0x20001b4c
 800cf58:	20001b60 	.word	0x20001b60
 800cf5c:	20001b7c 	.word	0x20001b7c
 800cf60:	20001b90 	.word	0x20001b90
 800cf64:	20001ba8 	.word	0x20001ba8
 800cf68:	20001b74 	.word	0x20001b74
 800cf6c:	20001b78 	.word	0x20001b78

0800cf70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf76:	e019      	b.n	800cfac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf78:	f000 faa8 	bl	800d4cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800cf7c:	4b0f      	ldr	r3, [pc, #60]	; (800cfbc <prvCheckTasksWaitingTermination+0x4c>)
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	3304      	adds	r3, #4
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7fe fde4 	bl	800bb56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf8e:	4b0c      	ldr	r3, [pc, #48]	; (800cfc0 <prvCheckTasksWaitingTermination+0x50>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	3b01      	subs	r3, #1
 800cf94:	4a0a      	ldr	r2, [pc, #40]	; (800cfc0 <prvCheckTasksWaitingTermination+0x50>)
 800cf96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf98:	4b0a      	ldr	r3, [pc, #40]	; (800cfc4 <prvCheckTasksWaitingTermination+0x54>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	4a09      	ldr	r2, [pc, #36]	; (800cfc4 <prvCheckTasksWaitingTermination+0x54>)
 800cfa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cfa2:	f000 fac1 	bl	800d528 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f80e 	bl	800cfc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfac:	4b05      	ldr	r3, [pc, #20]	; (800cfc4 <prvCheckTasksWaitingTermination+0x54>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d1e1      	bne.n	800cf78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	20001b90 	.word	0x20001b90
 800cfc0:	20001bbc 	.word	0x20001bbc
 800cfc4:	20001ba4 	.word	0x20001ba4

0800cfc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d108      	bne.n	800cfec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f000 fc12 	bl	800d808 <vPortFree>
				vPortFree( pxTCB );
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 fc0f 	bl	800d808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cfea:	e017      	b.n	800d01c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d103      	bne.n	800cffe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fc06 	bl	800d808 <vPortFree>
	}
 800cffc:	e00e      	b.n	800d01c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d004:	2b02      	cmp	r3, #2
 800d006:	d009      	beq.n	800d01c <prvDeleteTCB+0x54>
 800d008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	60fb      	str	r3, [r7, #12]
 800d01a:	e7fe      	b.n	800d01a <prvDeleteTCB+0x52>
	}
 800d01c:	bf00      	nop
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d02a:	4b0f      	ldr	r3, [pc, #60]	; (800d068 <prvResetNextTaskUnblockTime+0x44>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d101      	bne.n	800d038 <prvResetNextTaskUnblockTime+0x14>
 800d034:	2301      	movs	r3, #1
 800d036:	e000      	b.n	800d03a <prvResetNextTaskUnblockTime+0x16>
 800d038:	2300      	movs	r3, #0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d004      	beq.n	800d048 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d03e:	4b0b      	ldr	r3, [pc, #44]	; (800d06c <prvResetNextTaskUnblockTime+0x48>)
 800d040:	f04f 32ff 	mov.w	r2, #4294967295
 800d044:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d046:	e008      	b.n	800d05a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d048:	4b07      	ldr	r3, [pc, #28]	; (800d068 <prvResetNextTaskUnblockTime+0x44>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	4a05      	ldr	r2, [pc, #20]	; (800d06c <prvResetNextTaskUnblockTime+0x48>)
 800d058:	6013      	str	r3, [r2, #0]
}
 800d05a:	bf00      	nop
 800d05c:	370c      	adds	r7, #12
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	20001b74 	.word	0x20001b74
 800d06c:	20001bdc 	.word	0x20001bdc

0800d070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d076:	4b0b      	ldr	r3, [pc, #44]	; (800d0a4 <xTaskGetSchedulerState+0x34>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d102      	bne.n	800d084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d07e:	2301      	movs	r3, #1
 800d080:	607b      	str	r3, [r7, #4]
 800d082:	e008      	b.n	800d096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d084:	4b08      	ldr	r3, [pc, #32]	; (800d0a8 <xTaskGetSchedulerState+0x38>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d102      	bne.n	800d092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d08c:	2302      	movs	r3, #2
 800d08e:	607b      	str	r3, [r7, #4]
 800d090:	e001      	b.n	800d096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d092:	2300      	movs	r3, #0
 800d094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d096:	687b      	ldr	r3, [r7, #4]
	}
 800d098:	4618      	mov	r0, r3
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	20001bc8 	.word	0x20001bc8
 800d0a8:	20001be4 	.word	0x20001be4

0800d0ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b086      	sub	sp, #24
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d06c      	beq.n	800d19c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d0c2:	4b39      	ldr	r3, [pc, #228]	; (800d1a8 <xTaskPriorityDisinherit+0xfc>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d009      	beq.n	800d0e0 <xTaskPriorityDisinherit+0x34>
 800d0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d0:	f383 8811 	msr	BASEPRI, r3
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	60fb      	str	r3, [r7, #12]
 800d0de:	e7fe      	b.n	800d0de <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d109      	bne.n	800d0fc <xTaskPriorityDisinherit+0x50>
 800d0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	60bb      	str	r3, [r7, #8]
 800d0fa:	e7fe      	b.n	800d0fa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d100:	1e5a      	subs	r2, r3, #1
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d10e:	429a      	cmp	r2, r3
 800d110:	d044      	beq.n	800d19c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d116:	2b00      	cmp	r3, #0
 800d118:	d140      	bne.n	800d19c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	3304      	adds	r3, #4
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fd19 	bl	800bb56 <uxListRemove>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d115      	bne.n	800d156 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d12e:	491f      	ldr	r1, [pc, #124]	; (800d1ac <xTaskPriorityDisinherit+0x100>)
 800d130:	4613      	mov	r3, r2
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	4413      	add	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	440b      	add	r3, r1
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d10a      	bne.n	800d156 <xTaskPriorityDisinherit+0xaa>
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d144:	2201      	movs	r2, #1
 800d146:	fa02 f303 	lsl.w	r3, r2, r3
 800d14a:	43da      	mvns	r2, r3
 800d14c:	4b18      	ldr	r3, [pc, #96]	; (800d1b0 <xTaskPriorityDisinherit+0x104>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4013      	ands	r3, r2
 800d152:	4a17      	ldr	r2, [pc, #92]	; (800d1b0 <xTaskPriorityDisinherit+0x104>)
 800d154:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d162:	f1c3 0207 	rsb	r2, r3, #7
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16e:	2201      	movs	r2, #1
 800d170:	409a      	lsls	r2, r3
 800d172:	4b0f      	ldr	r3, [pc, #60]	; (800d1b0 <xTaskPriorityDisinherit+0x104>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4313      	orrs	r3, r2
 800d178:	4a0d      	ldr	r2, [pc, #52]	; (800d1b0 <xTaskPriorityDisinherit+0x104>)
 800d17a:	6013      	str	r3, [r2, #0]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d180:	4613      	mov	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4413      	add	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4a08      	ldr	r2, [pc, #32]	; (800d1ac <xTaskPriorityDisinherit+0x100>)
 800d18a:	441a      	add	r2, r3
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	3304      	adds	r3, #4
 800d190:	4619      	mov	r1, r3
 800d192:	4610      	mov	r0, r2
 800d194:	f7fe fc82 	bl	800ba9c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d198:	2301      	movs	r3, #1
 800d19a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d19c:	697b      	ldr	r3, [r7, #20]
	}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3718      	adds	r7, #24
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	20001abc 	.word	0x20001abc
 800d1ac:	20001ac0 	.word	0x20001ac0
 800d1b0:	20001bc4 	.word	0x20001bc4

0800d1b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d1be:	4b29      	ldr	r3, [pc, #164]	; (800d264 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1c4:	4b28      	ldr	r3, [pc, #160]	; (800d268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fcc3 	bl	800bb56 <uxListRemove>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d10b      	bne.n	800d1ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d1d6:	4b24      	ldr	r3, [pc, #144]	; (800d268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1dc:	2201      	movs	r2, #1
 800d1de:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e2:	43da      	mvns	r2, r3
 800d1e4:	4b21      	ldr	r3, [pc, #132]	; (800d26c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	4a20      	ldr	r2, [pc, #128]	; (800d26c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d1ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f4:	d10a      	bne.n	800d20c <prvAddCurrentTaskToDelayedList+0x58>
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d007      	beq.n	800d20c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1fc:	4b1a      	ldr	r3, [pc, #104]	; (800d268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	3304      	adds	r3, #4
 800d202:	4619      	mov	r1, r3
 800d204:	481a      	ldr	r0, [pc, #104]	; (800d270 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d206:	f7fe fc49 	bl	800ba9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d20a:	e026      	b.n	800d25a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4413      	add	r3, r2
 800d212:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d214:	4b14      	ldr	r3, [pc, #80]	; (800d268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	429a      	cmp	r2, r3
 800d222:	d209      	bcs.n	800d238 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d224:	4b13      	ldr	r3, [pc, #76]	; (800d274 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	4b0f      	ldr	r3, [pc, #60]	; (800d268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	3304      	adds	r3, #4
 800d22e:	4619      	mov	r1, r3
 800d230:	4610      	mov	r0, r2
 800d232:	f7fe fc57 	bl	800bae4 <vListInsert>
}
 800d236:	e010      	b.n	800d25a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d238:	4b0f      	ldr	r3, [pc, #60]	; (800d278 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3304      	adds	r3, #4
 800d242:	4619      	mov	r1, r3
 800d244:	4610      	mov	r0, r2
 800d246:	f7fe fc4d 	bl	800bae4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d24a:	4b0c      	ldr	r3, [pc, #48]	; (800d27c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	68ba      	ldr	r2, [r7, #8]
 800d250:	429a      	cmp	r2, r3
 800d252:	d202      	bcs.n	800d25a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d254:	4a09      	ldr	r2, [pc, #36]	; (800d27c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	6013      	str	r3, [r2, #0]
}
 800d25a:	bf00      	nop
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	20001bc0 	.word	0x20001bc0
 800d268:	20001abc 	.word	0x20001abc
 800d26c:	20001bc4 	.word	0x20001bc4
 800d270:	20001ba8 	.word	0x20001ba8
 800d274:	20001b78 	.word	0x20001b78
 800d278:	20001b74 	.word	0x20001b74
 800d27c:	20001bdc 	.word	0x20001bdc

0800d280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	3b04      	subs	r3, #4
 800d290:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	3b04      	subs	r3, #4
 800d29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	f023 0201 	bic.w	r2, r3, #1
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	3b04      	subs	r3, #4
 800d2ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d2b0:	4a0c      	ldr	r2, [pc, #48]	; (800d2e4 <pxPortInitialiseStack+0x64>)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	3b14      	subs	r3, #20
 800d2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	3b04      	subs	r3, #4
 800d2c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f06f 0202 	mvn.w	r2, #2
 800d2ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	3b20      	subs	r3, #32
 800d2d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3714      	adds	r7, #20
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr
 800d2e4:	0800d2e9 	.word	0x0800d2e9

0800d2e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d2f2:	4b11      	ldr	r3, [pc, #68]	; (800d338 <prvTaskExitError+0x50>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fa:	d009      	beq.n	800d310 <prvTaskExitError+0x28>
 800d2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d300:	f383 8811 	msr	BASEPRI, r3
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	60fb      	str	r3, [r7, #12]
 800d30e:	e7fe      	b.n	800d30e <prvTaskExitError+0x26>
 800d310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d322:	bf00      	nop
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d0fc      	beq.n	800d324 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d32a:	bf00      	nop
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	20000010 	.word	0x20000010
 800d33c:	00000000 	.word	0x00000000

0800d340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d340:	4b07      	ldr	r3, [pc, #28]	; (800d360 <pxCurrentTCBConst2>)
 800d342:	6819      	ldr	r1, [r3, #0]
 800d344:	6808      	ldr	r0, [r1, #0]
 800d346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34a:	f380 8809 	msr	PSP, r0
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f04f 0000 	mov.w	r0, #0
 800d356:	f380 8811 	msr	BASEPRI, r0
 800d35a:	4770      	bx	lr
 800d35c:	f3af 8000 	nop.w

0800d360 <pxCurrentTCBConst2>:
 800d360:	20001abc 	.word	0x20001abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d364:	bf00      	nop
 800d366:	bf00      	nop

0800d368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d368:	4808      	ldr	r0, [pc, #32]	; (800d38c <prvPortStartFirstTask+0x24>)
 800d36a:	6800      	ldr	r0, [r0, #0]
 800d36c:	6800      	ldr	r0, [r0, #0]
 800d36e:	f380 8808 	msr	MSP, r0
 800d372:	f04f 0000 	mov.w	r0, #0
 800d376:	f380 8814 	msr	CONTROL, r0
 800d37a:	b662      	cpsie	i
 800d37c:	b661      	cpsie	f
 800d37e:	f3bf 8f4f 	dsb	sy
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	df00      	svc	0
 800d388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d38a:	bf00      	nop
 800d38c:	e000ed08 	.word	0xe000ed08

0800d390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d396:	4b44      	ldr	r3, [pc, #272]	; (800d4a8 <xPortStartScheduler+0x118>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a44      	ldr	r2, [pc, #272]	; (800d4ac <xPortStartScheduler+0x11c>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d109      	bne.n	800d3b4 <xPortStartScheduler+0x24>
 800d3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	613b      	str	r3, [r7, #16]
 800d3b2:	e7fe      	b.n	800d3b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d3b4:	4b3c      	ldr	r3, [pc, #240]	; (800d4a8 <xPortStartScheduler+0x118>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a3d      	ldr	r2, [pc, #244]	; (800d4b0 <xPortStartScheduler+0x120>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d109      	bne.n	800d3d2 <xPortStartScheduler+0x42>
 800d3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	e7fe      	b.n	800d3d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d3d2:	4b38      	ldr	r3, [pc, #224]	; (800d4b4 <xPortStartScheduler+0x124>)
 800d3d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	22ff      	movs	r2, #255	; 0xff
 800d3e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d3ec:	78fb      	ldrb	r3, [r7, #3]
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	4b30      	ldr	r3, [pc, #192]	; (800d4b8 <xPortStartScheduler+0x128>)
 800d3f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d3fa:	4b30      	ldr	r3, [pc, #192]	; (800d4bc <xPortStartScheduler+0x12c>)
 800d3fc:	2207      	movs	r2, #7
 800d3fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d400:	e009      	b.n	800d416 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d402:	4b2e      	ldr	r3, [pc, #184]	; (800d4bc <xPortStartScheduler+0x12c>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	3b01      	subs	r3, #1
 800d408:	4a2c      	ldr	r2, [pc, #176]	; (800d4bc <xPortStartScheduler+0x12c>)
 800d40a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d40c:	78fb      	ldrb	r3, [r7, #3]
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	b2db      	uxtb	r3, r3
 800d414:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d416:	78fb      	ldrb	r3, [r7, #3]
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d41e:	2b80      	cmp	r3, #128	; 0x80
 800d420:	d0ef      	beq.n	800d402 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d422:	4b26      	ldr	r3, [pc, #152]	; (800d4bc <xPortStartScheduler+0x12c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f1c3 0307 	rsb	r3, r3, #7
 800d42a:	2b04      	cmp	r3, #4
 800d42c:	d009      	beq.n	800d442 <xPortStartScheduler+0xb2>
 800d42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	60bb      	str	r3, [r7, #8]
 800d440:	e7fe      	b.n	800d440 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d442:	4b1e      	ldr	r3, [pc, #120]	; (800d4bc <xPortStartScheduler+0x12c>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	021b      	lsls	r3, r3, #8
 800d448:	4a1c      	ldr	r2, [pc, #112]	; (800d4bc <xPortStartScheduler+0x12c>)
 800d44a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d44c:	4b1b      	ldr	r3, [pc, #108]	; (800d4bc <xPortStartScheduler+0x12c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d454:	4a19      	ldr	r2, [pc, #100]	; (800d4bc <xPortStartScheduler+0x12c>)
 800d456:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d460:	4b17      	ldr	r3, [pc, #92]	; (800d4c0 <xPortStartScheduler+0x130>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a16      	ldr	r2, [pc, #88]	; (800d4c0 <xPortStartScheduler+0x130>)
 800d466:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d46a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d46c:	4b14      	ldr	r3, [pc, #80]	; (800d4c0 <xPortStartScheduler+0x130>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a13      	ldr	r2, [pc, #76]	; (800d4c0 <xPortStartScheduler+0x130>)
 800d472:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d476:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d478:	f000 f8d6 	bl	800d628 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d47c:	4b11      	ldr	r3, [pc, #68]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d47e:	2200      	movs	r2, #0
 800d480:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d482:	f000 f8f5 	bl	800d670 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d486:	4b10      	ldr	r3, [pc, #64]	; (800d4c8 <xPortStartScheduler+0x138>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a0f      	ldr	r2, [pc, #60]	; (800d4c8 <xPortStartScheduler+0x138>)
 800d48c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d490:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d492:	f7ff ff69 	bl	800d368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d496:	f7ff fbb1 	bl	800cbfc <vTaskSwitchContext>
	prvTaskExitError();
 800d49a:	f7ff ff25 	bl	800d2e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3718      	adds	r7, #24
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	e000ed00 	.word	0xe000ed00
 800d4ac:	410fc271 	.word	0x410fc271
 800d4b0:	410fc270 	.word	0x410fc270
 800d4b4:	e000e400 	.word	0xe000e400
 800d4b8:	20001be8 	.word	0x20001be8
 800d4bc:	20001bec 	.word	0x20001bec
 800d4c0:	e000ed20 	.word	0xe000ed20
 800d4c4:	20000010 	.word	0x20000010
 800d4c8:	e000ef34 	.word	0xe000ef34

0800d4cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d4e4:	4b0e      	ldr	r3, [pc, #56]	; (800d520 <vPortEnterCritical+0x54>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	4a0d      	ldr	r2, [pc, #52]	; (800d520 <vPortEnterCritical+0x54>)
 800d4ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d4ee:	4b0c      	ldr	r3, [pc, #48]	; (800d520 <vPortEnterCritical+0x54>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d10e      	bne.n	800d514 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4f6:	4b0b      	ldr	r3, [pc, #44]	; (800d524 <vPortEnterCritical+0x58>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d009      	beq.n	800d514 <vPortEnterCritical+0x48>
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	603b      	str	r3, [r7, #0]
 800d512:	e7fe      	b.n	800d512 <vPortEnterCritical+0x46>
	}
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	20000010 	.word	0x20000010
 800d524:	e000ed04 	.word	0xe000ed04

0800d528 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d52e:	4b11      	ldr	r3, [pc, #68]	; (800d574 <vPortExitCritical+0x4c>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d109      	bne.n	800d54a <vPortExitCritical+0x22>
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	607b      	str	r3, [r7, #4]
 800d548:	e7fe      	b.n	800d548 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d54a:	4b0a      	ldr	r3, [pc, #40]	; (800d574 <vPortExitCritical+0x4c>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	3b01      	subs	r3, #1
 800d550:	4a08      	ldr	r2, [pc, #32]	; (800d574 <vPortExitCritical+0x4c>)
 800d552:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d554:	4b07      	ldr	r3, [pc, #28]	; (800d574 <vPortExitCritical+0x4c>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d104      	bne.n	800d566 <vPortExitCritical+0x3e>
 800d55c:	2300      	movs	r3, #0
 800d55e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d566:	bf00      	nop
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	20000010 	.word	0x20000010
	...

0800d580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d580:	f3ef 8009 	mrs	r0, PSP
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	4b15      	ldr	r3, [pc, #84]	; (800d5e0 <pxCurrentTCBConst>)
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	f01e 0f10 	tst.w	lr, #16
 800d590:	bf08      	it	eq
 800d592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59a:	6010      	str	r0, [r2, #0]
 800d59c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d5a4:	f380 8811 	msr	BASEPRI, r0
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f7ff fb24 	bl	800cbfc <vTaskSwitchContext>
 800d5b4:	f04f 0000 	mov.w	r0, #0
 800d5b8:	f380 8811 	msr	BASEPRI, r0
 800d5bc:	bc09      	pop	{r0, r3}
 800d5be:	6819      	ldr	r1, [r3, #0]
 800d5c0:	6808      	ldr	r0, [r1, #0]
 800d5c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c6:	f01e 0f10 	tst.w	lr, #16
 800d5ca:	bf08      	it	eq
 800d5cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d5d0:	f380 8809 	msr	PSP, r0
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	f3af 8000 	nop.w

0800d5e0 <pxCurrentTCBConst>:
 800d5e0:	20001abc 	.word	0x20001abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d5e4:	bf00      	nop
 800d5e6:	bf00      	nop

0800d5e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
	__asm volatile
 800d5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f2:	f383 8811 	msr	BASEPRI, r3
 800d5f6:	f3bf 8f6f 	isb	sy
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d600:	f7ff fa40 	bl	800ca84 <xTaskIncrementTick>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d003      	beq.n	800d612 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d60a:	4b06      	ldr	r3, [pc, #24]	; (800d624 <SysTick_Handler+0x3c>)
 800d60c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d610:	601a      	str	r2, [r3, #0]
 800d612:	2300      	movs	r3, #0
 800d614:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d61c:	bf00      	nop
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	e000ed04 	.word	0xe000ed04

0800d628 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d628:	b480      	push	{r7}
 800d62a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d62c:	4b0b      	ldr	r3, [pc, #44]	; (800d65c <vPortSetupTimerInterrupt+0x34>)
 800d62e:	2200      	movs	r2, #0
 800d630:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d632:	4b0b      	ldr	r3, [pc, #44]	; (800d660 <vPortSetupTimerInterrupt+0x38>)
 800d634:	2200      	movs	r2, #0
 800d636:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d638:	4b0a      	ldr	r3, [pc, #40]	; (800d664 <vPortSetupTimerInterrupt+0x3c>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4a0a      	ldr	r2, [pc, #40]	; (800d668 <vPortSetupTimerInterrupt+0x40>)
 800d63e:	fba2 2303 	umull	r2, r3, r2, r3
 800d642:	099b      	lsrs	r3, r3, #6
 800d644:	4a09      	ldr	r2, [pc, #36]	; (800d66c <vPortSetupTimerInterrupt+0x44>)
 800d646:	3b01      	subs	r3, #1
 800d648:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d64a:	4b04      	ldr	r3, [pc, #16]	; (800d65c <vPortSetupTimerInterrupt+0x34>)
 800d64c:	2207      	movs	r2, #7
 800d64e:	601a      	str	r2, [r3, #0]
}
 800d650:	bf00      	nop
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	e000e010 	.word	0xe000e010
 800d660:	e000e018 	.word	0xe000e018
 800d664:	20000004 	.word	0x20000004
 800d668:	10624dd3 	.word	0x10624dd3
 800d66c:	e000e014 	.word	0xe000e014

0800d670 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d670:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d680 <vPortEnableVFP+0x10>
 800d674:	6801      	ldr	r1, [r0, #0]
 800d676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d67a:	6001      	str	r1, [r0, #0]
 800d67c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d67e:	bf00      	nop
 800d680:	e000ed88 	.word	0xe000ed88

0800d684 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08a      	sub	sp, #40	; 0x28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d68c:	2300      	movs	r3, #0
 800d68e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d690:	f7ff f94e 	bl	800c930 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d694:	4b57      	ldr	r3, [pc, #348]	; (800d7f4 <pvPortMalloc+0x170>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d101      	bne.n	800d6a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d69c:	f000 f90c 	bl	800d8b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6a0:	4b55      	ldr	r3, [pc, #340]	; (800d7f8 <pvPortMalloc+0x174>)
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f040 808c 	bne.w	800d7c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d01c      	beq.n	800d6ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800d6b4:	2208      	movs	r2, #8
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f003 0307 	and.w	r3, r3, #7
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d013      	beq.n	800d6ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f023 0307 	bic.w	r3, r3, #7
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f003 0307 	and.w	r3, r3, #7
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d009      	beq.n	800d6ee <pvPortMalloc+0x6a>
	__asm volatile
 800d6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6de:	f383 8811 	msr	BASEPRI, r3
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	617b      	str	r3, [r7, #20]
 800d6ec:	e7fe      	b.n	800d6ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d068      	beq.n	800d7c6 <pvPortMalloc+0x142>
 800d6f4:	4b41      	ldr	r3, [pc, #260]	; (800d7fc <pvPortMalloc+0x178>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d863      	bhi.n	800d7c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6fe:	4b40      	ldr	r3, [pc, #256]	; (800d800 <pvPortMalloc+0x17c>)
 800d700:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d702:	4b3f      	ldr	r3, [pc, #252]	; (800d800 <pvPortMalloc+0x17c>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d708:	e004      	b.n	800d714 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d903      	bls.n	800d726 <pvPortMalloc+0xa2>
 800d71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d1f1      	bne.n	800d70a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d726:	4b33      	ldr	r3, [pc, #204]	; (800d7f4 <pvPortMalloc+0x170>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d04a      	beq.n	800d7c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d730:	6a3b      	ldr	r3, [r7, #32]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2208      	movs	r2, #8
 800d736:	4413      	add	r3, r2
 800d738:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	1ad2      	subs	r2, r2, r3
 800d74a:	2308      	movs	r3, #8
 800d74c:	005b      	lsls	r3, r3, #1
 800d74e:	429a      	cmp	r2, r3
 800d750:	d91e      	bls.n	800d790 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4413      	add	r3, r2
 800d758:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	f003 0307 	and.w	r3, r3, #7
 800d760:	2b00      	cmp	r3, #0
 800d762:	d009      	beq.n	800d778 <pvPortMalloc+0xf4>
 800d764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	613b      	str	r3, [r7, #16]
 800d776:	e7fe      	b.n	800d776 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	1ad2      	subs	r2, r2, r3
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d78a:	69b8      	ldr	r0, [r7, #24]
 800d78c:	f000 f8f6 	bl	800d97c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d790:	4b1a      	ldr	r3, [pc, #104]	; (800d7fc <pvPortMalloc+0x178>)
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	4a18      	ldr	r2, [pc, #96]	; (800d7fc <pvPortMalloc+0x178>)
 800d79c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d79e:	4b17      	ldr	r3, [pc, #92]	; (800d7fc <pvPortMalloc+0x178>)
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	4b18      	ldr	r3, [pc, #96]	; (800d804 <pvPortMalloc+0x180>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d203      	bcs.n	800d7b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7aa:	4b14      	ldr	r3, [pc, #80]	; (800d7fc <pvPortMalloc+0x178>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a15      	ldr	r2, [pc, #84]	; (800d804 <pvPortMalloc+0x180>)
 800d7b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	685a      	ldr	r2, [r3, #4]
 800d7b6:	4b10      	ldr	r3, [pc, #64]	; (800d7f8 <pvPortMalloc+0x174>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7c6:	f7ff f8c1 	bl	800c94c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	f003 0307 	and.w	r3, r3, #7
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d009      	beq.n	800d7e8 <pvPortMalloc+0x164>
 800d7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d8:	f383 8811 	msr	BASEPRI, r3
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	60fb      	str	r3, [r7, #12]
 800d7e6:	e7fe      	b.n	800d7e6 <pvPortMalloc+0x162>
	return pvReturn;
 800d7e8:	69fb      	ldr	r3, [r7, #28]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3728      	adds	r7, #40	; 0x28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	20006a18 	.word	0x20006a18
 800d7f8:	20006a24 	.word	0x20006a24
 800d7fc:	20006a1c 	.word	0x20006a1c
 800d800:	20006a10 	.word	0x20006a10
 800d804:	20006a20 	.word	0x20006a20

0800d808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d046      	beq.n	800d8a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d81a:	2308      	movs	r3, #8
 800d81c:	425b      	negs	r3, r3
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	4413      	add	r3, r2
 800d822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	4b20      	ldr	r3, [pc, #128]	; (800d8b0 <vPortFree+0xa8>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4013      	ands	r3, r2
 800d832:	2b00      	cmp	r3, #0
 800d834:	d109      	bne.n	800d84a <vPortFree+0x42>
 800d836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83a:	f383 8811 	msr	BASEPRI, r3
 800d83e:	f3bf 8f6f 	isb	sy
 800d842:	f3bf 8f4f 	dsb	sy
 800d846:	60fb      	str	r3, [r7, #12]
 800d848:	e7fe      	b.n	800d848 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d009      	beq.n	800d866 <vPortFree+0x5e>
 800d852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d856:	f383 8811 	msr	BASEPRI, r3
 800d85a:	f3bf 8f6f 	isb	sy
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	60bb      	str	r3, [r7, #8]
 800d864:	e7fe      	b.n	800d864 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	4b11      	ldr	r3, [pc, #68]	; (800d8b0 <vPortFree+0xa8>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4013      	ands	r3, r2
 800d870:	2b00      	cmp	r3, #0
 800d872:	d019      	beq.n	800d8a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d115      	bne.n	800d8a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	685a      	ldr	r2, [r3, #4]
 800d880:	4b0b      	ldr	r3, [pc, #44]	; (800d8b0 <vPortFree+0xa8>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	43db      	mvns	r3, r3
 800d886:	401a      	ands	r2, r3
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d88c:	f7ff f850 	bl	800c930 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	685a      	ldr	r2, [r3, #4]
 800d894:	4b07      	ldr	r3, [pc, #28]	; (800d8b4 <vPortFree+0xac>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4413      	add	r3, r2
 800d89a:	4a06      	ldr	r2, [pc, #24]	; (800d8b4 <vPortFree+0xac>)
 800d89c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d89e:	6938      	ldr	r0, [r7, #16]
 800d8a0:	f000 f86c 	bl	800d97c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d8a4:	f7ff f852 	bl	800c94c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8a8:	bf00      	nop
 800d8aa:	3718      	adds	r7, #24
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20006a24 	.word	0x20006a24
 800d8b4:	20006a1c 	.word	0x20006a1c

0800d8b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8be:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d8c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8c4:	4b27      	ldr	r3, [pc, #156]	; (800d964 <prvHeapInit+0xac>)
 800d8c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f003 0307 	and.w	r3, r3, #7
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00c      	beq.n	800d8ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	3307      	adds	r3, #7
 800d8d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f023 0307 	bic.w	r3, r3, #7
 800d8de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	1ad3      	subs	r3, r2, r3
 800d8e6:	4a1f      	ldr	r2, [pc, #124]	; (800d964 <prvHeapInit+0xac>)
 800d8e8:	4413      	add	r3, r2
 800d8ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d8f0:	4a1d      	ldr	r2, [pc, #116]	; (800d968 <prvHeapInit+0xb0>)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d8f6:	4b1c      	ldr	r3, [pc, #112]	; (800d968 <prvHeapInit+0xb0>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	4413      	add	r3, r2
 800d902:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d904:	2208      	movs	r2, #8
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	1a9b      	subs	r3, r3, r2
 800d90a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f023 0307 	bic.w	r3, r3, #7
 800d912:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4a15      	ldr	r2, [pc, #84]	; (800d96c <prvHeapInit+0xb4>)
 800d918:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d91a:	4b14      	ldr	r3, [pc, #80]	; (800d96c <prvHeapInit+0xb4>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2200      	movs	r2, #0
 800d920:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d922:	4b12      	ldr	r3, [pc, #72]	; (800d96c <prvHeapInit+0xb4>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2200      	movs	r2, #0
 800d928:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	1ad2      	subs	r2, r2, r3
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d938:	4b0c      	ldr	r3, [pc, #48]	; (800d96c <prvHeapInit+0xb4>)
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	4a0a      	ldr	r2, [pc, #40]	; (800d970 <prvHeapInit+0xb8>)
 800d946:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	4a09      	ldr	r2, [pc, #36]	; (800d974 <prvHeapInit+0xbc>)
 800d94e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d950:	4b09      	ldr	r3, [pc, #36]	; (800d978 <prvHeapInit+0xc0>)
 800d952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d956:	601a      	str	r2, [r3, #0]
}
 800d958:	bf00      	nop
 800d95a:	3714      	adds	r7, #20
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	20001bf0 	.word	0x20001bf0
 800d968:	20006a10 	.word	0x20006a10
 800d96c:	20006a18 	.word	0x20006a18
 800d970:	20006a20 	.word	0x20006a20
 800d974:	20006a1c 	.word	0x20006a1c
 800d978:	20006a24 	.word	0x20006a24

0800d97c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d984:	4b28      	ldr	r3, [pc, #160]	; (800da28 <prvInsertBlockIntoFreeList+0xac>)
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	e002      	b.n	800d990 <prvInsertBlockIntoFreeList+0x14>
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	60fb      	str	r3, [r7, #12]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	429a      	cmp	r2, r3
 800d998:	d8f7      	bhi.n	800d98a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	68ba      	ldr	r2, [r7, #8]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d108      	bne.n	800d9be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	685a      	ldr	r2, [r3, #4]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	441a      	add	r2, r3
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	68ba      	ldr	r2, [r7, #8]
 800d9c8:	441a      	add	r2, r3
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d118      	bne.n	800da04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	4b15      	ldr	r3, [pc, #84]	; (800da2c <prvInsertBlockIntoFreeList+0xb0>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d00d      	beq.n	800d9fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	685a      	ldr	r2, [r3, #4]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	441a      	add	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	601a      	str	r2, [r3, #0]
 800d9f8:	e008      	b.n	800da0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d9fa:	4b0c      	ldr	r3, [pc, #48]	; (800da2c <prvInsertBlockIntoFreeList+0xb0>)
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	e003      	b.n	800da0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	429a      	cmp	r2, r3
 800da12:	d002      	beq.n	800da1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da1a:	bf00      	nop
 800da1c:	3714      	adds	r7, #20
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	20006a10 	.word	0x20006a10
 800da2c:	20006a18 	.word	0x20006a18

0800da30 <__errno>:
 800da30:	4b01      	ldr	r3, [pc, #4]	; (800da38 <__errno+0x8>)
 800da32:	6818      	ldr	r0, [r3, #0]
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	20000014 	.word	0x20000014

0800da3c <__libc_init_array>:
 800da3c:	b570      	push	{r4, r5, r6, lr}
 800da3e:	4e0d      	ldr	r6, [pc, #52]	; (800da74 <__libc_init_array+0x38>)
 800da40:	4c0d      	ldr	r4, [pc, #52]	; (800da78 <__libc_init_array+0x3c>)
 800da42:	1ba4      	subs	r4, r4, r6
 800da44:	10a4      	asrs	r4, r4, #2
 800da46:	2500      	movs	r5, #0
 800da48:	42a5      	cmp	r5, r4
 800da4a:	d109      	bne.n	800da60 <__libc_init_array+0x24>
 800da4c:	4e0b      	ldr	r6, [pc, #44]	; (800da7c <__libc_init_array+0x40>)
 800da4e:	4c0c      	ldr	r4, [pc, #48]	; (800da80 <__libc_init_array+0x44>)
 800da50:	f002 f860 	bl	800fb14 <_init>
 800da54:	1ba4      	subs	r4, r4, r6
 800da56:	10a4      	asrs	r4, r4, #2
 800da58:	2500      	movs	r5, #0
 800da5a:	42a5      	cmp	r5, r4
 800da5c:	d105      	bne.n	800da6a <__libc_init_array+0x2e>
 800da5e:	bd70      	pop	{r4, r5, r6, pc}
 800da60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da64:	4798      	blx	r3
 800da66:	3501      	adds	r5, #1
 800da68:	e7ee      	b.n	800da48 <__libc_init_array+0xc>
 800da6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da6e:	4798      	blx	r3
 800da70:	3501      	adds	r5, #1
 800da72:	e7f2      	b.n	800da5a <__libc_init_array+0x1e>
 800da74:	08015180 	.word	0x08015180
 800da78:	08015180 	.word	0x08015180
 800da7c:	08015180 	.word	0x08015180
 800da80:	08015184 	.word	0x08015184

0800da84 <__itoa>:
 800da84:	1e93      	subs	r3, r2, #2
 800da86:	2b22      	cmp	r3, #34	; 0x22
 800da88:	b510      	push	{r4, lr}
 800da8a:	460c      	mov	r4, r1
 800da8c:	d904      	bls.n	800da98 <__itoa+0x14>
 800da8e:	2300      	movs	r3, #0
 800da90:	700b      	strb	r3, [r1, #0]
 800da92:	461c      	mov	r4, r3
 800da94:	4620      	mov	r0, r4
 800da96:	bd10      	pop	{r4, pc}
 800da98:	2a0a      	cmp	r2, #10
 800da9a:	d109      	bne.n	800dab0 <__itoa+0x2c>
 800da9c:	2800      	cmp	r0, #0
 800da9e:	da07      	bge.n	800dab0 <__itoa+0x2c>
 800daa0:	232d      	movs	r3, #45	; 0x2d
 800daa2:	700b      	strb	r3, [r1, #0]
 800daa4:	4240      	negs	r0, r0
 800daa6:	2101      	movs	r1, #1
 800daa8:	4421      	add	r1, r4
 800daaa:	f000 f819 	bl	800dae0 <__utoa>
 800daae:	e7f1      	b.n	800da94 <__itoa+0x10>
 800dab0:	2100      	movs	r1, #0
 800dab2:	e7f9      	b.n	800daa8 <__itoa+0x24>

0800dab4 <itoa>:
 800dab4:	f7ff bfe6 	b.w	800da84 <__itoa>

0800dab8 <memcpy>:
 800dab8:	b510      	push	{r4, lr}
 800daba:	1e43      	subs	r3, r0, #1
 800dabc:	440a      	add	r2, r1
 800dabe:	4291      	cmp	r1, r2
 800dac0:	d100      	bne.n	800dac4 <memcpy+0xc>
 800dac2:	bd10      	pop	{r4, pc}
 800dac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dacc:	e7f7      	b.n	800dabe <memcpy+0x6>

0800dace <memset>:
 800dace:	4402      	add	r2, r0
 800dad0:	4603      	mov	r3, r0
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d100      	bne.n	800dad8 <memset+0xa>
 800dad6:	4770      	bx	lr
 800dad8:	f803 1b01 	strb.w	r1, [r3], #1
 800dadc:	e7f9      	b.n	800dad2 <memset+0x4>
	...

0800dae0 <__utoa>:
 800dae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dae2:	4b1d      	ldr	r3, [pc, #116]	; (800db58 <__utoa+0x78>)
 800dae4:	b08b      	sub	sp, #44	; 0x2c
 800dae6:	4605      	mov	r5, r0
 800dae8:	460c      	mov	r4, r1
 800daea:	466e      	mov	r6, sp
 800daec:	f103 0c20 	add.w	ip, r3, #32
 800daf0:	6818      	ldr	r0, [r3, #0]
 800daf2:	6859      	ldr	r1, [r3, #4]
 800daf4:	4637      	mov	r7, r6
 800daf6:	c703      	stmia	r7!, {r0, r1}
 800daf8:	3308      	adds	r3, #8
 800dafa:	4563      	cmp	r3, ip
 800dafc:	463e      	mov	r6, r7
 800dafe:	d1f7      	bne.n	800daf0 <__utoa+0x10>
 800db00:	6818      	ldr	r0, [r3, #0]
 800db02:	791b      	ldrb	r3, [r3, #4]
 800db04:	713b      	strb	r3, [r7, #4]
 800db06:	1e93      	subs	r3, r2, #2
 800db08:	2b22      	cmp	r3, #34	; 0x22
 800db0a:	6038      	str	r0, [r7, #0]
 800db0c:	f04f 0300 	mov.w	r3, #0
 800db10:	d904      	bls.n	800db1c <__utoa+0x3c>
 800db12:	7023      	strb	r3, [r4, #0]
 800db14:	461c      	mov	r4, r3
 800db16:	4620      	mov	r0, r4
 800db18:	b00b      	add	sp, #44	; 0x2c
 800db1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db1c:	1e66      	subs	r6, r4, #1
 800db1e:	fbb5 f0f2 	udiv	r0, r5, r2
 800db22:	af0a      	add	r7, sp, #40	; 0x28
 800db24:	fb02 5510 	mls	r5, r2, r0, r5
 800db28:	443d      	add	r5, r7
 800db2a:	1c59      	adds	r1, r3, #1
 800db2c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800db30:	f806 5f01 	strb.w	r5, [r6, #1]!
 800db34:	4605      	mov	r5, r0
 800db36:	b968      	cbnz	r0, 800db54 <__utoa+0x74>
 800db38:	5460      	strb	r0, [r4, r1]
 800db3a:	4423      	add	r3, r4
 800db3c:	4622      	mov	r2, r4
 800db3e:	1b19      	subs	r1, r3, r4
 800db40:	1b10      	subs	r0, r2, r4
 800db42:	4281      	cmp	r1, r0
 800db44:	dde7      	ble.n	800db16 <__utoa+0x36>
 800db46:	7811      	ldrb	r1, [r2, #0]
 800db48:	7818      	ldrb	r0, [r3, #0]
 800db4a:	f802 0b01 	strb.w	r0, [r2], #1
 800db4e:	f803 1901 	strb.w	r1, [r3], #-1
 800db52:	e7f4      	b.n	800db3e <__utoa+0x5e>
 800db54:	460b      	mov	r3, r1
 800db56:	e7e2      	b.n	800db1e <__utoa+0x3e>
 800db58:	08014ed3 	.word	0x08014ed3
 800db5c:	00000000 	.word	0x00000000

0800db60 <sin>:
 800db60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db62:	ec51 0b10 	vmov	r0, r1, d0
 800db66:	4a20      	ldr	r2, [pc, #128]	; (800dbe8 <sin+0x88>)
 800db68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db6c:	4293      	cmp	r3, r2
 800db6e:	dc07      	bgt.n	800db80 <sin+0x20>
 800db70:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800dbe0 <sin+0x80>
 800db74:	2000      	movs	r0, #0
 800db76:	f001 fd67 	bl	800f648 <__kernel_sin>
 800db7a:	ec51 0b10 	vmov	r0, r1, d0
 800db7e:	e007      	b.n	800db90 <sin+0x30>
 800db80:	4a1a      	ldr	r2, [pc, #104]	; (800dbec <sin+0x8c>)
 800db82:	4293      	cmp	r3, r2
 800db84:	dd09      	ble.n	800db9a <sin+0x3a>
 800db86:	ee10 2a10 	vmov	r2, s0
 800db8a:	460b      	mov	r3, r1
 800db8c:	f7f2 fb2c 	bl	80001e8 <__aeabi_dsub>
 800db90:	ec41 0b10 	vmov	d0, r0, r1
 800db94:	b005      	add	sp, #20
 800db96:	f85d fb04 	ldr.w	pc, [sp], #4
 800db9a:	4668      	mov	r0, sp
 800db9c:	f000 fea8 	bl	800e8f0 <__ieee754_rem_pio2>
 800dba0:	f000 0003 	and.w	r0, r0, #3
 800dba4:	2801      	cmp	r0, #1
 800dba6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dbaa:	ed9d 0b00 	vldr	d0, [sp]
 800dbae:	d004      	beq.n	800dbba <sin+0x5a>
 800dbb0:	2802      	cmp	r0, #2
 800dbb2:	d005      	beq.n	800dbc0 <sin+0x60>
 800dbb4:	b970      	cbnz	r0, 800dbd4 <sin+0x74>
 800dbb6:	2001      	movs	r0, #1
 800dbb8:	e7dd      	b.n	800db76 <sin+0x16>
 800dbba:	f001 f93d 	bl	800ee38 <__kernel_cos>
 800dbbe:	e7dc      	b.n	800db7a <sin+0x1a>
 800dbc0:	2001      	movs	r0, #1
 800dbc2:	f001 fd41 	bl	800f648 <__kernel_sin>
 800dbc6:	ec53 2b10 	vmov	r2, r3, d0
 800dbca:	ee10 0a10 	vmov	r0, s0
 800dbce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dbd2:	e7dd      	b.n	800db90 <sin+0x30>
 800dbd4:	f001 f930 	bl	800ee38 <__kernel_cos>
 800dbd8:	e7f5      	b.n	800dbc6 <sin+0x66>
 800dbda:	bf00      	nop
 800dbdc:	f3af 8000 	nop.w
	...
 800dbe8:	3fe921fb 	.word	0x3fe921fb
 800dbec:	7fefffff 	.word	0x7fefffff

0800dbf0 <pow>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	ed2d 8b04 	vpush	{d8-d9}
 800dbf8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800decc <pow+0x2dc>
 800dbfc:	b08d      	sub	sp, #52	; 0x34
 800dbfe:	ec57 6b10 	vmov	r6, r7, d0
 800dc02:	ec55 4b11 	vmov	r4, r5, d1
 800dc06:	f000 f963 	bl	800ded0 <__ieee754_pow>
 800dc0a:	f999 3000 	ldrsb.w	r3, [r9]
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	3301      	adds	r3, #1
 800dc12:	eeb0 8a40 	vmov.f32	s16, s0
 800dc16:	eef0 8a60 	vmov.f32	s17, s1
 800dc1a:	46c8      	mov	r8, r9
 800dc1c:	d05f      	beq.n	800dcde <pow+0xee>
 800dc1e:	4622      	mov	r2, r4
 800dc20:	462b      	mov	r3, r5
 800dc22:	4620      	mov	r0, r4
 800dc24:	4629      	mov	r1, r5
 800dc26:	f7f2 ff31 	bl	8000a8c <__aeabi_dcmpun>
 800dc2a:	4683      	mov	fp, r0
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d156      	bne.n	800dcde <pow+0xee>
 800dc30:	4632      	mov	r2, r6
 800dc32:	463b      	mov	r3, r7
 800dc34:	4630      	mov	r0, r6
 800dc36:	4639      	mov	r1, r7
 800dc38:	f7f2 ff28 	bl	8000a8c <__aeabi_dcmpun>
 800dc3c:	9001      	str	r0, [sp, #4]
 800dc3e:	b1e8      	cbz	r0, 800dc7c <pow+0x8c>
 800dc40:	2200      	movs	r2, #0
 800dc42:	2300      	movs	r3, #0
 800dc44:	4620      	mov	r0, r4
 800dc46:	4629      	mov	r1, r5
 800dc48:	f7f2 feee 	bl	8000a28 <__aeabi_dcmpeq>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	d046      	beq.n	800dcde <pow+0xee>
 800dc50:	2301      	movs	r3, #1
 800dc52:	9302      	str	r3, [sp, #8]
 800dc54:	4b96      	ldr	r3, [pc, #600]	; (800deb0 <pow+0x2c0>)
 800dc56:	9303      	str	r3, [sp, #12]
 800dc58:	4b96      	ldr	r3, [pc, #600]	; (800deb4 <pow+0x2c4>)
 800dc5a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800dc5e:	2200      	movs	r2, #0
 800dc60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc64:	9b00      	ldr	r3, [sp, #0]
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dc6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dc70:	d033      	beq.n	800dcda <pow+0xea>
 800dc72:	a802      	add	r0, sp, #8
 800dc74:	f001 fe38 	bl	800f8e8 <matherr>
 800dc78:	bb48      	cbnz	r0, 800dcce <pow+0xde>
 800dc7a:	e05d      	b.n	800dd38 <pow+0x148>
 800dc7c:	f04f 0a00 	mov.w	sl, #0
 800dc80:	f04f 0b00 	mov.w	fp, #0
 800dc84:	4652      	mov	r2, sl
 800dc86:	465b      	mov	r3, fp
 800dc88:	4630      	mov	r0, r6
 800dc8a:	4639      	mov	r1, r7
 800dc8c:	f7f2 fecc 	bl	8000a28 <__aeabi_dcmpeq>
 800dc90:	ec4b ab19 	vmov	d9, sl, fp
 800dc94:	2800      	cmp	r0, #0
 800dc96:	d054      	beq.n	800dd42 <pow+0x152>
 800dc98:	4652      	mov	r2, sl
 800dc9a:	465b      	mov	r3, fp
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	4629      	mov	r1, r5
 800dca0:	f7f2 fec2 	bl	8000a28 <__aeabi_dcmpeq>
 800dca4:	4680      	mov	r8, r0
 800dca6:	b318      	cbz	r0, 800dcf0 <pow+0x100>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	9302      	str	r3, [sp, #8]
 800dcac:	4b80      	ldr	r3, [pc, #512]	; (800deb0 <pow+0x2c0>)
 800dcae:	9303      	str	r3, [sp, #12]
 800dcb0:	9b01      	ldr	r3, [sp, #4]
 800dcb2:	930a      	str	r3, [sp, #40]	; 0x28
 800dcb4:	9b00      	ldr	r3, [sp, #0]
 800dcb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dcba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dcbe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d0d5      	beq.n	800dc72 <pow+0x82>
 800dcc6:	4b7b      	ldr	r3, [pc, #492]	; (800deb4 <pow+0x2c4>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dcce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcd0:	b11b      	cbz	r3, 800dcda <pow+0xea>
 800dcd2:	f7ff fead 	bl	800da30 <__errno>
 800dcd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcd8:	6003      	str	r3, [r0, #0]
 800dcda:	ed9d 8b08 	vldr	d8, [sp, #32]
 800dcde:	eeb0 0a48 	vmov.f32	s0, s16
 800dce2:	eef0 0a68 	vmov.f32	s1, s17
 800dce6:	b00d      	add	sp, #52	; 0x34
 800dce8:	ecbd 8b04 	vpop	{d8-d9}
 800dcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf0:	ec45 4b10 	vmov	d0, r4, r5
 800dcf4:	f001 fd6b 	bl	800f7ce <finite>
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	d0f0      	beq.n	800dcde <pow+0xee>
 800dcfc:	4652      	mov	r2, sl
 800dcfe:	465b      	mov	r3, fp
 800dd00:	4620      	mov	r0, r4
 800dd02:	4629      	mov	r1, r5
 800dd04:	f7f2 fe9a 	bl	8000a3c <__aeabi_dcmplt>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d0e8      	beq.n	800dcde <pow+0xee>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	9302      	str	r3, [sp, #8]
 800dd10:	4b67      	ldr	r3, [pc, #412]	; (800deb0 <pow+0x2c0>)
 800dd12:	9303      	str	r3, [sp, #12]
 800dd14:	f999 3000 	ldrsb.w	r3, [r9]
 800dd18:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800dd1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dd20:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dd24:	b913      	cbnz	r3, 800dd2c <pow+0x13c>
 800dd26:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800dd2a:	e7a2      	b.n	800dc72 <pow+0x82>
 800dd2c:	4962      	ldr	r1, [pc, #392]	; (800deb8 <pow+0x2c8>)
 800dd2e:	2000      	movs	r0, #0
 800dd30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d19c      	bne.n	800dc72 <pow+0x82>
 800dd38:	f7ff fe7a 	bl	800da30 <__errno>
 800dd3c:	2321      	movs	r3, #33	; 0x21
 800dd3e:	6003      	str	r3, [r0, #0]
 800dd40:	e7c5      	b.n	800dcce <pow+0xde>
 800dd42:	eeb0 0a48 	vmov.f32	s0, s16
 800dd46:	eef0 0a68 	vmov.f32	s1, s17
 800dd4a:	f001 fd40 	bl	800f7ce <finite>
 800dd4e:	9000      	str	r0, [sp, #0]
 800dd50:	2800      	cmp	r0, #0
 800dd52:	f040 8081 	bne.w	800de58 <pow+0x268>
 800dd56:	ec47 6b10 	vmov	d0, r6, r7
 800dd5a:	f001 fd38 	bl	800f7ce <finite>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d07a      	beq.n	800de58 <pow+0x268>
 800dd62:	ec45 4b10 	vmov	d0, r4, r5
 800dd66:	f001 fd32 	bl	800f7ce <finite>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d074      	beq.n	800de58 <pow+0x268>
 800dd6e:	ec53 2b18 	vmov	r2, r3, d8
 800dd72:	ee18 0a10 	vmov	r0, s16
 800dd76:	4619      	mov	r1, r3
 800dd78:	f7f2 fe88 	bl	8000a8c <__aeabi_dcmpun>
 800dd7c:	f999 9000 	ldrsb.w	r9, [r9]
 800dd80:	4b4b      	ldr	r3, [pc, #300]	; (800deb0 <pow+0x2c0>)
 800dd82:	b1b0      	cbz	r0, 800ddb2 <pow+0x1c2>
 800dd84:	2201      	movs	r2, #1
 800dd86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dd8a:	9b00      	ldr	r3, [sp, #0]
 800dd8c:	930a      	str	r3, [sp, #40]	; 0x28
 800dd8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dd92:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dd96:	f1b9 0f00 	cmp.w	r9, #0
 800dd9a:	d0c4      	beq.n	800dd26 <pow+0x136>
 800dd9c:	4652      	mov	r2, sl
 800dd9e:	465b      	mov	r3, fp
 800dda0:	4650      	mov	r0, sl
 800dda2:	4659      	mov	r1, fp
 800dda4:	f7f2 fd02 	bl	80007ac <__aeabi_ddiv>
 800dda8:	f1b9 0f02 	cmp.w	r9, #2
 800ddac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ddb0:	e7c1      	b.n	800dd36 <pow+0x146>
 800ddb2:	2203      	movs	r2, #3
 800ddb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ddb8:	900a      	str	r0, [sp, #40]	; 0x28
 800ddba:	4629      	mov	r1, r5
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4b3e      	ldr	r3, [pc, #248]	; (800debc <pow+0x2cc>)
 800ddc2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ddc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ddca:	f7f2 fbc5 	bl	8000558 <__aeabi_dmul>
 800ddce:	4604      	mov	r4, r0
 800ddd0:	460d      	mov	r5, r1
 800ddd2:	f1b9 0f00 	cmp.w	r9, #0
 800ddd6:	d124      	bne.n	800de22 <pow+0x232>
 800ddd8:	4b39      	ldr	r3, [pc, #228]	; (800dec0 <pow+0x2d0>)
 800ddda:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ddde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dde2:	4630      	mov	r0, r6
 800dde4:	4652      	mov	r2, sl
 800dde6:	465b      	mov	r3, fp
 800dde8:	4639      	mov	r1, r7
 800ddea:	f7f2 fe27 	bl	8000a3c <__aeabi_dcmplt>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d056      	beq.n	800dea0 <pow+0x2b0>
 800ddf2:	ec45 4b10 	vmov	d0, r4, r5
 800ddf6:	f001 fd83 	bl	800f900 <rint>
 800ddfa:	4622      	mov	r2, r4
 800ddfc:	462b      	mov	r3, r5
 800ddfe:	ec51 0b10 	vmov	r0, r1, d0
 800de02:	f7f2 fe11 	bl	8000a28 <__aeabi_dcmpeq>
 800de06:	b920      	cbnz	r0, 800de12 <pow+0x222>
 800de08:	4b2e      	ldr	r3, [pc, #184]	; (800dec4 <pow+0x2d4>)
 800de0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800de0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de12:	f998 3000 	ldrsb.w	r3, [r8]
 800de16:	2b02      	cmp	r3, #2
 800de18:	d142      	bne.n	800dea0 <pow+0x2b0>
 800de1a:	f7ff fe09 	bl	800da30 <__errno>
 800de1e:	2322      	movs	r3, #34	; 0x22
 800de20:	e78d      	b.n	800dd3e <pow+0x14e>
 800de22:	4b29      	ldr	r3, [pc, #164]	; (800dec8 <pow+0x2d8>)
 800de24:	2200      	movs	r2, #0
 800de26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de2a:	4630      	mov	r0, r6
 800de2c:	4652      	mov	r2, sl
 800de2e:	465b      	mov	r3, fp
 800de30:	4639      	mov	r1, r7
 800de32:	f7f2 fe03 	bl	8000a3c <__aeabi_dcmplt>
 800de36:	2800      	cmp	r0, #0
 800de38:	d0eb      	beq.n	800de12 <pow+0x222>
 800de3a:	ec45 4b10 	vmov	d0, r4, r5
 800de3e:	f001 fd5f 	bl	800f900 <rint>
 800de42:	4622      	mov	r2, r4
 800de44:	462b      	mov	r3, r5
 800de46:	ec51 0b10 	vmov	r0, r1, d0
 800de4a:	f7f2 fded 	bl	8000a28 <__aeabi_dcmpeq>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d1df      	bne.n	800de12 <pow+0x222>
 800de52:	2200      	movs	r2, #0
 800de54:	4b18      	ldr	r3, [pc, #96]	; (800deb8 <pow+0x2c8>)
 800de56:	e7da      	b.n	800de0e <pow+0x21e>
 800de58:	2200      	movs	r2, #0
 800de5a:	2300      	movs	r3, #0
 800de5c:	ec51 0b18 	vmov	r0, r1, d8
 800de60:	f7f2 fde2 	bl	8000a28 <__aeabi_dcmpeq>
 800de64:	2800      	cmp	r0, #0
 800de66:	f43f af3a 	beq.w	800dcde <pow+0xee>
 800de6a:	ec47 6b10 	vmov	d0, r6, r7
 800de6e:	f001 fcae 	bl	800f7ce <finite>
 800de72:	2800      	cmp	r0, #0
 800de74:	f43f af33 	beq.w	800dcde <pow+0xee>
 800de78:	ec45 4b10 	vmov	d0, r4, r5
 800de7c:	f001 fca7 	bl	800f7ce <finite>
 800de80:	2800      	cmp	r0, #0
 800de82:	f43f af2c 	beq.w	800dcde <pow+0xee>
 800de86:	2304      	movs	r3, #4
 800de88:	9302      	str	r3, [sp, #8]
 800de8a:	4b09      	ldr	r3, [pc, #36]	; (800deb0 <pow+0x2c0>)
 800de8c:	9303      	str	r3, [sp, #12]
 800de8e:	2300      	movs	r3, #0
 800de90:	930a      	str	r3, [sp, #40]	; 0x28
 800de92:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800de96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800de9a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800de9e:	e7b8      	b.n	800de12 <pow+0x222>
 800dea0:	a802      	add	r0, sp, #8
 800dea2:	f001 fd21 	bl	800f8e8 <matherr>
 800dea6:	2800      	cmp	r0, #0
 800dea8:	f47f af11 	bne.w	800dcce <pow+0xde>
 800deac:	e7b5      	b.n	800de1a <pow+0x22a>
 800deae:	bf00      	nop
 800deb0:	08014f58 	.word	0x08014f58
 800deb4:	3ff00000 	.word	0x3ff00000
 800deb8:	fff00000 	.word	0xfff00000
 800debc:	3fe00000 	.word	0x3fe00000
 800dec0:	47efffff 	.word	0x47efffff
 800dec4:	c7efffff 	.word	0xc7efffff
 800dec8:	7ff00000 	.word	0x7ff00000
 800decc:	20000078 	.word	0x20000078

0800ded0 <__ieee754_pow>:
 800ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded4:	b091      	sub	sp, #68	; 0x44
 800ded6:	ed8d 1b00 	vstr	d1, [sp]
 800deda:	e9dd 2900 	ldrd	r2, r9, [sp]
 800dede:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800dee2:	ea58 0302 	orrs.w	r3, r8, r2
 800dee6:	ec57 6b10 	vmov	r6, r7, d0
 800deea:	f000 84be 	beq.w	800e86a <__ieee754_pow+0x99a>
 800deee:	4b7a      	ldr	r3, [pc, #488]	; (800e0d8 <__ieee754_pow+0x208>)
 800def0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800def4:	429c      	cmp	r4, r3
 800def6:	463d      	mov	r5, r7
 800def8:	ee10 aa10 	vmov	sl, s0
 800defc:	dc09      	bgt.n	800df12 <__ieee754_pow+0x42>
 800defe:	d103      	bne.n	800df08 <__ieee754_pow+0x38>
 800df00:	b93e      	cbnz	r6, 800df12 <__ieee754_pow+0x42>
 800df02:	45a0      	cmp	r8, r4
 800df04:	dc0d      	bgt.n	800df22 <__ieee754_pow+0x52>
 800df06:	e001      	b.n	800df0c <__ieee754_pow+0x3c>
 800df08:	4598      	cmp	r8, r3
 800df0a:	dc02      	bgt.n	800df12 <__ieee754_pow+0x42>
 800df0c:	4598      	cmp	r8, r3
 800df0e:	d10e      	bne.n	800df2e <__ieee754_pow+0x5e>
 800df10:	b16a      	cbz	r2, 800df2e <__ieee754_pow+0x5e>
 800df12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800df16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800df1a:	ea54 030a 	orrs.w	r3, r4, sl
 800df1e:	f000 84a4 	beq.w	800e86a <__ieee754_pow+0x99a>
 800df22:	486e      	ldr	r0, [pc, #440]	; (800e0dc <__ieee754_pow+0x20c>)
 800df24:	b011      	add	sp, #68	; 0x44
 800df26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2a:	f001 bce1 	b.w	800f8f0 <nan>
 800df2e:	2d00      	cmp	r5, #0
 800df30:	da53      	bge.n	800dfda <__ieee754_pow+0x10a>
 800df32:	4b6b      	ldr	r3, [pc, #428]	; (800e0e0 <__ieee754_pow+0x210>)
 800df34:	4598      	cmp	r8, r3
 800df36:	dc4d      	bgt.n	800dfd4 <__ieee754_pow+0x104>
 800df38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800df3c:	4598      	cmp	r8, r3
 800df3e:	dd4c      	ble.n	800dfda <__ieee754_pow+0x10a>
 800df40:	ea4f 5328 	mov.w	r3, r8, asr #20
 800df44:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800df48:	2b14      	cmp	r3, #20
 800df4a:	dd26      	ble.n	800df9a <__ieee754_pow+0xca>
 800df4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800df50:	fa22 f103 	lsr.w	r1, r2, r3
 800df54:	fa01 f303 	lsl.w	r3, r1, r3
 800df58:	4293      	cmp	r3, r2
 800df5a:	d13e      	bne.n	800dfda <__ieee754_pow+0x10a>
 800df5c:	f001 0101 	and.w	r1, r1, #1
 800df60:	f1c1 0b02 	rsb	fp, r1, #2
 800df64:	2a00      	cmp	r2, #0
 800df66:	d15b      	bne.n	800e020 <__ieee754_pow+0x150>
 800df68:	4b5b      	ldr	r3, [pc, #364]	; (800e0d8 <__ieee754_pow+0x208>)
 800df6a:	4598      	cmp	r8, r3
 800df6c:	d124      	bne.n	800dfb8 <__ieee754_pow+0xe8>
 800df6e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800df72:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800df76:	ea53 030a 	orrs.w	r3, r3, sl
 800df7a:	f000 8476 	beq.w	800e86a <__ieee754_pow+0x99a>
 800df7e:	4b59      	ldr	r3, [pc, #356]	; (800e0e4 <__ieee754_pow+0x214>)
 800df80:	429c      	cmp	r4, r3
 800df82:	dd2d      	ble.n	800dfe0 <__ieee754_pow+0x110>
 800df84:	f1b9 0f00 	cmp.w	r9, #0
 800df88:	f280 8473 	bge.w	800e872 <__ieee754_pow+0x9a2>
 800df8c:	2000      	movs	r0, #0
 800df8e:	2100      	movs	r1, #0
 800df90:	ec41 0b10 	vmov	d0, r0, r1
 800df94:	b011      	add	sp, #68	; 0x44
 800df96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9a:	2a00      	cmp	r2, #0
 800df9c:	d13e      	bne.n	800e01c <__ieee754_pow+0x14c>
 800df9e:	f1c3 0314 	rsb	r3, r3, #20
 800dfa2:	fa48 f103 	asr.w	r1, r8, r3
 800dfa6:	fa01 f303 	lsl.w	r3, r1, r3
 800dfaa:	4543      	cmp	r3, r8
 800dfac:	f040 8469 	bne.w	800e882 <__ieee754_pow+0x9b2>
 800dfb0:	f001 0101 	and.w	r1, r1, #1
 800dfb4:	f1c1 0b02 	rsb	fp, r1, #2
 800dfb8:	4b4b      	ldr	r3, [pc, #300]	; (800e0e8 <__ieee754_pow+0x218>)
 800dfba:	4598      	cmp	r8, r3
 800dfbc:	d118      	bne.n	800dff0 <__ieee754_pow+0x120>
 800dfbe:	f1b9 0f00 	cmp.w	r9, #0
 800dfc2:	f280 845a 	bge.w	800e87a <__ieee754_pow+0x9aa>
 800dfc6:	4948      	ldr	r1, [pc, #288]	; (800e0e8 <__ieee754_pow+0x218>)
 800dfc8:	4632      	mov	r2, r6
 800dfca:	463b      	mov	r3, r7
 800dfcc:	2000      	movs	r0, #0
 800dfce:	f7f2 fbed 	bl	80007ac <__aeabi_ddiv>
 800dfd2:	e7dd      	b.n	800df90 <__ieee754_pow+0xc0>
 800dfd4:	f04f 0b02 	mov.w	fp, #2
 800dfd8:	e7c4      	b.n	800df64 <__ieee754_pow+0x94>
 800dfda:	f04f 0b00 	mov.w	fp, #0
 800dfde:	e7c1      	b.n	800df64 <__ieee754_pow+0x94>
 800dfe0:	f1b9 0f00 	cmp.w	r9, #0
 800dfe4:	dad2      	bge.n	800df8c <__ieee754_pow+0xbc>
 800dfe6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dfea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dfee:	e7cf      	b.n	800df90 <__ieee754_pow+0xc0>
 800dff0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800dff4:	d106      	bne.n	800e004 <__ieee754_pow+0x134>
 800dff6:	4632      	mov	r2, r6
 800dff8:	463b      	mov	r3, r7
 800dffa:	4610      	mov	r0, r2
 800dffc:	4619      	mov	r1, r3
 800dffe:	f7f2 faab 	bl	8000558 <__aeabi_dmul>
 800e002:	e7c5      	b.n	800df90 <__ieee754_pow+0xc0>
 800e004:	4b39      	ldr	r3, [pc, #228]	; (800e0ec <__ieee754_pow+0x21c>)
 800e006:	4599      	cmp	r9, r3
 800e008:	d10a      	bne.n	800e020 <__ieee754_pow+0x150>
 800e00a:	2d00      	cmp	r5, #0
 800e00c:	db08      	blt.n	800e020 <__ieee754_pow+0x150>
 800e00e:	ec47 6b10 	vmov	d0, r6, r7
 800e012:	b011      	add	sp, #68	; 0x44
 800e014:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e018:	f000 be5c 	b.w	800ecd4 <__ieee754_sqrt>
 800e01c:	f04f 0b00 	mov.w	fp, #0
 800e020:	ec47 6b10 	vmov	d0, r6, r7
 800e024:	f001 fbca 	bl	800f7bc <fabs>
 800e028:	ec51 0b10 	vmov	r0, r1, d0
 800e02c:	f1ba 0f00 	cmp.w	sl, #0
 800e030:	d127      	bne.n	800e082 <__ieee754_pow+0x1b2>
 800e032:	b124      	cbz	r4, 800e03e <__ieee754_pow+0x16e>
 800e034:	4b2c      	ldr	r3, [pc, #176]	; (800e0e8 <__ieee754_pow+0x218>)
 800e036:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d121      	bne.n	800e082 <__ieee754_pow+0x1b2>
 800e03e:	f1b9 0f00 	cmp.w	r9, #0
 800e042:	da05      	bge.n	800e050 <__ieee754_pow+0x180>
 800e044:	4602      	mov	r2, r0
 800e046:	460b      	mov	r3, r1
 800e048:	2000      	movs	r0, #0
 800e04a:	4927      	ldr	r1, [pc, #156]	; (800e0e8 <__ieee754_pow+0x218>)
 800e04c:	f7f2 fbae 	bl	80007ac <__aeabi_ddiv>
 800e050:	2d00      	cmp	r5, #0
 800e052:	da9d      	bge.n	800df90 <__ieee754_pow+0xc0>
 800e054:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e058:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e05c:	ea54 030b 	orrs.w	r3, r4, fp
 800e060:	d108      	bne.n	800e074 <__ieee754_pow+0x1a4>
 800e062:	4602      	mov	r2, r0
 800e064:	460b      	mov	r3, r1
 800e066:	4610      	mov	r0, r2
 800e068:	4619      	mov	r1, r3
 800e06a:	f7f2 f8bd 	bl	80001e8 <__aeabi_dsub>
 800e06e:	4602      	mov	r2, r0
 800e070:	460b      	mov	r3, r1
 800e072:	e7ac      	b.n	800dfce <__ieee754_pow+0xfe>
 800e074:	f1bb 0f01 	cmp.w	fp, #1
 800e078:	d18a      	bne.n	800df90 <__ieee754_pow+0xc0>
 800e07a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e07e:	4619      	mov	r1, r3
 800e080:	e786      	b.n	800df90 <__ieee754_pow+0xc0>
 800e082:	0fed      	lsrs	r5, r5, #31
 800e084:	1e6b      	subs	r3, r5, #1
 800e086:	930d      	str	r3, [sp, #52]	; 0x34
 800e088:	ea5b 0303 	orrs.w	r3, fp, r3
 800e08c:	d102      	bne.n	800e094 <__ieee754_pow+0x1c4>
 800e08e:	4632      	mov	r2, r6
 800e090:	463b      	mov	r3, r7
 800e092:	e7e8      	b.n	800e066 <__ieee754_pow+0x196>
 800e094:	4b16      	ldr	r3, [pc, #88]	; (800e0f0 <__ieee754_pow+0x220>)
 800e096:	4598      	cmp	r8, r3
 800e098:	f340 80fe 	ble.w	800e298 <__ieee754_pow+0x3c8>
 800e09c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e0a0:	4598      	cmp	r8, r3
 800e0a2:	dd0a      	ble.n	800e0ba <__ieee754_pow+0x1ea>
 800e0a4:	4b0f      	ldr	r3, [pc, #60]	; (800e0e4 <__ieee754_pow+0x214>)
 800e0a6:	429c      	cmp	r4, r3
 800e0a8:	dc0d      	bgt.n	800e0c6 <__ieee754_pow+0x1f6>
 800e0aa:	f1b9 0f00 	cmp.w	r9, #0
 800e0ae:	f6bf af6d 	bge.w	800df8c <__ieee754_pow+0xbc>
 800e0b2:	a307      	add	r3, pc, #28	; (adr r3, 800e0d0 <__ieee754_pow+0x200>)
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	e79f      	b.n	800dffa <__ieee754_pow+0x12a>
 800e0ba:	4b0e      	ldr	r3, [pc, #56]	; (800e0f4 <__ieee754_pow+0x224>)
 800e0bc:	429c      	cmp	r4, r3
 800e0be:	ddf4      	ble.n	800e0aa <__ieee754_pow+0x1da>
 800e0c0:	4b09      	ldr	r3, [pc, #36]	; (800e0e8 <__ieee754_pow+0x218>)
 800e0c2:	429c      	cmp	r4, r3
 800e0c4:	dd18      	ble.n	800e0f8 <__ieee754_pow+0x228>
 800e0c6:	f1b9 0f00 	cmp.w	r9, #0
 800e0ca:	dcf2      	bgt.n	800e0b2 <__ieee754_pow+0x1e2>
 800e0cc:	e75e      	b.n	800df8c <__ieee754_pow+0xbc>
 800e0ce:	bf00      	nop
 800e0d0:	8800759c 	.word	0x8800759c
 800e0d4:	7e37e43c 	.word	0x7e37e43c
 800e0d8:	7ff00000 	.word	0x7ff00000
 800e0dc:	08014f5b 	.word	0x08014f5b
 800e0e0:	433fffff 	.word	0x433fffff
 800e0e4:	3fefffff 	.word	0x3fefffff
 800e0e8:	3ff00000 	.word	0x3ff00000
 800e0ec:	3fe00000 	.word	0x3fe00000
 800e0f0:	41e00000 	.word	0x41e00000
 800e0f4:	3feffffe 	.word	0x3feffffe
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	4b63      	ldr	r3, [pc, #396]	; (800e288 <__ieee754_pow+0x3b8>)
 800e0fc:	f7f2 f874 	bl	80001e8 <__aeabi_dsub>
 800e100:	a355      	add	r3, pc, #340	; (adr r3, 800e258 <__ieee754_pow+0x388>)
 800e102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
 800e10a:	f7f2 fa25 	bl	8000558 <__aeabi_dmul>
 800e10e:	a354      	add	r3, pc, #336	; (adr r3, 800e260 <__ieee754_pow+0x390>)
 800e110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e114:	4606      	mov	r6, r0
 800e116:	460f      	mov	r7, r1
 800e118:	4620      	mov	r0, r4
 800e11a:	4629      	mov	r1, r5
 800e11c:	f7f2 fa1c 	bl	8000558 <__aeabi_dmul>
 800e120:	2200      	movs	r2, #0
 800e122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e126:	4b59      	ldr	r3, [pc, #356]	; (800e28c <__ieee754_pow+0x3bc>)
 800e128:	4620      	mov	r0, r4
 800e12a:	4629      	mov	r1, r5
 800e12c:	f7f2 fa14 	bl	8000558 <__aeabi_dmul>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	a14c      	add	r1, pc, #304	; (adr r1, 800e268 <__ieee754_pow+0x398>)
 800e136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e13a:	f7f2 f855 	bl	80001e8 <__aeabi_dsub>
 800e13e:	4622      	mov	r2, r4
 800e140:	462b      	mov	r3, r5
 800e142:	f7f2 fa09 	bl	8000558 <__aeabi_dmul>
 800e146:	4602      	mov	r2, r0
 800e148:	460b      	mov	r3, r1
 800e14a:	2000      	movs	r0, #0
 800e14c:	4950      	ldr	r1, [pc, #320]	; (800e290 <__ieee754_pow+0x3c0>)
 800e14e:	f7f2 f84b 	bl	80001e8 <__aeabi_dsub>
 800e152:	4622      	mov	r2, r4
 800e154:	462b      	mov	r3, r5
 800e156:	4680      	mov	r8, r0
 800e158:	4689      	mov	r9, r1
 800e15a:	4620      	mov	r0, r4
 800e15c:	4629      	mov	r1, r5
 800e15e:	f7f2 f9fb 	bl	8000558 <__aeabi_dmul>
 800e162:	4602      	mov	r2, r0
 800e164:	460b      	mov	r3, r1
 800e166:	4640      	mov	r0, r8
 800e168:	4649      	mov	r1, r9
 800e16a:	f7f2 f9f5 	bl	8000558 <__aeabi_dmul>
 800e16e:	a340      	add	r3, pc, #256	; (adr r3, 800e270 <__ieee754_pow+0x3a0>)
 800e170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e174:	f7f2 f9f0 	bl	8000558 <__aeabi_dmul>
 800e178:	4602      	mov	r2, r0
 800e17a:	460b      	mov	r3, r1
 800e17c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e180:	f7f2 f832 	bl	80001e8 <__aeabi_dsub>
 800e184:	4602      	mov	r2, r0
 800e186:	460b      	mov	r3, r1
 800e188:	4604      	mov	r4, r0
 800e18a:	460d      	mov	r5, r1
 800e18c:	4630      	mov	r0, r6
 800e18e:	4639      	mov	r1, r7
 800e190:	f7f2 f82c 	bl	80001ec <__adddf3>
 800e194:	2000      	movs	r0, #0
 800e196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e19a:	4632      	mov	r2, r6
 800e19c:	463b      	mov	r3, r7
 800e19e:	f7f2 f823 	bl	80001e8 <__aeabi_dsub>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7f2 f81d 	bl	80001e8 <__aeabi_dsub>
 800e1ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1b0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	4606      	mov	r6, r0
 800e1b8:	460f      	mov	r7, r1
 800e1ba:	f040 81eb 	bne.w	800e594 <__ieee754_pow+0x6c4>
 800e1be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e278 <__ieee754_pow+0x3a8>
 800e1c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e1c6:	2400      	movs	r4, #0
 800e1c8:	4622      	mov	r2, r4
 800e1ca:	462b      	mov	r3, r5
 800e1cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e1d4:	f7f2 f808 	bl	80001e8 <__aeabi_dsub>
 800e1d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1dc:	f7f2 f9bc 	bl	8000558 <__aeabi_dmul>
 800e1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1e4:	4680      	mov	r8, r0
 800e1e6:	4689      	mov	r9, r1
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	f7f2 f9b4 	bl	8000558 <__aeabi_dmul>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4640      	mov	r0, r8
 800e1f6:	4649      	mov	r1, r9
 800e1f8:	f7f1 fff8 	bl	80001ec <__adddf3>
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	462b      	mov	r3, r5
 800e200:	4680      	mov	r8, r0
 800e202:	4689      	mov	r9, r1
 800e204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e208:	f7f2 f9a6 	bl	8000558 <__aeabi_dmul>
 800e20c:	460b      	mov	r3, r1
 800e20e:	4604      	mov	r4, r0
 800e210:	460d      	mov	r5, r1
 800e212:	4602      	mov	r2, r0
 800e214:	4649      	mov	r1, r9
 800e216:	4640      	mov	r0, r8
 800e218:	e9cd 4500 	strd	r4, r5, [sp]
 800e21c:	f7f1 ffe6 	bl	80001ec <__adddf3>
 800e220:	4b1c      	ldr	r3, [pc, #112]	; (800e294 <__ieee754_pow+0x3c4>)
 800e222:	4299      	cmp	r1, r3
 800e224:	4606      	mov	r6, r0
 800e226:	460f      	mov	r7, r1
 800e228:	468b      	mov	fp, r1
 800e22a:	f340 82f7 	ble.w	800e81c <__ieee754_pow+0x94c>
 800e22e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e232:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e236:	4303      	orrs	r3, r0
 800e238:	f000 81ea 	beq.w	800e610 <__ieee754_pow+0x740>
 800e23c:	a310      	add	r3, pc, #64	; (adr r3, 800e280 <__ieee754_pow+0x3b0>)
 800e23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e246:	f7f2 f987 	bl	8000558 <__aeabi_dmul>
 800e24a:	a30d      	add	r3, pc, #52	; (adr r3, 800e280 <__ieee754_pow+0x3b0>)
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	e6d5      	b.n	800dffe <__ieee754_pow+0x12e>
 800e252:	bf00      	nop
 800e254:	f3af 8000 	nop.w
 800e258:	60000000 	.word	0x60000000
 800e25c:	3ff71547 	.word	0x3ff71547
 800e260:	f85ddf44 	.word	0xf85ddf44
 800e264:	3e54ae0b 	.word	0x3e54ae0b
 800e268:	55555555 	.word	0x55555555
 800e26c:	3fd55555 	.word	0x3fd55555
 800e270:	652b82fe 	.word	0x652b82fe
 800e274:	3ff71547 	.word	0x3ff71547
 800e278:	00000000 	.word	0x00000000
 800e27c:	bff00000 	.word	0xbff00000
 800e280:	8800759c 	.word	0x8800759c
 800e284:	7e37e43c 	.word	0x7e37e43c
 800e288:	3ff00000 	.word	0x3ff00000
 800e28c:	3fd00000 	.word	0x3fd00000
 800e290:	3fe00000 	.word	0x3fe00000
 800e294:	408fffff 	.word	0x408fffff
 800e298:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e29c:	f04f 0200 	mov.w	r2, #0
 800e2a0:	da05      	bge.n	800e2ae <__ieee754_pow+0x3de>
 800e2a2:	4bd3      	ldr	r3, [pc, #844]	; (800e5f0 <__ieee754_pow+0x720>)
 800e2a4:	f7f2 f958 	bl	8000558 <__aeabi_dmul>
 800e2a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e2ac:	460c      	mov	r4, r1
 800e2ae:	1523      	asrs	r3, r4, #20
 800e2b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e2b4:	4413      	add	r3, r2
 800e2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e2b8:	4bce      	ldr	r3, [pc, #824]	; (800e5f4 <__ieee754_pow+0x724>)
 800e2ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e2be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e2c2:	429c      	cmp	r4, r3
 800e2c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e2c8:	dd08      	ble.n	800e2dc <__ieee754_pow+0x40c>
 800e2ca:	4bcb      	ldr	r3, [pc, #812]	; (800e5f8 <__ieee754_pow+0x728>)
 800e2cc:	429c      	cmp	r4, r3
 800e2ce:	f340 815e 	ble.w	800e58e <__ieee754_pow+0x6be>
 800e2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e2d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e2dc:	f04f 0a00 	mov.w	sl, #0
 800e2e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e2e4:	930c      	str	r3, [sp, #48]	; 0x30
 800e2e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2e8:	4bc4      	ldr	r3, [pc, #784]	; (800e5fc <__ieee754_pow+0x72c>)
 800e2ea:	4413      	add	r3, r2
 800e2ec:	ed93 7b00 	vldr	d7, [r3]
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	ec53 2b17 	vmov	r2, r3, d7
 800e2f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e2fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e2fe:	f7f1 ff73 	bl	80001e8 <__aeabi_dsub>
 800e302:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e306:	4606      	mov	r6, r0
 800e308:	460f      	mov	r7, r1
 800e30a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e30e:	f7f1 ff6d 	bl	80001ec <__adddf3>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	2000      	movs	r0, #0
 800e318:	49b9      	ldr	r1, [pc, #740]	; (800e600 <__ieee754_pow+0x730>)
 800e31a:	f7f2 fa47 	bl	80007ac <__aeabi_ddiv>
 800e31e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e322:	4602      	mov	r2, r0
 800e324:	460b      	mov	r3, r1
 800e326:	4630      	mov	r0, r6
 800e328:	4639      	mov	r1, r7
 800e32a:	f7f2 f915 	bl	8000558 <__aeabi_dmul>
 800e32e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e332:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e336:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e33a:	2300      	movs	r3, #0
 800e33c:	9302      	str	r3, [sp, #8]
 800e33e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e342:	106d      	asrs	r5, r5, #1
 800e344:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e348:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e34c:	2200      	movs	r2, #0
 800e34e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e352:	4640      	mov	r0, r8
 800e354:	4649      	mov	r1, r9
 800e356:	4614      	mov	r4, r2
 800e358:	461d      	mov	r5, r3
 800e35a:	f7f2 f8fd 	bl	8000558 <__aeabi_dmul>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	4630      	mov	r0, r6
 800e364:	4639      	mov	r1, r7
 800e366:	f7f1 ff3f 	bl	80001e8 <__aeabi_dsub>
 800e36a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e36e:	4606      	mov	r6, r0
 800e370:	460f      	mov	r7, r1
 800e372:	4620      	mov	r0, r4
 800e374:	4629      	mov	r1, r5
 800e376:	f7f1 ff37 	bl	80001e8 <__aeabi_dsub>
 800e37a:	4602      	mov	r2, r0
 800e37c:	460b      	mov	r3, r1
 800e37e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e382:	f7f1 ff31 	bl	80001e8 <__aeabi_dsub>
 800e386:	4642      	mov	r2, r8
 800e388:	464b      	mov	r3, r9
 800e38a:	f7f2 f8e5 	bl	8000558 <__aeabi_dmul>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	4630      	mov	r0, r6
 800e394:	4639      	mov	r1, r7
 800e396:	f7f1 ff27 	bl	80001e8 <__aeabi_dsub>
 800e39a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e39e:	f7f2 f8db 	bl	8000558 <__aeabi_dmul>
 800e3a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e3aa:	4610      	mov	r0, r2
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	f7f2 f8d3 	bl	8000558 <__aeabi_dmul>
 800e3b2:	a37b      	add	r3, pc, #492	; (adr r3, 800e5a0 <__ieee754_pow+0x6d0>)
 800e3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	460d      	mov	r5, r1
 800e3bc:	f7f2 f8cc 	bl	8000558 <__aeabi_dmul>
 800e3c0:	a379      	add	r3, pc, #484	; (adr r3, 800e5a8 <__ieee754_pow+0x6d8>)
 800e3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c6:	f7f1 ff11 	bl	80001ec <__adddf3>
 800e3ca:	4622      	mov	r2, r4
 800e3cc:	462b      	mov	r3, r5
 800e3ce:	f7f2 f8c3 	bl	8000558 <__aeabi_dmul>
 800e3d2:	a377      	add	r3, pc, #476	; (adr r3, 800e5b0 <__ieee754_pow+0x6e0>)
 800e3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d8:	f7f1 ff08 	bl	80001ec <__adddf3>
 800e3dc:	4622      	mov	r2, r4
 800e3de:	462b      	mov	r3, r5
 800e3e0:	f7f2 f8ba 	bl	8000558 <__aeabi_dmul>
 800e3e4:	a374      	add	r3, pc, #464	; (adr r3, 800e5b8 <__ieee754_pow+0x6e8>)
 800e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ea:	f7f1 feff 	bl	80001ec <__adddf3>
 800e3ee:	4622      	mov	r2, r4
 800e3f0:	462b      	mov	r3, r5
 800e3f2:	f7f2 f8b1 	bl	8000558 <__aeabi_dmul>
 800e3f6:	a372      	add	r3, pc, #456	; (adr r3, 800e5c0 <__ieee754_pow+0x6f0>)
 800e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fc:	f7f1 fef6 	bl	80001ec <__adddf3>
 800e400:	4622      	mov	r2, r4
 800e402:	462b      	mov	r3, r5
 800e404:	f7f2 f8a8 	bl	8000558 <__aeabi_dmul>
 800e408:	a36f      	add	r3, pc, #444	; (adr r3, 800e5c8 <__ieee754_pow+0x6f8>)
 800e40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40e:	f7f1 feed 	bl	80001ec <__adddf3>
 800e412:	4622      	mov	r2, r4
 800e414:	4606      	mov	r6, r0
 800e416:	460f      	mov	r7, r1
 800e418:	462b      	mov	r3, r5
 800e41a:	4620      	mov	r0, r4
 800e41c:	4629      	mov	r1, r5
 800e41e:	f7f2 f89b 	bl	8000558 <__aeabi_dmul>
 800e422:	4602      	mov	r2, r0
 800e424:	460b      	mov	r3, r1
 800e426:	4630      	mov	r0, r6
 800e428:	4639      	mov	r1, r7
 800e42a:	f7f2 f895 	bl	8000558 <__aeabi_dmul>
 800e42e:	4642      	mov	r2, r8
 800e430:	4604      	mov	r4, r0
 800e432:	460d      	mov	r5, r1
 800e434:	464b      	mov	r3, r9
 800e436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e43a:	f7f1 fed7 	bl	80001ec <__adddf3>
 800e43e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e442:	f7f2 f889 	bl	8000558 <__aeabi_dmul>
 800e446:	4622      	mov	r2, r4
 800e448:	462b      	mov	r3, r5
 800e44a:	f7f1 fecf 	bl	80001ec <__adddf3>
 800e44e:	4642      	mov	r2, r8
 800e450:	4606      	mov	r6, r0
 800e452:	460f      	mov	r7, r1
 800e454:	464b      	mov	r3, r9
 800e456:	4640      	mov	r0, r8
 800e458:	4649      	mov	r1, r9
 800e45a:	f7f2 f87d 	bl	8000558 <__aeabi_dmul>
 800e45e:	2200      	movs	r2, #0
 800e460:	4b68      	ldr	r3, [pc, #416]	; (800e604 <__ieee754_pow+0x734>)
 800e462:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e466:	f7f1 fec1 	bl	80001ec <__adddf3>
 800e46a:	4632      	mov	r2, r6
 800e46c:	463b      	mov	r3, r7
 800e46e:	f7f1 febd 	bl	80001ec <__adddf3>
 800e472:	9802      	ldr	r0, [sp, #8]
 800e474:	460d      	mov	r5, r1
 800e476:	4604      	mov	r4, r0
 800e478:	4602      	mov	r2, r0
 800e47a:	460b      	mov	r3, r1
 800e47c:	4640      	mov	r0, r8
 800e47e:	4649      	mov	r1, r9
 800e480:	f7f2 f86a 	bl	8000558 <__aeabi_dmul>
 800e484:	2200      	movs	r2, #0
 800e486:	4680      	mov	r8, r0
 800e488:	4689      	mov	r9, r1
 800e48a:	4b5e      	ldr	r3, [pc, #376]	; (800e604 <__ieee754_pow+0x734>)
 800e48c:	4620      	mov	r0, r4
 800e48e:	4629      	mov	r1, r5
 800e490:	f7f1 feaa 	bl	80001e8 <__aeabi_dsub>
 800e494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e498:	f7f1 fea6 	bl	80001e8 <__aeabi_dsub>
 800e49c:	4602      	mov	r2, r0
 800e49e:	460b      	mov	r3, r1
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	4639      	mov	r1, r7
 800e4a4:	f7f1 fea0 	bl	80001e8 <__aeabi_dsub>
 800e4a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4ac:	f7f2 f854 	bl	8000558 <__aeabi_dmul>
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	4606      	mov	r6, r0
 800e4b4:	460f      	mov	r7, r1
 800e4b6:	462b      	mov	r3, r5
 800e4b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4bc:	f7f2 f84c 	bl	8000558 <__aeabi_dmul>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	4639      	mov	r1, r7
 800e4c8:	f7f1 fe90 	bl	80001ec <__adddf3>
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	460f      	mov	r7, r1
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	4640      	mov	r0, r8
 800e4d6:	4649      	mov	r1, r9
 800e4d8:	f7f1 fe88 	bl	80001ec <__adddf3>
 800e4dc:	9802      	ldr	r0, [sp, #8]
 800e4de:	a33c      	add	r3, pc, #240	; (adr r3, 800e5d0 <__ieee754_pow+0x700>)
 800e4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	f7f2 f836 	bl	8000558 <__aeabi_dmul>
 800e4ec:	4642      	mov	r2, r8
 800e4ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e4f2:	464b      	mov	r3, r9
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	f7f1 fe76 	bl	80001e8 <__aeabi_dsub>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	4630      	mov	r0, r6
 800e502:	4639      	mov	r1, r7
 800e504:	f7f1 fe70 	bl	80001e8 <__aeabi_dsub>
 800e508:	a333      	add	r3, pc, #204	; (adr r3, 800e5d8 <__ieee754_pow+0x708>)
 800e50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50e:	f7f2 f823 	bl	8000558 <__aeabi_dmul>
 800e512:	a333      	add	r3, pc, #204	; (adr r3, 800e5e0 <__ieee754_pow+0x710>)
 800e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e518:	4606      	mov	r6, r0
 800e51a:	460f      	mov	r7, r1
 800e51c:	4620      	mov	r0, r4
 800e51e:	4629      	mov	r1, r5
 800e520:	f7f2 f81a 	bl	8000558 <__aeabi_dmul>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	4630      	mov	r0, r6
 800e52a:	4639      	mov	r1, r7
 800e52c:	f7f1 fe5e 	bl	80001ec <__adddf3>
 800e530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e532:	4b35      	ldr	r3, [pc, #212]	; (800e608 <__ieee754_pow+0x738>)
 800e534:	4413      	add	r3, r2
 800e536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53a:	f7f1 fe57 	bl	80001ec <__adddf3>
 800e53e:	4604      	mov	r4, r0
 800e540:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e542:	460d      	mov	r5, r1
 800e544:	f7f1 ff9e 	bl	8000484 <__aeabi_i2d>
 800e548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e54a:	4b30      	ldr	r3, [pc, #192]	; (800e60c <__ieee754_pow+0x73c>)
 800e54c:	4413      	add	r3, r2
 800e54e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e552:	4606      	mov	r6, r0
 800e554:	460f      	mov	r7, r1
 800e556:	4622      	mov	r2, r4
 800e558:	462b      	mov	r3, r5
 800e55a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e55e:	f7f1 fe45 	bl	80001ec <__adddf3>
 800e562:	4642      	mov	r2, r8
 800e564:	464b      	mov	r3, r9
 800e566:	f7f1 fe41 	bl	80001ec <__adddf3>
 800e56a:	4632      	mov	r2, r6
 800e56c:	463b      	mov	r3, r7
 800e56e:	f7f1 fe3d 	bl	80001ec <__adddf3>
 800e572:	9802      	ldr	r0, [sp, #8]
 800e574:	4632      	mov	r2, r6
 800e576:	463b      	mov	r3, r7
 800e578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e57c:	f7f1 fe34 	bl	80001e8 <__aeabi_dsub>
 800e580:	4642      	mov	r2, r8
 800e582:	464b      	mov	r3, r9
 800e584:	f7f1 fe30 	bl	80001e8 <__aeabi_dsub>
 800e588:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e58c:	e607      	b.n	800e19e <__ieee754_pow+0x2ce>
 800e58e:	f04f 0a01 	mov.w	sl, #1
 800e592:	e6a5      	b.n	800e2e0 <__ieee754_pow+0x410>
 800e594:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e5e8 <__ieee754_pow+0x718>
 800e598:	e613      	b.n	800e1c2 <__ieee754_pow+0x2f2>
 800e59a:	bf00      	nop
 800e59c:	f3af 8000 	nop.w
 800e5a0:	4a454eef 	.word	0x4a454eef
 800e5a4:	3fca7e28 	.word	0x3fca7e28
 800e5a8:	93c9db65 	.word	0x93c9db65
 800e5ac:	3fcd864a 	.word	0x3fcd864a
 800e5b0:	a91d4101 	.word	0xa91d4101
 800e5b4:	3fd17460 	.word	0x3fd17460
 800e5b8:	518f264d 	.word	0x518f264d
 800e5bc:	3fd55555 	.word	0x3fd55555
 800e5c0:	db6fabff 	.word	0xdb6fabff
 800e5c4:	3fdb6db6 	.word	0x3fdb6db6
 800e5c8:	33333303 	.word	0x33333303
 800e5cc:	3fe33333 	.word	0x3fe33333
 800e5d0:	e0000000 	.word	0xe0000000
 800e5d4:	3feec709 	.word	0x3feec709
 800e5d8:	dc3a03fd 	.word	0xdc3a03fd
 800e5dc:	3feec709 	.word	0x3feec709
 800e5e0:	145b01f5 	.word	0x145b01f5
 800e5e4:	be3e2fe0 	.word	0xbe3e2fe0
 800e5e8:	00000000 	.word	0x00000000
 800e5ec:	3ff00000 	.word	0x3ff00000
 800e5f0:	43400000 	.word	0x43400000
 800e5f4:	0003988e 	.word	0x0003988e
 800e5f8:	000bb679 	.word	0x000bb679
 800e5fc:	08014f60 	.word	0x08014f60
 800e600:	3ff00000 	.word	0x3ff00000
 800e604:	40080000 	.word	0x40080000
 800e608:	08014f80 	.word	0x08014f80
 800e60c:	08014f70 	.word	0x08014f70
 800e610:	a3b4      	add	r3, pc, #720	; (adr r3, 800e8e4 <__ieee754_pow+0xa14>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	4640      	mov	r0, r8
 800e618:	4649      	mov	r1, r9
 800e61a:	f7f1 fde7 	bl	80001ec <__adddf3>
 800e61e:	4622      	mov	r2, r4
 800e620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e624:	462b      	mov	r3, r5
 800e626:	4630      	mov	r0, r6
 800e628:	4639      	mov	r1, r7
 800e62a:	f7f1 fddd 	bl	80001e8 <__aeabi_dsub>
 800e62e:	4602      	mov	r2, r0
 800e630:	460b      	mov	r3, r1
 800e632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e636:	f7f2 fa1f 	bl	8000a78 <__aeabi_dcmpgt>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	f47f adfe 	bne.w	800e23c <__ieee754_pow+0x36c>
 800e640:	4aa3      	ldr	r2, [pc, #652]	; (800e8d0 <__ieee754_pow+0xa00>)
 800e642:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e646:	4293      	cmp	r3, r2
 800e648:	f340 810a 	ble.w	800e860 <__ieee754_pow+0x990>
 800e64c:	151b      	asrs	r3, r3, #20
 800e64e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e652:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e656:	fa4a f303 	asr.w	r3, sl, r3
 800e65a:	445b      	add	r3, fp
 800e65c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e660:	4e9c      	ldr	r6, [pc, #624]	; (800e8d4 <__ieee754_pow+0xa04>)
 800e662:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e666:	4116      	asrs	r6, r2
 800e668:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e66c:	2000      	movs	r0, #0
 800e66e:	ea23 0106 	bic.w	r1, r3, r6
 800e672:	f1c2 0214 	rsb	r2, r2, #20
 800e676:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e67a:	fa4a fa02 	asr.w	sl, sl, r2
 800e67e:	f1bb 0f00 	cmp.w	fp, #0
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	4620      	mov	r0, r4
 800e688:	4629      	mov	r1, r5
 800e68a:	bfb8      	it	lt
 800e68c:	f1ca 0a00 	rsblt	sl, sl, #0
 800e690:	f7f1 fdaa 	bl	80001e8 <__aeabi_dsub>
 800e694:	e9cd 0100 	strd	r0, r1, [sp]
 800e698:	4642      	mov	r2, r8
 800e69a:	464b      	mov	r3, r9
 800e69c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6a0:	f7f1 fda4 	bl	80001ec <__adddf3>
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	a378      	add	r3, pc, #480	; (adr r3, 800e888 <__ieee754_pow+0x9b8>)
 800e6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	460d      	mov	r5, r1
 800e6b0:	f7f1 ff52 	bl	8000558 <__aeabi_dmul>
 800e6b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6b8:	4606      	mov	r6, r0
 800e6ba:	460f      	mov	r7, r1
 800e6bc:	4620      	mov	r0, r4
 800e6be:	4629      	mov	r1, r5
 800e6c0:	f7f1 fd92 	bl	80001e8 <__aeabi_dsub>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	4640      	mov	r0, r8
 800e6ca:	4649      	mov	r1, r9
 800e6cc:	f7f1 fd8c 	bl	80001e8 <__aeabi_dsub>
 800e6d0:	a36f      	add	r3, pc, #444	; (adr r3, 800e890 <__ieee754_pow+0x9c0>)
 800e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d6:	f7f1 ff3f 	bl	8000558 <__aeabi_dmul>
 800e6da:	a36f      	add	r3, pc, #444	; (adr r3, 800e898 <__ieee754_pow+0x9c8>)
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	4680      	mov	r8, r0
 800e6e2:	4689      	mov	r9, r1
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f7f1 ff36 	bl	8000558 <__aeabi_dmul>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	4640      	mov	r0, r8
 800e6f2:	4649      	mov	r1, r9
 800e6f4:	f7f1 fd7a 	bl	80001ec <__adddf3>
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	460d      	mov	r5, r1
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	4630      	mov	r0, r6
 800e702:	4639      	mov	r1, r7
 800e704:	f7f1 fd72 	bl	80001ec <__adddf3>
 800e708:	4632      	mov	r2, r6
 800e70a:	463b      	mov	r3, r7
 800e70c:	4680      	mov	r8, r0
 800e70e:	4689      	mov	r9, r1
 800e710:	f7f1 fd6a 	bl	80001e8 <__aeabi_dsub>
 800e714:	4602      	mov	r2, r0
 800e716:	460b      	mov	r3, r1
 800e718:	4620      	mov	r0, r4
 800e71a:	4629      	mov	r1, r5
 800e71c:	f7f1 fd64 	bl	80001e8 <__aeabi_dsub>
 800e720:	4642      	mov	r2, r8
 800e722:	4606      	mov	r6, r0
 800e724:	460f      	mov	r7, r1
 800e726:	464b      	mov	r3, r9
 800e728:	4640      	mov	r0, r8
 800e72a:	4649      	mov	r1, r9
 800e72c:	f7f1 ff14 	bl	8000558 <__aeabi_dmul>
 800e730:	a35b      	add	r3, pc, #364	; (adr r3, 800e8a0 <__ieee754_pow+0x9d0>)
 800e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e736:	4604      	mov	r4, r0
 800e738:	460d      	mov	r5, r1
 800e73a:	f7f1 ff0d 	bl	8000558 <__aeabi_dmul>
 800e73e:	a35a      	add	r3, pc, #360	; (adr r3, 800e8a8 <__ieee754_pow+0x9d8>)
 800e740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e744:	f7f1 fd50 	bl	80001e8 <__aeabi_dsub>
 800e748:	4622      	mov	r2, r4
 800e74a:	462b      	mov	r3, r5
 800e74c:	f7f1 ff04 	bl	8000558 <__aeabi_dmul>
 800e750:	a357      	add	r3, pc, #348	; (adr r3, 800e8b0 <__ieee754_pow+0x9e0>)
 800e752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e756:	f7f1 fd49 	bl	80001ec <__adddf3>
 800e75a:	4622      	mov	r2, r4
 800e75c:	462b      	mov	r3, r5
 800e75e:	f7f1 fefb 	bl	8000558 <__aeabi_dmul>
 800e762:	a355      	add	r3, pc, #340	; (adr r3, 800e8b8 <__ieee754_pow+0x9e8>)
 800e764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e768:	f7f1 fd3e 	bl	80001e8 <__aeabi_dsub>
 800e76c:	4622      	mov	r2, r4
 800e76e:	462b      	mov	r3, r5
 800e770:	f7f1 fef2 	bl	8000558 <__aeabi_dmul>
 800e774:	a352      	add	r3, pc, #328	; (adr r3, 800e8c0 <__ieee754_pow+0x9f0>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	f7f1 fd37 	bl	80001ec <__adddf3>
 800e77e:	4622      	mov	r2, r4
 800e780:	462b      	mov	r3, r5
 800e782:	f7f1 fee9 	bl	8000558 <__aeabi_dmul>
 800e786:	4602      	mov	r2, r0
 800e788:	460b      	mov	r3, r1
 800e78a:	4640      	mov	r0, r8
 800e78c:	4649      	mov	r1, r9
 800e78e:	f7f1 fd2b 	bl	80001e8 <__aeabi_dsub>
 800e792:	4604      	mov	r4, r0
 800e794:	460d      	mov	r5, r1
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	4640      	mov	r0, r8
 800e79c:	4649      	mov	r1, r9
 800e79e:	f7f1 fedb 	bl	8000558 <__aeabi_dmul>
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	e9cd 0100 	strd	r0, r1, [sp]
 800e7a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	f7f1 fd1a 	bl	80001e8 <__aeabi_dsub>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7bc:	f7f1 fff6 	bl	80007ac <__aeabi_ddiv>
 800e7c0:	4632      	mov	r2, r6
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	460d      	mov	r5, r1
 800e7c6:	463b      	mov	r3, r7
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	4649      	mov	r1, r9
 800e7cc:	f7f1 fec4 	bl	8000558 <__aeabi_dmul>
 800e7d0:	4632      	mov	r2, r6
 800e7d2:	463b      	mov	r3, r7
 800e7d4:	f7f1 fd0a 	bl	80001ec <__adddf3>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	460b      	mov	r3, r1
 800e7dc:	4620      	mov	r0, r4
 800e7de:	4629      	mov	r1, r5
 800e7e0:	f7f1 fd02 	bl	80001e8 <__aeabi_dsub>
 800e7e4:	4642      	mov	r2, r8
 800e7e6:	464b      	mov	r3, r9
 800e7e8:	f7f1 fcfe 	bl	80001e8 <__aeabi_dsub>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	4939      	ldr	r1, [pc, #228]	; (800e8d8 <__ieee754_pow+0xa08>)
 800e7f4:	f7f1 fcf8 	bl	80001e8 <__aeabi_dsub>
 800e7f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800e7fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e800:	4602      	mov	r2, r0
 800e802:	460b      	mov	r3, r1
 800e804:	da2f      	bge.n	800e866 <__ieee754_pow+0x996>
 800e806:	4650      	mov	r0, sl
 800e808:	ec43 2b10 	vmov	d0, r2, r3
 800e80c:	f001 f8fc 	bl	800fa08 <scalbn>
 800e810:	ec51 0b10 	vmov	r0, r1, d0
 800e814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e818:	f7ff bbf1 	b.w	800dffe <__ieee754_pow+0x12e>
 800e81c:	4b2f      	ldr	r3, [pc, #188]	; (800e8dc <__ieee754_pow+0xa0c>)
 800e81e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e822:	429e      	cmp	r6, r3
 800e824:	f77f af0c 	ble.w	800e640 <__ieee754_pow+0x770>
 800e828:	4b2d      	ldr	r3, [pc, #180]	; (800e8e0 <__ieee754_pow+0xa10>)
 800e82a:	440b      	add	r3, r1
 800e82c:	4303      	orrs	r3, r0
 800e82e:	d00b      	beq.n	800e848 <__ieee754_pow+0x978>
 800e830:	a325      	add	r3, pc, #148	; (adr r3, 800e8c8 <__ieee754_pow+0x9f8>)
 800e832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e83a:	f7f1 fe8d 	bl	8000558 <__aeabi_dmul>
 800e83e:	a322      	add	r3, pc, #136	; (adr r3, 800e8c8 <__ieee754_pow+0x9f8>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	f7ff bbdb 	b.w	800dffe <__ieee754_pow+0x12e>
 800e848:	4622      	mov	r2, r4
 800e84a:	462b      	mov	r3, r5
 800e84c:	f7f1 fccc 	bl	80001e8 <__aeabi_dsub>
 800e850:	4642      	mov	r2, r8
 800e852:	464b      	mov	r3, r9
 800e854:	f7f2 f906 	bl	8000a64 <__aeabi_dcmpge>
 800e858:	2800      	cmp	r0, #0
 800e85a:	f43f aef1 	beq.w	800e640 <__ieee754_pow+0x770>
 800e85e:	e7e7      	b.n	800e830 <__ieee754_pow+0x960>
 800e860:	f04f 0a00 	mov.w	sl, #0
 800e864:	e718      	b.n	800e698 <__ieee754_pow+0x7c8>
 800e866:	4621      	mov	r1, r4
 800e868:	e7d4      	b.n	800e814 <__ieee754_pow+0x944>
 800e86a:	2000      	movs	r0, #0
 800e86c:	491a      	ldr	r1, [pc, #104]	; (800e8d8 <__ieee754_pow+0xa08>)
 800e86e:	f7ff bb8f 	b.w	800df90 <__ieee754_pow+0xc0>
 800e872:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e876:	f7ff bb8b 	b.w	800df90 <__ieee754_pow+0xc0>
 800e87a:	4630      	mov	r0, r6
 800e87c:	4639      	mov	r1, r7
 800e87e:	f7ff bb87 	b.w	800df90 <__ieee754_pow+0xc0>
 800e882:	4693      	mov	fp, r2
 800e884:	f7ff bb98 	b.w	800dfb8 <__ieee754_pow+0xe8>
 800e888:	00000000 	.word	0x00000000
 800e88c:	3fe62e43 	.word	0x3fe62e43
 800e890:	fefa39ef 	.word	0xfefa39ef
 800e894:	3fe62e42 	.word	0x3fe62e42
 800e898:	0ca86c39 	.word	0x0ca86c39
 800e89c:	be205c61 	.word	0xbe205c61
 800e8a0:	72bea4d0 	.word	0x72bea4d0
 800e8a4:	3e663769 	.word	0x3e663769
 800e8a8:	c5d26bf1 	.word	0xc5d26bf1
 800e8ac:	3ebbbd41 	.word	0x3ebbbd41
 800e8b0:	af25de2c 	.word	0xaf25de2c
 800e8b4:	3f11566a 	.word	0x3f11566a
 800e8b8:	16bebd93 	.word	0x16bebd93
 800e8bc:	3f66c16c 	.word	0x3f66c16c
 800e8c0:	5555553e 	.word	0x5555553e
 800e8c4:	3fc55555 	.word	0x3fc55555
 800e8c8:	c2f8f359 	.word	0xc2f8f359
 800e8cc:	01a56e1f 	.word	0x01a56e1f
 800e8d0:	3fe00000 	.word	0x3fe00000
 800e8d4:	000fffff 	.word	0x000fffff
 800e8d8:	3ff00000 	.word	0x3ff00000
 800e8dc:	4090cbff 	.word	0x4090cbff
 800e8e0:	3f6f3400 	.word	0x3f6f3400
 800e8e4:	652b82fe 	.word	0x652b82fe
 800e8e8:	3c971547 	.word	0x3c971547
 800e8ec:	00000000 	.word	0x00000000

0800e8f0 <__ieee754_rem_pio2>:
 800e8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f4:	ec57 6b10 	vmov	r6, r7, d0
 800e8f8:	4bc3      	ldr	r3, [pc, #780]	; (800ec08 <__ieee754_rem_pio2+0x318>)
 800e8fa:	b08d      	sub	sp, #52	; 0x34
 800e8fc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e900:	4598      	cmp	r8, r3
 800e902:	4604      	mov	r4, r0
 800e904:	9704      	str	r7, [sp, #16]
 800e906:	dc07      	bgt.n	800e918 <__ieee754_rem_pio2+0x28>
 800e908:	2200      	movs	r2, #0
 800e90a:	2300      	movs	r3, #0
 800e90c:	ed84 0b00 	vstr	d0, [r4]
 800e910:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e914:	2500      	movs	r5, #0
 800e916:	e027      	b.n	800e968 <__ieee754_rem_pio2+0x78>
 800e918:	4bbc      	ldr	r3, [pc, #752]	; (800ec0c <__ieee754_rem_pio2+0x31c>)
 800e91a:	4598      	cmp	r8, r3
 800e91c:	dc75      	bgt.n	800ea0a <__ieee754_rem_pio2+0x11a>
 800e91e:	9b04      	ldr	r3, [sp, #16]
 800e920:	4dbb      	ldr	r5, [pc, #748]	; (800ec10 <__ieee754_rem_pio2+0x320>)
 800e922:	2b00      	cmp	r3, #0
 800e924:	ee10 0a10 	vmov	r0, s0
 800e928:	a3a9      	add	r3, pc, #676	; (adr r3, 800ebd0 <__ieee754_rem_pio2+0x2e0>)
 800e92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92e:	4639      	mov	r1, r7
 800e930:	dd36      	ble.n	800e9a0 <__ieee754_rem_pio2+0xb0>
 800e932:	f7f1 fc59 	bl	80001e8 <__aeabi_dsub>
 800e936:	45a8      	cmp	r8, r5
 800e938:	4606      	mov	r6, r0
 800e93a:	460f      	mov	r7, r1
 800e93c:	d018      	beq.n	800e970 <__ieee754_rem_pio2+0x80>
 800e93e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ebd8 <__ieee754_rem_pio2+0x2e8>)
 800e940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e944:	f7f1 fc50 	bl	80001e8 <__aeabi_dsub>
 800e948:	4602      	mov	r2, r0
 800e94a:	460b      	mov	r3, r1
 800e94c:	e9c4 2300 	strd	r2, r3, [r4]
 800e950:	4630      	mov	r0, r6
 800e952:	4639      	mov	r1, r7
 800e954:	f7f1 fc48 	bl	80001e8 <__aeabi_dsub>
 800e958:	a39f      	add	r3, pc, #636	; (adr r3, 800ebd8 <__ieee754_rem_pio2+0x2e8>)
 800e95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95e:	f7f1 fc43 	bl	80001e8 <__aeabi_dsub>
 800e962:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e966:	2501      	movs	r5, #1
 800e968:	4628      	mov	r0, r5
 800e96a:	b00d      	add	sp, #52	; 0x34
 800e96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e970:	a39b      	add	r3, pc, #620	; (adr r3, 800ebe0 <__ieee754_rem_pio2+0x2f0>)
 800e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e976:	f7f1 fc37 	bl	80001e8 <__aeabi_dsub>
 800e97a:	a39b      	add	r3, pc, #620	; (adr r3, 800ebe8 <__ieee754_rem_pio2+0x2f8>)
 800e97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e980:	4606      	mov	r6, r0
 800e982:	460f      	mov	r7, r1
 800e984:	f7f1 fc30 	bl	80001e8 <__aeabi_dsub>
 800e988:	4602      	mov	r2, r0
 800e98a:	460b      	mov	r3, r1
 800e98c:	e9c4 2300 	strd	r2, r3, [r4]
 800e990:	4630      	mov	r0, r6
 800e992:	4639      	mov	r1, r7
 800e994:	f7f1 fc28 	bl	80001e8 <__aeabi_dsub>
 800e998:	a393      	add	r3, pc, #588	; (adr r3, 800ebe8 <__ieee754_rem_pio2+0x2f8>)
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	e7de      	b.n	800e95e <__ieee754_rem_pio2+0x6e>
 800e9a0:	f7f1 fc24 	bl	80001ec <__adddf3>
 800e9a4:	45a8      	cmp	r8, r5
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	460f      	mov	r7, r1
 800e9aa:	d016      	beq.n	800e9da <__ieee754_rem_pio2+0xea>
 800e9ac:	a38a      	add	r3, pc, #552	; (adr r3, 800ebd8 <__ieee754_rem_pio2+0x2e8>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	f7f1 fc1b 	bl	80001ec <__adddf3>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	e9c4 2300 	strd	r2, r3, [r4]
 800e9be:	4630      	mov	r0, r6
 800e9c0:	4639      	mov	r1, r7
 800e9c2:	f7f1 fc11 	bl	80001e8 <__aeabi_dsub>
 800e9c6:	a384      	add	r3, pc, #528	; (adr r3, 800ebd8 <__ieee754_rem_pio2+0x2e8>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	f7f1 fc0e 	bl	80001ec <__adddf3>
 800e9d0:	f04f 35ff 	mov.w	r5, #4294967295
 800e9d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e9d8:	e7c6      	b.n	800e968 <__ieee754_rem_pio2+0x78>
 800e9da:	a381      	add	r3, pc, #516	; (adr r3, 800ebe0 <__ieee754_rem_pio2+0x2f0>)
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f7f1 fc04 	bl	80001ec <__adddf3>
 800e9e4:	a380      	add	r3, pc, #512	; (adr r3, 800ebe8 <__ieee754_rem_pio2+0x2f8>)
 800e9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	460f      	mov	r7, r1
 800e9ee:	f7f1 fbfd 	bl	80001ec <__adddf3>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	e9c4 2300 	strd	r2, r3, [r4]
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	f7f1 fbf3 	bl	80001e8 <__aeabi_dsub>
 800ea02:	a379      	add	r3, pc, #484	; (adr r3, 800ebe8 <__ieee754_rem_pio2+0x2f8>)
 800ea04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea08:	e7e0      	b.n	800e9cc <__ieee754_rem_pio2+0xdc>
 800ea0a:	4b82      	ldr	r3, [pc, #520]	; (800ec14 <__ieee754_rem_pio2+0x324>)
 800ea0c:	4598      	cmp	r8, r3
 800ea0e:	f300 80d0 	bgt.w	800ebb2 <__ieee754_rem_pio2+0x2c2>
 800ea12:	f000 fed3 	bl	800f7bc <fabs>
 800ea16:	ec57 6b10 	vmov	r6, r7, d0
 800ea1a:	ee10 0a10 	vmov	r0, s0
 800ea1e:	a374      	add	r3, pc, #464	; (adr r3, 800ebf0 <__ieee754_rem_pio2+0x300>)
 800ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea24:	4639      	mov	r1, r7
 800ea26:	f7f1 fd97 	bl	8000558 <__aeabi_dmul>
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	4b7a      	ldr	r3, [pc, #488]	; (800ec18 <__ieee754_rem_pio2+0x328>)
 800ea2e:	f7f1 fbdd 	bl	80001ec <__adddf3>
 800ea32:	f7f2 f841 	bl	8000ab8 <__aeabi_d2iz>
 800ea36:	4605      	mov	r5, r0
 800ea38:	f7f1 fd24 	bl	8000484 <__aeabi_i2d>
 800ea3c:	a364      	add	r3, pc, #400	; (adr r3, 800ebd0 <__ieee754_rem_pio2+0x2e0>)
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea46:	f7f1 fd87 	bl	8000558 <__aeabi_dmul>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4630      	mov	r0, r6
 800ea50:	4639      	mov	r1, r7
 800ea52:	f7f1 fbc9 	bl	80001e8 <__aeabi_dsub>
 800ea56:	a360      	add	r3, pc, #384	; (adr r3, 800ebd8 <__ieee754_rem_pio2+0x2e8>)
 800ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5c:	4682      	mov	sl, r0
 800ea5e:	468b      	mov	fp, r1
 800ea60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea64:	f7f1 fd78 	bl	8000558 <__aeabi_dmul>
 800ea68:	2d1f      	cmp	r5, #31
 800ea6a:	4606      	mov	r6, r0
 800ea6c:	460f      	mov	r7, r1
 800ea6e:	dc0c      	bgt.n	800ea8a <__ieee754_rem_pio2+0x19a>
 800ea70:	1e6a      	subs	r2, r5, #1
 800ea72:	4b6a      	ldr	r3, [pc, #424]	; (800ec1c <__ieee754_rem_pio2+0x32c>)
 800ea74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea78:	4543      	cmp	r3, r8
 800ea7a:	d006      	beq.n	800ea8a <__ieee754_rem_pio2+0x19a>
 800ea7c:	4632      	mov	r2, r6
 800ea7e:	463b      	mov	r3, r7
 800ea80:	4650      	mov	r0, sl
 800ea82:	4659      	mov	r1, fp
 800ea84:	f7f1 fbb0 	bl	80001e8 <__aeabi_dsub>
 800ea88:	e00e      	b.n	800eaa8 <__ieee754_rem_pio2+0x1b8>
 800ea8a:	4632      	mov	r2, r6
 800ea8c:	463b      	mov	r3, r7
 800ea8e:	4650      	mov	r0, sl
 800ea90:	4659      	mov	r1, fp
 800ea92:	f7f1 fba9 	bl	80001e8 <__aeabi_dsub>
 800ea96:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ea9a:	9305      	str	r3, [sp, #20]
 800ea9c:	9a05      	ldr	r2, [sp, #20]
 800ea9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	2b10      	cmp	r3, #16
 800eaa6:	dc02      	bgt.n	800eaae <__ieee754_rem_pio2+0x1be>
 800eaa8:	e9c4 0100 	strd	r0, r1, [r4]
 800eaac:	e039      	b.n	800eb22 <__ieee754_rem_pio2+0x232>
 800eaae:	a34c      	add	r3, pc, #304	; (adr r3, 800ebe0 <__ieee754_rem_pio2+0x2f0>)
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eab8:	f7f1 fd4e 	bl	8000558 <__aeabi_dmul>
 800eabc:	4606      	mov	r6, r0
 800eabe:	460f      	mov	r7, r1
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	4650      	mov	r0, sl
 800eac6:	4659      	mov	r1, fp
 800eac8:	f7f1 fb8e 	bl	80001e8 <__aeabi_dsub>
 800eacc:	4602      	mov	r2, r0
 800eace:	460b      	mov	r3, r1
 800ead0:	4680      	mov	r8, r0
 800ead2:	4689      	mov	r9, r1
 800ead4:	4650      	mov	r0, sl
 800ead6:	4659      	mov	r1, fp
 800ead8:	f7f1 fb86 	bl	80001e8 <__aeabi_dsub>
 800eadc:	4632      	mov	r2, r6
 800eade:	463b      	mov	r3, r7
 800eae0:	f7f1 fb82 	bl	80001e8 <__aeabi_dsub>
 800eae4:	a340      	add	r3, pc, #256	; (adr r3, 800ebe8 <__ieee754_rem_pio2+0x2f8>)
 800eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaea:	4606      	mov	r6, r0
 800eaec:	460f      	mov	r7, r1
 800eaee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaf2:	f7f1 fd31 	bl	8000558 <__aeabi_dmul>
 800eaf6:	4632      	mov	r2, r6
 800eaf8:	463b      	mov	r3, r7
 800eafa:	f7f1 fb75 	bl	80001e8 <__aeabi_dsub>
 800eafe:	4602      	mov	r2, r0
 800eb00:	460b      	mov	r3, r1
 800eb02:	4606      	mov	r6, r0
 800eb04:	460f      	mov	r7, r1
 800eb06:	4640      	mov	r0, r8
 800eb08:	4649      	mov	r1, r9
 800eb0a:	f7f1 fb6d 	bl	80001e8 <__aeabi_dsub>
 800eb0e:	9a05      	ldr	r2, [sp, #20]
 800eb10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	2b31      	cmp	r3, #49	; 0x31
 800eb18:	dc20      	bgt.n	800eb5c <__ieee754_rem_pio2+0x26c>
 800eb1a:	e9c4 0100 	strd	r0, r1, [r4]
 800eb1e:	46c2      	mov	sl, r8
 800eb20:	46cb      	mov	fp, r9
 800eb22:	e9d4 8900 	ldrd	r8, r9, [r4]
 800eb26:	4650      	mov	r0, sl
 800eb28:	4642      	mov	r2, r8
 800eb2a:	464b      	mov	r3, r9
 800eb2c:	4659      	mov	r1, fp
 800eb2e:	f7f1 fb5b 	bl	80001e8 <__aeabi_dsub>
 800eb32:	463b      	mov	r3, r7
 800eb34:	4632      	mov	r2, r6
 800eb36:	f7f1 fb57 	bl	80001e8 <__aeabi_dsub>
 800eb3a:	9b04      	ldr	r3, [sp, #16]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eb42:	f6bf af11 	bge.w	800e968 <__ieee754_rem_pio2+0x78>
 800eb46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eb4a:	6063      	str	r3, [r4, #4]
 800eb4c:	f8c4 8000 	str.w	r8, [r4]
 800eb50:	60a0      	str	r0, [r4, #8]
 800eb52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb56:	60e3      	str	r3, [r4, #12]
 800eb58:	426d      	negs	r5, r5
 800eb5a:	e705      	b.n	800e968 <__ieee754_rem_pio2+0x78>
 800eb5c:	a326      	add	r3, pc, #152	; (adr r3, 800ebf8 <__ieee754_rem_pio2+0x308>)
 800eb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb66:	f7f1 fcf7 	bl	8000558 <__aeabi_dmul>
 800eb6a:	4606      	mov	r6, r0
 800eb6c:	460f      	mov	r7, r1
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	4640      	mov	r0, r8
 800eb74:	4649      	mov	r1, r9
 800eb76:	f7f1 fb37 	bl	80001e8 <__aeabi_dsub>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	4682      	mov	sl, r0
 800eb80:	468b      	mov	fp, r1
 800eb82:	4640      	mov	r0, r8
 800eb84:	4649      	mov	r1, r9
 800eb86:	f7f1 fb2f 	bl	80001e8 <__aeabi_dsub>
 800eb8a:	4632      	mov	r2, r6
 800eb8c:	463b      	mov	r3, r7
 800eb8e:	f7f1 fb2b 	bl	80001e8 <__aeabi_dsub>
 800eb92:	a31b      	add	r3, pc, #108	; (adr r3, 800ec00 <__ieee754_rem_pio2+0x310>)
 800eb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb98:	4606      	mov	r6, r0
 800eb9a:	460f      	mov	r7, r1
 800eb9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eba0:	f7f1 fcda 	bl	8000558 <__aeabi_dmul>
 800eba4:	4632      	mov	r2, r6
 800eba6:	463b      	mov	r3, r7
 800eba8:	f7f1 fb1e 	bl	80001e8 <__aeabi_dsub>
 800ebac:	4606      	mov	r6, r0
 800ebae:	460f      	mov	r7, r1
 800ebb0:	e764      	b.n	800ea7c <__ieee754_rem_pio2+0x18c>
 800ebb2:	4b1b      	ldr	r3, [pc, #108]	; (800ec20 <__ieee754_rem_pio2+0x330>)
 800ebb4:	4598      	cmp	r8, r3
 800ebb6:	dd35      	ble.n	800ec24 <__ieee754_rem_pio2+0x334>
 800ebb8:	ee10 2a10 	vmov	r2, s0
 800ebbc:	463b      	mov	r3, r7
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	4639      	mov	r1, r7
 800ebc2:	f7f1 fb11 	bl	80001e8 <__aeabi_dsub>
 800ebc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ebca:	e9c4 0100 	strd	r0, r1, [r4]
 800ebce:	e6a1      	b.n	800e914 <__ieee754_rem_pio2+0x24>
 800ebd0:	54400000 	.word	0x54400000
 800ebd4:	3ff921fb 	.word	0x3ff921fb
 800ebd8:	1a626331 	.word	0x1a626331
 800ebdc:	3dd0b461 	.word	0x3dd0b461
 800ebe0:	1a600000 	.word	0x1a600000
 800ebe4:	3dd0b461 	.word	0x3dd0b461
 800ebe8:	2e037073 	.word	0x2e037073
 800ebec:	3ba3198a 	.word	0x3ba3198a
 800ebf0:	6dc9c883 	.word	0x6dc9c883
 800ebf4:	3fe45f30 	.word	0x3fe45f30
 800ebf8:	2e000000 	.word	0x2e000000
 800ebfc:	3ba3198a 	.word	0x3ba3198a
 800ec00:	252049c1 	.word	0x252049c1
 800ec04:	397b839a 	.word	0x397b839a
 800ec08:	3fe921fb 	.word	0x3fe921fb
 800ec0c:	4002d97b 	.word	0x4002d97b
 800ec10:	3ff921fb 	.word	0x3ff921fb
 800ec14:	413921fb 	.word	0x413921fb
 800ec18:	3fe00000 	.word	0x3fe00000
 800ec1c:	08014f90 	.word	0x08014f90
 800ec20:	7fefffff 	.word	0x7fefffff
 800ec24:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ec28:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800ec2c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ec30:	4630      	mov	r0, r6
 800ec32:	460f      	mov	r7, r1
 800ec34:	f7f1 ff40 	bl	8000ab8 <__aeabi_d2iz>
 800ec38:	f7f1 fc24 	bl	8000484 <__aeabi_i2d>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	460b      	mov	r3, r1
 800ec40:	4630      	mov	r0, r6
 800ec42:	4639      	mov	r1, r7
 800ec44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ec48:	f7f1 face 	bl	80001e8 <__aeabi_dsub>
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	4b1f      	ldr	r3, [pc, #124]	; (800eccc <__ieee754_rem_pio2+0x3dc>)
 800ec50:	f7f1 fc82 	bl	8000558 <__aeabi_dmul>
 800ec54:	460f      	mov	r7, r1
 800ec56:	4606      	mov	r6, r0
 800ec58:	f7f1 ff2e 	bl	8000ab8 <__aeabi_d2iz>
 800ec5c:	f7f1 fc12 	bl	8000484 <__aeabi_i2d>
 800ec60:	4602      	mov	r2, r0
 800ec62:	460b      	mov	r3, r1
 800ec64:	4630      	mov	r0, r6
 800ec66:	4639      	mov	r1, r7
 800ec68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ec6c:	f7f1 fabc 	bl	80001e8 <__aeabi_dsub>
 800ec70:	2200      	movs	r2, #0
 800ec72:	4b16      	ldr	r3, [pc, #88]	; (800eccc <__ieee754_rem_pio2+0x3dc>)
 800ec74:	f7f1 fc70 	bl	8000558 <__aeabi_dmul>
 800ec78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ec7c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ec80:	f04f 0803 	mov.w	r8, #3
 800ec84:	2600      	movs	r6, #0
 800ec86:	2700      	movs	r7, #0
 800ec88:	4632      	mov	r2, r6
 800ec8a:	463b      	mov	r3, r7
 800ec8c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ec90:	f108 3aff 	add.w	sl, r8, #4294967295
 800ec94:	f7f1 fec8 	bl	8000a28 <__aeabi_dcmpeq>
 800ec98:	b9b0      	cbnz	r0, 800ecc8 <__ieee754_rem_pio2+0x3d8>
 800ec9a:	4b0d      	ldr	r3, [pc, #52]	; (800ecd0 <__ieee754_rem_pio2+0x3e0>)
 800ec9c:	9301      	str	r3, [sp, #4]
 800ec9e:	2302      	movs	r3, #2
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	462a      	mov	r2, r5
 800eca4:	4643      	mov	r3, r8
 800eca6:	4621      	mov	r1, r4
 800eca8:	a806      	add	r0, sp, #24
 800ecaa:	f000 f98d 	bl	800efc8 <__kernel_rem_pio2>
 800ecae:	9b04      	ldr	r3, [sp, #16]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	4605      	mov	r5, r0
 800ecb4:	f6bf ae58 	bge.w	800e968 <__ieee754_rem_pio2+0x78>
 800ecb8:	6863      	ldr	r3, [r4, #4]
 800ecba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ecbe:	6063      	str	r3, [r4, #4]
 800ecc0:	68e3      	ldr	r3, [r4, #12]
 800ecc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ecc6:	e746      	b.n	800eb56 <__ieee754_rem_pio2+0x266>
 800ecc8:	46d0      	mov	r8, sl
 800ecca:	e7dd      	b.n	800ec88 <__ieee754_rem_pio2+0x398>
 800eccc:	41700000 	.word	0x41700000
 800ecd0:	08015010 	.word	0x08015010

0800ecd4 <__ieee754_sqrt>:
 800ecd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd8:	4955      	ldr	r1, [pc, #340]	; (800ee30 <__ieee754_sqrt+0x15c>)
 800ecda:	ec55 4b10 	vmov	r4, r5, d0
 800ecde:	43a9      	bics	r1, r5
 800ece0:	462b      	mov	r3, r5
 800ece2:	462a      	mov	r2, r5
 800ece4:	d112      	bne.n	800ed0c <__ieee754_sqrt+0x38>
 800ece6:	ee10 2a10 	vmov	r2, s0
 800ecea:	ee10 0a10 	vmov	r0, s0
 800ecee:	4629      	mov	r1, r5
 800ecf0:	f7f1 fc32 	bl	8000558 <__aeabi_dmul>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	4629      	mov	r1, r5
 800ecfc:	f7f1 fa76 	bl	80001ec <__adddf3>
 800ed00:	4604      	mov	r4, r0
 800ed02:	460d      	mov	r5, r1
 800ed04:	ec45 4b10 	vmov	d0, r4, r5
 800ed08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed0c:	2d00      	cmp	r5, #0
 800ed0e:	ee10 0a10 	vmov	r0, s0
 800ed12:	4621      	mov	r1, r4
 800ed14:	dc0f      	bgt.n	800ed36 <__ieee754_sqrt+0x62>
 800ed16:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ed1a:	4330      	orrs	r0, r6
 800ed1c:	d0f2      	beq.n	800ed04 <__ieee754_sqrt+0x30>
 800ed1e:	b155      	cbz	r5, 800ed36 <__ieee754_sqrt+0x62>
 800ed20:	ee10 2a10 	vmov	r2, s0
 800ed24:	4620      	mov	r0, r4
 800ed26:	4629      	mov	r1, r5
 800ed28:	f7f1 fa5e 	bl	80001e8 <__aeabi_dsub>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	f7f1 fd3c 	bl	80007ac <__aeabi_ddiv>
 800ed34:	e7e4      	b.n	800ed00 <__ieee754_sqrt+0x2c>
 800ed36:	151b      	asrs	r3, r3, #20
 800ed38:	d073      	beq.n	800ee22 <__ieee754_sqrt+0x14e>
 800ed3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ed3e:	07dd      	lsls	r5, r3, #31
 800ed40:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ed44:	bf48      	it	mi
 800ed46:	0fc8      	lsrmi	r0, r1, #31
 800ed48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ed4c:	bf44      	itt	mi
 800ed4e:	0049      	lslmi	r1, r1, #1
 800ed50:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800ed54:	2500      	movs	r5, #0
 800ed56:	1058      	asrs	r0, r3, #1
 800ed58:	0fcb      	lsrs	r3, r1, #31
 800ed5a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ed5e:	0049      	lsls	r1, r1, #1
 800ed60:	2316      	movs	r3, #22
 800ed62:	462c      	mov	r4, r5
 800ed64:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ed68:	19a7      	adds	r7, r4, r6
 800ed6a:	4297      	cmp	r7, r2
 800ed6c:	bfde      	ittt	le
 800ed6e:	19bc      	addle	r4, r7, r6
 800ed70:	1bd2      	suble	r2, r2, r7
 800ed72:	19ad      	addle	r5, r5, r6
 800ed74:	0fcf      	lsrs	r7, r1, #31
 800ed76:	3b01      	subs	r3, #1
 800ed78:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800ed7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ed80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ed84:	d1f0      	bne.n	800ed68 <__ieee754_sqrt+0x94>
 800ed86:	f04f 0c20 	mov.w	ip, #32
 800ed8a:	469e      	mov	lr, r3
 800ed8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ed90:	42a2      	cmp	r2, r4
 800ed92:	eb06 070e 	add.w	r7, r6, lr
 800ed96:	dc02      	bgt.n	800ed9e <__ieee754_sqrt+0xca>
 800ed98:	d112      	bne.n	800edc0 <__ieee754_sqrt+0xec>
 800ed9a:	428f      	cmp	r7, r1
 800ed9c:	d810      	bhi.n	800edc0 <__ieee754_sqrt+0xec>
 800ed9e:	2f00      	cmp	r7, #0
 800eda0:	eb07 0e06 	add.w	lr, r7, r6
 800eda4:	da42      	bge.n	800ee2c <__ieee754_sqrt+0x158>
 800eda6:	f1be 0f00 	cmp.w	lr, #0
 800edaa:	db3f      	blt.n	800ee2c <__ieee754_sqrt+0x158>
 800edac:	f104 0801 	add.w	r8, r4, #1
 800edb0:	1b12      	subs	r2, r2, r4
 800edb2:	428f      	cmp	r7, r1
 800edb4:	bf88      	it	hi
 800edb6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800edba:	1bc9      	subs	r1, r1, r7
 800edbc:	4433      	add	r3, r6
 800edbe:	4644      	mov	r4, r8
 800edc0:	0052      	lsls	r2, r2, #1
 800edc2:	f1bc 0c01 	subs.w	ip, ip, #1
 800edc6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800edca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800edce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800edd2:	d1dd      	bne.n	800ed90 <__ieee754_sqrt+0xbc>
 800edd4:	430a      	orrs	r2, r1
 800edd6:	d006      	beq.n	800ede6 <__ieee754_sqrt+0x112>
 800edd8:	1c5c      	adds	r4, r3, #1
 800edda:	bf13      	iteet	ne
 800eddc:	3301      	addne	r3, #1
 800edde:	3501      	addeq	r5, #1
 800ede0:	4663      	moveq	r3, ip
 800ede2:	f023 0301 	bicne.w	r3, r3, #1
 800ede6:	106a      	asrs	r2, r5, #1
 800ede8:	085b      	lsrs	r3, r3, #1
 800edea:	07e9      	lsls	r1, r5, #31
 800edec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800edf0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800edf4:	bf48      	it	mi
 800edf6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800edfa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800edfe:	461c      	mov	r4, r3
 800ee00:	e780      	b.n	800ed04 <__ieee754_sqrt+0x30>
 800ee02:	0aca      	lsrs	r2, r1, #11
 800ee04:	3815      	subs	r0, #21
 800ee06:	0549      	lsls	r1, r1, #21
 800ee08:	2a00      	cmp	r2, #0
 800ee0a:	d0fa      	beq.n	800ee02 <__ieee754_sqrt+0x12e>
 800ee0c:	02d6      	lsls	r6, r2, #11
 800ee0e:	d50a      	bpl.n	800ee26 <__ieee754_sqrt+0x152>
 800ee10:	f1c3 0420 	rsb	r4, r3, #32
 800ee14:	fa21 f404 	lsr.w	r4, r1, r4
 800ee18:	1e5d      	subs	r5, r3, #1
 800ee1a:	4099      	lsls	r1, r3
 800ee1c:	4322      	orrs	r2, r4
 800ee1e:	1b43      	subs	r3, r0, r5
 800ee20:	e78b      	b.n	800ed3a <__ieee754_sqrt+0x66>
 800ee22:	4618      	mov	r0, r3
 800ee24:	e7f0      	b.n	800ee08 <__ieee754_sqrt+0x134>
 800ee26:	0052      	lsls	r2, r2, #1
 800ee28:	3301      	adds	r3, #1
 800ee2a:	e7ef      	b.n	800ee0c <__ieee754_sqrt+0x138>
 800ee2c:	46a0      	mov	r8, r4
 800ee2e:	e7bf      	b.n	800edb0 <__ieee754_sqrt+0xdc>
 800ee30:	7ff00000 	.word	0x7ff00000
 800ee34:	00000000 	.word	0x00000000

0800ee38 <__kernel_cos>:
 800ee38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee3c:	ec59 8b10 	vmov	r8, r9, d0
 800ee40:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800ee44:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800ee48:	ed2d 8b02 	vpush	{d8}
 800ee4c:	eeb0 8a41 	vmov.f32	s16, s2
 800ee50:	eef0 8a61 	vmov.f32	s17, s3
 800ee54:	da07      	bge.n	800ee66 <__kernel_cos+0x2e>
 800ee56:	ee10 0a10 	vmov	r0, s0
 800ee5a:	4649      	mov	r1, r9
 800ee5c:	f7f1 fe2c 	bl	8000ab8 <__aeabi_d2iz>
 800ee60:	2800      	cmp	r0, #0
 800ee62:	f000 8089 	beq.w	800ef78 <__kernel_cos+0x140>
 800ee66:	4642      	mov	r2, r8
 800ee68:	464b      	mov	r3, r9
 800ee6a:	4640      	mov	r0, r8
 800ee6c:	4649      	mov	r1, r9
 800ee6e:	f7f1 fb73 	bl	8000558 <__aeabi_dmul>
 800ee72:	2200      	movs	r2, #0
 800ee74:	4b4e      	ldr	r3, [pc, #312]	; (800efb0 <__kernel_cos+0x178>)
 800ee76:	4604      	mov	r4, r0
 800ee78:	460d      	mov	r5, r1
 800ee7a:	f7f1 fb6d 	bl	8000558 <__aeabi_dmul>
 800ee7e:	a340      	add	r3, pc, #256	; (adr r3, 800ef80 <__kernel_cos+0x148>)
 800ee80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee84:	4682      	mov	sl, r0
 800ee86:	468b      	mov	fp, r1
 800ee88:	4620      	mov	r0, r4
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	f7f1 fb64 	bl	8000558 <__aeabi_dmul>
 800ee90:	a33d      	add	r3, pc, #244	; (adr r3, 800ef88 <__kernel_cos+0x150>)
 800ee92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee96:	f7f1 f9a9 	bl	80001ec <__adddf3>
 800ee9a:	4622      	mov	r2, r4
 800ee9c:	462b      	mov	r3, r5
 800ee9e:	f7f1 fb5b 	bl	8000558 <__aeabi_dmul>
 800eea2:	a33b      	add	r3, pc, #236	; (adr r3, 800ef90 <__kernel_cos+0x158>)
 800eea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea8:	f7f1 f99e 	bl	80001e8 <__aeabi_dsub>
 800eeac:	4622      	mov	r2, r4
 800eeae:	462b      	mov	r3, r5
 800eeb0:	f7f1 fb52 	bl	8000558 <__aeabi_dmul>
 800eeb4:	a338      	add	r3, pc, #224	; (adr r3, 800ef98 <__kernel_cos+0x160>)
 800eeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeba:	f7f1 f997 	bl	80001ec <__adddf3>
 800eebe:	4622      	mov	r2, r4
 800eec0:	462b      	mov	r3, r5
 800eec2:	f7f1 fb49 	bl	8000558 <__aeabi_dmul>
 800eec6:	a336      	add	r3, pc, #216	; (adr r3, 800efa0 <__kernel_cos+0x168>)
 800eec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eecc:	f7f1 f98c 	bl	80001e8 <__aeabi_dsub>
 800eed0:	4622      	mov	r2, r4
 800eed2:	462b      	mov	r3, r5
 800eed4:	f7f1 fb40 	bl	8000558 <__aeabi_dmul>
 800eed8:	a333      	add	r3, pc, #204	; (adr r3, 800efa8 <__kernel_cos+0x170>)
 800eeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eede:	f7f1 f985 	bl	80001ec <__adddf3>
 800eee2:	4622      	mov	r2, r4
 800eee4:	462b      	mov	r3, r5
 800eee6:	f7f1 fb37 	bl	8000558 <__aeabi_dmul>
 800eeea:	4622      	mov	r2, r4
 800eeec:	462b      	mov	r3, r5
 800eeee:	f7f1 fb33 	bl	8000558 <__aeabi_dmul>
 800eef2:	ec53 2b18 	vmov	r2, r3, d8
 800eef6:	4604      	mov	r4, r0
 800eef8:	460d      	mov	r5, r1
 800eefa:	4640      	mov	r0, r8
 800eefc:	4649      	mov	r1, r9
 800eefe:	f7f1 fb2b 	bl	8000558 <__aeabi_dmul>
 800ef02:	460b      	mov	r3, r1
 800ef04:	4602      	mov	r2, r0
 800ef06:	4629      	mov	r1, r5
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f7f1 f96d 	bl	80001e8 <__aeabi_dsub>
 800ef0e:	4b29      	ldr	r3, [pc, #164]	; (800efb4 <__kernel_cos+0x17c>)
 800ef10:	429e      	cmp	r6, r3
 800ef12:	4680      	mov	r8, r0
 800ef14:	4689      	mov	r9, r1
 800ef16:	dc11      	bgt.n	800ef3c <__kernel_cos+0x104>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	4650      	mov	r0, sl
 800ef1e:	4659      	mov	r1, fp
 800ef20:	f7f1 f962 	bl	80001e8 <__aeabi_dsub>
 800ef24:	460b      	mov	r3, r1
 800ef26:	4924      	ldr	r1, [pc, #144]	; (800efb8 <__kernel_cos+0x180>)
 800ef28:	4602      	mov	r2, r0
 800ef2a:	2000      	movs	r0, #0
 800ef2c:	f7f1 f95c 	bl	80001e8 <__aeabi_dsub>
 800ef30:	ecbd 8b02 	vpop	{d8}
 800ef34:	ec41 0b10 	vmov	d0, r0, r1
 800ef38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef3c:	4b1f      	ldr	r3, [pc, #124]	; (800efbc <__kernel_cos+0x184>)
 800ef3e:	491e      	ldr	r1, [pc, #120]	; (800efb8 <__kernel_cos+0x180>)
 800ef40:	429e      	cmp	r6, r3
 800ef42:	bfcc      	ite	gt
 800ef44:	4d1e      	ldrgt	r5, [pc, #120]	; (800efc0 <__kernel_cos+0x188>)
 800ef46:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ef4a:	2400      	movs	r4, #0
 800ef4c:	4622      	mov	r2, r4
 800ef4e:	462b      	mov	r3, r5
 800ef50:	2000      	movs	r0, #0
 800ef52:	f7f1 f949 	bl	80001e8 <__aeabi_dsub>
 800ef56:	4622      	mov	r2, r4
 800ef58:	4606      	mov	r6, r0
 800ef5a:	460f      	mov	r7, r1
 800ef5c:	462b      	mov	r3, r5
 800ef5e:	4650      	mov	r0, sl
 800ef60:	4659      	mov	r1, fp
 800ef62:	f7f1 f941 	bl	80001e8 <__aeabi_dsub>
 800ef66:	4642      	mov	r2, r8
 800ef68:	464b      	mov	r3, r9
 800ef6a:	f7f1 f93d 	bl	80001e8 <__aeabi_dsub>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	460b      	mov	r3, r1
 800ef72:	4630      	mov	r0, r6
 800ef74:	4639      	mov	r1, r7
 800ef76:	e7d9      	b.n	800ef2c <__kernel_cos+0xf4>
 800ef78:	2000      	movs	r0, #0
 800ef7a:	490f      	ldr	r1, [pc, #60]	; (800efb8 <__kernel_cos+0x180>)
 800ef7c:	e7d8      	b.n	800ef30 <__kernel_cos+0xf8>
 800ef7e:	bf00      	nop
 800ef80:	be8838d4 	.word	0xbe8838d4
 800ef84:	bda8fae9 	.word	0xbda8fae9
 800ef88:	bdb4b1c4 	.word	0xbdb4b1c4
 800ef8c:	3e21ee9e 	.word	0x3e21ee9e
 800ef90:	809c52ad 	.word	0x809c52ad
 800ef94:	3e927e4f 	.word	0x3e927e4f
 800ef98:	19cb1590 	.word	0x19cb1590
 800ef9c:	3efa01a0 	.word	0x3efa01a0
 800efa0:	16c15177 	.word	0x16c15177
 800efa4:	3f56c16c 	.word	0x3f56c16c
 800efa8:	5555554c 	.word	0x5555554c
 800efac:	3fa55555 	.word	0x3fa55555
 800efb0:	3fe00000 	.word	0x3fe00000
 800efb4:	3fd33332 	.word	0x3fd33332
 800efb8:	3ff00000 	.word	0x3ff00000
 800efbc:	3fe90000 	.word	0x3fe90000
 800efc0:	3fd20000 	.word	0x3fd20000
 800efc4:	00000000 	.word	0x00000000

0800efc8 <__kernel_rem_pio2>:
 800efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	ed2d 8b02 	vpush	{d8}
 800efd0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800efd4:	1ed4      	subs	r4, r2, #3
 800efd6:	9308      	str	r3, [sp, #32]
 800efd8:	9101      	str	r1, [sp, #4]
 800efda:	4bc5      	ldr	r3, [pc, #788]	; (800f2f0 <__kernel_rem_pio2+0x328>)
 800efdc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800efde:	9009      	str	r0, [sp, #36]	; 0x24
 800efe0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800efe4:	9304      	str	r3, [sp, #16]
 800efe6:	9b08      	ldr	r3, [sp, #32]
 800efe8:	3b01      	subs	r3, #1
 800efea:	9307      	str	r3, [sp, #28]
 800efec:	2318      	movs	r3, #24
 800efee:	fb94 f4f3 	sdiv	r4, r4, r3
 800eff2:	f06f 0317 	mvn.w	r3, #23
 800eff6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800effa:	fb04 3303 	mla	r3, r4, r3, r3
 800effe:	eb03 0a02 	add.w	sl, r3, r2
 800f002:	9b04      	ldr	r3, [sp, #16]
 800f004:	9a07      	ldr	r2, [sp, #28]
 800f006:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f2e0 <__kernel_rem_pio2+0x318>
 800f00a:	eb03 0802 	add.w	r8, r3, r2
 800f00e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f010:	1aa7      	subs	r7, r4, r2
 800f012:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f016:	ae22      	add	r6, sp, #136	; 0x88
 800f018:	2500      	movs	r5, #0
 800f01a:	4545      	cmp	r5, r8
 800f01c:	dd13      	ble.n	800f046 <__kernel_rem_pio2+0x7e>
 800f01e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800f2e0 <__kernel_rem_pio2+0x318>
 800f022:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f026:	2600      	movs	r6, #0
 800f028:	9b04      	ldr	r3, [sp, #16]
 800f02a:	429e      	cmp	r6, r3
 800f02c:	dc32      	bgt.n	800f094 <__kernel_rem_pio2+0xcc>
 800f02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f030:	9302      	str	r3, [sp, #8]
 800f032:	9b08      	ldr	r3, [sp, #32]
 800f034:	199d      	adds	r5, r3, r6
 800f036:	ab22      	add	r3, sp, #136	; 0x88
 800f038:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f03c:	9306      	str	r3, [sp, #24]
 800f03e:	ec59 8b18 	vmov	r8, r9, d8
 800f042:	2700      	movs	r7, #0
 800f044:	e01f      	b.n	800f086 <__kernel_rem_pio2+0xbe>
 800f046:	42ef      	cmn	r7, r5
 800f048:	d407      	bmi.n	800f05a <__kernel_rem_pio2+0x92>
 800f04a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f04e:	f7f1 fa19 	bl	8000484 <__aeabi_i2d>
 800f052:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f056:	3501      	adds	r5, #1
 800f058:	e7df      	b.n	800f01a <__kernel_rem_pio2+0x52>
 800f05a:	ec51 0b18 	vmov	r0, r1, d8
 800f05e:	e7f8      	b.n	800f052 <__kernel_rem_pio2+0x8a>
 800f060:	9906      	ldr	r1, [sp, #24]
 800f062:	9d02      	ldr	r5, [sp, #8]
 800f064:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800f068:	9106      	str	r1, [sp, #24]
 800f06a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800f06e:	9502      	str	r5, [sp, #8]
 800f070:	f7f1 fa72 	bl	8000558 <__aeabi_dmul>
 800f074:	4602      	mov	r2, r0
 800f076:	460b      	mov	r3, r1
 800f078:	4640      	mov	r0, r8
 800f07a:	4649      	mov	r1, r9
 800f07c:	f7f1 f8b6 	bl	80001ec <__adddf3>
 800f080:	3701      	adds	r7, #1
 800f082:	4680      	mov	r8, r0
 800f084:	4689      	mov	r9, r1
 800f086:	9b07      	ldr	r3, [sp, #28]
 800f088:	429f      	cmp	r7, r3
 800f08a:	dde9      	ble.n	800f060 <__kernel_rem_pio2+0x98>
 800f08c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800f090:	3601      	adds	r6, #1
 800f092:	e7c9      	b.n	800f028 <__kernel_rem_pio2+0x60>
 800f094:	9b04      	ldr	r3, [sp, #16]
 800f096:	aa0e      	add	r2, sp, #56	; 0x38
 800f098:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f09c:	930c      	str	r3, [sp, #48]	; 0x30
 800f09e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f0a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f0a4:	9c04      	ldr	r4, [sp, #16]
 800f0a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0a8:	ab9a      	add	r3, sp, #616	; 0x268
 800f0aa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800f0ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f0b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0b6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800f0ba:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800f0be:	ab9a      	add	r3, sp, #616	; 0x268
 800f0c0:	445b      	add	r3, fp
 800f0c2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800f0c6:	2500      	movs	r5, #0
 800f0c8:	1b63      	subs	r3, r4, r5
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	dc78      	bgt.n	800f1c0 <__kernel_rem_pio2+0x1f8>
 800f0ce:	4650      	mov	r0, sl
 800f0d0:	ec49 8b10 	vmov	d0, r8, r9
 800f0d4:	f000 fc98 	bl	800fa08 <scalbn>
 800f0d8:	ec57 6b10 	vmov	r6, r7, d0
 800f0dc:	2200      	movs	r2, #0
 800f0de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f0e2:	ee10 0a10 	vmov	r0, s0
 800f0e6:	4639      	mov	r1, r7
 800f0e8:	f7f1 fa36 	bl	8000558 <__aeabi_dmul>
 800f0ec:	ec41 0b10 	vmov	d0, r0, r1
 800f0f0:	f000 fb76 	bl	800f7e0 <floor>
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	ec51 0b10 	vmov	r0, r1, d0
 800f0fa:	4b7e      	ldr	r3, [pc, #504]	; (800f2f4 <__kernel_rem_pio2+0x32c>)
 800f0fc:	f7f1 fa2c 	bl	8000558 <__aeabi_dmul>
 800f100:	4602      	mov	r2, r0
 800f102:	460b      	mov	r3, r1
 800f104:	4630      	mov	r0, r6
 800f106:	4639      	mov	r1, r7
 800f108:	f7f1 f86e 	bl	80001e8 <__aeabi_dsub>
 800f10c:	460f      	mov	r7, r1
 800f10e:	4606      	mov	r6, r0
 800f110:	f7f1 fcd2 	bl	8000ab8 <__aeabi_d2iz>
 800f114:	9006      	str	r0, [sp, #24]
 800f116:	f7f1 f9b5 	bl	8000484 <__aeabi_i2d>
 800f11a:	4602      	mov	r2, r0
 800f11c:	460b      	mov	r3, r1
 800f11e:	4630      	mov	r0, r6
 800f120:	4639      	mov	r1, r7
 800f122:	f7f1 f861 	bl	80001e8 <__aeabi_dsub>
 800f126:	f1ba 0f00 	cmp.w	sl, #0
 800f12a:	4606      	mov	r6, r0
 800f12c:	460f      	mov	r7, r1
 800f12e:	dd6c      	ble.n	800f20a <__kernel_rem_pio2+0x242>
 800f130:	1e62      	subs	r2, r4, #1
 800f132:	ab0e      	add	r3, sp, #56	; 0x38
 800f134:	f1ca 0118 	rsb	r1, sl, #24
 800f138:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f13c:	9d06      	ldr	r5, [sp, #24]
 800f13e:	fa40 f301 	asr.w	r3, r0, r1
 800f142:	441d      	add	r5, r3
 800f144:	408b      	lsls	r3, r1
 800f146:	1ac0      	subs	r0, r0, r3
 800f148:	ab0e      	add	r3, sp, #56	; 0x38
 800f14a:	9506      	str	r5, [sp, #24]
 800f14c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f150:	f1ca 0317 	rsb	r3, sl, #23
 800f154:	fa40 f303 	asr.w	r3, r0, r3
 800f158:	9302      	str	r3, [sp, #8]
 800f15a:	9b02      	ldr	r3, [sp, #8]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	dd62      	ble.n	800f226 <__kernel_rem_pio2+0x25e>
 800f160:	9b06      	ldr	r3, [sp, #24]
 800f162:	2200      	movs	r2, #0
 800f164:	3301      	adds	r3, #1
 800f166:	9306      	str	r3, [sp, #24]
 800f168:	4615      	mov	r5, r2
 800f16a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f16e:	4294      	cmp	r4, r2
 800f170:	f300 8095 	bgt.w	800f29e <__kernel_rem_pio2+0x2d6>
 800f174:	f1ba 0f00 	cmp.w	sl, #0
 800f178:	dd07      	ble.n	800f18a <__kernel_rem_pio2+0x1c2>
 800f17a:	f1ba 0f01 	cmp.w	sl, #1
 800f17e:	f000 80a2 	beq.w	800f2c6 <__kernel_rem_pio2+0x2fe>
 800f182:	f1ba 0f02 	cmp.w	sl, #2
 800f186:	f000 80c1 	beq.w	800f30c <__kernel_rem_pio2+0x344>
 800f18a:	9b02      	ldr	r3, [sp, #8]
 800f18c:	2b02      	cmp	r3, #2
 800f18e:	d14a      	bne.n	800f226 <__kernel_rem_pio2+0x25e>
 800f190:	4632      	mov	r2, r6
 800f192:	463b      	mov	r3, r7
 800f194:	2000      	movs	r0, #0
 800f196:	4958      	ldr	r1, [pc, #352]	; (800f2f8 <__kernel_rem_pio2+0x330>)
 800f198:	f7f1 f826 	bl	80001e8 <__aeabi_dsub>
 800f19c:	4606      	mov	r6, r0
 800f19e:	460f      	mov	r7, r1
 800f1a0:	2d00      	cmp	r5, #0
 800f1a2:	d040      	beq.n	800f226 <__kernel_rem_pio2+0x25e>
 800f1a4:	4650      	mov	r0, sl
 800f1a6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f2e8 <__kernel_rem_pio2+0x320>
 800f1aa:	f000 fc2d 	bl	800fa08 <scalbn>
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	ec53 2b10 	vmov	r2, r3, d0
 800f1b6:	f7f1 f817 	bl	80001e8 <__aeabi_dsub>
 800f1ba:	4606      	mov	r6, r0
 800f1bc:	460f      	mov	r7, r1
 800f1be:	e032      	b.n	800f226 <__kernel_rem_pio2+0x25e>
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	4b4e      	ldr	r3, [pc, #312]	; (800f2fc <__kernel_rem_pio2+0x334>)
 800f1c4:	4640      	mov	r0, r8
 800f1c6:	4649      	mov	r1, r9
 800f1c8:	f7f1 f9c6 	bl	8000558 <__aeabi_dmul>
 800f1cc:	f7f1 fc74 	bl	8000ab8 <__aeabi_d2iz>
 800f1d0:	f7f1 f958 	bl	8000484 <__aeabi_i2d>
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	4b4a      	ldr	r3, [pc, #296]	; (800f300 <__kernel_rem_pio2+0x338>)
 800f1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1dc:	f7f1 f9bc 	bl	8000558 <__aeabi_dmul>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	4640      	mov	r0, r8
 800f1e6:	4649      	mov	r1, r9
 800f1e8:	f7f0 fffe 	bl	80001e8 <__aeabi_dsub>
 800f1ec:	f7f1 fc64 	bl	8000ab8 <__aeabi_d2iz>
 800f1f0:	ab0e      	add	r3, sp, #56	; 0x38
 800f1f2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f1f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f1fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1fe:	f7f0 fff5 	bl	80001ec <__adddf3>
 800f202:	3501      	adds	r5, #1
 800f204:	4680      	mov	r8, r0
 800f206:	4689      	mov	r9, r1
 800f208:	e75e      	b.n	800f0c8 <__kernel_rem_pio2+0x100>
 800f20a:	d105      	bne.n	800f218 <__kernel_rem_pio2+0x250>
 800f20c:	1e63      	subs	r3, r4, #1
 800f20e:	aa0e      	add	r2, sp, #56	; 0x38
 800f210:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f214:	15c3      	asrs	r3, r0, #23
 800f216:	e79f      	b.n	800f158 <__kernel_rem_pio2+0x190>
 800f218:	2200      	movs	r2, #0
 800f21a:	4b3a      	ldr	r3, [pc, #232]	; (800f304 <__kernel_rem_pio2+0x33c>)
 800f21c:	f7f1 fc22 	bl	8000a64 <__aeabi_dcmpge>
 800f220:	2800      	cmp	r0, #0
 800f222:	d139      	bne.n	800f298 <__kernel_rem_pio2+0x2d0>
 800f224:	9002      	str	r0, [sp, #8]
 800f226:	2200      	movs	r2, #0
 800f228:	2300      	movs	r3, #0
 800f22a:	4630      	mov	r0, r6
 800f22c:	4639      	mov	r1, r7
 800f22e:	f7f1 fbfb 	bl	8000a28 <__aeabi_dcmpeq>
 800f232:	2800      	cmp	r0, #0
 800f234:	f000 80c7 	beq.w	800f3c6 <__kernel_rem_pio2+0x3fe>
 800f238:	1e65      	subs	r5, r4, #1
 800f23a:	462b      	mov	r3, r5
 800f23c:	2200      	movs	r2, #0
 800f23e:	9904      	ldr	r1, [sp, #16]
 800f240:	428b      	cmp	r3, r1
 800f242:	da6a      	bge.n	800f31a <__kernel_rem_pio2+0x352>
 800f244:	2a00      	cmp	r2, #0
 800f246:	f000 8088 	beq.w	800f35a <__kernel_rem_pio2+0x392>
 800f24a:	ab0e      	add	r3, sp, #56	; 0x38
 800f24c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f250:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f254:	2b00      	cmp	r3, #0
 800f256:	f000 80b4 	beq.w	800f3c2 <__kernel_rem_pio2+0x3fa>
 800f25a:	4650      	mov	r0, sl
 800f25c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800f2e8 <__kernel_rem_pio2+0x320>
 800f260:	f000 fbd2 	bl	800fa08 <scalbn>
 800f264:	00ec      	lsls	r4, r5, #3
 800f266:	ab72      	add	r3, sp, #456	; 0x1c8
 800f268:	191e      	adds	r6, r3, r4
 800f26a:	ec59 8b10 	vmov	r8, r9, d0
 800f26e:	f106 0a08 	add.w	sl, r6, #8
 800f272:	462f      	mov	r7, r5
 800f274:	2f00      	cmp	r7, #0
 800f276:	f280 80df 	bge.w	800f438 <__kernel_rem_pio2+0x470>
 800f27a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800f2e0 <__kernel_rem_pio2+0x318>
 800f27e:	f04f 0a00 	mov.w	sl, #0
 800f282:	eba5 030a 	sub.w	r3, r5, sl
 800f286:	2b00      	cmp	r3, #0
 800f288:	f2c0 810a 	blt.w	800f4a0 <__kernel_rem_pio2+0x4d8>
 800f28c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800f308 <__kernel_rem_pio2+0x340>
 800f290:	ec59 8b18 	vmov	r8, r9, d8
 800f294:	2700      	movs	r7, #0
 800f296:	e0f5      	b.n	800f484 <__kernel_rem_pio2+0x4bc>
 800f298:	2302      	movs	r3, #2
 800f29a:	9302      	str	r3, [sp, #8]
 800f29c:	e760      	b.n	800f160 <__kernel_rem_pio2+0x198>
 800f29e:	ab0e      	add	r3, sp, #56	; 0x38
 800f2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a4:	b94d      	cbnz	r5, 800f2ba <__kernel_rem_pio2+0x2f2>
 800f2a6:	b12b      	cbz	r3, 800f2b4 <__kernel_rem_pio2+0x2ec>
 800f2a8:	a80e      	add	r0, sp, #56	; 0x38
 800f2aa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f2ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	3201      	adds	r2, #1
 800f2b6:	461d      	mov	r5, r3
 800f2b8:	e759      	b.n	800f16e <__kernel_rem_pio2+0x1a6>
 800f2ba:	a80e      	add	r0, sp, #56	; 0x38
 800f2bc:	1acb      	subs	r3, r1, r3
 800f2be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f2c2:	462b      	mov	r3, r5
 800f2c4:	e7f6      	b.n	800f2b4 <__kernel_rem_pio2+0x2ec>
 800f2c6:	1e62      	subs	r2, r4, #1
 800f2c8:	ab0e      	add	r3, sp, #56	; 0x38
 800f2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f2d2:	a90e      	add	r1, sp, #56	; 0x38
 800f2d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f2d8:	e757      	b.n	800f18a <__kernel_rem_pio2+0x1c2>
 800f2da:	bf00      	nop
 800f2dc:	f3af 8000 	nop.w
	...
 800f2ec:	3ff00000 	.word	0x3ff00000
 800f2f0:	08015158 	.word	0x08015158
 800f2f4:	40200000 	.word	0x40200000
 800f2f8:	3ff00000 	.word	0x3ff00000
 800f2fc:	3e700000 	.word	0x3e700000
 800f300:	41700000 	.word	0x41700000
 800f304:	3fe00000 	.word	0x3fe00000
 800f308:	08015118 	.word	0x08015118
 800f30c:	1e62      	subs	r2, r4, #1
 800f30e:	ab0e      	add	r3, sp, #56	; 0x38
 800f310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f314:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f318:	e7db      	b.n	800f2d2 <__kernel_rem_pio2+0x30a>
 800f31a:	a90e      	add	r1, sp, #56	; 0x38
 800f31c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f320:	3b01      	subs	r3, #1
 800f322:	430a      	orrs	r2, r1
 800f324:	e78b      	b.n	800f23e <__kernel_rem_pio2+0x276>
 800f326:	3301      	adds	r3, #1
 800f328:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f32c:	2900      	cmp	r1, #0
 800f32e:	d0fa      	beq.n	800f326 <__kernel_rem_pio2+0x35e>
 800f330:	9a08      	ldr	r2, [sp, #32]
 800f332:	4422      	add	r2, r4
 800f334:	00d2      	lsls	r2, r2, #3
 800f336:	a922      	add	r1, sp, #136	; 0x88
 800f338:	18e3      	adds	r3, r4, r3
 800f33a:	9206      	str	r2, [sp, #24]
 800f33c:	440a      	add	r2, r1
 800f33e:	9302      	str	r3, [sp, #8]
 800f340:	f10b 0108 	add.w	r1, fp, #8
 800f344:	f102 0308 	add.w	r3, r2, #8
 800f348:	1c66      	adds	r6, r4, #1
 800f34a:	910a      	str	r1, [sp, #40]	; 0x28
 800f34c:	2500      	movs	r5, #0
 800f34e:	930d      	str	r3, [sp, #52]	; 0x34
 800f350:	9b02      	ldr	r3, [sp, #8]
 800f352:	42b3      	cmp	r3, r6
 800f354:	da04      	bge.n	800f360 <__kernel_rem_pio2+0x398>
 800f356:	461c      	mov	r4, r3
 800f358:	e6a6      	b.n	800f0a8 <__kernel_rem_pio2+0xe0>
 800f35a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f35c:	2301      	movs	r3, #1
 800f35e:	e7e3      	b.n	800f328 <__kernel_rem_pio2+0x360>
 800f360:	9b06      	ldr	r3, [sp, #24]
 800f362:	18ef      	adds	r7, r5, r3
 800f364:	ab22      	add	r3, sp, #136	; 0x88
 800f366:	441f      	add	r7, r3
 800f368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f36a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f36e:	f7f1 f889 	bl	8000484 <__aeabi_i2d>
 800f372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f374:	461c      	mov	r4, r3
 800f376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f378:	e9c7 0100 	strd	r0, r1, [r7]
 800f37c:	eb03 0b05 	add.w	fp, r3, r5
 800f380:	2700      	movs	r7, #0
 800f382:	f04f 0800 	mov.w	r8, #0
 800f386:	f04f 0900 	mov.w	r9, #0
 800f38a:	9b07      	ldr	r3, [sp, #28]
 800f38c:	429f      	cmp	r7, r3
 800f38e:	dd08      	ble.n	800f3a2 <__kernel_rem_pio2+0x3da>
 800f390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f392:	aa72      	add	r2, sp, #456	; 0x1c8
 800f394:	18eb      	adds	r3, r5, r3
 800f396:	4413      	add	r3, r2
 800f398:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800f39c:	3601      	adds	r6, #1
 800f39e:	3508      	adds	r5, #8
 800f3a0:	e7d6      	b.n	800f350 <__kernel_rem_pio2+0x388>
 800f3a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f3a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f3aa:	f7f1 f8d5 	bl	8000558 <__aeabi_dmul>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	4640      	mov	r0, r8
 800f3b4:	4649      	mov	r1, r9
 800f3b6:	f7f0 ff19 	bl	80001ec <__adddf3>
 800f3ba:	3701      	adds	r7, #1
 800f3bc:	4680      	mov	r8, r0
 800f3be:	4689      	mov	r9, r1
 800f3c0:	e7e3      	b.n	800f38a <__kernel_rem_pio2+0x3c2>
 800f3c2:	3d01      	subs	r5, #1
 800f3c4:	e741      	b.n	800f24a <__kernel_rem_pio2+0x282>
 800f3c6:	f1ca 0000 	rsb	r0, sl, #0
 800f3ca:	ec47 6b10 	vmov	d0, r6, r7
 800f3ce:	f000 fb1b 	bl	800fa08 <scalbn>
 800f3d2:	ec57 6b10 	vmov	r6, r7, d0
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	4b99      	ldr	r3, [pc, #612]	; (800f640 <__kernel_rem_pio2+0x678>)
 800f3da:	ee10 0a10 	vmov	r0, s0
 800f3de:	4639      	mov	r1, r7
 800f3e0:	f7f1 fb40 	bl	8000a64 <__aeabi_dcmpge>
 800f3e4:	b1f8      	cbz	r0, 800f426 <__kernel_rem_pio2+0x45e>
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	4b96      	ldr	r3, [pc, #600]	; (800f644 <__kernel_rem_pio2+0x67c>)
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	4639      	mov	r1, r7
 800f3ee:	f7f1 f8b3 	bl	8000558 <__aeabi_dmul>
 800f3f2:	f7f1 fb61 	bl	8000ab8 <__aeabi_d2iz>
 800f3f6:	4680      	mov	r8, r0
 800f3f8:	f7f1 f844 	bl	8000484 <__aeabi_i2d>
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	4b90      	ldr	r3, [pc, #576]	; (800f640 <__kernel_rem_pio2+0x678>)
 800f400:	f7f1 f8aa 	bl	8000558 <__aeabi_dmul>
 800f404:	460b      	mov	r3, r1
 800f406:	4602      	mov	r2, r0
 800f408:	4639      	mov	r1, r7
 800f40a:	4630      	mov	r0, r6
 800f40c:	f7f0 feec 	bl	80001e8 <__aeabi_dsub>
 800f410:	f7f1 fb52 	bl	8000ab8 <__aeabi_d2iz>
 800f414:	1c65      	adds	r5, r4, #1
 800f416:	ab0e      	add	r3, sp, #56	; 0x38
 800f418:	f10a 0a18 	add.w	sl, sl, #24
 800f41c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f420:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f424:	e719      	b.n	800f25a <__kernel_rem_pio2+0x292>
 800f426:	4630      	mov	r0, r6
 800f428:	4639      	mov	r1, r7
 800f42a:	f7f1 fb45 	bl	8000ab8 <__aeabi_d2iz>
 800f42e:	ab0e      	add	r3, sp, #56	; 0x38
 800f430:	4625      	mov	r5, r4
 800f432:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f436:	e710      	b.n	800f25a <__kernel_rem_pio2+0x292>
 800f438:	ab0e      	add	r3, sp, #56	; 0x38
 800f43a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f43e:	f7f1 f821 	bl	8000484 <__aeabi_i2d>
 800f442:	4642      	mov	r2, r8
 800f444:	464b      	mov	r3, r9
 800f446:	f7f1 f887 	bl	8000558 <__aeabi_dmul>
 800f44a:	2200      	movs	r2, #0
 800f44c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f450:	4b7c      	ldr	r3, [pc, #496]	; (800f644 <__kernel_rem_pio2+0x67c>)
 800f452:	4640      	mov	r0, r8
 800f454:	4649      	mov	r1, r9
 800f456:	f7f1 f87f 	bl	8000558 <__aeabi_dmul>
 800f45a:	3f01      	subs	r7, #1
 800f45c:	4680      	mov	r8, r0
 800f45e:	4689      	mov	r9, r1
 800f460:	e708      	b.n	800f274 <__kernel_rem_pio2+0x2ac>
 800f462:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800f466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800f46e:	f7f1 f873 	bl	8000558 <__aeabi_dmul>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	4640      	mov	r0, r8
 800f478:	4649      	mov	r1, r9
 800f47a:	f7f0 feb7 	bl	80001ec <__adddf3>
 800f47e:	3701      	adds	r7, #1
 800f480:	4680      	mov	r8, r0
 800f482:	4689      	mov	r9, r1
 800f484:	9b04      	ldr	r3, [sp, #16]
 800f486:	429f      	cmp	r7, r3
 800f488:	dc01      	bgt.n	800f48e <__kernel_rem_pio2+0x4c6>
 800f48a:	45ba      	cmp	sl, r7
 800f48c:	dae9      	bge.n	800f462 <__kernel_rem_pio2+0x49a>
 800f48e:	ab4a      	add	r3, sp, #296	; 0x128
 800f490:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f494:	e9c3 8900 	strd	r8, r9, [r3]
 800f498:	f10a 0a01 	add.w	sl, sl, #1
 800f49c:	3e08      	subs	r6, #8
 800f49e:	e6f0      	b.n	800f282 <__kernel_rem_pio2+0x2ba>
 800f4a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f4a2:	2b03      	cmp	r3, #3
 800f4a4:	d85b      	bhi.n	800f55e <__kernel_rem_pio2+0x596>
 800f4a6:	e8df f003 	tbb	[pc, r3]
 800f4aa:	264a      	.short	0x264a
 800f4ac:	0226      	.short	0x0226
 800f4ae:	ab9a      	add	r3, sp, #616	; 0x268
 800f4b0:	441c      	add	r4, r3
 800f4b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f4b6:	46a2      	mov	sl, r4
 800f4b8:	46ab      	mov	fp, r5
 800f4ba:	f1bb 0f00 	cmp.w	fp, #0
 800f4be:	dc6c      	bgt.n	800f59a <__kernel_rem_pio2+0x5d2>
 800f4c0:	46a2      	mov	sl, r4
 800f4c2:	46ab      	mov	fp, r5
 800f4c4:	f1bb 0f01 	cmp.w	fp, #1
 800f4c8:	f300 8086 	bgt.w	800f5d8 <__kernel_rem_pio2+0x610>
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	2d01      	cmp	r5, #1
 800f4d2:	f300 80a0 	bgt.w	800f616 <__kernel_rem_pio2+0x64e>
 800f4d6:	9b02      	ldr	r3, [sp, #8]
 800f4d8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f4dc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f040 809e 	bne.w	800f622 <__kernel_rem_pio2+0x65a>
 800f4e6:	9b01      	ldr	r3, [sp, #4]
 800f4e8:	e9c3 7800 	strd	r7, r8, [r3]
 800f4ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f4f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f4f4:	e033      	b.n	800f55e <__kernel_rem_pio2+0x596>
 800f4f6:	3408      	adds	r4, #8
 800f4f8:	ab4a      	add	r3, sp, #296	; 0x128
 800f4fa:	441c      	add	r4, r3
 800f4fc:	462e      	mov	r6, r5
 800f4fe:	2000      	movs	r0, #0
 800f500:	2100      	movs	r1, #0
 800f502:	2e00      	cmp	r6, #0
 800f504:	da3a      	bge.n	800f57c <__kernel_rem_pio2+0x5b4>
 800f506:	9b02      	ldr	r3, [sp, #8]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d03d      	beq.n	800f588 <__kernel_rem_pio2+0x5c0>
 800f50c:	4602      	mov	r2, r0
 800f50e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f512:	9c01      	ldr	r4, [sp, #4]
 800f514:	e9c4 2300 	strd	r2, r3, [r4]
 800f518:	4602      	mov	r2, r0
 800f51a:	460b      	mov	r3, r1
 800f51c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f520:	f7f0 fe62 	bl	80001e8 <__aeabi_dsub>
 800f524:	ae4c      	add	r6, sp, #304	; 0x130
 800f526:	2401      	movs	r4, #1
 800f528:	42a5      	cmp	r5, r4
 800f52a:	da30      	bge.n	800f58e <__kernel_rem_pio2+0x5c6>
 800f52c:	9b02      	ldr	r3, [sp, #8]
 800f52e:	b113      	cbz	r3, 800f536 <__kernel_rem_pio2+0x56e>
 800f530:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f534:	4619      	mov	r1, r3
 800f536:	9b01      	ldr	r3, [sp, #4]
 800f538:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f53c:	e00f      	b.n	800f55e <__kernel_rem_pio2+0x596>
 800f53e:	ab9a      	add	r3, sp, #616	; 0x268
 800f540:	441c      	add	r4, r3
 800f542:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f546:	2000      	movs	r0, #0
 800f548:	2100      	movs	r1, #0
 800f54a:	2d00      	cmp	r5, #0
 800f54c:	da10      	bge.n	800f570 <__kernel_rem_pio2+0x5a8>
 800f54e:	9b02      	ldr	r3, [sp, #8]
 800f550:	b113      	cbz	r3, 800f558 <__kernel_rem_pio2+0x590>
 800f552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f556:	4619      	mov	r1, r3
 800f558:	9b01      	ldr	r3, [sp, #4]
 800f55a:	e9c3 0100 	strd	r0, r1, [r3]
 800f55e:	9b06      	ldr	r3, [sp, #24]
 800f560:	f003 0007 	and.w	r0, r3, #7
 800f564:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f568:	ecbd 8b02 	vpop	{d8}
 800f56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f570:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f574:	f7f0 fe3a 	bl	80001ec <__adddf3>
 800f578:	3d01      	subs	r5, #1
 800f57a:	e7e6      	b.n	800f54a <__kernel_rem_pio2+0x582>
 800f57c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f580:	f7f0 fe34 	bl	80001ec <__adddf3>
 800f584:	3e01      	subs	r6, #1
 800f586:	e7bc      	b.n	800f502 <__kernel_rem_pio2+0x53a>
 800f588:	4602      	mov	r2, r0
 800f58a:	460b      	mov	r3, r1
 800f58c:	e7c1      	b.n	800f512 <__kernel_rem_pio2+0x54a>
 800f58e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f592:	f7f0 fe2b 	bl	80001ec <__adddf3>
 800f596:	3401      	adds	r4, #1
 800f598:	e7c6      	b.n	800f528 <__kernel_rem_pio2+0x560>
 800f59a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800f59e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f5a2:	4640      	mov	r0, r8
 800f5a4:	ec53 2b17 	vmov	r2, r3, d7
 800f5a8:	4649      	mov	r1, r9
 800f5aa:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f5ae:	f7f0 fe1d 	bl	80001ec <__adddf3>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	460f      	mov	r7, r1
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	4649      	mov	r1, r9
 800f5be:	f7f0 fe13 	bl	80001e8 <__aeabi_dsub>
 800f5c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5c6:	f7f0 fe11 	bl	80001ec <__adddf3>
 800f5ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f5ce:	e9ca 0100 	strd	r0, r1, [sl]
 800f5d2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800f5d6:	e770      	b.n	800f4ba <__kernel_rem_pio2+0x4f2>
 800f5d8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800f5dc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	ec53 2b17 	vmov	r2, r3, d7
 800f5e6:	4639      	mov	r1, r7
 800f5e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f5ec:	f7f0 fdfe 	bl	80001ec <__adddf3>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	460b      	mov	r3, r1
 800f5f4:	4680      	mov	r8, r0
 800f5f6:	4689      	mov	r9, r1
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	4639      	mov	r1, r7
 800f5fc:	f7f0 fdf4 	bl	80001e8 <__aeabi_dsub>
 800f600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f604:	f7f0 fdf2 	bl	80001ec <__adddf3>
 800f608:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f60c:	e9ca 0100 	strd	r0, r1, [sl]
 800f610:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800f614:	e756      	b.n	800f4c4 <__kernel_rem_pio2+0x4fc>
 800f616:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f61a:	f7f0 fde7 	bl	80001ec <__adddf3>
 800f61e:	3d01      	subs	r5, #1
 800f620:	e756      	b.n	800f4d0 <__kernel_rem_pio2+0x508>
 800f622:	9b01      	ldr	r3, [sp, #4]
 800f624:	9a01      	ldr	r2, [sp, #4]
 800f626:	601f      	str	r7, [r3, #0]
 800f628:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f62c:	605c      	str	r4, [r3, #4]
 800f62e:	609d      	str	r5, [r3, #8]
 800f630:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f634:	60d3      	str	r3, [r2, #12]
 800f636:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f63a:	6110      	str	r0, [r2, #16]
 800f63c:	6153      	str	r3, [r2, #20]
 800f63e:	e78e      	b.n	800f55e <__kernel_rem_pio2+0x596>
 800f640:	41700000 	.word	0x41700000
 800f644:	3e700000 	.word	0x3e700000

0800f648 <__kernel_sin>:
 800f648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f64c:	ec55 4b10 	vmov	r4, r5, d0
 800f650:	b085      	sub	sp, #20
 800f652:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f656:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f65a:	ed8d 1b00 	vstr	d1, [sp]
 800f65e:	9002      	str	r0, [sp, #8]
 800f660:	da06      	bge.n	800f670 <__kernel_sin+0x28>
 800f662:	ee10 0a10 	vmov	r0, s0
 800f666:	4629      	mov	r1, r5
 800f668:	f7f1 fa26 	bl	8000ab8 <__aeabi_d2iz>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d051      	beq.n	800f714 <__kernel_sin+0xcc>
 800f670:	4622      	mov	r2, r4
 800f672:	462b      	mov	r3, r5
 800f674:	4620      	mov	r0, r4
 800f676:	4629      	mov	r1, r5
 800f678:	f7f0 ff6e 	bl	8000558 <__aeabi_dmul>
 800f67c:	4682      	mov	sl, r0
 800f67e:	468b      	mov	fp, r1
 800f680:	4602      	mov	r2, r0
 800f682:	460b      	mov	r3, r1
 800f684:	4620      	mov	r0, r4
 800f686:	4629      	mov	r1, r5
 800f688:	f7f0 ff66 	bl	8000558 <__aeabi_dmul>
 800f68c:	a341      	add	r3, pc, #260	; (adr r3, 800f794 <__kernel_sin+0x14c>)
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	4680      	mov	r8, r0
 800f694:	4689      	mov	r9, r1
 800f696:	4650      	mov	r0, sl
 800f698:	4659      	mov	r1, fp
 800f69a:	f7f0 ff5d 	bl	8000558 <__aeabi_dmul>
 800f69e:	a33f      	add	r3, pc, #252	; (adr r3, 800f79c <__kernel_sin+0x154>)
 800f6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a4:	f7f0 fda0 	bl	80001e8 <__aeabi_dsub>
 800f6a8:	4652      	mov	r2, sl
 800f6aa:	465b      	mov	r3, fp
 800f6ac:	f7f0 ff54 	bl	8000558 <__aeabi_dmul>
 800f6b0:	a33c      	add	r3, pc, #240	; (adr r3, 800f7a4 <__kernel_sin+0x15c>)
 800f6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b6:	f7f0 fd99 	bl	80001ec <__adddf3>
 800f6ba:	4652      	mov	r2, sl
 800f6bc:	465b      	mov	r3, fp
 800f6be:	f7f0 ff4b 	bl	8000558 <__aeabi_dmul>
 800f6c2:	a33a      	add	r3, pc, #232	; (adr r3, 800f7ac <__kernel_sin+0x164>)
 800f6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c8:	f7f0 fd8e 	bl	80001e8 <__aeabi_dsub>
 800f6cc:	4652      	mov	r2, sl
 800f6ce:	465b      	mov	r3, fp
 800f6d0:	f7f0 ff42 	bl	8000558 <__aeabi_dmul>
 800f6d4:	a337      	add	r3, pc, #220	; (adr r3, 800f7b4 <__kernel_sin+0x16c>)
 800f6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6da:	f7f0 fd87 	bl	80001ec <__adddf3>
 800f6de:	9b02      	ldr	r3, [sp, #8]
 800f6e0:	4606      	mov	r6, r0
 800f6e2:	460f      	mov	r7, r1
 800f6e4:	b9db      	cbnz	r3, 800f71e <__kernel_sin+0xd6>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	4650      	mov	r0, sl
 800f6ec:	4659      	mov	r1, fp
 800f6ee:	f7f0 ff33 	bl	8000558 <__aeabi_dmul>
 800f6f2:	a325      	add	r3, pc, #148	; (adr r3, 800f788 <__kernel_sin+0x140>)
 800f6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f8:	f7f0 fd76 	bl	80001e8 <__aeabi_dsub>
 800f6fc:	4642      	mov	r2, r8
 800f6fe:	464b      	mov	r3, r9
 800f700:	f7f0 ff2a 	bl	8000558 <__aeabi_dmul>
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	4620      	mov	r0, r4
 800f70a:	4629      	mov	r1, r5
 800f70c:	f7f0 fd6e 	bl	80001ec <__adddf3>
 800f710:	4604      	mov	r4, r0
 800f712:	460d      	mov	r5, r1
 800f714:	ec45 4b10 	vmov	d0, r4, r5
 800f718:	b005      	add	sp, #20
 800f71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71e:	2200      	movs	r2, #0
 800f720:	4b1b      	ldr	r3, [pc, #108]	; (800f790 <__kernel_sin+0x148>)
 800f722:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f726:	f7f0 ff17 	bl	8000558 <__aeabi_dmul>
 800f72a:	4632      	mov	r2, r6
 800f72c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f730:	463b      	mov	r3, r7
 800f732:	4640      	mov	r0, r8
 800f734:	4649      	mov	r1, r9
 800f736:	f7f0 ff0f 	bl	8000558 <__aeabi_dmul>
 800f73a:	4602      	mov	r2, r0
 800f73c:	460b      	mov	r3, r1
 800f73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f742:	f7f0 fd51 	bl	80001e8 <__aeabi_dsub>
 800f746:	4652      	mov	r2, sl
 800f748:	465b      	mov	r3, fp
 800f74a:	f7f0 ff05 	bl	8000558 <__aeabi_dmul>
 800f74e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f752:	f7f0 fd49 	bl	80001e8 <__aeabi_dsub>
 800f756:	a30c      	add	r3, pc, #48	; (adr r3, 800f788 <__kernel_sin+0x140>)
 800f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75c:	4606      	mov	r6, r0
 800f75e:	460f      	mov	r7, r1
 800f760:	4640      	mov	r0, r8
 800f762:	4649      	mov	r1, r9
 800f764:	f7f0 fef8 	bl	8000558 <__aeabi_dmul>
 800f768:	4602      	mov	r2, r0
 800f76a:	460b      	mov	r3, r1
 800f76c:	4630      	mov	r0, r6
 800f76e:	4639      	mov	r1, r7
 800f770:	f7f0 fd3c 	bl	80001ec <__adddf3>
 800f774:	4602      	mov	r2, r0
 800f776:	460b      	mov	r3, r1
 800f778:	4620      	mov	r0, r4
 800f77a:	4629      	mov	r1, r5
 800f77c:	f7f0 fd34 	bl	80001e8 <__aeabi_dsub>
 800f780:	e7c6      	b.n	800f710 <__kernel_sin+0xc8>
 800f782:	bf00      	nop
 800f784:	f3af 8000 	nop.w
 800f788:	55555549 	.word	0x55555549
 800f78c:	3fc55555 	.word	0x3fc55555
 800f790:	3fe00000 	.word	0x3fe00000
 800f794:	5acfd57c 	.word	0x5acfd57c
 800f798:	3de5d93a 	.word	0x3de5d93a
 800f79c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f7a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f7a4:	57b1fe7d 	.word	0x57b1fe7d
 800f7a8:	3ec71de3 	.word	0x3ec71de3
 800f7ac:	19c161d5 	.word	0x19c161d5
 800f7b0:	3f2a01a0 	.word	0x3f2a01a0
 800f7b4:	1110f8a6 	.word	0x1110f8a6
 800f7b8:	3f811111 	.word	0x3f811111

0800f7bc <fabs>:
 800f7bc:	ec51 0b10 	vmov	r0, r1, d0
 800f7c0:	ee10 2a10 	vmov	r2, s0
 800f7c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f7c8:	ec43 2b10 	vmov	d0, r2, r3
 800f7cc:	4770      	bx	lr

0800f7ce <finite>:
 800f7ce:	ee10 3a90 	vmov	r3, s1
 800f7d2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800f7d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f7da:	0fc0      	lsrs	r0, r0, #31
 800f7dc:	4770      	bx	lr
	...

0800f7e0 <floor>:
 800f7e0:	ec51 0b10 	vmov	r0, r1, d0
 800f7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f7ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f7f0:	2e13      	cmp	r6, #19
 800f7f2:	460c      	mov	r4, r1
 800f7f4:	ee10 5a10 	vmov	r5, s0
 800f7f8:	4680      	mov	r8, r0
 800f7fa:	dc34      	bgt.n	800f866 <floor+0x86>
 800f7fc:	2e00      	cmp	r6, #0
 800f7fe:	da16      	bge.n	800f82e <floor+0x4e>
 800f800:	a335      	add	r3, pc, #212	; (adr r3, 800f8d8 <floor+0xf8>)
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	f7f0 fcf1 	bl	80001ec <__adddf3>
 800f80a:	2200      	movs	r2, #0
 800f80c:	2300      	movs	r3, #0
 800f80e:	f7f1 f933 	bl	8000a78 <__aeabi_dcmpgt>
 800f812:	b148      	cbz	r0, 800f828 <floor+0x48>
 800f814:	2c00      	cmp	r4, #0
 800f816:	da59      	bge.n	800f8cc <floor+0xec>
 800f818:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f81c:	4a30      	ldr	r2, [pc, #192]	; (800f8e0 <floor+0x100>)
 800f81e:	432b      	orrs	r3, r5
 800f820:	2500      	movs	r5, #0
 800f822:	42ab      	cmp	r3, r5
 800f824:	bf18      	it	ne
 800f826:	4614      	movne	r4, r2
 800f828:	4621      	mov	r1, r4
 800f82a:	4628      	mov	r0, r5
 800f82c:	e025      	b.n	800f87a <floor+0x9a>
 800f82e:	4f2d      	ldr	r7, [pc, #180]	; (800f8e4 <floor+0x104>)
 800f830:	4137      	asrs	r7, r6
 800f832:	ea01 0307 	and.w	r3, r1, r7
 800f836:	4303      	orrs	r3, r0
 800f838:	d01f      	beq.n	800f87a <floor+0x9a>
 800f83a:	a327      	add	r3, pc, #156	; (adr r3, 800f8d8 <floor+0xf8>)
 800f83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f840:	f7f0 fcd4 	bl	80001ec <__adddf3>
 800f844:	2200      	movs	r2, #0
 800f846:	2300      	movs	r3, #0
 800f848:	f7f1 f916 	bl	8000a78 <__aeabi_dcmpgt>
 800f84c:	2800      	cmp	r0, #0
 800f84e:	d0eb      	beq.n	800f828 <floor+0x48>
 800f850:	2c00      	cmp	r4, #0
 800f852:	bfbe      	ittt	lt
 800f854:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f858:	fa43 f606 	asrlt.w	r6, r3, r6
 800f85c:	19a4      	addlt	r4, r4, r6
 800f85e:	ea24 0407 	bic.w	r4, r4, r7
 800f862:	2500      	movs	r5, #0
 800f864:	e7e0      	b.n	800f828 <floor+0x48>
 800f866:	2e33      	cmp	r6, #51	; 0x33
 800f868:	dd0b      	ble.n	800f882 <floor+0xa2>
 800f86a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f86e:	d104      	bne.n	800f87a <floor+0x9a>
 800f870:	ee10 2a10 	vmov	r2, s0
 800f874:	460b      	mov	r3, r1
 800f876:	f7f0 fcb9 	bl	80001ec <__adddf3>
 800f87a:	ec41 0b10 	vmov	d0, r0, r1
 800f87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f882:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f886:	f04f 33ff 	mov.w	r3, #4294967295
 800f88a:	fa23 f707 	lsr.w	r7, r3, r7
 800f88e:	4207      	tst	r7, r0
 800f890:	d0f3      	beq.n	800f87a <floor+0x9a>
 800f892:	a311      	add	r3, pc, #68	; (adr r3, 800f8d8 <floor+0xf8>)
 800f894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f898:	f7f0 fca8 	bl	80001ec <__adddf3>
 800f89c:	2200      	movs	r2, #0
 800f89e:	2300      	movs	r3, #0
 800f8a0:	f7f1 f8ea 	bl	8000a78 <__aeabi_dcmpgt>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d0bf      	beq.n	800f828 <floor+0x48>
 800f8a8:	2c00      	cmp	r4, #0
 800f8aa:	da02      	bge.n	800f8b2 <floor+0xd2>
 800f8ac:	2e14      	cmp	r6, #20
 800f8ae:	d103      	bne.n	800f8b8 <floor+0xd8>
 800f8b0:	3401      	adds	r4, #1
 800f8b2:	ea25 0507 	bic.w	r5, r5, r7
 800f8b6:	e7b7      	b.n	800f828 <floor+0x48>
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f8be:	fa03 f606 	lsl.w	r6, r3, r6
 800f8c2:	4435      	add	r5, r6
 800f8c4:	4545      	cmp	r5, r8
 800f8c6:	bf38      	it	cc
 800f8c8:	18e4      	addcc	r4, r4, r3
 800f8ca:	e7f2      	b.n	800f8b2 <floor+0xd2>
 800f8cc:	2500      	movs	r5, #0
 800f8ce:	462c      	mov	r4, r5
 800f8d0:	e7aa      	b.n	800f828 <floor+0x48>
 800f8d2:	bf00      	nop
 800f8d4:	f3af 8000 	nop.w
 800f8d8:	8800759c 	.word	0x8800759c
 800f8dc:	7e37e43c 	.word	0x7e37e43c
 800f8e0:	bff00000 	.word	0xbff00000
 800f8e4:	000fffff 	.word	0x000fffff

0800f8e8 <matherr>:
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	4770      	bx	lr
 800f8ec:	0000      	movs	r0, r0
	...

0800f8f0 <nan>:
 800f8f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f8f8 <nan+0x8>
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	00000000 	.word	0x00000000
 800f8fc:	7ff80000 	.word	0x7ff80000

0800f900 <rint>:
 800f900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f902:	ec51 0b10 	vmov	r0, r1, d0
 800f906:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f90a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f90e:	2e13      	cmp	r6, #19
 800f910:	460b      	mov	r3, r1
 800f912:	ee10 4a10 	vmov	r4, s0
 800f916:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f91a:	dc56      	bgt.n	800f9ca <rint+0xca>
 800f91c:	2e00      	cmp	r6, #0
 800f91e:	da2b      	bge.n	800f978 <rint+0x78>
 800f920:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f924:	4302      	orrs	r2, r0
 800f926:	d023      	beq.n	800f970 <rint+0x70>
 800f928:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f92c:	4302      	orrs	r2, r0
 800f92e:	4254      	negs	r4, r2
 800f930:	4314      	orrs	r4, r2
 800f932:	0c4b      	lsrs	r3, r1, #17
 800f934:	0b24      	lsrs	r4, r4, #12
 800f936:	045b      	lsls	r3, r3, #17
 800f938:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f93c:	ea44 0103 	orr.w	r1, r4, r3
 800f940:	460b      	mov	r3, r1
 800f942:	492f      	ldr	r1, [pc, #188]	; (800fa00 <rint+0x100>)
 800f944:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800f948:	e9d1 6700 	ldrd	r6, r7, [r1]
 800f94c:	4602      	mov	r2, r0
 800f94e:	4639      	mov	r1, r7
 800f950:	4630      	mov	r0, r6
 800f952:	f7f0 fc4b 	bl	80001ec <__adddf3>
 800f956:	e9cd 0100 	strd	r0, r1, [sp]
 800f95a:	463b      	mov	r3, r7
 800f95c:	4632      	mov	r2, r6
 800f95e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f962:	f7f0 fc41 	bl	80001e8 <__aeabi_dsub>
 800f966:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f96a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f96e:	4639      	mov	r1, r7
 800f970:	ec41 0b10 	vmov	d0, r0, r1
 800f974:	b003      	add	sp, #12
 800f976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f978:	4a22      	ldr	r2, [pc, #136]	; (800fa04 <rint+0x104>)
 800f97a:	4132      	asrs	r2, r6
 800f97c:	ea01 0702 	and.w	r7, r1, r2
 800f980:	4307      	orrs	r7, r0
 800f982:	d0f5      	beq.n	800f970 <rint+0x70>
 800f984:	0852      	lsrs	r2, r2, #1
 800f986:	4011      	ands	r1, r2
 800f988:	430c      	orrs	r4, r1
 800f98a:	d00b      	beq.n	800f9a4 <rint+0xa4>
 800f98c:	ea23 0202 	bic.w	r2, r3, r2
 800f990:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f994:	2e13      	cmp	r6, #19
 800f996:	fa43 f306 	asr.w	r3, r3, r6
 800f99a:	bf0c      	ite	eq
 800f99c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f9a0:	2400      	movne	r4, #0
 800f9a2:	4313      	orrs	r3, r2
 800f9a4:	4916      	ldr	r1, [pc, #88]	; (800fa00 <rint+0x100>)
 800f9a6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f9aa:	4622      	mov	r2, r4
 800f9ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	4629      	mov	r1, r5
 800f9b4:	f7f0 fc1a 	bl	80001ec <__adddf3>
 800f9b8:	e9cd 0100 	strd	r0, r1, [sp]
 800f9bc:	4622      	mov	r2, r4
 800f9be:	462b      	mov	r3, r5
 800f9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9c4:	f7f0 fc10 	bl	80001e8 <__aeabi_dsub>
 800f9c8:	e7d2      	b.n	800f970 <rint+0x70>
 800f9ca:	2e33      	cmp	r6, #51	; 0x33
 800f9cc:	dd07      	ble.n	800f9de <rint+0xde>
 800f9ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f9d2:	d1cd      	bne.n	800f970 <rint+0x70>
 800f9d4:	ee10 2a10 	vmov	r2, s0
 800f9d8:	f7f0 fc08 	bl	80001ec <__adddf3>
 800f9dc:	e7c8      	b.n	800f970 <rint+0x70>
 800f9de:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800f9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9e6:	40f2      	lsrs	r2, r6
 800f9e8:	4210      	tst	r0, r2
 800f9ea:	d0c1      	beq.n	800f970 <rint+0x70>
 800f9ec:	0852      	lsrs	r2, r2, #1
 800f9ee:	4210      	tst	r0, r2
 800f9f0:	bf1f      	itttt	ne
 800f9f2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f9f6:	ea20 0202 	bicne.w	r2, r0, r2
 800f9fa:	4134      	asrne	r4, r6
 800f9fc:	4314      	orrne	r4, r2
 800f9fe:	e7d1      	b.n	800f9a4 <rint+0xa4>
 800fa00:	08015168 	.word	0x08015168
 800fa04:	000fffff 	.word	0x000fffff

0800fa08 <scalbn>:
 800fa08:	b570      	push	{r4, r5, r6, lr}
 800fa0a:	ec55 4b10 	vmov	r4, r5, d0
 800fa0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fa12:	4606      	mov	r6, r0
 800fa14:	462b      	mov	r3, r5
 800fa16:	b9aa      	cbnz	r2, 800fa44 <scalbn+0x3c>
 800fa18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fa1c:	4323      	orrs	r3, r4
 800fa1e:	d03b      	beq.n	800fa98 <scalbn+0x90>
 800fa20:	4b31      	ldr	r3, [pc, #196]	; (800fae8 <scalbn+0xe0>)
 800fa22:	4629      	mov	r1, r5
 800fa24:	2200      	movs	r2, #0
 800fa26:	ee10 0a10 	vmov	r0, s0
 800fa2a:	f7f0 fd95 	bl	8000558 <__aeabi_dmul>
 800fa2e:	4b2f      	ldr	r3, [pc, #188]	; (800faec <scalbn+0xe4>)
 800fa30:	429e      	cmp	r6, r3
 800fa32:	4604      	mov	r4, r0
 800fa34:	460d      	mov	r5, r1
 800fa36:	da12      	bge.n	800fa5e <scalbn+0x56>
 800fa38:	a327      	add	r3, pc, #156	; (adr r3, 800fad8 <scalbn+0xd0>)
 800fa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3e:	f7f0 fd8b 	bl	8000558 <__aeabi_dmul>
 800fa42:	e009      	b.n	800fa58 <scalbn+0x50>
 800fa44:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fa48:	428a      	cmp	r2, r1
 800fa4a:	d10c      	bne.n	800fa66 <scalbn+0x5e>
 800fa4c:	ee10 2a10 	vmov	r2, s0
 800fa50:	4620      	mov	r0, r4
 800fa52:	4629      	mov	r1, r5
 800fa54:	f7f0 fbca 	bl	80001ec <__adddf3>
 800fa58:	4604      	mov	r4, r0
 800fa5a:	460d      	mov	r5, r1
 800fa5c:	e01c      	b.n	800fa98 <scalbn+0x90>
 800fa5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fa62:	460b      	mov	r3, r1
 800fa64:	3a36      	subs	r2, #54	; 0x36
 800fa66:	4432      	add	r2, r6
 800fa68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fa6c:	428a      	cmp	r2, r1
 800fa6e:	dd0b      	ble.n	800fa88 <scalbn+0x80>
 800fa70:	ec45 4b11 	vmov	d1, r4, r5
 800fa74:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800fae0 <scalbn+0xd8>
 800fa78:	f000 f83c 	bl	800faf4 <copysign>
 800fa7c:	a318      	add	r3, pc, #96	; (adr r3, 800fae0 <scalbn+0xd8>)
 800fa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa82:	ec51 0b10 	vmov	r0, r1, d0
 800fa86:	e7da      	b.n	800fa3e <scalbn+0x36>
 800fa88:	2a00      	cmp	r2, #0
 800fa8a:	dd08      	ble.n	800fa9e <scalbn+0x96>
 800fa8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fa90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fa94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fa98:	ec45 4b10 	vmov	d0, r4, r5
 800fa9c:	bd70      	pop	{r4, r5, r6, pc}
 800fa9e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800faa2:	da0d      	bge.n	800fac0 <scalbn+0xb8>
 800faa4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800faa8:	429e      	cmp	r6, r3
 800faaa:	ec45 4b11 	vmov	d1, r4, r5
 800faae:	dce1      	bgt.n	800fa74 <scalbn+0x6c>
 800fab0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800fad8 <scalbn+0xd0>
 800fab4:	f000 f81e 	bl	800faf4 <copysign>
 800fab8:	a307      	add	r3, pc, #28	; (adr r3, 800fad8 <scalbn+0xd0>)
 800faba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabe:	e7e0      	b.n	800fa82 <scalbn+0x7a>
 800fac0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fac4:	3236      	adds	r2, #54	; 0x36
 800fac6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800faca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800face:	4620      	mov	r0, r4
 800fad0:	4629      	mov	r1, r5
 800fad2:	2200      	movs	r2, #0
 800fad4:	4b06      	ldr	r3, [pc, #24]	; (800faf0 <scalbn+0xe8>)
 800fad6:	e7b2      	b.n	800fa3e <scalbn+0x36>
 800fad8:	c2f8f359 	.word	0xc2f8f359
 800fadc:	01a56e1f 	.word	0x01a56e1f
 800fae0:	8800759c 	.word	0x8800759c
 800fae4:	7e37e43c 	.word	0x7e37e43c
 800fae8:	43500000 	.word	0x43500000
 800faec:	ffff3cb0 	.word	0xffff3cb0
 800faf0:	3c900000 	.word	0x3c900000

0800faf4 <copysign>:
 800faf4:	ec51 0b10 	vmov	r0, r1, d0
 800faf8:	ee11 0a90 	vmov	r0, s3
 800fafc:	ee10 2a10 	vmov	r2, s0
 800fb00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fb04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800fb08:	ea41 0300 	orr.w	r3, r1, r0
 800fb0c:	ec43 2b10 	vmov	d0, r2, r3
 800fb10:	4770      	bx	lr
	...

0800fb14 <_init>:
 800fb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb16:	bf00      	nop
 800fb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb1a:	bc08      	pop	{r3}
 800fb1c:	469e      	mov	lr, r3
 800fb1e:	4770      	bx	lr

0800fb20 <_fini>:
 800fb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb22:	bf00      	nop
 800fb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb26:	bc08      	pop	{r3}
 800fb28:	469e      	mov	lr, r3
 800fb2a:	4770      	bx	lr
